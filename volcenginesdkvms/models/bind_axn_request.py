# coding: utf-8

"""
    vms

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class BindAXNRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audio_record_flag': 'int',
        'expire_time': 'int',
        'number_pool_no': 'str',
        'phone_no_a': 'str',
        'phone_no_b': 'str',
        'phone_no_x': 'str',
        'user_data': 'str'
    }

    attribute_map = {
        'audio_record_flag': 'AudioRecordFlag',
        'expire_time': 'ExpireTime',
        'number_pool_no': 'NumberPoolNo',
        'phone_no_a': 'PhoneNoA',
        'phone_no_b': 'PhoneNoB',
        'phone_no_x': 'PhoneNoX',
        'user_data': 'UserData'
    }

    def __init__(self, audio_record_flag=None, expire_time=None, number_pool_no=None, phone_no_a=None, phone_no_b=None, phone_no_x=None, user_data=None, _configuration=None):  # noqa: E501
        """BindAXNRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._audio_record_flag = None
        self._expire_time = None
        self._number_pool_no = None
        self._phone_no_a = None
        self._phone_no_b = None
        self._phone_no_x = None
        self._user_data = None
        self.discriminator = None

        if audio_record_flag is not None:
            self.audio_record_flag = audio_record_flag
        self.expire_time = expire_time
        self.number_pool_no = number_pool_no
        self.phone_no_a = phone_no_a
        if phone_no_b is not None:
            self.phone_no_b = phone_no_b
        self.phone_no_x = phone_no_x
        if user_data is not None:
            self.user_data = user_data

    @property
    def audio_record_flag(self):
        """Gets the audio_record_flag of this BindAXNRequest.  # noqa: E501


        :return: The audio_record_flag of this BindAXNRequest.  # noqa: E501
        :rtype: int
        """
        return self._audio_record_flag

    @audio_record_flag.setter
    def audio_record_flag(self, audio_record_flag):
        """Sets the audio_record_flag of this BindAXNRequest.


        :param audio_record_flag: The audio_record_flag of this BindAXNRequest.  # noqa: E501
        :type: int
        """

        self._audio_record_flag = audio_record_flag

    @property
    def expire_time(self):
        """Gets the expire_time of this BindAXNRequest.  # noqa: E501


        :return: The expire_time of this BindAXNRequest.  # noqa: E501
        :rtype: int
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this BindAXNRequest.


        :param expire_time: The expire_time of this BindAXNRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and expire_time is None:
            raise ValueError("Invalid value for `expire_time`, must not be `None`")  # noqa: E501

        self._expire_time = expire_time

    @property
    def number_pool_no(self):
        """Gets the number_pool_no of this BindAXNRequest.  # noqa: E501


        :return: The number_pool_no of this BindAXNRequest.  # noqa: E501
        :rtype: str
        """
        return self._number_pool_no

    @number_pool_no.setter
    def number_pool_no(self, number_pool_no):
        """Sets the number_pool_no of this BindAXNRequest.


        :param number_pool_no: The number_pool_no of this BindAXNRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and number_pool_no is None:
            raise ValueError("Invalid value for `number_pool_no`, must not be `None`")  # noqa: E501

        self._number_pool_no = number_pool_no

    @property
    def phone_no_a(self):
        """Gets the phone_no_a of this BindAXNRequest.  # noqa: E501


        :return: The phone_no_a of this BindAXNRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_no_a

    @phone_no_a.setter
    def phone_no_a(self, phone_no_a):
        """Sets the phone_no_a of this BindAXNRequest.


        :param phone_no_a: The phone_no_a of this BindAXNRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and phone_no_a is None:
            raise ValueError("Invalid value for `phone_no_a`, must not be `None`")  # noqa: E501

        self._phone_no_a = phone_no_a

    @property
    def phone_no_b(self):
        """Gets the phone_no_b of this BindAXNRequest.  # noqa: E501


        :return: The phone_no_b of this BindAXNRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_no_b

    @phone_no_b.setter
    def phone_no_b(self, phone_no_b):
        """Sets the phone_no_b of this BindAXNRequest.


        :param phone_no_b: The phone_no_b of this BindAXNRequest.  # noqa: E501
        :type: str
        """

        self._phone_no_b = phone_no_b

    @property
    def phone_no_x(self):
        """Gets the phone_no_x of this BindAXNRequest.  # noqa: E501


        :return: The phone_no_x of this BindAXNRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_no_x

    @phone_no_x.setter
    def phone_no_x(self, phone_no_x):
        """Sets the phone_no_x of this BindAXNRequest.


        :param phone_no_x: The phone_no_x of this BindAXNRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and phone_no_x is None:
            raise ValueError("Invalid value for `phone_no_x`, must not be `None`")  # noqa: E501

        self._phone_no_x = phone_no_x

    @property
    def user_data(self):
        """Gets the user_data of this BindAXNRequest.  # noqa: E501


        :return: The user_data of this BindAXNRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this BindAXNRequest.


        :param user_data: The user_data of this BindAXNRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                user_data is not None and len(user_data) > 2048):
            raise ValueError("Invalid value for `user_data`, length must be less than or equal to `2048`")  # noqa: E501

        self._user_data = user_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BindAXNRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BindAXNRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BindAXNRequest):
            return True

        return self.to_dict() != other.to_dict()
