# coding: utf-8

"""
    vms

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class RecordForNumberPoolListOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number_count': 'int',
        'number_pool_name': 'str',
        'number_pool_no': 'str',
        'service_type': 'int',
        'service_type_name': 'str',
        'sub_service_type': 'int',
        'sub_service_type_name': 'str'
    }

    attribute_map = {
        'number_count': 'NumberCount',
        'number_pool_name': 'NumberPoolName',
        'number_pool_no': 'NumberPoolNo',
        'service_type': 'ServiceType',
        'service_type_name': 'ServiceTypeName',
        'sub_service_type': 'SubServiceType',
        'sub_service_type_name': 'SubServiceTypeName'
    }

    def __init__(self, number_count=None, number_pool_name=None, number_pool_no=None, service_type=None, service_type_name=None, sub_service_type=None, sub_service_type_name=None, _configuration=None):  # noqa: E501
        """RecordForNumberPoolListOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._number_count = None
        self._number_pool_name = None
        self._number_pool_no = None
        self._service_type = None
        self._service_type_name = None
        self._sub_service_type = None
        self._sub_service_type_name = None
        self.discriminator = None

        if number_count is not None:
            self.number_count = number_count
        if number_pool_name is not None:
            self.number_pool_name = number_pool_name
        if number_pool_no is not None:
            self.number_pool_no = number_pool_no
        if service_type is not None:
            self.service_type = service_type
        if service_type_name is not None:
            self.service_type_name = service_type_name
        if sub_service_type is not None:
            self.sub_service_type = sub_service_type
        if sub_service_type_name is not None:
            self.sub_service_type_name = sub_service_type_name

    @property
    def number_count(self):
        """Gets the number_count of this RecordForNumberPoolListOutput.  # noqa: E501


        :return: The number_count of this RecordForNumberPoolListOutput.  # noqa: E501
        :rtype: int
        """
        return self._number_count

    @number_count.setter
    def number_count(self, number_count):
        """Sets the number_count of this RecordForNumberPoolListOutput.


        :param number_count: The number_count of this RecordForNumberPoolListOutput.  # noqa: E501
        :type: int
        """

        self._number_count = number_count

    @property
    def number_pool_name(self):
        """Gets the number_pool_name of this RecordForNumberPoolListOutput.  # noqa: E501


        :return: The number_pool_name of this RecordForNumberPoolListOutput.  # noqa: E501
        :rtype: str
        """
        return self._number_pool_name

    @number_pool_name.setter
    def number_pool_name(self, number_pool_name):
        """Sets the number_pool_name of this RecordForNumberPoolListOutput.


        :param number_pool_name: The number_pool_name of this RecordForNumberPoolListOutput.  # noqa: E501
        :type: str
        """

        self._number_pool_name = number_pool_name

    @property
    def number_pool_no(self):
        """Gets the number_pool_no of this RecordForNumberPoolListOutput.  # noqa: E501


        :return: The number_pool_no of this RecordForNumberPoolListOutput.  # noqa: E501
        :rtype: str
        """
        return self._number_pool_no

    @number_pool_no.setter
    def number_pool_no(self, number_pool_no):
        """Sets the number_pool_no of this RecordForNumberPoolListOutput.


        :param number_pool_no: The number_pool_no of this RecordForNumberPoolListOutput.  # noqa: E501
        :type: str
        """

        self._number_pool_no = number_pool_no

    @property
    def service_type(self):
        """Gets the service_type of this RecordForNumberPoolListOutput.  # noqa: E501


        :return: The service_type of this RecordForNumberPoolListOutput.  # noqa: E501
        :rtype: int
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this RecordForNumberPoolListOutput.


        :param service_type: The service_type of this RecordForNumberPoolListOutput.  # noqa: E501
        :type: int
        """

        self._service_type = service_type

    @property
    def service_type_name(self):
        """Gets the service_type_name of this RecordForNumberPoolListOutput.  # noqa: E501


        :return: The service_type_name of this RecordForNumberPoolListOutput.  # noqa: E501
        :rtype: str
        """
        return self._service_type_name

    @service_type_name.setter
    def service_type_name(self, service_type_name):
        """Sets the service_type_name of this RecordForNumberPoolListOutput.


        :param service_type_name: The service_type_name of this RecordForNumberPoolListOutput.  # noqa: E501
        :type: str
        """

        self._service_type_name = service_type_name

    @property
    def sub_service_type(self):
        """Gets the sub_service_type of this RecordForNumberPoolListOutput.  # noqa: E501


        :return: The sub_service_type of this RecordForNumberPoolListOutput.  # noqa: E501
        :rtype: int
        """
        return self._sub_service_type

    @sub_service_type.setter
    def sub_service_type(self, sub_service_type):
        """Sets the sub_service_type of this RecordForNumberPoolListOutput.


        :param sub_service_type: The sub_service_type of this RecordForNumberPoolListOutput.  # noqa: E501
        :type: int
        """

        self._sub_service_type = sub_service_type

    @property
    def sub_service_type_name(self):
        """Gets the sub_service_type_name of this RecordForNumberPoolListOutput.  # noqa: E501


        :return: The sub_service_type_name of this RecordForNumberPoolListOutput.  # noqa: E501
        :rtype: str
        """
        return self._sub_service_type_name

    @sub_service_type_name.setter
    def sub_service_type_name(self, sub_service_type_name):
        """Sets the sub_service_type_name of this RecordForNumberPoolListOutput.


        :param sub_service_type_name: The sub_service_type_name of this RecordForNumberPoolListOutput.  # noqa: E501
        :type: str
        """

        self._sub_service_type_name = sub_service_type_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecordForNumberPoolListOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecordForNumberPoolListOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RecordForNumberPoolListOutput):
            return True

        return self.to_dict() != other.to_dict()
