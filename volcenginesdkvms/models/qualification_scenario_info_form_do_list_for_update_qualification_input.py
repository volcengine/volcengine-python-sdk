# coding: utf-8

"""
    vms

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class QualificationScenarioInfoFormDOListForUpdateQualificationInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'qualification_id': 'int',
        'qualification_no': 'str',
        'scenario_of_calling': 'str',
        'scene_type': 'int'
    }

    attribute_map = {
        'description': 'Description',
        'qualification_id': 'QualificationId',
        'qualification_no': 'QualificationNo',
        'scenario_of_calling': 'ScenarioOfCalling',
        'scene_type': 'SceneType'
    }

    def __init__(self, description=None, qualification_id=None, qualification_no=None, scenario_of_calling=None, scene_type=None, _configuration=None):  # noqa: E501
        """QualificationScenarioInfoFormDOListForUpdateQualificationInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._qualification_id = None
        self._qualification_no = None
        self._scenario_of_calling = None
        self._scene_type = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if qualification_id is not None:
            self.qualification_id = qualification_id
        if qualification_no is not None:
            self.qualification_no = qualification_no
        if scenario_of_calling is not None:
            self.scenario_of_calling = scenario_of_calling
        if scene_type is not None:
            self.scene_type = scene_type

    @property
    def description(self):
        """Gets the description of this QualificationScenarioInfoFormDOListForUpdateQualificationInput.  # noqa: E501


        :return: The description of this QualificationScenarioInfoFormDOListForUpdateQualificationInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this QualificationScenarioInfoFormDOListForUpdateQualificationInput.


        :param description: The description of this QualificationScenarioInfoFormDOListForUpdateQualificationInput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def qualification_id(self):
        """Gets the qualification_id of this QualificationScenarioInfoFormDOListForUpdateQualificationInput.  # noqa: E501


        :return: The qualification_id of this QualificationScenarioInfoFormDOListForUpdateQualificationInput.  # noqa: E501
        :rtype: int
        """
        return self._qualification_id

    @qualification_id.setter
    def qualification_id(self, qualification_id):
        """Sets the qualification_id of this QualificationScenarioInfoFormDOListForUpdateQualificationInput.


        :param qualification_id: The qualification_id of this QualificationScenarioInfoFormDOListForUpdateQualificationInput.  # noqa: E501
        :type: int
        """

        self._qualification_id = qualification_id

    @property
    def qualification_no(self):
        """Gets the qualification_no of this QualificationScenarioInfoFormDOListForUpdateQualificationInput.  # noqa: E501


        :return: The qualification_no of this QualificationScenarioInfoFormDOListForUpdateQualificationInput.  # noqa: E501
        :rtype: str
        """
        return self._qualification_no

    @qualification_no.setter
    def qualification_no(self, qualification_no):
        """Sets the qualification_no of this QualificationScenarioInfoFormDOListForUpdateQualificationInput.


        :param qualification_no: The qualification_no of this QualificationScenarioInfoFormDOListForUpdateQualificationInput.  # noqa: E501
        :type: str
        """

        self._qualification_no = qualification_no

    @property
    def scenario_of_calling(self):
        """Gets the scenario_of_calling of this QualificationScenarioInfoFormDOListForUpdateQualificationInput.  # noqa: E501


        :return: The scenario_of_calling of this QualificationScenarioInfoFormDOListForUpdateQualificationInput.  # noqa: E501
        :rtype: str
        """
        return self._scenario_of_calling

    @scenario_of_calling.setter
    def scenario_of_calling(self, scenario_of_calling):
        """Sets the scenario_of_calling of this QualificationScenarioInfoFormDOListForUpdateQualificationInput.


        :param scenario_of_calling: The scenario_of_calling of this QualificationScenarioInfoFormDOListForUpdateQualificationInput.  # noqa: E501
        :type: str
        """

        self._scenario_of_calling = scenario_of_calling

    @property
    def scene_type(self):
        """Gets the scene_type of this QualificationScenarioInfoFormDOListForUpdateQualificationInput.  # noqa: E501


        :return: The scene_type of this QualificationScenarioInfoFormDOListForUpdateQualificationInput.  # noqa: E501
        :rtype: int
        """
        return self._scene_type

    @scene_type.setter
    def scene_type(self, scene_type):
        """Sets the scene_type of this QualificationScenarioInfoFormDOListForUpdateQualificationInput.


        :param scene_type: The scene_type of this QualificationScenarioInfoFormDOListForUpdateQualificationInput.  # noqa: E501
        :type: int
        """

        self._scene_type = scene_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualificationScenarioInfoFormDOListForUpdateQualificationInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualificationScenarioInfoFormDOListForUpdateQualificationInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QualificationScenarioInfoFormDOListForUpdateQualificationInput):
            return True

        return self.to_dict() != other.to_dict()
