# coding: utf-8

"""
    vms

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class QualificationMainInfoFormDOForAddQualificationInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'business_license_photo_file_code': 'str',
        'certificate_of_taxation_registration_photo_file_code': 'str',
        'certificate_three_in_one': 'int',
        'commitment_letter_of_net_access_photo_file_code': 'str',
        'doc_of_number_apply_photo_file_code': 'str',
        'enterprise_address': 'str',
        'legal_representative_front_id_photo_file_code': 'str',
        'legal_representative_id': 'str',
        'legal_representative_name': 'str',
        'qualification_entity': 'str',
        'qualification_no': 'str',
        'three_in_one_business_license_photo_file_code': 'str',
        'unit_social_credit_code': 'str'
    }

    attribute_map = {
        'business_license_photo_file_code': 'BusinessLicensePhotoFileCode',
        'certificate_of_taxation_registration_photo_file_code': 'CertificateOfTaxationRegistrationPhotoFileCode',
        'certificate_three_in_one': 'CertificateThreeInOne',
        'commitment_letter_of_net_access_photo_file_code': 'CommitmentLetterOfNetAccessPhotoFileCode',
        'doc_of_number_apply_photo_file_code': 'DocOfNumberApplyPhotoFileCode',
        'enterprise_address': 'EnterpriseAddress',
        'legal_representative_front_id_photo_file_code': 'LegalRepresentativeFrontIdPhotoFileCode',
        'legal_representative_id': 'LegalRepresentativeId',
        'legal_representative_name': 'LegalRepresentativeName',
        'qualification_entity': 'QualificationEntity',
        'qualification_no': 'QualificationNo',
        'three_in_one_business_license_photo_file_code': 'ThreeInOneBusinessLicensePhotoFileCode',
        'unit_social_credit_code': 'UnitSocialCreditCode'
    }

    def __init__(self, business_license_photo_file_code=None, certificate_of_taxation_registration_photo_file_code=None, certificate_three_in_one=None, commitment_letter_of_net_access_photo_file_code=None, doc_of_number_apply_photo_file_code=None, enterprise_address=None, legal_representative_front_id_photo_file_code=None, legal_representative_id=None, legal_representative_name=None, qualification_entity=None, qualification_no=None, three_in_one_business_license_photo_file_code=None, unit_social_credit_code=None, _configuration=None):  # noqa: E501
        """QualificationMainInfoFormDOForAddQualificationInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._business_license_photo_file_code = None
        self._certificate_of_taxation_registration_photo_file_code = None
        self._certificate_three_in_one = None
        self._commitment_letter_of_net_access_photo_file_code = None
        self._doc_of_number_apply_photo_file_code = None
        self._enterprise_address = None
        self._legal_representative_front_id_photo_file_code = None
        self._legal_representative_id = None
        self._legal_representative_name = None
        self._qualification_entity = None
        self._qualification_no = None
        self._three_in_one_business_license_photo_file_code = None
        self._unit_social_credit_code = None
        self.discriminator = None

        if business_license_photo_file_code is not None:
            self.business_license_photo_file_code = business_license_photo_file_code
        if certificate_of_taxation_registration_photo_file_code is not None:
            self.certificate_of_taxation_registration_photo_file_code = certificate_of_taxation_registration_photo_file_code
        if certificate_three_in_one is not None:
            self.certificate_three_in_one = certificate_three_in_one
        if commitment_letter_of_net_access_photo_file_code is not None:
            self.commitment_letter_of_net_access_photo_file_code = commitment_letter_of_net_access_photo_file_code
        if doc_of_number_apply_photo_file_code is not None:
            self.doc_of_number_apply_photo_file_code = doc_of_number_apply_photo_file_code
        if enterprise_address is not None:
            self.enterprise_address = enterprise_address
        if legal_representative_front_id_photo_file_code is not None:
            self.legal_representative_front_id_photo_file_code = legal_representative_front_id_photo_file_code
        if legal_representative_id is not None:
            self.legal_representative_id = legal_representative_id
        if legal_representative_name is not None:
            self.legal_representative_name = legal_representative_name
        if qualification_entity is not None:
            self.qualification_entity = qualification_entity
        if qualification_no is not None:
            self.qualification_no = qualification_no
        if three_in_one_business_license_photo_file_code is not None:
            self.three_in_one_business_license_photo_file_code = three_in_one_business_license_photo_file_code
        if unit_social_credit_code is not None:
            self.unit_social_credit_code = unit_social_credit_code

    @property
    def business_license_photo_file_code(self):
        """Gets the business_license_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501


        :return: The business_license_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :rtype: str
        """
        return self._business_license_photo_file_code

    @business_license_photo_file_code.setter
    def business_license_photo_file_code(self, business_license_photo_file_code):
        """Sets the business_license_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.


        :param business_license_photo_file_code: The business_license_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :type: str
        """

        self._business_license_photo_file_code = business_license_photo_file_code

    @property
    def certificate_of_taxation_registration_photo_file_code(self):
        """Gets the certificate_of_taxation_registration_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501


        :return: The certificate_of_taxation_registration_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :rtype: str
        """
        return self._certificate_of_taxation_registration_photo_file_code

    @certificate_of_taxation_registration_photo_file_code.setter
    def certificate_of_taxation_registration_photo_file_code(self, certificate_of_taxation_registration_photo_file_code):
        """Sets the certificate_of_taxation_registration_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.


        :param certificate_of_taxation_registration_photo_file_code: The certificate_of_taxation_registration_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :type: str
        """

        self._certificate_of_taxation_registration_photo_file_code = certificate_of_taxation_registration_photo_file_code

    @property
    def certificate_three_in_one(self):
        """Gets the certificate_three_in_one of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501


        :return: The certificate_three_in_one of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :rtype: int
        """
        return self._certificate_three_in_one

    @certificate_three_in_one.setter
    def certificate_three_in_one(self, certificate_three_in_one):
        """Sets the certificate_three_in_one of this QualificationMainInfoFormDOForAddQualificationInput.


        :param certificate_three_in_one: The certificate_three_in_one of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :type: int
        """

        self._certificate_three_in_one = certificate_three_in_one

    @property
    def commitment_letter_of_net_access_photo_file_code(self):
        """Gets the commitment_letter_of_net_access_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501


        :return: The commitment_letter_of_net_access_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :rtype: str
        """
        return self._commitment_letter_of_net_access_photo_file_code

    @commitment_letter_of_net_access_photo_file_code.setter
    def commitment_letter_of_net_access_photo_file_code(self, commitment_letter_of_net_access_photo_file_code):
        """Sets the commitment_letter_of_net_access_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.


        :param commitment_letter_of_net_access_photo_file_code: The commitment_letter_of_net_access_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :type: str
        """

        self._commitment_letter_of_net_access_photo_file_code = commitment_letter_of_net_access_photo_file_code

    @property
    def doc_of_number_apply_photo_file_code(self):
        """Gets the doc_of_number_apply_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501


        :return: The doc_of_number_apply_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :rtype: str
        """
        return self._doc_of_number_apply_photo_file_code

    @doc_of_number_apply_photo_file_code.setter
    def doc_of_number_apply_photo_file_code(self, doc_of_number_apply_photo_file_code):
        """Sets the doc_of_number_apply_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.


        :param doc_of_number_apply_photo_file_code: The doc_of_number_apply_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :type: str
        """

        self._doc_of_number_apply_photo_file_code = doc_of_number_apply_photo_file_code

    @property
    def enterprise_address(self):
        """Gets the enterprise_address of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501


        :return: The enterprise_address of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_address

    @enterprise_address.setter
    def enterprise_address(self, enterprise_address):
        """Sets the enterprise_address of this QualificationMainInfoFormDOForAddQualificationInput.


        :param enterprise_address: The enterprise_address of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :type: str
        """

        self._enterprise_address = enterprise_address

    @property
    def legal_representative_front_id_photo_file_code(self):
        """Gets the legal_representative_front_id_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501


        :return: The legal_representative_front_id_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :rtype: str
        """
        return self._legal_representative_front_id_photo_file_code

    @legal_representative_front_id_photo_file_code.setter
    def legal_representative_front_id_photo_file_code(self, legal_representative_front_id_photo_file_code):
        """Sets the legal_representative_front_id_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.


        :param legal_representative_front_id_photo_file_code: The legal_representative_front_id_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :type: str
        """

        self._legal_representative_front_id_photo_file_code = legal_representative_front_id_photo_file_code

    @property
    def legal_representative_id(self):
        """Gets the legal_representative_id of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501


        :return: The legal_representative_id of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :rtype: str
        """
        return self._legal_representative_id

    @legal_representative_id.setter
    def legal_representative_id(self, legal_representative_id):
        """Sets the legal_representative_id of this QualificationMainInfoFormDOForAddQualificationInput.


        :param legal_representative_id: The legal_representative_id of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :type: str
        """

        self._legal_representative_id = legal_representative_id

    @property
    def legal_representative_name(self):
        """Gets the legal_representative_name of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501


        :return: The legal_representative_name of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :rtype: str
        """
        return self._legal_representative_name

    @legal_representative_name.setter
    def legal_representative_name(self, legal_representative_name):
        """Sets the legal_representative_name of this QualificationMainInfoFormDOForAddQualificationInput.


        :param legal_representative_name: The legal_representative_name of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :type: str
        """

        self._legal_representative_name = legal_representative_name

    @property
    def qualification_entity(self):
        """Gets the qualification_entity of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501


        :return: The qualification_entity of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :rtype: str
        """
        return self._qualification_entity

    @qualification_entity.setter
    def qualification_entity(self, qualification_entity):
        """Sets the qualification_entity of this QualificationMainInfoFormDOForAddQualificationInput.


        :param qualification_entity: The qualification_entity of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :type: str
        """

        self._qualification_entity = qualification_entity

    @property
    def qualification_no(self):
        """Gets the qualification_no of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501


        :return: The qualification_no of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :rtype: str
        """
        return self._qualification_no

    @qualification_no.setter
    def qualification_no(self, qualification_no):
        """Sets the qualification_no of this QualificationMainInfoFormDOForAddQualificationInput.


        :param qualification_no: The qualification_no of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :type: str
        """

        self._qualification_no = qualification_no

    @property
    def three_in_one_business_license_photo_file_code(self):
        """Gets the three_in_one_business_license_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501


        :return: The three_in_one_business_license_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :rtype: str
        """
        return self._three_in_one_business_license_photo_file_code

    @three_in_one_business_license_photo_file_code.setter
    def three_in_one_business_license_photo_file_code(self, three_in_one_business_license_photo_file_code):
        """Sets the three_in_one_business_license_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.


        :param three_in_one_business_license_photo_file_code: The three_in_one_business_license_photo_file_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :type: str
        """

        self._three_in_one_business_license_photo_file_code = three_in_one_business_license_photo_file_code

    @property
    def unit_social_credit_code(self):
        """Gets the unit_social_credit_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501


        :return: The unit_social_credit_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :rtype: str
        """
        return self._unit_social_credit_code

    @unit_social_credit_code.setter
    def unit_social_credit_code(self, unit_social_credit_code):
        """Sets the unit_social_credit_code of this QualificationMainInfoFormDOForAddQualificationInput.


        :param unit_social_credit_code: The unit_social_credit_code of this QualificationMainInfoFormDOForAddQualificationInput.  # noqa: E501
        :type: str
        """

        self._unit_social_credit_code = unit_social_credit_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualificationMainInfoFormDOForAddQualificationInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualificationMainInfoFormDOForAddQualificationInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QualificationMainInfoFormDOForAddQualificationInput):
            return True

        return self.to_dict() != other.to_dict()
