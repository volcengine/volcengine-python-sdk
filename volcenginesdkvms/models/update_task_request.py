# coding: utf-8

"""
    vms

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class UpdateTaskRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'concurrency': 'int',
        'end_time': 'str',
        'forbid_time_list': 'list[ForbidTimeListForUpdateTaskInput]',
        'recall': 'bool',
        'ring_again_interval': 'int',
        'ring_again_times': 'int',
        'start_time': 'str',
        'task_open_id': 'str'
    }

    attribute_map = {
        'concurrency': 'Concurrency',
        'end_time': 'EndTime',
        'forbid_time_list': 'ForbidTimeList',
        'recall': 'Recall',
        'ring_again_interval': 'RingAgainInterval',
        'ring_again_times': 'RingAgainTimes',
        'start_time': 'StartTime',
        'task_open_id': 'TaskOpenId'
    }

    def __init__(self, concurrency=None, end_time=None, forbid_time_list=None, recall=None, ring_again_interval=None, ring_again_times=None, start_time=None, task_open_id=None, _configuration=None):  # noqa: E501
        """UpdateTaskRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._concurrency = None
        self._end_time = None
        self._forbid_time_list = None
        self._recall = None
        self._ring_again_interval = None
        self._ring_again_times = None
        self._start_time = None
        self._task_open_id = None
        self.discriminator = None

        self.concurrency = concurrency
        self.end_time = end_time
        if forbid_time_list is not None:
            self.forbid_time_list = forbid_time_list
        if recall is not None:
            self.recall = recall
        if ring_again_interval is not None:
            self.ring_again_interval = ring_again_interval
        if ring_again_times is not None:
            self.ring_again_times = ring_again_times
        self.start_time = start_time
        self.task_open_id = task_open_id

    @property
    def concurrency(self):
        """Gets the concurrency of this UpdateTaskRequest.  # noqa: E501


        :return: The concurrency of this UpdateTaskRequest.  # noqa: E501
        :rtype: int
        """
        return self._concurrency

    @concurrency.setter
    def concurrency(self, concurrency):
        """Sets the concurrency of this UpdateTaskRequest.


        :param concurrency: The concurrency of this UpdateTaskRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and concurrency is None:
            raise ValueError("Invalid value for `concurrency`, must not be `None`")  # noqa: E501

        self._concurrency = concurrency

    @property
    def end_time(self):
        """Gets the end_time of this UpdateTaskRequest.  # noqa: E501


        :return: The end_time of this UpdateTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this UpdateTaskRequest.


        :param end_time: The end_time of this UpdateTaskRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def forbid_time_list(self):
        """Gets the forbid_time_list of this UpdateTaskRequest.  # noqa: E501


        :return: The forbid_time_list of this UpdateTaskRequest.  # noqa: E501
        :rtype: list[ForbidTimeListForUpdateTaskInput]
        """
        return self._forbid_time_list

    @forbid_time_list.setter
    def forbid_time_list(self, forbid_time_list):
        """Sets the forbid_time_list of this UpdateTaskRequest.


        :param forbid_time_list: The forbid_time_list of this UpdateTaskRequest.  # noqa: E501
        :type: list[ForbidTimeListForUpdateTaskInput]
        """

        self._forbid_time_list = forbid_time_list

    @property
    def recall(self):
        """Gets the recall of this UpdateTaskRequest.  # noqa: E501


        :return: The recall of this UpdateTaskRequest.  # noqa: E501
        :rtype: bool
        """
        return self._recall

    @recall.setter
    def recall(self, recall):
        """Sets the recall of this UpdateTaskRequest.


        :param recall: The recall of this UpdateTaskRequest.  # noqa: E501
        :type: bool
        """

        self._recall = recall

    @property
    def ring_again_interval(self):
        """Gets the ring_again_interval of this UpdateTaskRequest.  # noqa: E501


        :return: The ring_again_interval of this UpdateTaskRequest.  # noqa: E501
        :rtype: int
        """
        return self._ring_again_interval

    @ring_again_interval.setter
    def ring_again_interval(self, ring_again_interval):
        """Sets the ring_again_interval of this UpdateTaskRequest.


        :param ring_again_interval: The ring_again_interval of this UpdateTaskRequest.  # noqa: E501
        :type: int
        """

        self._ring_again_interval = ring_again_interval

    @property
    def ring_again_times(self):
        """Gets the ring_again_times of this UpdateTaskRequest.  # noqa: E501


        :return: The ring_again_times of this UpdateTaskRequest.  # noqa: E501
        :rtype: int
        """
        return self._ring_again_times

    @ring_again_times.setter
    def ring_again_times(self, ring_again_times):
        """Sets the ring_again_times of this UpdateTaskRequest.


        :param ring_again_times: The ring_again_times of this UpdateTaskRequest.  # noqa: E501
        :type: int
        """

        self._ring_again_times = ring_again_times

    @property
    def start_time(self):
        """Gets the start_time of this UpdateTaskRequest.  # noqa: E501


        :return: The start_time of this UpdateTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this UpdateTaskRequest.


        :param start_time: The start_time of this UpdateTaskRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def task_open_id(self):
        """Gets the task_open_id of this UpdateTaskRequest.  # noqa: E501


        :return: The task_open_id of this UpdateTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._task_open_id

    @task_open_id.setter
    def task_open_id(self, task_open_id):
        """Sets the task_open_id of this UpdateTaskRequest.


        :param task_open_id: The task_open_id of this UpdateTaskRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and task_open_id is None:
            raise ValueError("Invalid value for `task_open_id`, must not be `None`")  # noqa: E501

        self._task_open_id = task_open_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateTaskRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateTaskRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateTaskRequest):
            return True

        return self.to_dict() != other.to_dict()
