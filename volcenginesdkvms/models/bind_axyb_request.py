# coding: utf-8

"""
    vms

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class BindAXYBRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audio_record_flag': 'int',
        'auto_create_flag': 'int',
        'city_code': 'str',
        'city_code_by_phone_no': 'str',
        'degrade_city_list': 'list[str]',
        'expire_time': 'int',
        'number_pool_no': 'str',
        'number_pool_no_y': 'str',
        'phone_no_a': 'str',
        'phone_no_b': 'str',
        'phone_no_x': 'str',
        'phone_no_y': 'str',
        'random_flag': 'int',
        'random_flag_y': 'int',
        'user_data': 'str',
        'y_city_code': 'str',
        'y_city_code_by_phone_no': 'str',
        'y_degrade_city_list': 'list[str]',
        'yb_audio_record_flag': 'int',
        'yb_enable_duration': 'int'
    }

    attribute_map = {
        'audio_record_flag': 'AudioRecordFlag',
        'auto_create_flag': 'AutoCreateFlag',
        'city_code': 'CityCode',
        'city_code_by_phone_no': 'CityCodeByPhoneNo',
        'degrade_city_list': 'DegradeCityList',
        'expire_time': 'ExpireTime',
        'number_pool_no': 'NumberPoolNo',
        'number_pool_no_y': 'NumberPoolNoY',
        'phone_no_a': 'PhoneNoA',
        'phone_no_b': 'PhoneNoB',
        'phone_no_x': 'PhoneNoX',
        'phone_no_y': 'PhoneNoY',
        'random_flag': 'RandomFlag',
        'random_flag_y': 'RandomFlagY',
        'user_data': 'UserData',
        'y_city_code': 'YCityCode',
        'y_city_code_by_phone_no': 'YCityCodeByPhoneNo',
        'y_degrade_city_list': 'YDegradeCityList',
        'yb_audio_record_flag': 'YbAudioRecordFlag',
        'yb_enable_duration': 'YbEnableDuration'
    }

    def __init__(self, audio_record_flag=None, auto_create_flag=None, city_code=None, city_code_by_phone_no=None, degrade_city_list=None, expire_time=None, number_pool_no=None, number_pool_no_y=None, phone_no_a=None, phone_no_b=None, phone_no_x=None, phone_no_y=None, random_flag=None, random_flag_y=None, user_data=None, y_city_code=None, y_city_code_by_phone_no=None, y_degrade_city_list=None, yb_audio_record_flag=None, yb_enable_duration=None, _configuration=None):  # noqa: E501
        """BindAXYBRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._audio_record_flag = None
        self._auto_create_flag = None
        self._city_code = None
        self._city_code_by_phone_no = None
        self._degrade_city_list = None
        self._expire_time = None
        self._number_pool_no = None
        self._number_pool_no_y = None
        self._phone_no_a = None
        self._phone_no_b = None
        self._phone_no_x = None
        self._phone_no_y = None
        self._random_flag = None
        self._random_flag_y = None
        self._user_data = None
        self._y_city_code = None
        self._y_city_code_by_phone_no = None
        self._y_degrade_city_list = None
        self._yb_audio_record_flag = None
        self._yb_enable_duration = None
        self.discriminator = None

        if audio_record_flag is not None:
            self.audio_record_flag = audio_record_flag
        if auto_create_flag is not None:
            self.auto_create_flag = auto_create_flag
        if city_code is not None:
            self.city_code = city_code
        if city_code_by_phone_no is not None:
            self.city_code_by_phone_no = city_code_by_phone_no
        if degrade_city_list is not None:
            self.degrade_city_list = degrade_city_list
        self.expire_time = expire_time
        self.number_pool_no = number_pool_no
        self.number_pool_no_y = number_pool_no_y
        self.phone_no_a = phone_no_a
        if phone_no_b is not None:
            self.phone_no_b = phone_no_b
        if phone_no_x is not None:
            self.phone_no_x = phone_no_x
        if phone_no_y is not None:
            self.phone_no_y = phone_no_y
        if random_flag is not None:
            self.random_flag = random_flag
        if random_flag_y is not None:
            self.random_flag_y = random_flag_y
        if user_data is not None:
            self.user_data = user_data
        if y_city_code is not None:
            self.y_city_code = y_city_code
        if y_city_code_by_phone_no is not None:
            self.y_city_code_by_phone_no = y_city_code_by_phone_no
        if y_degrade_city_list is not None:
            self.y_degrade_city_list = y_degrade_city_list
        if yb_audio_record_flag is not None:
            self.yb_audio_record_flag = yb_audio_record_flag
        self.yb_enable_duration = yb_enable_duration

    @property
    def audio_record_flag(self):
        """Gets the audio_record_flag of this BindAXYBRequest.  # noqa: E501


        :return: The audio_record_flag of this BindAXYBRequest.  # noqa: E501
        :rtype: int
        """
        return self._audio_record_flag

    @audio_record_flag.setter
    def audio_record_flag(self, audio_record_flag):
        """Sets the audio_record_flag of this BindAXYBRequest.


        :param audio_record_flag: The audio_record_flag of this BindAXYBRequest.  # noqa: E501
        :type: int
        """

        self._audio_record_flag = audio_record_flag

    @property
    def auto_create_flag(self):
        """Gets the auto_create_flag of this BindAXYBRequest.  # noqa: E501


        :return: The auto_create_flag of this BindAXYBRequest.  # noqa: E501
        :rtype: int
        """
        return self._auto_create_flag

    @auto_create_flag.setter
    def auto_create_flag(self, auto_create_flag):
        """Sets the auto_create_flag of this BindAXYBRequest.


        :param auto_create_flag: The auto_create_flag of this BindAXYBRequest.  # noqa: E501
        :type: int
        """

        self._auto_create_flag = auto_create_flag

    @property
    def city_code(self):
        """Gets the city_code of this BindAXYBRequest.  # noqa: E501


        :return: The city_code of this BindAXYBRequest.  # noqa: E501
        :rtype: str
        """
        return self._city_code

    @city_code.setter
    def city_code(self, city_code):
        """Sets the city_code of this BindAXYBRequest.


        :param city_code: The city_code of this BindAXYBRequest.  # noqa: E501
        :type: str
        """

        self._city_code = city_code

    @property
    def city_code_by_phone_no(self):
        """Gets the city_code_by_phone_no of this BindAXYBRequest.  # noqa: E501


        :return: The city_code_by_phone_no of this BindAXYBRequest.  # noqa: E501
        :rtype: str
        """
        return self._city_code_by_phone_no

    @city_code_by_phone_no.setter
    def city_code_by_phone_no(self, city_code_by_phone_no):
        """Sets the city_code_by_phone_no of this BindAXYBRequest.


        :param city_code_by_phone_no: The city_code_by_phone_no of this BindAXYBRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["A", "B"]  # noqa: E501
        if (self._configuration.client_side_validation and
                city_code_by_phone_no not in allowed_values):
            raise ValueError(
                "Invalid value for `city_code_by_phone_no` ({0}), must be one of {1}"  # noqa: E501
                .format(city_code_by_phone_no, allowed_values)
            )

        self._city_code_by_phone_no = city_code_by_phone_no

    @property
    def degrade_city_list(self):
        """Gets the degrade_city_list of this BindAXYBRequest.  # noqa: E501


        :return: The degrade_city_list of this BindAXYBRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._degrade_city_list

    @degrade_city_list.setter
    def degrade_city_list(self, degrade_city_list):
        """Sets the degrade_city_list of this BindAXYBRequest.


        :param degrade_city_list: The degrade_city_list of this BindAXYBRequest.  # noqa: E501
        :type: list[str]
        """

        self._degrade_city_list = degrade_city_list

    @property
    def expire_time(self):
        """Gets the expire_time of this BindAXYBRequest.  # noqa: E501


        :return: The expire_time of this BindAXYBRequest.  # noqa: E501
        :rtype: int
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this BindAXYBRequest.


        :param expire_time: The expire_time of this BindAXYBRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and expire_time is None:
            raise ValueError("Invalid value for `expire_time`, must not be `None`")  # noqa: E501

        self._expire_time = expire_time

    @property
    def number_pool_no(self):
        """Gets the number_pool_no of this BindAXYBRequest.  # noqa: E501


        :return: The number_pool_no of this BindAXYBRequest.  # noqa: E501
        :rtype: str
        """
        return self._number_pool_no

    @number_pool_no.setter
    def number_pool_no(self, number_pool_no):
        """Sets the number_pool_no of this BindAXYBRequest.


        :param number_pool_no: The number_pool_no of this BindAXYBRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and number_pool_no is None:
            raise ValueError("Invalid value for `number_pool_no`, must not be `None`")  # noqa: E501

        self._number_pool_no = number_pool_no

    @property
    def number_pool_no_y(self):
        """Gets the number_pool_no_y of this BindAXYBRequest.  # noqa: E501


        :return: The number_pool_no_y of this BindAXYBRequest.  # noqa: E501
        :rtype: str
        """
        return self._number_pool_no_y

    @number_pool_no_y.setter
    def number_pool_no_y(self, number_pool_no_y):
        """Sets the number_pool_no_y of this BindAXYBRequest.


        :param number_pool_no_y: The number_pool_no_y of this BindAXYBRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and number_pool_no_y is None:
            raise ValueError("Invalid value for `number_pool_no_y`, must not be `None`")  # noqa: E501

        self._number_pool_no_y = number_pool_no_y

    @property
    def phone_no_a(self):
        """Gets the phone_no_a of this BindAXYBRequest.  # noqa: E501


        :return: The phone_no_a of this BindAXYBRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_no_a

    @phone_no_a.setter
    def phone_no_a(self, phone_no_a):
        """Sets the phone_no_a of this BindAXYBRequest.


        :param phone_no_a: The phone_no_a of this BindAXYBRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and phone_no_a is None:
            raise ValueError("Invalid value for `phone_no_a`, must not be `None`")  # noqa: E501

        self._phone_no_a = phone_no_a

    @property
    def phone_no_b(self):
        """Gets the phone_no_b of this BindAXYBRequest.  # noqa: E501


        :return: The phone_no_b of this BindAXYBRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_no_b

    @phone_no_b.setter
    def phone_no_b(self, phone_no_b):
        """Sets the phone_no_b of this BindAXYBRequest.


        :param phone_no_b: The phone_no_b of this BindAXYBRequest.  # noqa: E501
        :type: str
        """

        self._phone_no_b = phone_no_b

    @property
    def phone_no_x(self):
        """Gets the phone_no_x of this BindAXYBRequest.  # noqa: E501


        :return: The phone_no_x of this BindAXYBRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_no_x

    @phone_no_x.setter
    def phone_no_x(self, phone_no_x):
        """Sets the phone_no_x of this BindAXYBRequest.


        :param phone_no_x: The phone_no_x of this BindAXYBRequest.  # noqa: E501
        :type: str
        """

        self._phone_no_x = phone_no_x

    @property
    def phone_no_y(self):
        """Gets the phone_no_y of this BindAXYBRequest.  # noqa: E501


        :return: The phone_no_y of this BindAXYBRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_no_y

    @phone_no_y.setter
    def phone_no_y(self, phone_no_y):
        """Sets the phone_no_y of this BindAXYBRequest.


        :param phone_no_y: The phone_no_y of this BindAXYBRequest.  # noqa: E501
        :type: str
        """

        self._phone_no_y = phone_no_y

    @property
    def random_flag(self):
        """Gets the random_flag of this BindAXYBRequest.  # noqa: E501


        :return: The random_flag of this BindAXYBRequest.  # noqa: E501
        :rtype: int
        """
        return self._random_flag

    @random_flag.setter
    def random_flag(self, random_flag):
        """Sets the random_flag of this BindAXYBRequest.


        :param random_flag: The random_flag of this BindAXYBRequest.  # noqa: E501
        :type: int
        """

        self._random_flag = random_flag

    @property
    def random_flag_y(self):
        """Gets the random_flag_y of this BindAXYBRequest.  # noqa: E501


        :return: The random_flag_y of this BindAXYBRequest.  # noqa: E501
        :rtype: int
        """
        return self._random_flag_y

    @random_flag_y.setter
    def random_flag_y(self, random_flag_y):
        """Sets the random_flag_y of this BindAXYBRequest.


        :param random_flag_y: The random_flag_y of this BindAXYBRequest.  # noqa: E501
        :type: int
        """

        self._random_flag_y = random_flag_y

    @property
    def user_data(self):
        """Gets the user_data of this BindAXYBRequest.  # noqa: E501


        :return: The user_data of this BindAXYBRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this BindAXYBRequest.


        :param user_data: The user_data of this BindAXYBRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                user_data is not None and len(user_data) > 2048):
            raise ValueError("Invalid value for `user_data`, length must be less than or equal to `2048`")  # noqa: E501

        self._user_data = user_data

    @property
    def y_city_code(self):
        """Gets the y_city_code of this BindAXYBRequest.  # noqa: E501


        :return: The y_city_code of this BindAXYBRequest.  # noqa: E501
        :rtype: str
        """
        return self._y_city_code

    @y_city_code.setter
    def y_city_code(self, y_city_code):
        """Sets the y_city_code of this BindAXYBRequest.


        :param y_city_code: The y_city_code of this BindAXYBRequest.  # noqa: E501
        :type: str
        """

        self._y_city_code = y_city_code

    @property
    def y_city_code_by_phone_no(self):
        """Gets the y_city_code_by_phone_no of this BindAXYBRequest.  # noqa: E501


        :return: The y_city_code_by_phone_no of this BindAXYBRequest.  # noqa: E501
        :rtype: str
        """
        return self._y_city_code_by_phone_no

    @y_city_code_by_phone_no.setter
    def y_city_code_by_phone_no(self, y_city_code_by_phone_no):
        """Sets the y_city_code_by_phone_no of this BindAXYBRequest.


        :param y_city_code_by_phone_no: The y_city_code_by_phone_no of this BindAXYBRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["A", "B"]  # noqa: E501
        if (self._configuration.client_side_validation and
                y_city_code_by_phone_no not in allowed_values):
            raise ValueError(
                "Invalid value for `y_city_code_by_phone_no` ({0}), must be one of {1}"  # noqa: E501
                .format(y_city_code_by_phone_no, allowed_values)
            )

        self._y_city_code_by_phone_no = y_city_code_by_phone_no

    @property
    def y_degrade_city_list(self):
        """Gets the y_degrade_city_list of this BindAXYBRequest.  # noqa: E501


        :return: The y_degrade_city_list of this BindAXYBRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._y_degrade_city_list

    @y_degrade_city_list.setter
    def y_degrade_city_list(self, y_degrade_city_list):
        """Sets the y_degrade_city_list of this BindAXYBRequest.


        :param y_degrade_city_list: The y_degrade_city_list of this BindAXYBRequest.  # noqa: E501
        :type: list[str]
        """

        self._y_degrade_city_list = y_degrade_city_list

    @property
    def yb_audio_record_flag(self):
        """Gets the yb_audio_record_flag of this BindAXYBRequest.  # noqa: E501


        :return: The yb_audio_record_flag of this BindAXYBRequest.  # noqa: E501
        :rtype: int
        """
        return self._yb_audio_record_flag

    @yb_audio_record_flag.setter
    def yb_audio_record_flag(self, yb_audio_record_flag):
        """Sets the yb_audio_record_flag of this BindAXYBRequest.


        :param yb_audio_record_flag: The yb_audio_record_flag of this BindAXYBRequest.  # noqa: E501
        :type: int
        """

        self._yb_audio_record_flag = yb_audio_record_flag

    @property
    def yb_enable_duration(self):
        """Gets the yb_enable_duration of this BindAXYBRequest.  # noqa: E501


        :return: The yb_enable_duration of this BindAXYBRequest.  # noqa: E501
        :rtype: int
        """
        return self._yb_enable_duration

    @yb_enable_duration.setter
    def yb_enable_duration(self, yb_enable_duration):
        """Sets the yb_enable_duration of this BindAXYBRequest.


        :param yb_enable_duration: The yb_enable_duration of this BindAXYBRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and yb_enable_duration is None:
            raise ValueError("Invalid value for `yb_enable_duration`, must not be `None`")  # noqa: E501

        self._yb_enable_duration = yb_enable_duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BindAXYBRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BindAXYBRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BindAXYBRequest):
            return True

        return self.to_dict() != other.to_dict()
