# coding: utf-8

"""
    vms

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class QualificationMainInfoVOForQueryQualificationOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'approval_done_reason': 'str',
        'approval_status': 'int',
        'business_license_photo_url': 'str',
        'certificate_of_taxation_registration_photo_url': 'str',
        'certificate_three_in_one': 'int',
        'commitment_letter_of_net_access_photo_url': 'str',
        'create_time': 'str',
        'doc_of_number_apply_photo_url': 'str',
        'enterprise_address': 'str',
        'legal_representative_front_id_photo_url': 'str',
        'legal_representative_id': 'str',
        'legal_representative_name': 'str',
        'qualification_entity': 'str',
        'qualification_id': 'int',
        'qualification_no': 'str',
        'three_in_one_business_license_photo_url': 'str',
        'unit_social_credit_code': 'str',
        'update_time': 'str'
    }

    attribute_map = {
        'account_id': 'AccountId',
        'approval_done_reason': 'ApprovalDoneReason',
        'approval_status': 'ApprovalStatus',
        'business_license_photo_url': 'BusinessLicensePhotoURL',
        'certificate_of_taxation_registration_photo_url': 'CertificateOfTaxationRegistrationPhotoURL',
        'certificate_three_in_one': 'CertificateThreeInOne',
        'commitment_letter_of_net_access_photo_url': 'CommitmentLetterOfNetAccessPhotoURL',
        'create_time': 'CreateTime',
        'doc_of_number_apply_photo_url': 'DocOfNumberApplyPhotoURL',
        'enterprise_address': 'EnterpriseAddress',
        'legal_representative_front_id_photo_url': 'LegalRepresentativeFrontIDPhotoURL',
        'legal_representative_id': 'LegalRepresentativeId',
        'legal_representative_name': 'LegalRepresentativeName',
        'qualification_entity': 'QualificationEntity',
        'qualification_id': 'QualificationId',
        'qualification_no': 'QualificationNo',
        'three_in_one_business_license_photo_url': 'ThreeInOneBusinessLicensePhotoURL',
        'unit_social_credit_code': 'UnitSocialCreditCode',
        'update_time': 'UpdateTime'
    }

    def __init__(self, account_id=None, approval_done_reason=None, approval_status=None, business_license_photo_url=None, certificate_of_taxation_registration_photo_url=None, certificate_three_in_one=None, commitment_letter_of_net_access_photo_url=None, create_time=None, doc_of_number_apply_photo_url=None, enterprise_address=None, legal_representative_front_id_photo_url=None, legal_representative_id=None, legal_representative_name=None, qualification_entity=None, qualification_id=None, qualification_no=None, three_in_one_business_license_photo_url=None, unit_social_credit_code=None, update_time=None, _configuration=None):  # noqa: E501
        """QualificationMainInfoVOForQueryQualificationOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._approval_done_reason = None
        self._approval_status = None
        self._business_license_photo_url = None
        self._certificate_of_taxation_registration_photo_url = None
        self._certificate_three_in_one = None
        self._commitment_letter_of_net_access_photo_url = None
        self._create_time = None
        self._doc_of_number_apply_photo_url = None
        self._enterprise_address = None
        self._legal_representative_front_id_photo_url = None
        self._legal_representative_id = None
        self._legal_representative_name = None
        self._qualification_entity = None
        self._qualification_id = None
        self._qualification_no = None
        self._three_in_one_business_license_photo_url = None
        self._unit_social_credit_code = None
        self._update_time = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if approval_done_reason is not None:
            self.approval_done_reason = approval_done_reason
        if approval_status is not None:
            self.approval_status = approval_status
        if business_license_photo_url is not None:
            self.business_license_photo_url = business_license_photo_url
        if certificate_of_taxation_registration_photo_url is not None:
            self.certificate_of_taxation_registration_photo_url = certificate_of_taxation_registration_photo_url
        if certificate_three_in_one is not None:
            self.certificate_three_in_one = certificate_three_in_one
        if commitment_letter_of_net_access_photo_url is not None:
            self.commitment_letter_of_net_access_photo_url = commitment_letter_of_net_access_photo_url
        if create_time is not None:
            self.create_time = create_time
        if doc_of_number_apply_photo_url is not None:
            self.doc_of_number_apply_photo_url = doc_of_number_apply_photo_url
        if enterprise_address is not None:
            self.enterprise_address = enterprise_address
        if legal_representative_front_id_photo_url is not None:
            self.legal_representative_front_id_photo_url = legal_representative_front_id_photo_url
        if legal_representative_id is not None:
            self.legal_representative_id = legal_representative_id
        if legal_representative_name is not None:
            self.legal_representative_name = legal_representative_name
        if qualification_entity is not None:
            self.qualification_entity = qualification_entity
        if qualification_id is not None:
            self.qualification_id = qualification_id
        if qualification_no is not None:
            self.qualification_no = qualification_no
        if three_in_one_business_license_photo_url is not None:
            self.three_in_one_business_license_photo_url = three_in_one_business_license_photo_url
        if unit_social_credit_code is not None:
            self.unit_social_credit_code = unit_social_credit_code
        if update_time is not None:
            self.update_time = update_time

    @property
    def account_id(self):
        """Gets the account_id of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501


        :return: The account_id of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this QualificationMainInfoVOForQueryQualificationOutput.


        :param account_id: The account_id of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def approval_done_reason(self):
        """Gets the approval_done_reason of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501


        :return: The approval_done_reason of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :rtype: str
        """
        return self._approval_done_reason

    @approval_done_reason.setter
    def approval_done_reason(self, approval_done_reason):
        """Sets the approval_done_reason of this QualificationMainInfoVOForQueryQualificationOutput.


        :param approval_done_reason: The approval_done_reason of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :type: str
        """

        self._approval_done_reason = approval_done_reason

    @property
    def approval_status(self):
        """Gets the approval_status of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501


        :return: The approval_status of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :rtype: int
        """
        return self._approval_status

    @approval_status.setter
    def approval_status(self, approval_status):
        """Sets the approval_status of this QualificationMainInfoVOForQueryQualificationOutput.


        :param approval_status: The approval_status of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :type: int
        """

        self._approval_status = approval_status

    @property
    def business_license_photo_url(self):
        """Gets the business_license_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501


        :return: The business_license_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :rtype: str
        """
        return self._business_license_photo_url

    @business_license_photo_url.setter
    def business_license_photo_url(self, business_license_photo_url):
        """Sets the business_license_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.


        :param business_license_photo_url: The business_license_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :type: str
        """

        self._business_license_photo_url = business_license_photo_url

    @property
    def certificate_of_taxation_registration_photo_url(self):
        """Gets the certificate_of_taxation_registration_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501


        :return: The certificate_of_taxation_registration_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :rtype: str
        """
        return self._certificate_of_taxation_registration_photo_url

    @certificate_of_taxation_registration_photo_url.setter
    def certificate_of_taxation_registration_photo_url(self, certificate_of_taxation_registration_photo_url):
        """Sets the certificate_of_taxation_registration_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.


        :param certificate_of_taxation_registration_photo_url: The certificate_of_taxation_registration_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :type: str
        """

        self._certificate_of_taxation_registration_photo_url = certificate_of_taxation_registration_photo_url

    @property
    def certificate_three_in_one(self):
        """Gets the certificate_three_in_one of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501


        :return: The certificate_three_in_one of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :rtype: int
        """
        return self._certificate_three_in_one

    @certificate_three_in_one.setter
    def certificate_three_in_one(self, certificate_three_in_one):
        """Sets the certificate_three_in_one of this QualificationMainInfoVOForQueryQualificationOutput.


        :param certificate_three_in_one: The certificate_three_in_one of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :type: int
        """

        self._certificate_three_in_one = certificate_three_in_one

    @property
    def commitment_letter_of_net_access_photo_url(self):
        """Gets the commitment_letter_of_net_access_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501


        :return: The commitment_letter_of_net_access_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :rtype: str
        """
        return self._commitment_letter_of_net_access_photo_url

    @commitment_letter_of_net_access_photo_url.setter
    def commitment_letter_of_net_access_photo_url(self, commitment_letter_of_net_access_photo_url):
        """Sets the commitment_letter_of_net_access_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.


        :param commitment_letter_of_net_access_photo_url: The commitment_letter_of_net_access_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :type: str
        """

        self._commitment_letter_of_net_access_photo_url = commitment_letter_of_net_access_photo_url

    @property
    def create_time(self):
        """Gets the create_time of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501


        :return: The create_time of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this QualificationMainInfoVOForQueryQualificationOutput.


        :param create_time: The create_time of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def doc_of_number_apply_photo_url(self):
        """Gets the doc_of_number_apply_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501


        :return: The doc_of_number_apply_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :rtype: str
        """
        return self._doc_of_number_apply_photo_url

    @doc_of_number_apply_photo_url.setter
    def doc_of_number_apply_photo_url(self, doc_of_number_apply_photo_url):
        """Sets the doc_of_number_apply_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.


        :param doc_of_number_apply_photo_url: The doc_of_number_apply_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :type: str
        """

        self._doc_of_number_apply_photo_url = doc_of_number_apply_photo_url

    @property
    def enterprise_address(self):
        """Gets the enterprise_address of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501


        :return: The enterprise_address of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_address

    @enterprise_address.setter
    def enterprise_address(self, enterprise_address):
        """Sets the enterprise_address of this QualificationMainInfoVOForQueryQualificationOutput.


        :param enterprise_address: The enterprise_address of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :type: str
        """

        self._enterprise_address = enterprise_address

    @property
    def legal_representative_front_id_photo_url(self):
        """Gets the legal_representative_front_id_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501


        :return: The legal_representative_front_id_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :rtype: str
        """
        return self._legal_representative_front_id_photo_url

    @legal_representative_front_id_photo_url.setter
    def legal_representative_front_id_photo_url(self, legal_representative_front_id_photo_url):
        """Sets the legal_representative_front_id_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.


        :param legal_representative_front_id_photo_url: The legal_representative_front_id_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :type: str
        """

        self._legal_representative_front_id_photo_url = legal_representative_front_id_photo_url

    @property
    def legal_representative_id(self):
        """Gets the legal_representative_id of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501


        :return: The legal_representative_id of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :rtype: str
        """
        return self._legal_representative_id

    @legal_representative_id.setter
    def legal_representative_id(self, legal_representative_id):
        """Sets the legal_representative_id of this QualificationMainInfoVOForQueryQualificationOutput.


        :param legal_representative_id: The legal_representative_id of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :type: str
        """

        self._legal_representative_id = legal_representative_id

    @property
    def legal_representative_name(self):
        """Gets the legal_representative_name of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501


        :return: The legal_representative_name of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :rtype: str
        """
        return self._legal_representative_name

    @legal_representative_name.setter
    def legal_representative_name(self, legal_representative_name):
        """Sets the legal_representative_name of this QualificationMainInfoVOForQueryQualificationOutput.


        :param legal_representative_name: The legal_representative_name of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :type: str
        """

        self._legal_representative_name = legal_representative_name

    @property
    def qualification_entity(self):
        """Gets the qualification_entity of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501


        :return: The qualification_entity of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :rtype: str
        """
        return self._qualification_entity

    @qualification_entity.setter
    def qualification_entity(self, qualification_entity):
        """Sets the qualification_entity of this QualificationMainInfoVOForQueryQualificationOutput.


        :param qualification_entity: The qualification_entity of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :type: str
        """

        self._qualification_entity = qualification_entity

    @property
    def qualification_id(self):
        """Gets the qualification_id of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501


        :return: The qualification_id of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :rtype: int
        """
        return self._qualification_id

    @qualification_id.setter
    def qualification_id(self, qualification_id):
        """Sets the qualification_id of this QualificationMainInfoVOForQueryQualificationOutput.


        :param qualification_id: The qualification_id of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :type: int
        """

        self._qualification_id = qualification_id

    @property
    def qualification_no(self):
        """Gets the qualification_no of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501


        :return: The qualification_no of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :rtype: str
        """
        return self._qualification_no

    @qualification_no.setter
    def qualification_no(self, qualification_no):
        """Sets the qualification_no of this QualificationMainInfoVOForQueryQualificationOutput.


        :param qualification_no: The qualification_no of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :type: str
        """

        self._qualification_no = qualification_no

    @property
    def three_in_one_business_license_photo_url(self):
        """Gets the three_in_one_business_license_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501


        :return: The three_in_one_business_license_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :rtype: str
        """
        return self._three_in_one_business_license_photo_url

    @three_in_one_business_license_photo_url.setter
    def three_in_one_business_license_photo_url(self, three_in_one_business_license_photo_url):
        """Sets the three_in_one_business_license_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.


        :param three_in_one_business_license_photo_url: The three_in_one_business_license_photo_url of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :type: str
        """

        self._three_in_one_business_license_photo_url = three_in_one_business_license_photo_url

    @property
    def unit_social_credit_code(self):
        """Gets the unit_social_credit_code of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501


        :return: The unit_social_credit_code of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :rtype: str
        """
        return self._unit_social_credit_code

    @unit_social_credit_code.setter
    def unit_social_credit_code(self, unit_social_credit_code):
        """Sets the unit_social_credit_code of this QualificationMainInfoVOForQueryQualificationOutput.


        :param unit_social_credit_code: The unit_social_credit_code of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :type: str
        """

        self._unit_social_credit_code = unit_social_credit_code

    @property
    def update_time(self):
        """Gets the update_time of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501


        :return: The update_time of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this QualificationMainInfoVOForQueryQualificationOutput.


        :param update_time: The update_time of this QualificationMainInfoVOForQueryQualificationOutput.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualificationMainInfoVOForQueryQualificationOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualificationMainInfoVOForQueryQualificationOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QualificationMainInfoVOForQueryQualificationOutput):
            return True

        return self.to_dict() != other.to_dict()
