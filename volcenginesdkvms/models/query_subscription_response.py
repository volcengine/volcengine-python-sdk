# coding: utf-8

"""
    vms

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class QuerySubscriptionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'call_display_type': 'int',
        'call_display_type_name': 'str',
        'enable_time': 'int',
        'expire_time': 'int',
        'out_id': 'str',
        'phone_no_a': 'str',
        'phone_no_b': 'str',
        'phone_no_e': 'str',
        'phone_no_x': 'str',
        'phone_no_y': 'str',
        'record_flag': 'int',
        'status': 'int',
        'sub_id': 'str',
        'user_data': 'str'
    }

    attribute_map = {
        'call_display_type': 'CallDisplayType',
        'call_display_type_name': 'CallDisplayTypeName',
        'enable_time': 'EnableTime',
        'expire_time': 'ExpireTime',
        'out_id': 'OutId',
        'phone_no_a': 'PhoneNoA',
        'phone_no_b': 'PhoneNoB',
        'phone_no_e': 'PhoneNoE',
        'phone_no_x': 'PhoneNoX',
        'phone_no_y': 'PhoneNoY',
        'record_flag': 'RecordFlag',
        'status': 'Status',
        'sub_id': 'SubId',
        'user_data': 'UserData'
    }

    def __init__(self, call_display_type=None, call_display_type_name=None, enable_time=None, expire_time=None, out_id=None, phone_no_a=None, phone_no_b=None, phone_no_e=None, phone_no_x=None, phone_no_y=None, record_flag=None, status=None, sub_id=None, user_data=None, _configuration=None):  # noqa: E501
        """QuerySubscriptionResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._call_display_type = None
        self._call_display_type_name = None
        self._enable_time = None
        self._expire_time = None
        self._out_id = None
        self._phone_no_a = None
        self._phone_no_b = None
        self._phone_no_e = None
        self._phone_no_x = None
        self._phone_no_y = None
        self._record_flag = None
        self._status = None
        self._sub_id = None
        self._user_data = None
        self.discriminator = None

        if call_display_type is not None:
            self.call_display_type = call_display_type
        if call_display_type_name is not None:
            self.call_display_type_name = call_display_type_name
        if enable_time is not None:
            self.enable_time = enable_time
        if expire_time is not None:
            self.expire_time = expire_time
        if out_id is not None:
            self.out_id = out_id
        if phone_no_a is not None:
            self.phone_no_a = phone_no_a
        if phone_no_b is not None:
            self.phone_no_b = phone_no_b
        if phone_no_e is not None:
            self.phone_no_e = phone_no_e
        if phone_no_x is not None:
            self.phone_no_x = phone_no_x
        if phone_no_y is not None:
            self.phone_no_y = phone_no_y
        if record_flag is not None:
            self.record_flag = record_flag
        if status is not None:
            self.status = status
        if sub_id is not None:
            self.sub_id = sub_id
        if user_data is not None:
            self.user_data = user_data

    @property
    def call_display_type(self):
        """Gets the call_display_type of this QuerySubscriptionResponse.  # noqa: E501


        :return: The call_display_type of this QuerySubscriptionResponse.  # noqa: E501
        :rtype: int
        """
        return self._call_display_type

    @call_display_type.setter
    def call_display_type(self, call_display_type):
        """Sets the call_display_type of this QuerySubscriptionResponse.


        :param call_display_type: The call_display_type of this QuerySubscriptionResponse.  # noqa: E501
        :type: int
        """

        self._call_display_type = call_display_type

    @property
    def call_display_type_name(self):
        """Gets the call_display_type_name of this QuerySubscriptionResponse.  # noqa: E501


        :return: The call_display_type_name of this QuerySubscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._call_display_type_name

    @call_display_type_name.setter
    def call_display_type_name(self, call_display_type_name):
        """Sets the call_display_type_name of this QuerySubscriptionResponse.


        :param call_display_type_name: The call_display_type_name of this QuerySubscriptionResponse.  # noqa: E501
        :type: str
        """

        self._call_display_type_name = call_display_type_name

    @property
    def enable_time(self):
        """Gets the enable_time of this QuerySubscriptionResponse.  # noqa: E501


        :return: The enable_time of this QuerySubscriptionResponse.  # noqa: E501
        :rtype: int
        """
        return self._enable_time

    @enable_time.setter
    def enable_time(self, enable_time):
        """Sets the enable_time of this QuerySubscriptionResponse.


        :param enable_time: The enable_time of this QuerySubscriptionResponse.  # noqa: E501
        :type: int
        """

        self._enable_time = enable_time

    @property
    def expire_time(self):
        """Gets the expire_time of this QuerySubscriptionResponse.  # noqa: E501


        :return: The expire_time of this QuerySubscriptionResponse.  # noqa: E501
        :rtype: int
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this QuerySubscriptionResponse.


        :param expire_time: The expire_time of this QuerySubscriptionResponse.  # noqa: E501
        :type: int
        """

        self._expire_time = expire_time

    @property
    def out_id(self):
        """Gets the out_id of this QuerySubscriptionResponse.  # noqa: E501


        :return: The out_id of this QuerySubscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._out_id

    @out_id.setter
    def out_id(self, out_id):
        """Sets the out_id of this QuerySubscriptionResponse.


        :param out_id: The out_id of this QuerySubscriptionResponse.  # noqa: E501
        :type: str
        """

        self._out_id = out_id

    @property
    def phone_no_a(self):
        """Gets the phone_no_a of this QuerySubscriptionResponse.  # noqa: E501


        :return: The phone_no_a of this QuerySubscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone_no_a

    @phone_no_a.setter
    def phone_no_a(self, phone_no_a):
        """Sets the phone_no_a of this QuerySubscriptionResponse.


        :param phone_no_a: The phone_no_a of this QuerySubscriptionResponse.  # noqa: E501
        :type: str
        """

        self._phone_no_a = phone_no_a

    @property
    def phone_no_b(self):
        """Gets the phone_no_b of this QuerySubscriptionResponse.  # noqa: E501


        :return: The phone_no_b of this QuerySubscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone_no_b

    @phone_no_b.setter
    def phone_no_b(self, phone_no_b):
        """Sets the phone_no_b of this QuerySubscriptionResponse.


        :param phone_no_b: The phone_no_b of this QuerySubscriptionResponse.  # noqa: E501
        :type: str
        """

        self._phone_no_b = phone_no_b

    @property
    def phone_no_e(self):
        """Gets the phone_no_e of this QuerySubscriptionResponse.  # noqa: E501


        :return: The phone_no_e of this QuerySubscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone_no_e

    @phone_no_e.setter
    def phone_no_e(self, phone_no_e):
        """Sets the phone_no_e of this QuerySubscriptionResponse.


        :param phone_no_e: The phone_no_e of this QuerySubscriptionResponse.  # noqa: E501
        :type: str
        """

        self._phone_no_e = phone_no_e

    @property
    def phone_no_x(self):
        """Gets the phone_no_x of this QuerySubscriptionResponse.  # noqa: E501


        :return: The phone_no_x of this QuerySubscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone_no_x

    @phone_no_x.setter
    def phone_no_x(self, phone_no_x):
        """Sets the phone_no_x of this QuerySubscriptionResponse.


        :param phone_no_x: The phone_no_x of this QuerySubscriptionResponse.  # noqa: E501
        :type: str
        """

        self._phone_no_x = phone_no_x

    @property
    def phone_no_y(self):
        """Gets the phone_no_y of this QuerySubscriptionResponse.  # noqa: E501


        :return: The phone_no_y of this QuerySubscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone_no_y

    @phone_no_y.setter
    def phone_no_y(self, phone_no_y):
        """Sets the phone_no_y of this QuerySubscriptionResponse.


        :param phone_no_y: The phone_no_y of this QuerySubscriptionResponse.  # noqa: E501
        :type: str
        """

        self._phone_no_y = phone_no_y

    @property
    def record_flag(self):
        """Gets the record_flag of this QuerySubscriptionResponse.  # noqa: E501


        :return: The record_flag of this QuerySubscriptionResponse.  # noqa: E501
        :rtype: int
        """
        return self._record_flag

    @record_flag.setter
    def record_flag(self, record_flag):
        """Sets the record_flag of this QuerySubscriptionResponse.


        :param record_flag: The record_flag of this QuerySubscriptionResponse.  # noqa: E501
        :type: int
        """

        self._record_flag = record_flag

    @property
    def status(self):
        """Gets the status of this QuerySubscriptionResponse.  # noqa: E501


        :return: The status of this QuerySubscriptionResponse.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this QuerySubscriptionResponse.


        :param status: The status of this QuerySubscriptionResponse.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def sub_id(self):
        """Gets the sub_id of this QuerySubscriptionResponse.  # noqa: E501


        :return: The sub_id of this QuerySubscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._sub_id

    @sub_id.setter
    def sub_id(self, sub_id):
        """Sets the sub_id of this QuerySubscriptionResponse.


        :param sub_id: The sub_id of this QuerySubscriptionResponse.  # noqa: E501
        :type: str
        """

        self._sub_id = sub_id

    @property
    def user_data(self):
        """Gets the user_data of this QuerySubscriptionResponse.  # noqa: E501


        :return: The user_data of this QuerySubscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this QuerySubscriptionResponse.


        :param user_data: The user_data of this QuerySubscriptionResponse.  # noqa: E501
        :type: str
        """

        self._user_data = user_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuerySubscriptionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuerySubscriptionResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuerySubscriptionResponse):
            return True

        return self.to_dict() != other.to_dict()
