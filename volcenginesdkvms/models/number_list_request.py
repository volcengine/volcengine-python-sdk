# coding: utf-8

"""
    vms

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class NumberListRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'limit': 'int',
        'number_list': 'list[str]',
        'number_pool_no': 'str',
        'number_pool_type_code': 'int',
        'number_status_code': 'int',
        'number_type_code': 'int',
        'offset': 'int'
    }

    attribute_map = {
        'limit': 'Limit',
        'number_list': 'NumberList',
        'number_pool_no': 'NumberPoolNo',
        'number_pool_type_code': 'NumberPoolTypeCode',
        'number_status_code': 'NumberStatusCode',
        'number_type_code': 'NumberTypeCode',
        'offset': 'Offset'
    }

    def __init__(self, limit=None, number_list=None, number_pool_no=None, number_pool_type_code=None, number_status_code=None, number_type_code=None, offset=None, _configuration=None):  # noqa: E501
        """NumberListRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._limit = None
        self._number_list = None
        self._number_pool_no = None
        self._number_pool_type_code = None
        self._number_status_code = None
        self._number_type_code = None
        self._offset = None
        self.discriminator = None

        if limit is not None:
            self.limit = limit
        if number_list is not None:
            self.number_list = number_list
        if number_pool_no is not None:
            self.number_pool_no = number_pool_no
        if number_pool_type_code is not None:
            self.number_pool_type_code = number_pool_type_code
        if number_status_code is not None:
            self.number_status_code = number_status_code
        if number_type_code is not None:
            self.number_type_code = number_type_code
        if offset is not None:
            self.offset = offset

    @property
    def limit(self):
        """Gets the limit of this NumberListRequest.  # noqa: E501


        :return: The limit of this NumberListRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this NumberListRequest.


        :param limit: The limit of this NumberListRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def number_list(self):
        """Gets the number_list of this NumberListRequest.  # noqa: E501


        :return: The number_list of this NumberListRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._number_list

    @number_list.setter
    def number_list(self, number_list):
        """Sets the number_list of this NumberListRequest.


        :param number_list: The number_list of this NumberListRequest.  # noqa: E501
        :type: list[str]
        """

        self._number_list = number_list

    @property
    def number_pool_no(self):
        """Gets the number_pool_no of this NumberListRequest.  # noqa: E501


        :return: The number_pool_no of this NumberListRequest.  # noqa: E501
        :rtype: str
        """
        return self._number_pool_no

    @number_pool_no.setter
    def number_pool_no(self, number_pool_no):
        """Sets the number_pool_no of this NumberListRequest.


        :param number_pool_no: The number_pool_no of this NumberListRequest.  # noqa: E501
        :type: str
        """

        self._number_pool_no = number_pool_no

    @property
    def number_pool_type_code(self):
        """Gets the number_pool_type_code of this NumberListRequest.  # noqa: E501


        :return: The number_pool_type_code of this NumberListRequest.  # noqa: E501
        :rtype: int
        """
        return self._number_pool_type_code

    @number_pool_type_code.setter
    def number_pool_type_code(self, number_pool_type_code):
        """Sets the number_pool_type_code of this NumberListRequest.


        :param number_pool_type_code: The number_pool_type_code of this NumberListRequest.  # noqa: E501
        :type: int
        """

        self._number_pool_type_code = number_pool_type_code

    @property
    def number_status_code(self):
        """Gets the number_status_code of this NumberListRequest.  # noqa: E501


        :return: The number_status_code of this NumberListRequest.  # noqa: E501
        :rtype: int
        """
        return self._number_status_code

    @number_status_code.setter
    def number_status_code(self, number_status_code):
        """Sets the number_status_code of this NumberListRequest.


        :param number_status_code: The number_status_code of this NumberListRequest.  # noqa: E501
        :type: int
        """

        self._number_status_code = number_status_code

    @property
    def number_type_code(self):
        """Gets the number_type_code of this NumberListRequest.  # noqa: E501


        :return: The number_type_code of this NumberListRequest.  # noqa: E501
        :rtype: int
        """
        return self._number_type_code

    @number_type_code.setter
    def number_type_code(self, number_type_code):
        """Sets the number_type_code of this NumberListRequest.


        :param number_type_code: The number_type_code of this NumberListRequest.  # noqa: E501
        :type: int
        """

        self._number_type_code = number_type_code

    @property
    def offset(self):
        """Gets the offset of this NumberListRequest.  # noqa: E501


        :return: The offset of this NumberListRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this NumberListRequest.


        :param offset: The offset of this NumberListRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NumberListRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NumberListRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NumberListRequest):
            return True

        return self.to_dict() != other.to_dict()
