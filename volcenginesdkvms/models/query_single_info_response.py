# coding: utf-8

"""
    vms

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class QuerySingleInfoResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'call_uuid': 'str',
        'create_time': 'str',
        'duration': 'int',
        'ext': 'str',
        'phone': 'str',
        'release_time': 'str',
        'resource_key': 'str',
        'single_open_id': 'str',
        'state': 'str'
    }

    attribute_map = {
        'call_uuid': 'CallUuid',
        'create_time': 'CreateTime',
        'duration': 'Duration',
        'ext': 'Ext',
        'phone': 'Phone',
        'release_time': 'ReleaseTime',
        'resource_key': 'ResourceKey',
        'single_open_id': 'SingleOpenId',
        'state': 'State'
    }

    def __init__(self, call_uuid=None, create_time=None, duration=None, ext=None, phone=None, release_time=None, resource_key=None, single_open_id=None, state=None, _configuration=None):  # noqa: E501
        """QuerySingleInfoResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._call_uuid = None
        self._create_time = None
        self._duration = None
        self._ext = None
        self._phone = None
        self._release_time = None
        self._resource_key = None
        self._single_open_id = None
        self._state = None
        self.discriminator = None

        if call_uuid is not None:
            self.call_uuid = call_uuid
        if create_time is not None:
            self.create_time = create_time
        if duration is not None:
            self.duration = duration
        if ext is not None:
            self.ext = ext
        if phone is not None:
            self.phone = phone
        if release_time is not None:
            self.release_time = release_time
        if resource_key is not None:
            self.resource_key = resource_key
        if single_open_id is not None:
            self.single_open_id = single_open_id
        if state is not None:
            self.state = state

    @property
    def call_uuid(self):
        """Gets the call_uuid of this QuerySingleInfoResponse.  # noqa: E501


        :return: The call_uuid of this QuerySingleInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._call_uuid

    @call_uuid.setter
    def call_uuid(self, call_uuid):
        """Sets the call_uuid of this QuerySingleInfoResponse.


        :param call_uuid: The call_uuid of this QuerySingleInfoResponse.  # noqa: E501
        :type: str
        """

        self._call_uuid = call_uuid

    @property
    def create_time(self):
        """Gets the create_time of this QuerySingleInfoResponse.  # noqa: E501


        :return: The create_time of this QuerySingleInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this QuerySingleInfoResponse.


        :param create_time: The create_time of this QuerySingleInfoResponse.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def duration(self):
        """Gets the duration of this QuerySingleInfoResponse.  # noqa: E501


        :return: The duration of this QuerySingleInfoResponse.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this QuerySingleInfoResponse.


        :param duration: The duration of this QuerySingleInfoResponse.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def ext(self):
        """Gets the ext of this QuerySingleInfoResponse.  # noqa: E501


        :return: The ext of this QuerySingleInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._ext

    @ext.setter
    def ext(self, ext):
        """Sets the ext of this QuerySingleInfoResponse.


        :param ext: The ext of this QuerySingleInfoResponse.  # noqa: E501
        :type: str
        """

        self._ext = ext

    @property
    def phone(self):
        """Gets the phone of this QuerySingleInfoResponse.  # noqa: E501


        :return: The phone of this QuerySingleInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this QuerySingleInfoResponse.


        :param phone: The phone of this QuerySingleInfoResponse.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def release_time(self):
        """Gets the release_time of this QuerySingleInfoResponse.  # noqa: E501


        :return: The release_time of this QuerySingleInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._release_time

    @release_time.setter
    def release_time(self, release_time):
        """Sets the release_time of this QuerySingleInfoResponse.


        :param release_time: The release_time of this QuerySingleInfoResponse.  # noqa: E501
        :type: str
        """

        self._release_time = release_time

    @property
    def resource_key(self):
        """Gets the resource_key of this QuerySingleInfoResponse.  # noqa: E501


        :return: The resource_key of this QuerySingleInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._resource_key

    @resource_key.setter
    def resource_key(self, resource_key):
        """Sets the resource_key of this QuerySingleInfoResponse.


        :param resource_key: The resource_key of this QuerySingleInfoResponse.  # noqa: E501
        :type: str
        """

        self._resource_key = resource_key

    @property
    def single_open_id(self):
        """Gets the single_open_id of this QuerySingleInfoResponse.  # noqa: E501


        :return: The single_open_id of this QuerySingleInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._single_open_id

    @single_open_id.setter
    def single_open_id(self, single_open_id):
        """Sets the single_open_id of this QuerySingleInfoResponse.


        :param single_open_id: The single_open_id of this QuerySingleInfoResponse.  # noqa: E501
        :type: str
        """

        self._single_open_id = single_open_id

    @property
    def state(self):
        """Gets the state of this QuerySingleInfoResponse.  # noqa: E501


        :return: The state of this QuerySingleInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this QuerySingleInfoResponse.


        :param state: The state of this QuerySingleInfoResponse.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuerySingleInfoResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuerySingleInfoResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuerySingleInfoResponse):
            return True

        return self.to_dict() != other.to_dict()
