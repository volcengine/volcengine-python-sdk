# coding: utf-8

"""
    vms

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class RouteAAuthRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_number': 'str',
        'id_type': 'int',
        'name': 'str',
        'phone_number': 'str',
        'photo': 'str',
        'request_id': 'str'
    }

    attribute_map = {
        'id_number': 'IdNumber',
        'id_type': 'IdType',
        'name': 'Name',
        'phone_number': 'PhoneNumber',
        'photo': 'Photo',
        'request_id': 'RequestId'
    }

    def __init__(self, id_number=None, id_type=None, name=None, phone_number=None, photo=None, request_id=None, _configuration=None):  # noqa: E501
        """RouteAAuthRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id_number = None
        self._id_type = None
        self._name = None
        self._phone_number = None
        self._photo = None
        self._request_id = None
        self.discriminator = None

        self.id_number = id_number
        self.id_type = id_type
        self.name = name
        self.phone_number = phone_number
        self.photo = photo
        self.request_id = request_id

    @property
    def id_number(self):
        """Gets the id_number of this RouteAAuthRequest.  # noqa: E501


        :return: The id_number of this RouteAAuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._id_number

    @id_number.setter
    def id_number(self, id_number):
        """Sets the id_number of this RouteAAuthRequest.


        :param id_number: The id_number of this RouteAAuthRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id_number is None:
            raise ValueError("Invalid value for `id_number`, must not be `None`")  # noqa: E501

        self._id_number = id_number

    @property
    def id_type(self):
        """Gets the id_type of this RouteAAuthRequest.  # noqa: E501


        :return: The id_type of this RouteAAuthRequest.  # noqa: E501
        :rtype: int
        """
        return self._id_type

    @id_type.setter
    def id_type(self, id_type):
        """Sets the id_type of this RouteAAuthRequest.


        :param id_type: The id_type of this RouteAAuthRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and id_type is None:
            raise ValueError("Invalid value for `id_type`, must not be `None`")  # noqa: E501

        self._id_type = id_type

    @property
    def name(self):
        """Gets the name of this RouteAAuthRequest.  # noqa: E501


        :return: The name of this RouteAAuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RouteAAuthRequest.


        :param name: The name of this RouteAAuthRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def phone_number(self):
        """Gets the phone_number of this RouteAAuthRequest.  # noqa: E501


        :return: The phone_number of this RouteAAuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this RouteAAuthRequest.


        :param phone_number: The phone_number of this RouteAAuthRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def photo(self):
        """Gets the photo of this RouteAAuthRequest.  # noqa: E501


        :return: The photo of this RouteAAuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this RouteAAuthRequest.


        :param photo: The photo of this RouteAAuthRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and photo is None:
            raise ValueError("Invalid value for `photo`, must not be `None`")  # noqa: E501

        self._photo = photo

    @property
    def request_id(self):
        """Gets the request_id of this RouteAAuthRequest.  # noqa: E501


        :return: The request_id of this RouteAAuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this RouteAAuthRequest.


        :param request_id: The request_id of this RouteAAuthRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RouteAAuthRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RouteAAuthRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RouteAAuthRequest):
            return True

        return self.to_dict() != other.to_dict()
