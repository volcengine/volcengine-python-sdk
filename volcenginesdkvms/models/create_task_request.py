# coding: utf-8

"""
    vms

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateTaskRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audio_post_url': 'str',
        'call_record_post_url': 'str',
        'concurrency': 'int',
        'end_time': 'str',
        'finish_when_list_end': 'bool',
        'forbid_time_list': 'list[ForbidTimeListForCreateTaskInput]',
        'max_ring_duration': 'int',
        'name': 'str',
        'number_list': 'list[str]',
        'number_pool_no': 'str',
        'phone_list': 'list[PhoneListForCreateTaskInput]',
        'resource': 'str',
        'ring_again_interval': 'int',
        'ring_again_times': 'int',
        'select_number_rule': 'int',
        'select_number_type': 'int',
        'sms_config': 'list[SmsConfigForCreateTaskInput]',
        'start': 'bool',
        'start_time': 'str',
        'type': 'int',
        'unique': 'bool'
    }

    attribute_map = {
        'audio_post_url': 'AudioPostUrl',
        'call_record_post_url': 'CallRecordPostUrl',
        'concurrency': 'Concurrency',
        'end_time': 'EndTime',
        'finish_when_list_end': 'FinishWhenListEnd',
        'forbid_time_list': 'ForbidTimeList',
        'max_ring_duration': 'MaxRingDuration',
        'name': 'Name',
        'number_list': 'NumberList',
        'number_pool_no': 'NumberPoolNo',
        'phone_list': 'PhoneList',
        'resource': 'Resource',
        'ring_again_interval': 'RingAgainInterval',
        'ring_again_times': 'RingAgainTimes',
        'select_number_rule': 'SelectNumberRule',
        'select_number_type': 'SelectNumberType',
        'sms_config': 'SmsConfig',
        'start': 'Start',
        'start_time': 'StartTime',
        'type': 'Type',
        'unique': 'Unique'
    }

    def __init__(self, audio_post_url=None, call_record_post_url=None, concurrency=None, end_time=None, finish_when_list_end=None, forbid_time_list=None, max_ring_duration=None, name=None, number_list=None, number_pool_no=None, phone_list=None, resource=None, ring_again_interval=None, ring_again_times=None, select_number_rule=None, select_number_type=None, sms_config=None, start=None, start_time=None, type=None, unique=None, _configuration=None):  # noqa: E501
        """CreateTaskRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._audio_post_url = None
        self._call_record_post_url = None
        self._concurrency = None
        self._end_time = None
        self._finish_when_list_end = None
        self._forbid_time_list = None
        self._max_ring_duration = None
        self._name = None
        self._number_list = None
        self._number_pool_no = None
        self._phone_list = None
        self._resource = None
        self._ring_again_interval = None
        self._ring_again_times = None
        self._select_number_rule = None
        self._select_number_type = None
        self._sms_config = None
        self._start = None
        self._start_time = None
        self._type = None
        self._unique = None
        self.discriminator = None

        if audio_post_url is not None:
            self.audio_post_url = audio_post_url
        if call_record_post_url is not None:
            self.call_record_post_url = call_record_post_url
        self.concurrency = concurrency
        self.end_time = end_time
        if finish_when_list_end is not None:
            self.finish_when_list_end = finish_when_list_end
        if forbid_time_list is not None:
            self.forbid_time_list = forbid_time_list
        if max_ring_duration is not None:
            self.max_ring_duration = max_ring_duration
        self.name = name
        if number_list is not None:
            self.number_list = number_list
        self.number_pool_no = number_pool_no
        if phone_list is not None:
            self.phone_list = phone_list
        if resource is not None:
            self.resource = resource
        if ring_again_interval is not None:
            self.ring_again_interval = ring_again_interval
        if ring_again_times is not None:
            self.ring_again_times = ring_again_times
        if select_number_rule is not None:
            self.select_number_rule = select_number_rule
        if select_number_type is not None:
            self.select_number_type = select_number_type
        if sms_config is not None:
            self.sms_config = sms_config
        if start is not None:
            self.start = start
        self.start_time = start_time
        if type is not None:
            self.type = type
        if unique is not None:
            self.unique = unique

    @property
    def audio_post_url(self):
        """Gets the audio_post_url of this CreateTaskRequest.  # noqa: E501


        :return: The audio_post_url of this CreateTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._audio_post_url

    @audio_post_url.setter
    def audio_post_url(self, audio_post_url):
        """Sets the audio_post_url of this CreateTaskRequest.


        :param audio_post_url: The audio_post_url of this CreateTaskRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                audio_post_url is not None and len(audio_post_url) > 512):
            raise ValueError("Invalid value for `audio_post_url`, length must be less than or equal to `512`")  # noqa: E501

        self._audio_post_url = audio_post_url

    @property
    def call_record_post_url(self):
        """Gets the call_record_post_url of this CreateTaskRequest.  # noqa: E501


        :return: The call_record_post_url of this CreateTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._call_record_post_url

    @call_record_post_url.setter
    def call_record_post_url(self, call_record_post_url):
        """Sets the call_record_post_url of this CreateTaskRequest.


        :param call_record_post_url: The call_record_post_url of this CreateTaskRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                call_record_post_url is not None and len(call_record_post_url) > 512):
            raise ValueError("Invalid value for `call_record_post_url`, length must be less than or equal to `512`")  # noqa: E501

        self._call_record_post_url = call_record_post_url

    @property
    def concurrency(self):
        """Gets the concurrency of this CreateTaskRequest.  # noqa: E501


        :return: The concurrency of this CreateTaskRequest.  # noqa: E501
        :rtype: int
        """
        return self._concurrency

    @concurrency.setter
    def concurrency(self, concurrency):
        """Sets the concurrency of this CreateTaskRequest.


        :param concurrency: The concurrency of this CreateTaskRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and concurrency is None:
            raise ValueError("Invalid value for `concurrency`, must not be `None`")  # noqa: E501

        self._concurrency = concurrency

    @property
    def end_time(self):
        """Gets the end_time of this CreateTaskRequest.  # noqa: E501


        :return: The end_time of this CreateTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this CreateTaskRequest.


        :param end_time: The end_time of this CreateTaskRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def finish_when_list_end(self):
        """Gets the finish_when_list_end of this CreateTaskRequest.  # noqa: E501


        :return: The finish_when_list_end of this CreateTaskRequest.  # noqa: E501
        :rtype: bool
        """
        return self._finish_when_list_end

    @finish_when_list_end.setter
    def finish_when_list_end(self, finish_when_list_end):
        """Sets the finish_when_list_end of this CreateTaskRequest.


        :param finish_when_list_end: The finish_when_list_end of this CreateTaskRequest.  # noqa: E501
        :type: bool
        """

        self._finish_when_list_end = finish_when_list_end

    @property
    def forbid_time_list(self):
        """Gets the forbid_time_list of this CreateTaskRequest.  # noqa: E501


        :return: The forbid_time_list of this CreateTaskRequest.  # noqa: E501
        :rtype: list[ForbidTimeListForCreateTaskInput]
        """
        return self._forbid_time_list

    @forbid_time_list.setter
    def forbid_time_list(self, forbid_time_list):
        """Sets the forbid_time_list of this CreateTaskRequest.


        :param forbid_time_list: The forbid_time_list of this CreateTaskRequest.  # noqa: E501
        :type: list[ForbidTimeListForCreateTaskInput]
        """

        self._forbid_time_list = forbid_time_list

    @property
    def max_ring_duration(self):
        """Gets the max_ring_duration of this CreateTaskRequest.  # noqa: E501


        :return: The max_ring_duration of this CreateTaskRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_ring_duration

    @max_ring_duration.setter
    def max_ring_duration(self, max_ring_duration):
        """Sets the max_ring_duration of this CreateTaskRequest.


        :param max_ring_duration: The max_ring_duration of this CreateTaskRequest.  # noqa: E501
        :type: int
        """

        self._max_ring_duration = max_ring_duration

    @property
    def name(self):
        """Gets the name of this CreateTaskRequest.  # noqa: E501


        :return: The name of this CreateTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateTaskRequest.


        :param name: The name of this CreateTaskRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def number_list(self):
        """Gets the number_list of this CreateTaskRequest.  # noqa: E501


        :return: The number_list of this CreateTaskRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._number_list

    @number_list.setter
    def number_list(self, number_list):
        """Sets the number_list of this CreateTaskRequest.


        :param number_list: The number_list of this CreateTaskRequest.  # noqa: E501
        :type: list[str]
        """

        self._number_list = number_list

    @property
    def number_pool_no(self):
        """Gets the number_pool_no of this CreateTaskRequest.  # noqa: E501


        :return: The number_pool_no of this CreateTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._number_pool_no

    @number_pool_no.setter
    def number_pool_no(self, number_pool_no):
        """Sets the number_pool_no of this CreateTaskRequest.


        :param number_pool_no: The number_pool_no of this CreateTaskRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and number_pool_no is None:
            raise ValueError("Invalid value for `number_pool_no`, must not be `None`")  # noqa: E501

        self._number_pool_no = number_pool_no

    @property
    def phone_list(self):
        """Gets the phone_list of this CreateTaskRequest.  # noqa: E501


        :return: The phone_list of this CreateTaskRequest.  # noqa: E501
        :rtype: list[PhoneListForCreateTaskInput]
        """
        return self._phone_list

    @phone_list.setter
    def phone_list(self, phone_list):
        """Sets the phone_list of this CreateTaskRequest.


        :param phone_list: The phone_list of this CreateTaskRequest.  # noqa: E501
        :type: list[PhoneListForCreateTaskInput]
        """

        self._phone_list = phone_list

    @property
    def resource(self):
        """Gets the resource of this CreateTaskRequest.  # noqa: E501


        :return: The resource of this CreateTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this CreateTaskRequest.


        :param resource: The resource of this CreateTaskRequest.  # noqa: E501
        :type: str
        """

        self._resource = resource

    @property
    def ring_again_interval(self):
        """Gets the ring_again_interval of this CreateTaskRequest.  # noqa: E501


        :return: The ring_again_interval of this CreateTaskRequest.  # noqa: E501
        :rtype: int
        """
        return self._ring_again_interval

    @ring_again_interval.setter
    def ring_again_interval(self, ring_again_interval):
        """Sets the ring_again_interval of this CreateTaskRequest.


        :param ring_again_interval: The ring_again_interval of this CreateTaskRequest.  # noqa: E501
        :type: int
        """

        self._ring_again_interval = ring_again_interval

    @property
    def ring_again_times(self):
        """Gets the ring_again_times of this CreateTaskRequest.  # noqa: E501


        :return: The ring_again_times of this CreateTaskRequest.  # noqa: E501
        :rtype: int
        """
        return self._ring_again_times

    @ring_again_times.setter
    def ring_again_times(self, ring_again_times):
        """Sets the ring_again_times of this CreateTaskRequest.


        :param ring_again_times: The ring_again_times of this CreateTaskRequest.  # noqa: E501
        :type: int
        """

        self._ring_again_times = ring_again_times

    @property
    def select_number_rule(self):
        """Gets the select_number_rule of this CreateTaskRequest.  # noqa: E501


        :return: The select_number_rule of this CreateTaskRequest.  # noqa: E501
        :rtype: int
        """
        return self._select_number_rule

    @select_number_rule.setter
    def select_number_rule(self, select_number_rule):
        """Sets the select_number_rule of this CreateTaskRequest.


        :param select_number_rule: The select_number_rule of this CreateTaskRequest.  # noqa: E501
        :type: int
        """

        self._select_number_rule = select_number_rule

    @property
    def select_number_type(self):
        """Gets the select_number_type of this CreateTaskRequest.  # noqa: E501


        :return: The select_number_type of this CreateTaskRequest.  # noqa: E501
        :rtype: int
        """
        return self._select_number_type

    @select_number_type.setter
    def select_number_type(self, select_number_type):
        """Sets the select_number_type of this CreateTaskRequest.


        :param select_number_type: The select_number_type of this CreateTaskRequest.  # noqa: E501
        :type: int
        """

        self._select_number_type = select_number_type

    @property
    def sms_config(self):
        """Gets the sms_config of this CreateTaskRequest.  # noqa: E501


        :return: The sms_config of this CreateTaskRequest.  # noqa: E501
        :rtype: list[SmsConfigForCreateTaskInput]
        """
        return self._sms_config

    @sms_config.setter
    def sms_config(self, sms_config):
        """Sets the sms_config of this CreateTaskRequest.


        :param sms_config: The sms_config of this CreateTaskRequest.  # noqa: E501
        :type: list[SmsConfigForCreateTaskInput]
        """

        self._sms_config = sms_config

    @property
    def start(self):
        """Gets the start of this CreateTaskRequest.  # noqa: E501


        :return: The start of this CreateTaskRequest.  # noqa: E501
        :rtype: bool
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this CreateTaskRequest.


        :param start: The start of this CreateTaskRequest.  # noqa: E501
        :type: bool
        """

        self._start = start

    @property
    def start_time(self):
        """Gets the start_time of this CreateTaskRequest.  # noqa: E501


        :return: The start_time of this CreateTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CreateTaskRequest.


        :param start_time: The start_time of this CreateTaskRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def type(self):
        """Gets the type of this CreateTaskRequest.  # noqa: E501


        :return: The type of this CreateTaskRequest.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateTaskRequest.


        :param type: The type of this CreateTaskRequest.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def unique(self):
        """Gets the unique of this CreateTaskRequest.  # noqa: E501


        :return: The unique of this CreateTaskRequest.  # noqa: E501
        :rtype: bool
        """
        return self._unique

    @unique.setter
    def unique(self, unique):
        """Sets the unique of this CreateTaskRequest.


        :param unique: The unique of this CreateTaskRequest.  # noqa: E501
        :type: bool
        """

        self._unique = unique

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateTaskRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTaskRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateTaskRequest):
            return True

        return self.to_dict() != other.to_dict()
