# coding: utf-8

"""
    vms

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class QueryQualificationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'approval_status': 'int',
        'limit': 'int',
        'offset': 'int',
        'qualification_entity_query_pattern': 'str',
        'qualification_no_list': 'list[str]'
    }

    attribute_map = {
        'approval_status': 'ApprovalStatus',
        'limit': 'Limit',
        'offset': 'Offset',
        'qualification_entity_query_pattern': 'QualificationEntityQueryPattern',
        'qualification_no_list': 'QualificationNoList'
    }

    def __init__(self, approval_status=None, limit=None, offset=None, qualification_entity_query_pattern=None, qualification_no_list=None, _configuration=None):  # noqa: E501
        """QueryQualificationRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._approval_status = None
        self._limit = None
        self._offset = None
        self._qualification_entity_query_pattern = None
        self._qualification_no_list = None
        self.discriminator = None

        if approval_status is not None:
            self.approval_status = approval_status
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if qualification_entity_query_pattern is not None:
            self.qualification_entity_query_pattern = qualification_entity_query_pattern
        if qualification_no_list is not None:
            self.qualification_no_list = qualification_no_list

    @property
    def approval_status(self):
        """Gets the approval_status of this QueryQualificationRequest.  # noqa: E501


        :return: The approval_status of this QueryQualificationRequest.  # noqa: E501
        :rtype: int
        """
        return self._approval_status

    @approval_status.setter
    def approval_status(self, approval_status):
        """Sets the approval_status of this QueryQualificationRequest.


        :param approval_status: The approval_status of this QueryQualificationRequest.  # noqa: E501
        :type: int
        """

        self._approval_status = approval_status

    @property
    def limit(self):
        """Gets the limit of this QueryQualificationRequest.  # noqa: E501


        :return: The limit of this QueryQualificationRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this QueryQualificationRequest.


        :param limit: The limit of this QueryQualificationRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this QueryQualificationRequest.  # noqa: E501


        :return: The offset of this QueryQualificationRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this QueryQualificationRequest.


        :param offset: The offset of this QueryQualificationRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def qualification_entity_query_pattern(self):
        """Gets the qualification_entity_query_pattern of this QueryQualificationRequest.  # noqa: E501


        :return: The qualification_entity_query_pattern of this QueryQualificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._qualification_entity_query_pattern

    @qualification_entity_query_pattern.setter
    def qualification_entity_query_pattern(self, qualification_entity_query_pattern):
        """Sets the qualification_entity_query_pattern of this QueryQualificationRequest.


        :param qualification_entity_query_pattern: The qualification_entity_query_pattern of this QueryQualificationRequest.  # noqa: E501
        :type: str
        """

        self._qualification_entity_query_pattern = qualification_entity_query_pattern

    @property
    def qualification_no_list(self):
        """Gets the qualification_no_list of this QueryQualificationRequest.  # noqa: E501


        :return: The qualification_no_list of this QueryQualificationRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._qualification_no_list

    @qualification_no_list.setter
    def qualification_no_list(self, qualification_no_list):
        """Sets the qualification_no_list of this QueryQualificationRequest.


        :param qualification_no_list: The qualification_no_list of this QueryQualificationRequest.  # noqa: E501
        :type: list[str]
        """

        self._qualification_no_list = qualification_no_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueryQualificationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryQualificationRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueryQualificationRequest):
            return True

        return self.to_dict() != other.to_dict()
