# coding: utf-8

"""
    vms

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class SelectNumberAndBindAXBRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audio_record_flag': 'int',
        'ax_conflict_axb_flag': 'int',
        'call_display_type': 'int',
        'city_code': 'str',
        'city_code_by_phone_no': 'str',
        'degrade_city_list': 'list[str]',
        'expire_time': 'int',
        'number_pool_no': 'str',
        'out_id': 'str',
        'phone_no_a': 'str',
        'phone_no_b': 'str',
        'random_flag': 'int',
        'user_data': 'str',
        'verify_flag': 'int',
        'voice_code': 'str'
    }

    attribute_map = {
        'audio_record_flag': 'AudioRecordFlag',
        'ax_conflict_axb_flag': 'AxConflictAxbFlag',
        'call_display_type': 'CallDisplayType',
        'city_code': 'CityCode',
        'city_code_by_phone_no': 'CityCodeByPhoneNo',
        'degrade_city_list': 'DegradeCityList',
        'expire_time': 'ExpireTime',
        'number_pool_no': 'NumberPoolNo',
        'out_id': 'OutId',
        'phone_no_a': 'PhoneNoA',
        'phone_no_b': 'PhoneNoB',
        'random_flag': 'RandomFlag',
        'user_data': 'UserData',
        'verify_flag': 'VerifyFlag',
        'voice_code': 'VoiceCode'
    }

    def __init__(self, audio_record_flag=None, ax_conflict_axb_flag=None, call_display_type=None, city_code=None, city_code_by_phone_no=None, degrade_city_list=None, expire_time=None, number_pool_no=None, out_id=None, phone_no_a=None, phone_no_b=None, random_flag=None, user_data=None, verify_flag=None, voice_code=None, _configuration=None):  # noqa: E501
        """SelectNumberAndBindAXBRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._audio_record_flag = None
        self._ax_conflict_axb_flag = None
        self._call_display_type = None
        self._city_code = None
        self._city_code_by_phone_no = None
        self._degrade_city_list = None
        self._expire_time = None
        self._number_pool_no = None
        self._out_id = None
        self._phone_no_a = None
        self._phone_no_b = None
        self._random_flag = None
        self._user_data = None
        self._verify_flag = None
        self._voice_code = None
        self.discriminator = None

        if audio_record_flag is not None:
            self.audio_record_flag = audio_record_flag
        if ax_conflict_axb_flag is not None:
            self.ax_conflict_axb_flag = ax_conflict_axb_flag
        if call_display_type is not None:
            self.call_display_type = call_display_type
        if city_code is not None:
            self.city_code = city_code
        if city_code_by_phone_no is not None:
            self.city_code_by_phone_no = city_code_by_phone_no
        if degrade_city_list is not None:
            self.degrade_city_list = degrade_city_list
        self.expire_time = expire_time
        self.number_pool_no = number_pool_no
        if out_id is not None:
            self.out_id = out_id
        self.phone_no_a = phone_no_a
        if phone_no_b is not None:
            self.phone_no_b = phone_no_b
        if random_flag is not None:
            self.random_flag = random_flag
        if user_data is not None:
            self.user_data = user_data
        if verify_flag is not None:
            self.verify_flag = verify_flag
        if voice_code is not None:
            self.voice_code = voice_code

    @property
    def audio_record_flag(self):
        """Gets the audio_record_flag of this SelectNumberAndBindAXBRequest.  # noqa: E501


        :return: The audio_record_flag of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :rtype: int
        """
        return self._audio_record_flag

    @audio_record_flag.setter
    def audio_record_flag(self, audio_record_flag):
        """Sets the audio_record_flag of this SelectNumberAndBindAXBRequest.


        :param audio_record_flag: The audio_record_flag of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :type: int
        """

        self._audio_record_flag = audio_record_flag

    @property
    def ax_conflict_axb_flag(self):
        """Gets the ax_conflict_axb_flag of this SelectNumberAndBindAXBRequest.  # noqa: E501


        :return: The ax_conflict_axb_flag of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :rtype: int
        """
        return self._ax_conflict_axb_flag

    @ax_conflict_axb_flag.setter
    def ax_conflict_axb_flag(self, ax_conflict_axb_flag):
        """Sets the ax_conflict_axb_flag of this SelectNumberAndBindAXBRequest.


        :param ax_conflict_axb_flag: The ax_conflict_axb_flag of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :type: int
        """

        self._ax_conflict_axb_flag = ax_conflict_axb_flag

    @property
    def call_display_type(self):
        """Gets the call_display_type of this SelectNumberAndBindAXBRequest.  # noqa: E501


        :return: The call_display_type of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :rtype: int
        """
        return self._call_display_type

    @call_display_type.setter
    def call_display_type(self, call_display_type):
        """Sets the call_display_type of this SelectNumberAndBindAXBRequest.


        :param call_display_type: The call_display_type of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :type: int
        """

        self._call_display_type = call_display_type

    @property
    def city_code(self):
        """Gets the city_code of this SelectNumberAndBindAXBRequest.  # noqa: E501


        :return: The city_code of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :rtype: str
        """
        return self._city_code

    @city_code.setter
    def city_code(self, city_code):
        """Sets the city_code of this SelectNumberAndBindAXBRequest.


        :param city_code: The city_code of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :type: str
        """

        self._city_code = city_code

    @property
    def city_code_by_phone_no(self):
        """Gets the city_code_by_phone_no of this SelectNumberAndBindAXBRequest.  # noqa: E501


        :return: The city_code_by_phone_no of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :rtype: str
        """
        return self._city_code_by_phone_no

    @city_code_by_phone_no.setter
    def city_code_by_phone_no(self, city_code_by_phone_no):
        """Sets the city_code_by_phone_no of this SelectNumberAndBindAXBRequest.


        :param city_code_by_phone_no: The city_code_by_phone_no of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["A", "B"]  # noqa: E501
        if (self._configuration.client_side_validation and
                city_code_by_phone_no not in allowed_values):
            raise ValueError(
                "Invalid value for `city_code_by_phone_no` ({0}), must be one of {1}"  # noqa: E501
                .format(city_code_by_phone_no, allowed_values)
            )

        self._city_code_by_phone_no = city_code_by_phone_no

    @property
    def degrade_city_list(self):
        """Gets the degrade_city_list of this SelectNumberAndBindAXBRequest.  # noqa: E501


        :return: The degrade_city_list of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._degrade_city_list

    @degrade_city_list.setter
    def degrade_city_list(self, degrade_city_list):
        """Sets the degrade_city_list of this SelectNumberAndBindAXBRequest.


        :param degrade_city_list: The degrade_city_list of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :type: list[str]
        """

        self._degrade_city_list = degrade_city_list

    @property
    def expire_time(self):
        """Gets the expire_time of this SelectNumberAndBindAXBRequest.  # noqa: E501


        :return: The expire_time of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :rtype: int
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this SelectNumberAndBindAXBRequest.


        :param expire_time: The expire_time of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and expire_time is None:
            raise ValueError("Invalid value for `expire_time`, must not be `None`")  # noqa: E501

        self._expire_time = expire_time

    @property
    def number_pool_no(self):
        """Gets the number_pool_no of this SelectNumberAndBindAXBRequest.  # noqa: E501


        :return: The number_pool_no of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :rtype: str
        """
        return self._number_pool_no

    @number_pool_no.setter
    def number_pool_no(self, number_pool_no):
        """Sets the number_pool_no of this SelectNumberAndBindAXBRequest.


        :param number_pool_no: The number_pool_no of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and number_pool_no is None:
            raise ValueError("Invalid value for `number_pool_no`, must not be `None`")  # noqa: E501

        self._number_pool_no = number_pool_no

    @property
    def out_id(self):
        """Gets the out_id of this SelectNumberAndBindAXBRequest.  # noqa: E501


        :return: The out_id of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :rtype: str
        """
        return self._out_id

    @out_id.setter
    def out_id(self, out_id):
        """Sets the out_id of this SelectNumberAndBindAXBRequest.


        :param out_id: The out_id of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :type: str
        """

        self._out_id = out_id

    @property
    def phone_no_a(self):
        """Gets the phone_no_a of this SelectNumberAndBindAXBRequest.  # noqa: E501


        :return: The phone_no_a of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_no_a

    @phone_no_a.setter
    def phone_no_a(self, phone_no_a):
        """Sets the phone_no_a of this SelectNumberAndBindAXBRequest.


        :param phone_no_a: The phone_no_a of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and phone_no_a is None:
            raise ValueError("Invalid value for `phone_no_a`, must not be `None`")  # noqa: E501

        self._phone_no_a = phone_no_a

    @property
    def phone_no_b(self):
        """Gets the phone_no_b of this SelectNumberAndBindAXBRequest.  # noqa: E501


        :return: The phone_no_b of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_no_b

    @phone_no_b.setter
    def phone_no_b(self, phone_no_b):
        """Sets the phone_no_b of this SelectNumberAndBindAXBRequest.


        :param phone_no_b: The phone_no_b of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :type: str
        """

        self._phone_no_b = phone_no_b

    @property
    def random_flag(self):
        """Gets the random_flag of this SelectNumberAndBindAXBRequest.  # noqa: E501


        :return: The random_flag of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :rtype: int
        """
        return self._random_flag

    @random_flag.setter
    def random_flag(self, random_flag):
        """Sets the random_flag of this SelectNumberAndBindAXBRequest.


        :param random_flag: The random_flag of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :type: int
        """

        self._random_flag = random_flag

    @property
    def user_data(self):
        """Gets the user_data of this SelectNumberAndBindAXBRequest.  # noqa: E501


        :return: The user_data of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this SelectNumberAndBindAXBRequest.


        :param user_data: The user_data of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :type: str
        """

        self._user_data = user_data

    @property
    def verify_flag(self):
        """Gets the verify_flag of this SelectNumberAndBindAXBRequest.  # noqa: E501


        :return: The verify_flag of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :rtype: int
        """
        return self._verify_flag

    @verify_flag.setter
    def verify_flag(self, verify_flag):
        """Sets the verify_flag of this SelectNumberAndBindAXBRequest.


        :param verify_flag: The verify_flag of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :type: int
        """

        self._verify_flag = verify_flag

    @property
    def voice_code(self):
        """Gets the voice_code of this SelectNumberAndBindAXBRequest.  # noqa: E501


        :return: The voice_code of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :rtype: str
        """
        return self._voice_code

    @voice_code.setter
    def voice_code(self, voice_code):
        """Sets the voice_code of this SelectNumberAndBindAXBRequest.


        :param voice_code: The voice_code of this SelectNumberAndBindAXBRequest.  # noqa: E501
        :type: str
        """

        self._voice_code = voice_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SelectNumberAndBindAXBRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SelectNumberAndBindAXBRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SelectNumberAndBindAXBRequest):
            return True

        return self.to_dict() != other.to_dict()
