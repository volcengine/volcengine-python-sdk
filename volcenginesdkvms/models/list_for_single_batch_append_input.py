# coding: utf-8

"""
    vms

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ListForSingleBatchAppendInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audio_post_url': 'str',
        'call_record_post_url': 'str',
        'ext': 'str',
        'forbid_time_list': 'list[str]',
        'number_list': 'list[str]',
        'number_pool_no': 'str',
        'number_type': 'int',
        'phone': 'str',
        'phone_param': 'str',
        'resource': 'str',
        'ring_again_interval': 'int',
        'ring_again_times': 'int',
        'select_number_rule': 'int',
        'single_open_id': 'str',
        'sms_config': 'str',
        'trigger_time': 'int',
        'type': 'int'
    }

    attribute_map = {
        'audio_post_url': 'AudioPostUrl',
        'call_record_post_url': 'CallRecordPostUrl',
        'ext': 'Ext',
        'forbid_time_list': 'ForbidTimeList',
        'number_list': 'NumberList',
        'number_pool_no': 'NumberPoolNo',
        'number_type': 'NumberType',
        'phone': 'Phone',
        'phone_param': 'PhoneParam',
        'resource': 'Resource',
        'ring_again_interval': 'RingAgainInterval',
        'ring_again_times': 'RingAgainTimes',
        'select_number_rule': 'SelectNumberRule',
        'single_open_id': 'SingleOpenId',
        'sms_config': 'SmsConfig',
        'trigger_time': 'TriggerTime',
        'type': 'Type'
    }

    def __init__(self, audio_post_url=None, call_record_post_url=None, ext=None, forbid_time_list=None, number_list=None, number_pool_no=None, number_type=None, phone=None, phone_param=None, resource=None, ring_again_interval=None, ring_again_times=None, select_number_rule=None, single_open_id=None, sms_config=None, trigger_time=None, type=None, _configuration=None):  # noqa: E501
        """ListForSingleBatchAppendInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._audio_post_url = None
        self._call_record_post_url = None
        self._ext = None
        self._forbid_time_list = None
        self._number_list = None
        self._number_pool_no = None
        self._number_type = None
        self._phone = None
        self._phone_param = None
        self._resource = None
        self._ring_again_interval = None
        self._ring_again_times = None
        self._select_number_rule = None
        self._single_open_id = None
        self._sms_config = None
        self._trigger_time = None
        self._type = None
        self.discriminator = None

        if audio_post_url is not None:
            self.audio_post_url = audio_post_url
        if call_record_post_url is not None:
            self.call_record_post_url = call_record_post_url
        if ext is not None:
            self.ext = ext
        if forbid_time_list is not None:
            self.forbid_time_list = forbid_time_list
        if number_list is not None:
            self.number_list = number_list
        if number_pool_no is not None:
            self.number_pool_no = number_pool_no
        if number_type is not None:
            self.number_type = number_type
        if phone is not None:
            self.phone = phone
        if phone_param is not None:
            self.phone_param = phone_param
        if resource is not None:
            self.resource = resource
        if ring_again_interval is not None:
            self.ring_again_interval = ring_again_interval
        if ring_again_times is not None:
            self.ring_again_times = ring_again_times
        if select_number_rule is not None:
            self.select_number_rule = select_number_rule
        if single_open_id is not None:
            self.single_open_id = single_open_id
        if sms_config is not None:
            self.sms_config = sms_config
        if trigger_time is not None:
            self.trigger_time = trigger_time
        if type is not None:
            self.type = type

    @property
    def audio_post_url(self):
        """Gets the audio_post_url of this ListForSingleBatchAppendInput.  # noqa: E501


        :return: The audio_post_url of this ListForSingleBatchAppendInput.  # noqa: E501
        :rtype: str
        """
        return self._audio_post_url

    @audio_post_url.setter
    def audio_post_url(self, audio_post_url):
        """Sets the audio_post_url of this ListForSingleBatchAppendInput.


        :param audio_post_url: The audio_post_url of this ListForSingleBatchAppendInput.  # noqa: E501
        :type: str
        """

        self._audio_post_url = audio_post_url

    @property
    def call_record_post_url(self):
        """Gets the call_record_post_url of this ListForSingleBatchAppendInput.  # noqa: E501


        :return: The call_record_post_url of this ListForSingleBatchAppendInput.  # noqa: E501
        :rtype: str
        """
        return self._call_record_post_url

    @call_record_post_url.setter
    def call_record_post_url(self, call_record_post_url):
        """Sets the call_record_post_url of this ListForSingleBatchAppendInput.


        :param call_record_post_url: The call_record_post_url of this ListForSingleBatchAppendInput.  # noqa: E501
        :type: str
        """

        self._call_record_post_url = call_record_post_url

    @property
    def ext(self):
        """Gets the ext of this ListForSingleBatchAppendInput.  # noqa: E501


        :return: The ext of this ListForSingleBatchAppendInput.  # noqa: E501
        :rtype: str
        """
        return self._ext

    @ext.setter
    def ext(self, ext):
        """Sets the ext of this ListForSingleBatchAppendInput.


        :param ext: The ext of this ListForSingleBatchAppendInput.  # noqa: E501
        :type: str
        """

        self._ext = ext

    @property
    def forbid_time_list(self):
        """Gets the forbid_time_list of this ListForSingleBatchAppendInput.  # noqa: E501


        :return: The forbid_time_list of this ListForSingleBatchAppendInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._forbid_time_list

    @forbid_time_list.setter
    def forbid_time_list(self, forbid_time_list):
        """Sets the forbid_time_list of this ListForSingleBatchAppendInput.


        :param forbid_time_list: The forbid_time_list of this ListForSingleBatchAppendInput.  # noqa: E501
        :type: list[str]
        """

        self._forbid_time_list = forbid_time_list

    @property
    def number_list(self):
        """Gets the number_list of this ListForSingleBatchAppendInput.  # noqa: E501


        :return: The number_list of this ListForSingleBatchAppendInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._number_list

    @number_list.setter
    def number_list(self, number_list):
        """Sets the number_list of this ListForSingleBatchAppendInput.


        :param number_list: The number_list of this ListForSingleBatchAppendInput.  # noqa: E501
        :type: list[str]
        """

        self._number_list = number_list

    @property
    def number_pool_no(self):
        """Gets the number_pool_no of this ListForSingleBatchAppendInput.  # noqa: E501


        :return: The number_pool_no of this ListForSingleBatchAppendInput.  # noqa: E501
        :rtype: str
        """
        return self._number_pool_no

    @number_pool_no.setter
    def number_pool_no(self, number_pool_no):
        """Sets the number_pool_no of this ListForSingleBatchAppendInput.


        :param number_pool_no: The number_pool_no of this ListForSingleBatchAppendInput.  # noqa: E501
        :type: str
        """

        self._number_pool_no = number_pool_no

    @property
    def number_type(self):
        """Gets the number_type of this ListForSingleBatchAppendInput.  # noqa: E501


        :return: The number_type of this ListForSingleBatchAppendInput.  # noqa: E501
        :rtype: int
        """
        return self._number_type

    @number_type.setter
    def number_type(self, number_type):
        """Sets the number_type of this ListForSingleBatchAppendInput.


        :param number_type: The number_type of this ListForSingleBatchAppendInput.  # noqa: E501
        :type: int
        """

        self._number_type = number_type

    @property
    def phone(self):
        """Gets the phone of this ListForSingleBatchAppendInput.  # noqa: E501


        :return: The phone of this ListForSingleBatchAppendInput.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ListForSingleBatchAppendInput.


        :param phone: The phone of this ListForSingleBatchAppendInput.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def phone_param(self):
        """Gets the phone_param of this ListForSingleBatchAppendInput.  # noqa: E501


        :return: The phone_param of this ListForSingleBatchAppendInput.  # noqa: E501
        :rtype: str
        """
        return self._phone_param

    @phone_param.setter
    def phone_param(self, phone_param):
        """Sets the phone_param of this ListForSingleBatchAppendInput.


        :param phone_param: The phone_param of this ListForSingleBatchAppendInput.  # noqa: E501
        :type: str
        """

        self._phone_param = phone_param

    @property
    def resource(self):
        """Gets the resource of this ListForSingleBatchAppendInput.  # noqa: E501


        :return: The resource of this ListForSingleBatchAppendInput.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this ListForSingleBatchAppendInput.


        :param resource: The resource of this ListForSingleBatchAppendInput.  # noqa: E501
        :type: str
        """

        self._resource = resource

    @property
    def ring_again_interval(self):
        """Gets the ring_again_interval of this ListForSingleBatchAppendInput.  # noqa: E501


        :return: The ring_again_interval of this ListForSingleBatchAppendInput.  # noqa: E501
        :rtype: int
        """
        return self._ring_again_interval

    @ring_again_interval.setter
    def ring_again_interval(self, ring_again_interval):
        """Sets the ring_again_interval of this ListForSingleBatchAppendInput.


        :param ring_again_interval: The ring_again_interval of this ListForSingleBatchAppendInput.  # noqa: E501
        :type: int
        """

        self._ring_again_interval = ring_again_interval

    @property
    def ring_again_times(self):
        """Gets the ring_again_times of this ListForSingleBatchAppendInput.  # noqa: E501


        :return: The ring_again_times of this ListForSingleBatchAppendInput.  # noqa: E501
        :rtype: int
        """
        return self._ring_again_times

    @ring_again_times.setter
    def ring_again_times(self, ring_again_times):
        """Sets the ring_again_times of this ListForSingleBatchAppendInput.


        :param ring_again_times: The ring_again_times of this ListForSingleBatchAppendInput.  # noqa: E501
        :type: int
        """

        self._ring_again_times = ring_again_times

    @property
    def select_number_rule(self):
        """Gets the select_number_rule of this ListForSingleBatchAppendInput.  # noqa: E501


        :return: The select_number_rule of this ListForSingleBatchAppendInput.  # noqa: E501
        :rtype: int
        """
        return self._select_number_rule

    @select_number_rule.setter
    def select_number_rule(self, select_number_rule):
        """Sets the select_number_rule of this ListForSingleBatchAppendInput.


        :param select_number_rule: The select_number_rule of this ListForSingleBatchAppendInput.  # noqa: E501
        :type: int
        """

        self._select_number_rule = select_number_rule

    @property
    def single_open_id(self):
        """Gets the single_open_id of this ListForSingleBatchAppendInput.  # noqa: E501


        :return: The single_open_id of this ListForSingleBatchAppendInput.  # noqa: E501
        :rtype: str
        """
        return self._single_open_id

    @single_open_id.setter
    def single_open_id(self, single_open_id):
        """Sets the single_open_id of this ListForSingleBatchAppendInput.


        :param single_open_id: The single_open_id of this ListForSingleBatchAppendInput.  # noqa: E501
        :type: str
        """

        self._single_open_id = single_open_id

    @property
    def sms_config(self):
        """Gets the sms_config of this ListForSingleBatchAppendInput.  # noqa: E501


        :return: The sms_config of this ListForSingleBatchAppendInput.  # noqa: E501
        :rtype: str
        """
        return self._sms_config

    @sms_config.setter
    def sms_config(self, sms_config):
        """Sets the sms_config of this ListForSingleBatchAppendInput.


        :param sms_config: The sms_config of this ListForSingleBatchAppendInput.  # noqa: E501
        :type: str
        """

        self._sms_config = sms_config

    @property
    def trigger_time(self):
        """Gets the trigger_time of this ListForSingleBatchAppendInput.  # noqa: E501


        :return: The trigger_time of this ListForSingleBatchAppendInput.  # noqa: E501
        :rtype: int
        """
        return self._trigger_time

    @trigger_time.setter
    def trigger_time(self, trigger_time):
        """Sets the trigger_time of this ListForSingleBatchAppendInput.


        :param trigger_time: The trigger_time of this ListForSingleBatchAppendInput.  # noqa: E501
        :type: int
        """

        self._trigger_time = trigger_time

    @property
    def type(self):
        """Gets the type of this ListForSingleBatchAppendInput.  # noqa: E501


        :return: The type of this ListForSingleBatchAppendInput.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ListForSingleBatchAppendInput.


        :param type: The type of this ListForSingleBatchAppendInput.  # noqa: E501
        :type: int
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListForSingleBatchAppendInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListForSingleBatchAppendInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListForSingleBatchAppendInput):
            return True

        return self.to_dict() != other.to_dict()
