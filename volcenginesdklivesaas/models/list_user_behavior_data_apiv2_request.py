# coding: utf-8

"""
    livesaas

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ListUserBehaviorDataAPIV2Request(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activity_id': 'int',
        'channel': 'str',
        'end_time': 'int',
        'external_user_id': 'str',
        'extra': 'str',
        'inviter_external_id': 'str',
        'inviter_id': 'int',
        'is_merge': 'int',
        'is_merge_user_id': 'int',
        'name': 'str',
        'page_item_count': 'int',
        'page_no': 'int',
        'play_status': 'int',
        'scroll_id': 'str',
        'start_time': 'int',
        'user_id': 'int'
    }

    attribute_map = {
        'activity_id': 'ActivityId',
        'channel': 'Channel',
        'end_time': 'EndTime',
        'external_user_id': 'ExternalUserId',
        'extra': 'Extra',
        'inviter_external_id': 'InviterExternalId',
        'inviter_id': 'InviterId',
        'is_merge': 'IsMerge',
        'is_merge_user_id': 'IsMergeUserId',
        'name': 'Name',
        'page_item_count': 'PageItemCount',
        'page_no': 'PageNo',
        'play_status': 'PlayStatus',
        'scroll_id': 'ScrollId',
        'start_time': 'StartTime',
        'user_id': 'UserId'
    }

    def __init__(self, activity_id=None, channel=None, end_time=None, external_user_id=None, extra=None, inviter_external_id=None, inviter_id=None, is_merge=None, is_merge_user_id=None, name=None, page_item_count=None, page_no=None, play_status=None, scroll_id=None, start_time=None, user_id=None, _configuration=None):  # noqa: E501
        """ListUserBehaviorDataAPIV2Request - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._activity_id = None
        self._channel = None
        self._end_time = None
        self._external_user_id = None
        self._extra = None
        self._inviter_external_id = None
        self._inviter_id = None
        self._is_merge = None
        self._is_merge_user_id = None
        self._name = None
        self._page_item_count = None
        self._page_no = None
        self._play_status = None
        self._scroll_id = None
        self._start_time = None
        self._user_id = None
        self.discriminator = None

        self.activity_id = activity_id
        if channel is not None:
            self.channel = channel
        if end_time is not None:
            self.end_time = end_time
        if external_user_id is not None:
            self.external_user_id = external_user_id
        if extra is not None:
            self.extra = extra
        if inviter_external_id is not None:
            self.inviter_external_id = inviter_external_id
        if inviter_id is not None:
            self.inviter_id = inviter_id
        if is_merge is not None:
            self.is_merge = is_merge
        if is_merge_user_id is not None:
            self.is_merge_user_id = is_merge_user_id
        if name is not None:
            self.name = name
        if page_item_count is not None:
            self.page_item_count = page_item_count
        if page_no is not None:
            self.page_no = page_no
        if play_status is not None:
            self.play_status = play_status
        if scroll_id is not None:
            self.scroll_id = scroll_id
        if start_time is not None:
            self.start_time = start_time
        if user_id is not None:
            self.user_id = user_id

    @property
    def activity_id(self):
        """Gets the activity_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501


        :return: The activity_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :rtype: int
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this ListUserBehaviorDataAPIV2Request.


        :param activity_id: The activity_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and activity_id is None:
            raise ValueError("Invalid value for `activity_id`, must not be `None`")  # noqa: E501

        self._activity_id = activity_id

    @property
    def channel(self):
        """Gets the channel of this ListUserBehaviorDataAPIV2Request.  # noqa: E501


        :return: The channel of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this ListUserBehaviorDataAPIV2Request.


        :param channel: The channel of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :type: str
        """

        self._channel = channel

    @property
    def end_time(self):
        """Gets the end_time of this ListUserBehaviorDataAPIV2Request.  # noqa: E501


        :return: The end_time of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ListUserBehaviorDataAPIV2Request.


        :param end_time: The end_time of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def external_user_id(self):
        """Gets the external_user_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501


        :return: The external_user_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :rtype: str
        """
        return self._external_user_id

    @external_user_id.setter
    def external_user_id(self, external_user_id):
        """Sets the external_user_id of this ListUserBehaviorDataAPIV2Request.


        :param external_user_id: The external_user_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :type: str
        """

        self._external_user_id = external_user_id

    @property
    def extra(self):
        """Gets the extra of this ListUserBehaviorDataAPIV2Request.  # noqa: E501


        :return: The extra of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this ListUserBehaviorDataAPIV2Request.


        :param extra: The extra of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :type: str
        """

        self._extra = extra

    @property
    def inviter_external_id(self):
        """Gets the inviter_external_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501


        :return: The inviter_external_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :rtype: str
        """
        return self._inviter_external_id

    @inviter_external_id.setter
    def inviter_external_id(self, inviter_external_id):
        """Sets the inviter_external_id of this ListUserBehaviorDataAPIV2Request.


        :param inviter_external_id: The inviter_external_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :type: str
        """

        self._inviter_external_id = inviter_external_id

    @property
    def inviter_id(self):
        """Gets the inviter_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501


        :return: The inviter_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :rtype: int
        """
        return self._inviter_id

    @inviter_id.setter
    def inviter_id(self, inviter_id):
        """Sets the inviter_id of this ListUserBehaviorDataAPIV2Request.


        :param inviter_id: The inviter_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :type: int
        """

        self._inviter_id = inviter_id

    @property
    def is_merge(self):
        """Gets the is_merge of this ListUserBehaviorDataAPIV2Request.  # noqa: E501


        :return: The is_merge of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :rtype: int
        """
        return self._is_merge

    @is_merge.setter
    def is_merge(self, is_merge):
        """Sets the is_merge of this ListUserBehaviorDataAPIV2Request.


        :param is_merge: The is_merge of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :type: int
        """

        self._is_merge = is_merge

    @property
    def is_merge_user_id(self):
        """Gets the is_merge_user_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501


        :return: The is_merge_user_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :rtype: int
        """
        return self._is_merge_user_id

    @is_merge_user_id.setter
    def is_merge_user_id(self, is_merge_user_id):
        """Sets the is_merge_user_id of this ListUserBehaviorDataAPIV2Request.


        :param is_merge_user_id: The is_merge_user_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :type: int
        """

        self._is_merge_user_id = is_merge_user_id

    @property
    def name(self):
        """Gets the name of this ListUserBehaviorDataAPIV2Request.  # noqa: E501


        :return: The name of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ListUserBehaviorDataAPIV2Request.


        :param name: The name of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def page_item_count(self):
        """Gets the page_item_count of this ListUserBehaviorDataAPIV2Request.  # noqa: E501


        :return: The page_item_count of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :rtype: int
        """
        return self._page_item_count

    @page_item_count.setter
    def page_item_count(self, page_item_count):
        """Sets the page_item_count of this ListUserBehaviorDataAPIV2Request.


        :param page_item_count: The page_item_count of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :type: int
        """

        self._page_item_count = page_item_count

    @property
    def page_no(self):
        """Gets the page_no of this ListUserBehaviorDataAPIV2Request.  # noqa: E501


        :return: The page_no of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :rtype: int
        """
        return self._page_no

    @page_no.setter
    def page_no(self, page_no):
        """Sets the page_no of this ListUserBehaviorDataAPIV2Request.


        :param page_no: The page_no of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :type: int
        """

        self._page_no = page_no

    @property
    def play_status(self):
        """Gets the play_status of this ListUserBehaviorDataAPIV2Request.  # noqa: E501


        :return: The play_status of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :rtype: int
        """
        return self._play_status

    @play_status.setter
    def play_status(self, play_status):
        """Sets the play_status of this ListUserBehaviorDataAPIV2Request.


        :param play_status: The play_status of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :type: int
        """

        self._play_status = play_status

    @property
    def scroll_id(self):
        """Gets the scroll_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501


        :return: The scroll_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :rtype: str
        """
        return self._scroll_id

    @scroll_id.setter
    def scroll_id(self, scroll_id):
        """Sets the scroll_id of this ListUserBehaviorDataAPIV2Request.


        :param scroll_id: The scroll_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :type: str
        """

        self._scroll_id = scroll_id

    @property
    def start_time(self):
        """Gets the start_time of this ListUserBehaviorDataAPIV2Request.  # noqa: E501


        :return: The start_time of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ListUserBehaviorDataAPIV2Request.


        :param start_time: The start_time of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def user_id(self):
        """Gets the user_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501


        :return: The user_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ListUserBehaviorDataAPIV2Request.


        :param user_id: The user_id of this ListUserBehaviorDataAPIV2Request.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListUserBehaviorDataAPIV2Request, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListUserBehaviorDataAPIV2Request):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListUserBehaviorDataAPIV2Request):
            return True

        return self.to_dict() != other.to_dict()
