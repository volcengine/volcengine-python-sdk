# coding: utf-8

"""
    livesaas

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class AutoStartConfigForUpdateActivityBasicConfigAPIInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'recurrence_rule': 'str',
        'repeat_deadline': 'int',
        'repeat_type': 'int'
    }

    attribute_map = {
        'recurrence_rule': 'RecurrenceRule',
        'repeat_deadline': 'RepeatDeadline',
        'repeat_type': 'RepeatType'
    }

    def __init__(self, recurrence_rule=None, repeat_deadline=None, repeat_type=None, _configuration=None):  # noqa: E501
        """AutoStartConfigForUpdateActivityBasicConfigAPIInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._recurrence_rule = None
        self._repeat_deadline = None
        self._repeat_type = None
        self.discriminator = None

        if recurrence_rule is not None:
            self.recurrence_rule = recurrence_rule
        if repeat_deadline is not None:
            self.repeat_deadline = repeat_deadline
        if repeat_type is not None:
            self.repeat_type = repeat_type

    @property
    def recurrence_rule(self):
        """Gets the recurrence_rule of this AutoStartConfigForUpdateActivityBasicConfigAPIInput.  # noqa: E501


        :return: The recurrence_rule of this AutoStartConfigForUpdateActivityBasicConfigAPIInput.  # noqa: E501
        :rtype: str
        """
        return self._recurrence_rule

    @recurrence_rule.setter
    def recurrence_rule(self, recurrence_rule):
        """Sets the recurrence_rule of this AutoStartConfigForUpdateActivityBasicConfigAPIInput.


        :param recurrence_rule: The recurrence_rule of this AutoStartConfigForUpdateActivityBasicConfigAPIInput.  # noqa: E501
        :type: str
        """

        self._recurrence_rule = recurrence_rule

    @property
    def repeat_deadline(self):
        """Gets the repeat_deadline of this AutoStartConfigForUpdateActivityBasicConfigAPIInput.  # noqa: E501


        :return: The repeat_deadline of this AutoStartConfigForUpdateActivityBasicConfigAPIInput.  # noqa: E501
        :rtype: int
        """
        return self._repeat_deadline

    @repeat_deadline.setter
    def repeat_deadline(self, repeat_deadline):
        """Sets the repeat_deadline of this AutoStartConfigForUpdateActivityBasicConfigAPIInput.


        :param repeat_deadline: The repeat_deadline of this AutoStartConfigForUpdateActivityBasicConfigAPIInput.  # noqa: E501
        :type: int
        """

        self._repeat_deadline = repeat_deadline

    @property
    def repeat_type(self):
        """Gets the repeat_type of this AutoStartConfigForUpdateActivityBasicConfigAPIInput.  # noqa: E501


        :return: The repeat_type of this AutoStartConfigForUpdateActivityBasicConfigAPIInput.  # noqa: E501
        :rtype: int
        """
        return self._repeat_type

    @repeat_type.setter
    def repeat_type(self, repeat_type):
        """Sets the repeat_type of this AutoStartConfigForUpdateActivityBasicConfigAPIInput.


        :param repeat_type: The repeat_type of this AutoStartConfigForUpdateActivityBasicConfigAPIInput.  # noqa: E501
        :type: int
        """

        self._repeat_type = repeat_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutoStartConfigForUpdateActivityBasicConfigAPIInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutoStartConfigForUpdateActivityBasicConfigAPIInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AutoStartConfigForUpdateActivityBasicConfigAPIInput):
            return True

        return self.to_dict() != other.to_dict()
