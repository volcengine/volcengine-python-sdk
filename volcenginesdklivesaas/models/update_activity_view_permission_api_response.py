# coding: utf-8

"""
    livesaas

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class UpdateActivityViewPermissionAPIResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activity_id': 'int',
        'sub_view_restriction_info': 'SubViewRestrictionInfoForUpdateActivityViewPermissionAPIOutput',
        'view_restriction_info': 'ViewRestrictionInfoForUpdateActivityViewPermissionAPIOutput'
    }

    attribute_map = {
        'activity_id': 'ActivityId',
        'sub_view_restriction_info': 'SubViewRestrictionInfo',
        'view_restriction_info': 'ViewRestrictionInfo'
    }

    def __init__(self, activity_id=None, sub_view_restriction_info=None, view_restriction_info=None, _configuration=None):  # noqa: E501
        """UpdateActivityViewPermissionAPIResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._activity_id = None
        self._sub_view_restriction_info = None
        self._view_restriction_info = None
        self.discriminator = None

        if activity_id is not None:
            self.activity_id = activity_id
        if sub_view_restriction_info is not None:
            self.sub_view_restriction_info = sub_view_restriction_info
        if view_restriction_info is not None:
            self.view_restriction_info = view_restriction_info

    @property
    def activity_id(self):
        """Gets the activity_id of this UpdateActivityViewPermissionAPIResponse.  # noqa: E501


        :return: The activity_id of this UpdateActivityViewPermissionAPIResponse.  # noqa: E501
        :rtype: int
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this UpdateActivityViewPermissionAPIResponse.


        :param activity_id: The activity_id of this UpdateActivityViewPermissionAPIResponse.  # noqa: E501
        :type: int
        """

        self._activity_id = activity_id

    @property
    def sub_view_restriction_info(self):
        """Gets the sub_view_restriction_info of this UpdateActivityViewPermissionAPIResponse.  # noqa: E501


        :return: The sub_view_restriction_info of this UpdateActivityViewPermissionAPIResponse.  # noqa: E501
        :rtype: SubViewRestrictionInfoForUpdateActivityViewPermissionAPIOutput
        """
        return self._sub_view_restriction_info

    @sub_view_restriction_info.setter
    def sub_view_restriction_info(self, sub_view_restriction_info):
        """Sets the sub_view_restriction_info of this UpdateActivityViewPermissionAPIResponse.


        :param sub_view_restriction_info: The sub_view_restriction_info of this UpdateActivityViewPermissionAPIResponse.  # noqa: E501
        :type: SubViewRestrictionInfoForUpdateActivityViewPermissionAPIOutput
        """

        self._sub_view_restriction_info = sub_view_restriction_info

    @property
    def view_restriction_info(self):
        """Gets the view_restriction_info of this UpdateActivityViewPermissionAPIResponse.  # noqa: E501


        :return: The view_restriction_info of this UpdateActivityViewPermissionAPIResponse.  # noqa: E501
        :rtype: ViewRestrictionInfoForUpdateActivityViewPermissionAPIOutput
        """
        return self._view_restriction_info

    @view_restriction_info.setter
    def view_restriction_info(self, view_restriction_info):
        """Sets the view_restriction_info of this UpdateActivityViewPermissionAPIResponse.


        :param view_restriction_info: The view_restriction_info of this UpdateActivityViewPermissionAPIResponse.  # noqa: E501
        :type: ViewRestrictionInfoForUpdateActivityViewPermissionAPIOutput
        """

        self._view_restriction_info = view_restriction_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateActivityViewPermissionAPIResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateActivityViewPermissionAPIResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateActivityViewPermissionAPIResponse):
            return True

        return self.to_dict() != other.to_dict()
