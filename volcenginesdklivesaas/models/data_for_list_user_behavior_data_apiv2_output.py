# coding: utf-8

"""
    livesaas

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DataForListUserBehaviorDataAPIV2Output(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_time': 'str',
        'avatar_url': 'str',
        'channel_name': 'str',
        'check_in_number': 'int',
        'comment_counts': 'int',
        'cookie': 'int',
        'employee_no': 'str',
        'external_user_id': 'str',
        'extra': 'str',
        'ip': 'str',
        'invite_code': 'str',
        'inviter_avatar': 'str',
        'inviter_external_id': 'str',
        'inviter_id': 'int',
        'inviter_name': 'str',
        'join_at': 'list[int]',
        'leave_at': 'list[int]',
        'level_name': 'str',
        'mute_number': 'int',
        'no_interact_number': 'int',
        'os': 'str',
        'region': 'str',
        'shift_screen_number': 'int',
        'silence_status': 'int',
        'thumb_up_number': 'int',
        'user_credit': 'int',
        'user_device': 'list[str]',
        'user_id': 'int',
        'user_name': 'str',
        'user_tel': 'str',
        'view_duration': 'int',
        'viewer_level_order': 'int',
        'watch_time': 'int'
    }

    attribute_map = {
        'access_time': 'AccessTime',
        'avatar_url': 'AvatarUrl',
        'channel_name': 'ChannelName',
        'check_in_number': 'CheckInNumber',
        'comment_counts': 'CommentCounts',
        'cookie': 'Cookie',
        'employee_no': 'EmployeeNo',
        'external_user_id': 'ExternalUserId',
        'extra': 'Extra',
        'ip': 'IP',
        'invite_code': 'InviteCode',
        'inviter_avatar': 'InviterAvatar',
        'inviter_external_id': 'InviterExternalId',
        'inviter_id': 'InviterId',
        'inviter_name': 'InviterName',
        'join_at': 'JoinAt',
        'leave_at': 'LeaveAt',
        'level_name': 'LevelName',
        'mute_number': 'MuteNumber',
        'no_interact_number': 'NoInteractNumber',
        'os': 'Os',
        'region': 'Region',
        'shift_screen_number': 'ShiftScreenNumber',
        'silence_status': 'SilenceStatus',
        'thumb_up_number': 'ThumbUpNumber',
        'user_credit': 'UserCredit',
        'user_device': 'UserDevice',
        'user_id': 'UserId',
        'user_name': 'UserName',
        'user_tel': 'UserTel',
        'view_duration': 'ViewDuration',
        'viewer_level_order': 'ViewerLevelOrder',
        'watch_time': 'WatchTime'
    }

    def __init__(self, access_time=None, avatar_url=None, channel_name=None, check_in_number=None, comment_counts=None, cookie=None, employee_no=None, external_user_id=None, extra=None, ip=None, invite_code=None, inviter_avatar=None, inviter_external_id=None, inviter_id=None, inviter_name=None, join_at=None, leave_at=None, level_name=None, mute_number=None, no_interact_number=None, os=None, region=None, shift_screen_number=None, silence_status=None, thumb_up_number=None, user_credit=None, user_device=None, user_id=None, user_name=None, user_tel=None, view_duration=None, viewer_level_order=None, watch_time=None, _configuration=None):  # noqa: E501
        """DataForListUserBehaviorDataAPIV2Output - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_time = None
        self._avatar_url = None
        self._channel_name = None
        self._check_in_number = None
        self._comment_counts = None
        self._cookie = None
        self._employee_no = None
        self._external_user_id = None
        self._extra = None
        self._ip = None
        self._invite_code = None
        self._inviter_avatar = None
        self._inviter_external_id = None
        self._inviter_id = None
        self._inviter_name = None
        self._join_at = None
        self._leave_at = None
        self._level_name = None
        self._mute_number = None
        self._no_interact_number = None
        self._os = None
        self._region = None
        self._shift_screen_number = None
        self._silence_status = None
        self._thumb_up_number = None
        self._user_credit = None
        self._user_device = None
        self._user_id = None
        self._user_name = None
        self._user_tel = None
        self._view_duration = None
        self._viewer_level_order = None
        self._watch_time = None
        self.discriminator = None

        if access_time is not None:
            self.access_time = access_time
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if channel_name is not None:
            self.channel_name = channel_name
        if check_in_number is not None:
            self.check_in_number = check_in_number
        if comment_counts is not None:
            self.comment_counts = comment_counts
        if cookie is not None:
            self.cookie = cookie
        if employee_no is not None:
            self.employee_no = employee_no
        if external_user_id is not None:
            self.external_user_id = external_user_id
        if extra is not None:
            self.extra = extra
        if ip is not None:
            self.ip = ip
        if invite_code is not None:
            self.invite_code = invite_code
        if inviter_avatar is not None:
            self.inviter_avatar = inviter_avatar
        if inviter_external_id is not None:
            self.inviter_external_id = inviter_external_id
        if inviter_id is not None:
            self.inviter_id = inviter_id
        if inviter_name is not None:
            self.inviter_name = inviter_name
        if join_at is not None:
            self.join_at = join_at
        if leave_at is not None:
            self.leave_at = leave_at
        if level_name is not None:
            self.level_name = level_name
        if mute_number is not None:
            self.mute_number = mute_number
        if no_interact_number is not None:
            self.no_interact_number = no_interact_number
        if os is not None:
            self.os = os
        if region is not None:
            self.region = region
        if shift_screen_number is not None:
            self.shift_screen_number = shift_screen_number
        if silence_status is not None:
            self.silence_status = silence_status
        if thumb_up_number is not None:
            self.thumb_up_number = thumb_up_number
        if user_credit is not None:
            self.user_credit = user_credit
        if user_device is not None:
            self.user_device = user_device
        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name
        if user_tel is not None:
            self.user_tel = user_tel
        if view_duration is not None:
            self.view_duration = view_duration
        if viewer_level_order is not None:
            self.viewer_level_order = viewer_level_order
        if watch_time is not None:
            self.watch_time = watch_time

    @property
    def access_time(self):
        """Gets the access_time of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The access_time of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: str
        """
        return self._access_time

    @access_time.setter
    def access_time(self, access_time):
        """Sets the access_time of this DataForListUserBehaviorDataAPIV2Output.


        :param access_time: The access_time of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: str
        """

        self._access_time = access_time

    @property
    def avatar_url(self):
        """Gets the avatar_url of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The avatar_url of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this DataForListUserBehaviorDataAPIV2Output.


        :param avatar_url: The avatar_url of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def channel_name(self):
        """Gets the channel_name of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The channel_name of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this DataForListUserBehaviorDataAPIV2Output.


        :param channel_name: The channel_name of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: str
        """

        self._channel_name = channel_name

    @property
    def check_in_number(self):
        """Gets the check_in_number of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The check_in_number of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: int
        """
        return self._check_in_number

    @check_in_number.setter
    def check_in_number(self, check_in_number):
        """Sets the check_in_number of this DataForListUserBehaviorDataAPIV2Output.


        :param check_in_number: The check_in_number of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: int
        """

        self._check_in_number = check_in_number

    @property
    def comment_counts(self):
        """Gets the comment_counts of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The comment_counts of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: int
        """
        return self._comment_counts

    @comment_counts.setter
    def comment_counts(self, comment_counts):
        """Sets the comment_counts of this DataForListUserBehaviorDataAPIV2Output.


        :param comment_counts: The comment_counts of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: int
        """

        self._comment_counts = comment_counts

    @property
    def cookie(self):
        """Gets the cookie of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The cookie of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: int
        """
        return self._cookie

    @cookie.setter
    def cookie(self, cookie):
        """Sets the cookie of this DataForListUserBehaviorDataAPIV2Output.


        :param cookie: The cookie of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: int
        """

        self._cookie = cookie

    @property
    def employee_no(self):
        """Gets the employee_no of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The employee_no of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: str
        """
        return self._employee_no

    @employee_no.setter
    def employee_no(self, employee_no):
        """Sets the employee_no of this DataForListUserBehaviorDataAPIV2Output.


        :param employee_no: The employee_no of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: str
        """

        self._employee_no = employee_no

    @property
    def external_user_id(self):
        """Gets the external_user_id of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The external_user_id of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: str
        """
        return self._external_user_id

    @external_user_id.setter
    def external_user_id(self, external_user_id):
        """Sets the external_user_id of this DataForListUserBehaviorDataAPIV2Output.


        :param external_user_id: The external_user_id of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: str
        """

        self._external_user_id = external_user_id

    @property
    def extra(self):
        """Gets the extra of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The extra of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this DataForListUserBehaviorDataAPIV2Output.


        :param extra: The extra of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: str
        """

        self._extra = extra

    @property
    def ip(self):
        """Gets the ip of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The ip of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this DataForListUserBehaviorDataAPIV2Output.


        :param ip: The ip of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def invite_code(self):
        """Gets the invite_code of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The invite_code of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: str
        """
        return self._invite_code

    @invite_code.setter
    def invite_code(self, invite_code):
        """Sets the invite_code of this DataForListUserBehaviorDataAPIV2Output.


        :param invite_code: The invite_code of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: str
        """

        self._invite_code = invite_code

    @property
    def inviter_avatar(self):
        """Gets the inviter_avatar of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The inviter_avatar of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: str
        """
        return self._inviter_avatar

    @inviter_avatar.setter
    def inviter_avatar(self, inviter_avatar):
        """Sets the inviter_avatar of this DataForListUserBehaviorDataAPIV2Output.


        :param inviter_avatar: The inviter_avatar of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: str
        """

        self._inviter_avatar = inviter_avatar

    @property
    def inviter_external_id(self):
        """Gets the inviter_external_id of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The inviter_external_id of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: str
        """
        return self._inviter_external_id

    @inviter_external_id.setter
    def inviter_external_id(self, inviter_external_id):
        """Sets the inviter_external_id of this DataForListUserBehaviorDataAPIV2Output.


        :param inviter_external_id: The inviter_external_id of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: str
        """

        self._inviter_external_id = inviter_external_id

    @property
    def inviter_id(self):
        """Gets the inviter_id of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The inviter_id of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: int
        """
        return self._inviter_id

    @inviter_id.setter
    def inviter_id(self, inviter_id):
        """Sets the inviter_id of this DataForListUserBehaviorDataAPIV2Output.


        :param inviter_id: The inviter_id of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: int
        """

        self._inviter_id = inviter_id

    @property
    def inviter_name(self):
        """Gets the inviter_name of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The inviter_name of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: str
        """
        return self._inviter_name

    @inviter_name.setter
    def inviter_name(self, inviter_name):
        """Sets the inviter_name of this DataForListUserBehaviorDataAPIV2Output.


        :param inviter_name: The inviter_name of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: str
        """

        self._inviter_name = inviter_name

    @property
    def join_at(self):
        """Gets the join_at of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The join_at of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: list[int]
        """
        return self._join_at

    @join_at.setter
    def join_at(self, join_at):
        """Sets the join_at of this DataForListUserBehaviorDataAPIV2Output.


        :param join_at: The join_at of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: list[int]
        """

        self._join_at = join_at

    @property
    def leave_at(self):
        """Gets the leave_at of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The leave_at of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: list[int]
        """
        return self._leave_at

    @leave_at.setter
    def leave_at(self, leave_at):
        """Sets the leave_at of this DataForListUserBehaviorDataAPIV2Output.


        :param leave_at: The leave_at of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: list[int]
        """

        self._leave_at = leave_at

    @property
    def level_name(self):
        """Gets the level_name of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The level_name of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: str
        """
        return self._level_name

    @level_name.setter
    def level_name(self, level_name):
        """Sets the level_name of this DataForListUserBehaviorDataAPIV2Output.


        :param level_name: The level_name of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: str
        """

        self._level_name = level_name

    @property
    def mute_number(self):
        """Gets the mute_number of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The mute_number of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: int
        """
        return self._mute_number

    @mute_number.setter
    def mute_number(self, mute_number):
        """Sets the mute_number of this DataForListUserBehaviorDataAPIV2Output.


        :param mute_number: The mute_number of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: int
        """

        self._mute_number = mute_number

    @property
    def no_interact_number(self):
        """Gets the no_interact_number of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The no_interact_number of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: int
        """
        return self._no_interact_number

    @no_interact_number.setter
    def no_interact_number(self, no_interact_number):
        """Sets the no_interact_number of this DataForListUserBehaviorDataAPIV2Output.


        :param no_interact_number: The no_interact_number of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: int
        """

        self._no_interact_number = no_interact_number

    @property
    def os(self):
        """Gets the os of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The os of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this DataForListUserBehaviorDataAPIV2Output.


        :param os: The os of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: str
        """

        self._os = os

    @property
    def region(self):
        """Gets the region of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The region of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this DataForListUserBehaviorDataAPIV2Output.


        :param region: The region of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def shift_screen_number(self):
        """Gets the shift_screen_number of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The shift_screen_number of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: int
        """
        return self._shift_screen_number

    @shift_screen_number.setter
    def shift_screen_number(self, shift_screen_number):
        """Sets the shift_screen_number of this DataForListUserBehaviorDataAPIV2Output.


        :param shift_screen_number: The shift_screen_number of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: int
        """

        self._shift_screen_number = shift_screen_number

    @property
    def silence_status(self):
        """Gets the silence_status of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The silence_status of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: int
        """
        return self._silence_status

    @silence_status.setter
    def silence_status(self, silence_status):
        """Sets the silence_status of this DataForListUserBehaviorDataAPIV2Output.


        :param silence_status: The silence_status of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: int
        """

        self._silence_status = silence_status

    @property
    def thumb_up_number(self):
        """Gets the thumb_up_number of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The thumb_up_number of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: int
        """
        return self._thumb_up_number

    @thumb_up_number.setter
    def thumb_up_number(self, thumb_up_number):
        """Sets the thumb_up_number of this DataForListUserBehaviorDataAPIV2Output.


        :param thumb_up_number: The thumb_up_number of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: int
        """

        self._thumb_up_number = thumb_up_number

    @property
    def user_credit(self):
        """Gets the user_credit of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The user_credit of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: int
        """
        return self._user_credit

    @user_credit.setter
    def user_credit(self, user_credit):
        """Sets the user_credit of this DataForListUserBehaviorDataAPIV2Output.


        :param user_credit: The user_credit of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: int
        """

        self._user_credit = user_credit

    @property
    def user_device(self):
        """Gets the user_device of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The user_device of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_device

    @user_device.setter
    def user_device(self, user_device):
        """Sets the user_device of this DataForListUserBehaviorDataAPIV2Output.


        :param user_device: The user_device of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: list[str]
        """

        self._user_device = user_device

    @property
    def user_id(self):
        """Gets the user_id of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The user_id of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DataForListUserBehaviorDataAPIV2Output.


        :param user_id: The user_id of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The user_name of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this DataForListUserBehaviorDataAPIV2Output.


        :param user_name: The user_name of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def user_tel(self):
        """Gets the user_tel of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The user_tel of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: str
        """
        return self._user_tel

    @user_tel.setter
    def user_tel(self, user_tel):
        """Sets the user_tel of this DataForListUserBehaviorDataAPIV2Output.


        :param user_tel: The user_tel of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: str
        """

        self._user_tel = user_tel

    @property
    def view_duration(self):
        """Gets the view_duration of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The view_duration of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: int
        """
        return self._view_duration

    @view_duration.setter
    def view_duration(self, view_duration):
        """Sets the view_duration of this DataForListUserBehaviorDataAPIV2Output.


        :param view_duration: The view_duration of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: int
        """

        self._view_duration = view_duration

    @property
    def viewer_level_order(self):
        """Gets the viewer_level_order of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The viewer_level_order of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: int
        """
        return self._viewer_level_order

    @viewer_level_order.setter
    def viewer_level_order(self, viewer_level_order):
        """Sets the viewer_level_order of this DataForListUserBehaviorDataAPIV2Output.


        :param viewer_level_order: The viewer_level_order of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: int
        """

        self._viewer_level_order = viewer_level_order

    @property
    def watch_time(self):
        """Gets the watch_time of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501


        :return: The watch_time of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :rtype: int
        """
        return self._watch_time

    @watch_time.setter
    def watch_time(self, watch_time):
        """Sets the watch_time of this DataForListUserBehaviorDataAPIV2Output.


        :param watch_time: The watch_time of this DataForListUserBehaviorDataAPIV2Output.  # noqa: E501
        :type: int
        """

        self._watch_time = watch_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataForListUserBehaviorDataAPIV2Output, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataForListUserBehaviorDataAPIV2Output):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataForListUserBehaviorDataAPIV2Output):
            return True

        return self.to_dict() != other.to_dict()
