# coding: utf-8

"""
    billing

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class BudgetAmountListForListBudgetAmountByBudgetIDOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actual_amount': 'str',
        'budget_amount': 'str',
        'budget_amount_id': 'str',
        'budget_period': 'str',
        'difference': 'str',
        'ratio': 'str'
    }

    attribute_map = {
        'actual_amount': 'ActualAmount',
        'budget_amount': 'BudgetAmount',
        'budget_amount_id': 'BudgetAmountID',
        'budget_period': 'BudgetPeriod',
        'difference': 'Difference',
        'ratio': 'Ratio'
    }

    def __init__(self, actual_amount=None, budget_amount=None, budget_amount_id=None, budget_period=None, difference=None, ratio=None, _configuration=None):  # noqa: E501
        """BudgetAmountListForListBudgetAmountByBudgetIDOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._actual_amount = None
        self._budget_amount = None
        self._budget_amount_id = None
        self._budget_period = None
        self._difference = None
        self._ratio = None
        self.discriminator = None

        if actual_amount is not None:
            self.actual_amount = actual_amount
        if budget_amount is not None:
            self.budget_amount = budget_amount
        if budget_amount_id is not None:
            self.budget_amount_id = budget_amount_id
        if budget_period is not None:
            self.budget_period = budget_period
        if difference is not None:
            self.difference = difference
        if ratio is not None:
            self.ratio = ratio

    @property
    def actual_amount(self):
        """Gets the actual_amount of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.  # noqa: E501


        :return: The actual_amount of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.  # noqa: E501
        :rtype: str
        """
        return self._actual_amount

    @actual_amount.setter
    def actual_amount(self, actual_amount):
        """Sets the actual_amount of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.


        :param actual_amount: The actual_amount of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.  # noqa: E501
        :type: str
        """

        self._actual_amount = actual_amount

    @property
    def budget_amount(self):
        """Gets the budget_amount of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.  # noqa: E501


        :return: The budget_amount of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.  # noqa: E501
        :rtype: str
        """
        return self._budget_amount

    @budget_amount.setter
    def budget_amount(self, budget_amount):
        """Sets the budget_amount of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.


        :param budget_amount: The budget_amount of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.  # noqa: E501
        :type: str
        """

        self._budget_amount = budget_amount

    @property
    def budget_amount_id(self):
        """Gets the budget_amount_id of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.  # noqa: E501


        :return: The budget_amount_id of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.  # noqa: E501
        :rtype: str
        """
        return self._budget_amount_id

    @budget_amount_id.setter
    def budget_amount_id(self, budget_amount_id):
        """Sets the budget_amount_id of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.


        :param budget_amount_id: The budget_amount_id of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.  # noqa: E501
        :type: str
        """

        self._budget_amount_id = budget_amount_id

    @property
    def budget_period(self):
        """Gets the budget_period of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.  # noqa: E501


        :return: The budget_period of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.  # noqa: E501
        :rtype: str
        """
        return self._budget_period

    @budget_period.setter
    def budget_period(self, budget_period):
        """Sets the budget_period of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.


        :param budget_period: The budget_period of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.  # noqa: E501
        :type: str
        """

        self._budget_period = budget_period

    @property
    def difference(self):
        """Gets the difference of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.  # noqa: E501


        :return: The difference of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.  # noqa: E501
        :rtype: str
        """
        return self._difference

    @difference.setter
    def difference(self, difference):
        """Sets the difference of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.


        :param difference: The difference of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.  # noqa: E501
        :type: str
        """

        self._difference = difference

    @property
    def ratio(self):
        """Gets the ratio of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.  # noqa: E501


        :return: The ratio of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.  # noqa: E501
        :rtype: str
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.


        :param ratio: The ratio of this BudgetAmountListForListBudgetAmountByBudgetIDOutput.  # noqa: E501
        :type: str
        """

        self._ratio = ratio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BudgetAmountListForListBudgetAmountByBudgetIDOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BudgetAmountListForListBudgetAmountByBudgetIDOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BudgetAmountListForListBudgetAmountByBudgetIDOutput):
            return True

        return self.to_dict() != other.to_dict()
