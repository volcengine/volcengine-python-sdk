# coding: utf-8

"""
    billing

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class BudgetListForListBudgetOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actual_amount': 'str',
        'budget_amount': 'str',
        'budget_end_time': 'str',
        'budget_id': 'str',
        'budget_name': 'str',
        'budget_start_time': 'str',
        'budget_type': 'str',
        'period': 'str',
        'ratio': 'str',
        'status': 'int'
    }

    attribute_map = {
        'actual_amount': 'ActualAmount',
        'budget_amount': 'BudgetAmount',
        'budget_end_time': 'BudgetEndTime',
        'budget_id': 'BudgetID',
        'budget_name': 'BudgetName',
        'budget_start_time': 'BudgetStartTime',
        'budget_type': 'BudgetType',
        'period': 'Period',
        'ratio': 'Ratio',
        'status': 'Status'
    }

    def __init__(self, actual_amount=None, budget_amount=None, budget_end_time=None, budget_id=None, budget_name=None, budget_start_time=None, budget_type=None, period=None, ratio=None, status=None, _configuration=None):  # noqa: E501
        """BudgetListForListBudgetOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._actual_amount = None
        self._budget_amount = None
        self._budget_end_time = None
        self._budget_id = None
        self._budget_name = None
        self._budget_start_time = None
        self._budget_type = None
        self._period = None
        self._ratio = None
        self._status = None
        self.discriminator = None

        if actual_amount is not None:
            self.actual_amount = actual_amount
        if budget_amount is not None:
            self.budget_amount = budget_amount
        if budget_end_time is not None:
            self.budget_end_time = budget_end_time
        if budget_id is not None:
            self.budget_id = budget_id
        if budget_name is not None:
            self.budget_name = budget_name
        if budget_start_time is not None:
            self.budget_start_time = budget_start_time
        if budget_type is not None:
            self.budget_type = budget_type
        if period is not None:
            self.period = period
        if ratio is not None:
            self.ratio = ratio
        if status is not None:
            self.status = status

    @property
    def actual_amount(self):
        """Gets the actual_amount of this BudgetListForListBudgetOutput.  # noqa: E501


        :return: The actual_amount of this BudgetListForListBudgetOutput.  # noqa: E501
        :rtype: str
        """
        return self._actual_amount

    @actual_amount.setter
    def actual_amount(self, actual_amount):
        """Sets the actual_amount of this BudgetListForListBudgetOutput.


        :param actual_amount: The actual_amount of this BudgetListForListBudgetOutput.  # noqa: E501
        :type: str
        """

        self._actual_amount = actual_amount

    @property
    def budget_amount(self):
        """Gets the budget_amount of this BudgetListForListBudgetOutput.  # noqa: E501


        :return: The budget_amount of this BudgetListForListBudgetOutput.  # noqa: E501
        :rtype: str
        """
        return self._budget_amount

    @budget_amount.setter
    def budget_amount(self, budget_amount):
        """Sets the budget_amount of this BudgetListForListBudgetOutput.


        :param budget_amount: The budget_amount of this BudgetListForListBudgetOutput.  # noqa: E501
        :type: str
        """

        self._budget_amount = budget_amount

    @property
    def budget_end_time(self):
        """Gets the budget_end_time of this BudgetListForListBudgetOutput.  # noqa: E501


        :return: The budget_end_time of this BudgetListForListBudgetOutput.  # noqa: E501
        :rtype: str
        """
        return self._budget_end_time

    @budget_end_time.setter
    def budget_end_time(self, budget_end_time):
        """Sets the budget_end_time of this BudgetListForListBudgetOutput.


        :param budget_end_time: The budget_end_time of this BudgetListForListBudgetOutput.  # noqa: E501
        :type: str
        """

        self._budget_end_time = budget_end_time

    @property
    def budget_id(self):
        """Gets the budget_id of this BudgetListForListBudgetOutput.  # noqa: E501


        :return: The budget_id of this BudgetListForListBudgetOutput.  # noqa: E501
        :rtype: str
        """
        return self._budget_id

    @budget_id.setter
    def budget_id(self, budget_id):
        """Sets the budget_id of this BudgetListForListBudgetOutput.


        :param budget_id: The budget_id of this BudgetListForListBudgetOutput.  # noqa: E501
        :type: str
        """

        self._budget_id = budget_id

    @property
    def budget_name(self):
        """Gets the budget_name of this BudgetListForListBudgetOutput.  # noqa: E501


        :return: The budget_name of this BudgetListForListBudgetOutput.  # noqa: E501
        :rtype: str
        """
        return self._budget_name

    @budget_name.setter
    def budget_name(self, budget_name):
        """Sets the budget_name of this BudgetListForListBudgetOutput.


        :param budget_name: The budget_name of this BudgetListForListBudgetOutput.  # noqa: E501
        :type: str
        """

        self._budget_name = budget_name

    @property
    def budget_start_time(self):
        """Gets the budget_start_time of this BudgetListForListBudgetOutput.  # noqa: E501


        :return: The budget_start_time of this BudgetListForListBudgetOutput.  # noqa: E501
        :rtype: str
        """
        return self._budget_start_time

    @budget_start_time.setter
    def budget_start_time(self, budget_start_time):
        """Sets the budget_start_time of this BudgetListForListBudgetOutput.


        :param budget_start_time: The budget_start_time of this BudgetListForListBudgetOutput.  # noqa: E501
        :type: str
        """

        self._budget_start_time = budget_start_time

    @property
    def budget_type(self):
        """Gets the budget_type of this BudgetListForListBudgetOutput.  # noqa: E501


        :return: The budget_type of this BudgetListForListBudgetOutput.  # noqa: E501
        :rtype: str
        """
        return self._budget_type

    @budget_type.setter
    def budget_type(self, budget_type):
        """Sets the budget_type of this BudgetListForListBudgetOutput.


        :param budget_type: The budget_type of this BudgetListForListBudgetOutput.  # noqa: E501
        :type: str
        """

        self._budget_type = budget_type

    @property
    def period(self):
        """Gets the period of this BudgetListForListBudgetOutput.  # noqa: E501


        :return: The period of this BudgetListForListBudgetOutput.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this BudgetListForListBudgetOutput.


        :param period: The period of this BudgetListForListBudgetOutput.  # noqa: E501
        :type: str
        """

        self._period = period

    @property
    def ratio(self):
        """Gets the ratio of this BudgetListForListBudgetOutput.  # noqa: E501


        :return: The ratio of this BudgetListForListBudgetOutput.  # noqa: E501
        :rtype: str
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this BudgetListForListBudgetOutput.


        :param ratio: The ratio of this BudgetListForListBudgetOutput.  # noqa: E501
        :type: str
        """

        self._ratio = ratio

    @property
    def status(self):
        """Gets the status of this BudgetListForListBudgetOutput.  # noqa: E501


        :return: The status of this BudgetListForListBudgetOutput.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BudgetListForListBudgetOutput.


        :param status: The status of this BudgetListForListBudgetOutput.  # noqa: E501
        :type: int
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BudgetListForListBudgetOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BudgetListForListBudgetOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BudgetListForListBudgetOutput):
            return True

        return self.to_dict() != other.to_dict()
