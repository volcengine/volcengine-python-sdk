# coding: utf-8

"""
    billing

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ListForListCouponsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'acquire_time': 'str',
        'amount_limit': 'float',
        'assigned_owner_id_list': 'list[int]',
        'begin_time': 'str',
        'coupon_id': 'str',
        'coupon_name': 'str',
        'expired_time': 'str',
        'order_type_limit': 'str',
        'pay_type_limit': 'str',
        'product_limit_list': 'list[ProductLimitListForListCouponsOutput]',
        'remaining_amount': 'float',
        'remark': 'str',
        'status': 'int',
        'usage_limit': 'int'
    }

    attribute_map = {
        'account_id': 'AccountID',
        'acquire_time': 'AcquireTime',
        'amount_limit': 'AmountLimit',
        'assigned_owner_id_list': 'AssignedOwnerIDList',
        'begin_time': 'BeginTime',
        'coupon_id': 'CouponID',
        'coupon_name': 'CouponName',
        'expired_time': 'ExpiredTime',
        'order_type_limit': 'OrderTypeLimit',
        'pay_type_limit': 'PayTypeLimit',
        'product_limit_list': 'ProductLimitList',
        'remaining_amount': 'RemainingAmount',
        'remark': 'Remark',
        'status': 'Status',
        'usage_limit': 'UsageLimit'
    }

    def __init__(self, account_id=None, acquire_time=None, amount_limit=None, assigned_owner_id_list=None, begin_time=None, coupon_id=None, coupon_name=None, expired_time=None, order_type_limit=None, pay_type_limit=None, product_limit_list=None, remaining_amount=None, remark=None, status=None, usage_limit=None, _configuration=None):  # noqa: E501
        """ListForListCouponsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._acquire_time = None
        self._amount_limit = None
        self._assigned_owner_id_list = None
        self._begin_time = None
        self._coupon_id = None
        self._coupon_name = None
        self._expired_time = None
        self._order_type_limit = None
        self._pay_type_limit = None
        self._product_limit_list = None
        self._remaining_amount = None
        self._remark = None
        self._status = None
        self._usage_limit = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if acquire_time is not None:
            self.acquire_time = acquire_time
        if amount_limit is not None:
            self.amount_limit = amount_limit
        if assigned_owner_id_list is not None:
            self.assigned_owner_id_list = assigned_owner_id_list
        if begin_time is not None:
            self.begin_time = begin_time
        if coupon_id is not None:
            self.coupon_id = coupon_id
        if coupon_name is not None:
            self.coupon_name = coupon_name
        if expired_time is not None:
            self.expired_time = expired_time
        if order_type_limit is not None:
            self.order_type_limit = order_type_limit
        if pay_type_limit is not None:
            self.pay_type_limit = pay_type_limit
        if product_limit_list is not None:
            self.product_limit_list = product_limit_list
        if remaining_amount is not None:
            self.remaining_amount = remaining_amount
        if remark is not None:
            self.remark = remark
        if status is not None:
            self.status = status
        if usage_limit is not None:
            self.usage_limit = usage_limit

    @property
    def account_id(self):
        """Gets the account_id of this ListForListCouponsOutput.  # noqa: E501


        :return: The account_id of this ListForListCouponsOutput.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ListForListCouponsOutput.


        :param account_id: The account_id of this ListForListCouponsOutput.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def acquire_time(self):
        """Gets the acquire_time of this ListForListCouponsOutput.  # noqa: E501


        :return: The acquire_time of this ListForListCouponsOutput.  # noqa: E501
        :rtype: str
        """
        return self._acquire_time

    @acquire_time.setter
    def acquire_time(self, acquire_time):
        """Sets the acquire_time of this ListForListCouponsOutput.


        :param acquire_time: The acquire_time of this ListForListCouponsOutput.  # noqa: E501
        :type: str
        """

        self._acquire_time = acquire_time

    @property
    def amount_limit(self):
        """Gets the amount_limit of this ListForListCouponsOutput.  # noqa: E501


        :return: The amount_limit of this ListForListCouponsOutput.  # noqa: E501
        :rtype: float
        """
        return self._amount_limit

    @amount_limit.setter
    def amount_limit(self, amount_limit):
        """Sets the amount_limit of this ListForListCouponsOutput.


        :param amount_limit: The amount_limit of this ListForListCouponsOutput.  # noqa: E501
        :type: float
        """

        self._amount_limit = amount_limit

    @property
    def assigned_owner_id_list(self):
        """Gets the assigned_owner_id_list of this ListForListCouponsOutput.  # noqa: E501


        :return: The assigned_owner_id_list of this ListForListCouponsOutput.  # noqa: E501
        :rtype: list[int]
        """
        return self._assigned_owner_id_list

    @assigned_owner_id_list.setter
    def assigned_owner_id_list(self, assigned_owner_id_list):
        """Sets the assigned_owner_id_list of this ListForListCouponsOutput.


        :param assigned_owner_id_list: The assigned_owner_id_list of this ListForListCouponsOutput.  # noqa: E501
        :type: list[int]
        """

        self._assigned_owner_id_list = assigned_owner_id_list

    @property
    def begin_time(self):
        """Gets the begin_time of this ListForListCouponsOutput.  # noqa: E501


        :return: The begin_time of this ListForListCouponsOutput.  # noqa: E501
        :rtype: str
        """
        return self._begin_time

    @begin_time.setter
    def begin_time(self, begin_time):
        """Sets the begin_time of this ListForListCouponsOutput.


        :param begin_time: The begin_time of this ListForListCouponsOutput.  # noqa: E501
        :type: str
        """

        self._begin_time = begin_time

    @property
    def coupon_id(self):
        """Gets the coupon_id of this ListForListCouponsOutput.  # noqa: E501


        :return: The coupon_id of this ListForListCouponsOutput.  # noqa: E501
        :rtype: str
        """
        return self._coupon_id

    @coupon_id.setter
    def coupon_id(self, coupon_id):
        """Sets the coupon_id of this ListForListCouponsOutput.


        :param coupon_id: The coupon_id of this ListForListCouponsOutput.  # noqa: E501
        :type: str
        """

        self._coupon_id = coupon_id

    @property
    def coupon_name(self):
        """Gets the coupon_name of this ListForListCouponsOutput.  # noqa: E501


        :return: The coupon_name of this ListForListCouponsOutput.  # noqa: E501
        :rtype: str
        """
        return self._coupon_name

    @coupon_name.setter
    def coupon_name(self, coupon_name):
        """Sets the coupon_name of this ListForListCouponsOutput.


        :param coupon_name: The coupon_name of this ListForListCouponsOutput.  # noqa: E501
        :type: str
        """

        self._coupon_name = coupon_name

    @property
    def expired_time(self):
        """Gets the expired_time of this ListForListCouponsOutput.  # noqa: E501


        :return: The expired_time of this ListForListCouponsOutput.  # noqa: E501
        :rtype: str
        """
        return self._expired_time

    @expired_time.setter
    def expired_time(self, expired_time):
        """Sets the expired_time of this ListForListCouponsOutput.


        :param expired_time: The expired_time of this ListForListCouponsOutput.  # noqa: E501
        :type: str
        """

        self._expired_time = expired_time

    @property
    def order_type_limit(self):
        """Gets the order_type_limit of this ListForListCouponsOutput.  # noqa: E501


        :return: The order_type_limit of this ListForListCouponsOutput.  # noqa: E501
        :rtype: str
        """
        return self._order_type_limit

    @order_type_limit.setter
    def order_type_limit(self, order_type_limit):
        """Sets the order_type_limit of this ListForListCouponsOutput.


        :param order_type_limit: The order_type_limit of this ListForListCouponsOutput.  # noqa: E501
        :type: str
        """

        self._order_type_limit = order_type_limit

    @property
    def pay_type_limit(self):
        """Gets the pay_type_limit of this ListForListCouponsOutput.  # noqa: E501


        :return: The pay_type_limit of this ListForListCouponsOutput.  # noqa: E501
        :rtype: str
        """
        return self._pay_type_limit

    @pay_type_limit.setter
    def pay_type_limit(self, pay_type_limit):
        """Sets the pay_type_limit of this ListForListCouponsOutput.


        :param pay_type_limit: The pay_type_limit of this ListForListCouponsOutput.  # noqa: E501
        :type: str
        """

        self._pay_type_limit = pay_type_limit

    @property
    def product_limit_list(self):
        """Gets the product_limit_list of this ListForListCouponsOutput.  # noqa: E501


        :return: The product_limit_list of this ListForListCouponsOutput.  # noqa: E501
        :rtype: list[ProductLimitListForListCouponsOutput]
        """
        return self._product_limit_list

    @product_limit_list.setter
    def product_limit_list(self, product_limit_list):
        """Sets the product_limit_list of this ListForListCouponsOutput.


        :param product_limit_list: The product_limit_list of this ListForListCouponsOutput.  # noqa: E501
        :type: list[ProductLimitListForListCouponsOutput]
        """

        self._product_limit_list = product_limit_list

    @property
    def remaining_amount(self):
        """Gets the remaining_amount of this ListForListCouponsOutput.  # noqa: E501


        :return: The remaining_amount of this ListForListCouponsOutput.  # noqa: E501
        :rtype: float
        """
        return self._remaining_amount

    @remaining_amount.setter
    def remaining_amount(self, remaining_amount):
        """Sets the remaining_amount of this ListForListCouponsOutput.


        :param remaining_amount: The remaining_amount of this ListForListCouponsOutput.  # noqa: E501
        :type: float
        """

        self._remaining_amount = remaining_amount

    @property
    def remark(self):
        """Gets the remark of this ListForListCouponsOutput.  # noqa: E501


        :return: The remark of this ListForListCouponsOutput.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this ListForListCouponsOutput.


        :param remark: The remark of this ListForListCouponsOutput.  # noqa: E501
        :type: str
        """

        self._remark = remark

    @property
    def status(self):
        """Gets the status of this ListForListCouponsOutput.  # noqa: E501


        :return: The status of this ListForListCouponsOutput.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ListForListCouponsOutput.


        :param status: The status of this ListForListCouponsOutput.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def usage_limit(self):
        """Gets the usage_limit of this ListForListCouponsOutput.  # noqa: E501


        :return: The usage_limit of this ListForListCouponsOutput.  # noqa: E501
        :rtype: int
        """
        return self._usage_limit

    @usage_limit.setter
    def usage_limit(self, usage_limit):
        """Sets the usage_limit of this ListForListCouponsOutput.


        :param usage_limit: The usage_limit of this ListForListCouponsOutput.  # noqa: E501
        :type: int
        """

        self._usage_limit = usage_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListForListCouponsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListForListCouponsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListForListCouponsOutput):
            return True

        return self.to_dict() != other.to_dict()
