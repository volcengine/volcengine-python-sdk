# coding: utf-8

"""
    billing

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateBudgetRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'budget': 'BudgetForCreateBudgetInput',
        'budget_alert_message': 'list[BudgetAlertMessageForCreateBudgetInput]',
        'budget_alert_rule': 'list[BudgetAlertRuleForCreateBudgetInput]',
        'budget_amount': 'list[BudgetAmountForCreateBudgetInput]',
        'budget_range': 'BudgetRangeForCreateBudgetInput'
    }

    attribute_map = {
        'budget': 'Budget',
        'budget_alert_message': 'BudgetAlertMessage',
        'budget_alert_rule': 'BudgetAlertRule',
        'budget_amount': 'BudgetAmount',
        'budget_range': 'BudgetRange'
    }

    def __init__(self, budget=None, budget_alert_message=None, budget_alert_rule=None, budget_amount=None, budget_range=None, _configuration=None):  # noqa: E501
        """CreateBudgetRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._budget = None
        self._budget_alert_message = None
        self._budget_alert_rule = None
        self._budget_amount = None
        self._budget_range = None
        self.discriminator = None

        if budget is not None:
            self.budget = budget
        if budget_alert_message is not None:
            self.budget_alert_message = budget_alert_message
        if budget_alert_rule is not None:
            self.budget_alert_rule = budget_alert_rule
        if budget_amount is not None:
            self.budget_amount = budget_amount
        if budget_range is not None:
            self.budget_range = budget_range

    @property
    def budget(self):
        """Gets the budget of this CreateBudgetRequest.  # noqa: E501


        :return: The budget of this CreateBudgetRequest.  # noqa: E501
        :rtype: BudgetForCreateBudgetInput
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this CreateBudgetRequest.


        :param budget: The budget of this CreateBudgetRequest.  # noqa: E501
        :type: BudgetForCreateBudgetInput
        """

        self._budget = budget

    @property
    def budget_alert_message(self):
        """Gets the budget_alert_message of this CreateBudgetRequest.  # noqa: E501


        :return: The budget_alert_message of this CreateBudgetRequest.  # noqa: E501
        :rtype: list[BudgetAlertMessageForCreateBudgetInput]
        """
        return self._budget_alert_message

    @budget_alert_message.setter
    def budget_alert_message(self, budget_alert_message):
        """Sets the budget_alert_message of this CreateBudgetRequest.


        :param budget_alert_message: The budget_alert_message of this CreateBudgetRequest.  # noqa: E501
        :type: list[BudgetAlertMessageForCreateBudgetInput]
        """

        self._budget_alert_message = budget_alert_message

    @property
    def budget_alert_rule(self):
        """Gets the budget_alert_rule of this CreateBudgetRequest.  # noqa: E501


        :return: The budget_alert_rule of this CreateBudgetRequest.  # noqa: E501
        :rtype: list[BudgetAlertRuleForCreateBudgetInput]
        """
        return self._budget_alert_rule

    @budget_alert_rule.setter
    def budget_alert_rule(self, budget_alert_rule):
        """Sets the budget_alert_rule of this CreateBudgetRequest.


        :param budget_alert_rule: The budget_alert_rule of this CreateBudgetRequest.  # noqa: E501
        :type: list[BudgetAlertRuleForCreateBudgetInput]
        """

        self._budget_alert_rule = budget_alert_rule

    @property
    def budget_amount(self):
        """Gets the budget_amount of this CreateBudgetRequest.  # noqa: E501


        :return: The budget_amount of this CreateBudgetRequest.  # noqa: E501
        :rtype: list[BudgetAmountForCreateBudgetInput]
        """
        return self._budget_amount

    @budget_amount.setter
    def budget_amount(self, budget_amount):
        """Sets the budget_amount of this CreateBudgetRequest.


        :param budget_amount: The budget_amount of this CreateBudgetRequest.  # noqa: E501
        :type: list[BudgetAmountForCreateBudgetInput]
        """

        self._budget_amount = budget_amount

    @property
    def budget_range(self):
        """Gets the budget_range of this CreateBudgetRequest.  # noqa: E501


        :return: The budget_range of this CreateBudgetRequest.  # noqa: E501
        :rtype: BudgetRangeForCreateBudgetInput
        """
        return self._budget_range

    @budget_range.setter
    def budget_range(self, budget_range):
        """Sets the budget_range of this CreateBudgetRequest.


        :param budget_range: The budget_range of this CreateBudgetRequest.  # noqa: E501
        :type: BudgetRangeForCreateBudgetInput
        """

        self._budget_range = budget_range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateBudgetRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateBudgetRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateBudgetRequest):
            return True

        return self.to_dict() != other.to_dict()
