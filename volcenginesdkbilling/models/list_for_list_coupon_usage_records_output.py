# coding: utf-8

"""
    billing

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ListForListCouponUsageRecordsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'change_amount': 'float',
        'change_type': 'int',
        'coupon_id': 'str',
        'created_time': 'str',
        'pay_type': 'str',
        'product_code': 'str',
        'product_name': 'str',
        'sub_business_id': 'str',
        'user_account_id': 'int'
    }

    attribute_map = {
        'account_id': 'AccountID',
        'change_amount': 'ChangeAmount',
        'change_type': 'ChangeType',
        'coupon_id': 'CouponID',
        'created_time': 'CreatedTime',
        'pay_type': 'PayType',
        'product_code': 'ProductCode',
        'product_name': 'ProductName',
        'sub_business_id': 'SubBusinessID',
        'user_account_id': 'UserAccountID'
    }

    def __init__(self, account_id=None, change_amount=None, change_type=None, coupon_id=None, created_time=None, pay_type=None, product_code=None, product_name=None, sub_business_id=None, user_account_id=None, _configuration=None):  # noqa: E501
        """ListForListCouponUsageRecordsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._change_amount = None
        self._change_type = None
        self._coupon_id = None
        self._created_time = None
        self._pay_type = None
        self._product_code = None
        self._product_name = None
        self._sub_business_id = None
        self._user_account_id = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if change_amount is not None:
            self.change_amount = change_amount
        if change_type is not None:
            self.change_type = change_type
        if coupon_id is not None:
            self.coupon_id = coupon_id
        if created_time is not None:
            self.created_time = created_time
        if pay_type is not None:
            self.pay_type = pay_type
        if product_code is not None:
            self.product_code = product_code
        if product_name is not None:
            self.product_name = product_name
        if sub_business_id is not None:
            self.sub_business_id = sub_business_id
        if user_account_id is not None:
            self.user_account_id = user_account_id

    @property
    def account_id(self):
        """Gets the account_id of this ListForListCouponUsageRecordsOutput.  # noqa: E501


        :return: The account_id of this ListForListCouponUsageRecordsOutput.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ListForListCouponUsageRecordsOutput.


        :param account_id: The account_id of this ListForListCouponUsageRecordsOutput.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def change_amount(self):
        """Gets the change_amount of this ListForListCouponUsageRecordsOutput.  # noqa: E501


        :return: The change_amount of this ListForListCouponUsageRecordsOutput.  # noqa: E501
        :rtype: float
        """
        return self._change_amount

    @change_amount.setter
    def change_amount(self, change_amount):
        """Sets the change_amount of this ListForListCouponUsageRecordsOutput.


        :param change_amount: The change_amount of this ListForListCouponUsageRecordsOutput.  # noqa: E501
        :type: float
        """

        self._change_amount = change_amount

    @property
    def change_type(self):
        """Gets the change_type of this ListForListCouponUsageRecordsOutput.  # noqa: E501


        :return: The change_type of this ListForListCouponUsageRecordsOutput.  # noqa: E501
        :rtype: int
        """
        return self._change_type

    @change_type.setter
    def change_type(self, change_type):
        """Sets the change_type of this ListForListCouponUsageRecordsOutput.


        :param change_type: The change_type of this ListForListCouponUsageRecordsOutput.  # noqa: E501
        :type: int
        """

        self._change_type = change_type

    @property
    def coupon_id(self):
        """Gets the coupon_id of this ListForListCouponUsageRecordsOutput.  # noqa: E501


        :return: The coupon_id of this ListForListCouponUsageRecordsOutput.  # noqa: E501
        :rtype: str
        """
        return self._coupon_id

    @coupon_id.setter
    def coupon_id(self, coupon_id):
        """Sets the coupon_id of this ListForListCouponUsageRecordsOutput.


        :param coupon_id: The coupon_id of this ListForListCouponUsageRecordsOutput.  # noqa: E501
        :type: str
        """

        self._coupon_id = coupon_id

    @property
    def created_time(self):
        """Gets the created_time of this ListForListCouponUsageRecordsOutput.  # noqa: E501


        :return: The created_time of this ListForListCouponUsageRecordsOutput.  # noqa: E501
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this ListForListCouponUsageRecordsOutput.


        :param created_time: The created_time of this ListForListCouponUsageRecordsOutput.  # noqa: E501
        :type: str
        """

        self._created_time = created_time

    @property
    def pay_type(self):
        """Gets the pay_type of this ListForListCouponUsageRecordsOutput.  # noqa: E501


        :return: The pay_type of this ListForListCouponUsageRecordsOutput.  # noqa: E501
        :rtype: str
        """
        return self._pay_type

    @pay_type.setter
    def pay_type(self, pay_type):
        """Sets the pay_type of this ListForListCouponUsageRecordsOutput.


        :param pay_type: The pay_type of this ListForListCouponUsageRecordsOutput.  # noqa: E501
        :type: str
        """

        self._pay_type = pay_type

    @property
    def product_code(self):
        """Gets the product_code of this ListForListCouponUsageRecordsOutput.  # noqa: E501


        :return: The product_code of this ListForListCouponUsageRecordsOutput.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this ListForListCouponUsageRecordsOutput.


        :param product_code: The product_code of this ListForListCouponUsageRecordsOutput.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def product_name(self):
        """Gets the product_name of this ListForListCouponUsageRecordsOutput.  # noqa: E501


        :return: The product_name of this ListForListCouponUsageRecordsOutput.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this ListForListCouponUsageRecordsOutput.


        :param product_name: The product_name of this ListForListCouponUsageRecordsOutput.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def sub_business_id(self):
        """Gets the sub_business_id of this ListForListCouponUsageRecordsOutput.  # noqa: E501


        :return: The sub_business_id of this ListForListCouponUsageRecordsOutput.  # noqa: E501
        :rtype: str
        """
        return self._sub_business_id

    @sub_business_id.setter
    def sub_business_id(self, sub_business_id):
        """Sets the sub_business_id of this ListForListCouponUsageRecordsOutput.


        :param sub_business_id: The sub_business_id of this ListForListCouponUsageRecordsOutput.  # noqa: E501
        :type: str
        """

        self._sub_business_id = sub_business_id

    @property
    def user_account_id(self):
        """Gets the user_account_id of this ListForListCouponUsageRecordsOutput.  # noqa: E501


        :return: The user_account_id of this ListForListCouponUsageRecordsOutput.  # noqa: E501
        :rtype: int
        """
        return self._user_account_id

    @user_account_id.setter
    def user_account_id(self, user_account_id):
        """Sets the user_account_id of this ListForListCouponUsageRecordsOutput.


        :param user_account_id: The user_account_id of this ListForListCouponUsageRecordsOutput.  # noqa: E501
        :type: int
        """

        self._user_account_id = user_account_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListForListCouponUsageRecordsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListForListCouponUsageRecordsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListForListCouponUsageRecordsOutput):
            return True

        return self.to_dict() != other.to_dict()
