# coding: utf-8

"""
    billing

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class BudgetForUpdateBudgetInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'budget_end_time': 'str',
        'budget_name': 'str',
        'budget_plan_type': 'str',
        'budget_start_time': 'str',
        'budget_type': 'str',
        'period': 'str'
    }

    attribute_map = {
        'budget_end_time': 'BudgetEndTime',
        'budget_name': 'BudgetName',
        'budget_plan_type': 'BudgetPlanType',
        'budget_start_time': 'BudgetStartTime',
        'budget_type': 'BudgetType',
        'period': 'Period'
    }

    def __init__(self, budget_end_time=None, budget_name=None, budget_plan_type=None, budget_start_time=None, budget_type=None, period=None, _configuration=None):  # noqa: E501
        """BudgetForUpdateBudgetInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._budget_end_time = None
        self._budget_name = None
        self._budget_plan_type = None
        self._budget_start_time = None
        self._budget_type = None
        self._period = None
        self.discriminator = None

        if budget_end_time is not None:
            self.budget_end_time = budget_end_time
        if budget_name is not None:
            self.budget_name = budget_name
        if budget_plan_type is not None:
            self.budget_plan_type = budget_plan_type
        if budget_start_time is not None:
            self.budget_start_time = budget_start_time
        if budget_type is not None:
            self.budget_type = budget_type
        if period is not None:
            self.period = period

    @property
    def budget_end_time(self):
        """Gets the budget_end_time of this BudgetForUpdateBudgetInput.  # noqa: E501


        :return: The budget_end_time of this BudgetForUpdateBudgetInput.  # noqa: E501
        :rtype: str
        """
        return self._budget_end_time

    @budget_end_time.setter
    def budget_end_time(self, budget_end_time):
        """Sets the budget_end_time of this BudgetForUpdateBudgetInput.


        :param budget_end_time: The budget_end_time of this BudgetForUpdateBudgetInput.  # noqa: E501
        :type: str
        """

        self._budget_end_time = budget_end_time

    @property
    def budget_name(self):
        """Gets the budget_name of this BudgetForUpdateBudgetInput.  # noqa: E501


        :return: The budget_name of this BudgetForUpdateBudgetInput.  # noqa: E501
        :rtype: str
        """
        return self._budget_name

    @budget_name.setter
    def budget_name(self, budget_name):
        """Sets the budget_name of this BudgetForUpdateBudgetInput.


        :param budget_name: The budget_name of this BudgetForUpdateBudgetInput.  # noqa: E501
        :type: str
        """

        self._budget_name = budget_name

    @property
    def budget_plan_type(self):
        """Gets the budget_plan_type of this BudgetForUpdateBudgetInput.  # noqa: E501


        :return: The budget_plan_type of this BudgetForUpdateBudgetInput.  # noqa: E501
        :rtype: str
        """
        return self._budget_plan_type

    @budget_plan_type.setter
    def budget_plan_type(self, budget_plan_type):
        """Sets the budget_plan_type of this BudgetForUpdateBudgetInput.


        :param budget_plan_type: The budget_plan_type of this BudgetForUpdateBudgetInput.  # noqa: E501
        :type: str
        """
        allowed_values = ["fixed_amount", "planning"]  # noqa: E501
        if (self._configuration.client_side_validation and
                budget_plan_type not in allowed_values):
            raise ValueError(
                "Invalid value for `budget_plan_type` ({0}), must be one of {1}"  # noqa: E501
                .format(budget_plan_type, allowed_values)
            )

        self._budget_plan_type = budget_plan_type

    @property
    def budget_start_time(self):
        """Gets the budget_start_time of this BudgetForUpdateBudgetInput.  # noqa: E501


        :return: The budget_start_time of this BudgetForUpdateBudgetInput.  # noqa: E501
        :rtype: str
        """
        return self._budget_start_time

    @budget_start_time.setter
    def budget_start_time(self, budget_start_time):
        """Sets the budget_start_time of this BudgetForUpdateBudgetInput.


        :param budget_start_time: The budget_start_time of this BudgetForUpdateBudgetInput.  # noqa: E501
        :type: str
        """

        self._budget_start_time = budget_start_time

    @property
    def budget_type(self):
        """Gets the budget_type of this BudgetForUpdateBudgetInput.  # noqa: E501


        :return: The budget_type of this BudgetForUpdateBudgetInput.  # noqa: E501
        :rtype: str
        """
        return self._budget_type

    @budget_type.setter
    def budget_type(self, budget_type):
        """Sets the budget_type of this BudgetForUpdateBudgetInput.


        :param budget_type: The budget_type of this BudgetForUpdateBudgetInput.  # noqa: E501
        :type: str
        """
        allowed_values = ["cost_budget"]  # noqa: E501
        if (self._configuration.client_side_validation and
                budget_type not in allowed_values):
            raise ValueError(
                "Invalid value for `budget_type` ({0}), must be one of {1}"  # noqa: E501
                .format(budget_type, allowed_values)
            )

        self._budget_type = budget_type

    @property
    def period(self):
        """Gets the period of this BudgetForUpdateBudgetInput.  # noqa: E501


        :return: The period of this BudgetForUpdateBudgetInput.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this BudgetForUpdateBudgetInput.


        :param period: The period of this BudgetForUpdateBudgetInput.  # noqa: E501
        :type: str
        """
        allowed_values = ["month", "quarter", "year"]  # noqa: E501
        if (self._configuration.client_side_validation and
                period not in allowed_values):
            raise ValueError(
                "Invalid value for `period` ({0}), must be one of {1}"  # noqa: E501
                .format(period, allowed_values)
            )

        self._period = period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BudgetForUpdateBudgetInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BudgetForUpdateBudgetInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BudgetForUpdateBudgetInput):
            return True

        return self.to_dict() != other.to_dict()
