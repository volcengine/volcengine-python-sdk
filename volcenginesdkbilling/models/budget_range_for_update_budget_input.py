# coding: utf-8

"""
    billing

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class BudgetRangeForUpdateBudgetInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billing_mode': 'list[str]',
        'owner_id': 'list[int]',
        'payer_id': 'list[int]',
        'product': 'list[str]',
        'project': 'list[str]',
        'region': 'list[str]',
        'subject_no': 'list[str]',
        'tag': 'list[str]',
        'zone': 'list[str]'
    }

    attribute_map = {
        'billing_mode': 'BillingMode',
        'owner_id': 'OwnerID',
        'payer_id': 'PayerID',
        'product': 'Product',
        'project': 'Project',
        'region': 'Region',
        'subject_no': 'SubjectNo',
        'tag': 'Tag',
        'zone': 'Zone'
    }

    def __init__(self, billing_mode=None, owner_id=None, payer_id=None, product=None, project=None, region=None, subject_no=None, tag=None, zone=None, _configuration=None):  # noqa: E501
        """BudgetRangeForUpdateBudgetInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._billing_mode = None
        self._owner_id = None
        self._payer_id = None
        self._product = None
        self._project = None
        self._region = None
        self._subject_no = None
        self._tag = None
        self._zone = None
        self.discriminator = None

        if billing_mode is not None:
            self.billing_mode = billing_mode
        if owner_id is not None:
            self.owner_id = owner_id
        if payer_id is not None:
            self.payer_id = payer_id
        if product is not None:
            self.product = product
        if project is not None:
            self.project = project
        if region is not None:
            self.region = region
        if subject_no is not None:
            self.subject_no = subject_no
        if tag is not None:
            self.tag = tag
        if zone is not None:
            self.zone = zone

    @property
    def billing_mode(self):
        """Gets the billing_mode of this BudgetRangeForUpdateBudgetInput.  # noqa: E501


        :return: The billing_mode of this BudgetRangeForUpdateBudgetInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._billing_mode

    @billing_mode.setter
    def billing_mode(self, billing_mode):
        """Sets the billing_mode of this BudgetRangeForUpdateBudgetInput.


        :param billing_mode: The billing_mode of this BudgetRangeForUpdateBudgetInput.  # noqa: E501
        :type: list[str]
        """

        self._billing_mode = billing_mode

    @property
    def owner_id(self):
        """Gets the owner_id of this BudgetRangeForUpdateBudgetInput.  # noqa: E501


        :return: The owner_id of this BudgetRangeForUpdateBudgetInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this BudgetRangeForUpdateBudgetInput.


        :param owner_id: The owner_id of this BudgetRangeForUpdateBudgetInput.  # noqa: E501
        :type: list[int]
        """

        self._owner_id = owner_id

    @property
    def payer_id(self):
        """Gets the payer_id of this BudgetRangeForUpdateBudgetInput.  # noqa: E501


        :return: The payer_id of this BudgetRangeForUpdateBudgetInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._payer_id

    @payer_id.setter
    def payer_id(self, payer_id):
        """Sets the payer_id of this BudgetRangeForUpdateBudgetInput.


        :param payer_id: The payer_id of this BudgetRangeForUpdateBudgetInput.  # noqa: E501
        :type: list[int]
        """

        self._payer_id = payer_id

    @property
    def product(self):
        """Gets the product of this BudgetRangeForUpdateBudgetInput.  # noqa: E501


        :return: The product of this BudgetRangeForUpdateBudgetInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this BudgetRangeForUpdateBudgetInput.


        :param product: The product of this BudgetRangeForUpdateBudgetInput.  # noqa: E501
        :type: list[str]
        """

        self._product = product

    @property
    def project(self):
        """Gets the project of this BudgetRangeForUpdateBudgetInput.  # noqa: E501


        :return: The project of this BudgetRangeForUpdateBudgetInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this BudgetRangeForUpdateBudgetInput.


        :param project: The project of this BudgetRangeForUpdateBudgetInput.  # noqa: E501
        :type: list[str]
        """

        self._project = project

    @property
    def region(self):
        """Gets the region of this BudgetRangeForUpdateBudgetInput.  # noqa: E501


        :return: The region of this BudgetRangeForUpdateBudgetInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this BudgetRangeForUpdateBudgetInput.


        :param region: The region of this BudgetRangeForUpdateBudgetInput.  # noqa: E501
        :type: list[str]
        """

        self._region = region

    @property
    def subject_no(self):
        """Gets the subject_no of this BudgetRangeForUpdateBudgetInput.  # noqa: E501


        :return: The subject_no of this BudgetRangeForUpdateBudgetInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_no

    @subject_no.setter
    def subject_no(self, subject_no):
        """Sets the subject_no of this BudgetRangeForUpdateBudgetInput.


        :param subject_no: The subject_no of this BudgetRangeForUpdateBudgetInput.  # noqa: E501
        :type: list[str]
        """

        self._subject_no = subject_no

    @property
    def tag(self):
        """Gets the tag of this BudgetRangeForUpdateBudgetInput.  # noqa: E501


        :return: The tag of this BudgetRangeForUpdateBudgetInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this BudgetRangeForUpdateBudgetInput.


        :param tag: The tag of this BudgetRangeForUpdateBudgetInput.  # noqa: E501
        :type: list[str]
        """

        self._tag = tag

    @property
    def zone(self):
        """Gets the zone of this BudgetRangeForUpdateBudgetInput.  # noqa: E501


        :return: The zone of this BudgetRangeForUpdateBudgetInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this BudgetRangeForUpdateBudgetInput.


        :param zone: The zone of this BudgetRangeForUpdateBudgetInput.  # noqa: E501
        :type: list[str]
        """

        self._zone = zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BudgetRangeForUpdateBudgetInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BudgetRangeForUpdateBudgetInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BudgetRangeForUpdateBudgetInput):
            return True

        return self.to_dict() != other.to_dict()
