# coding: utf-8

"""
    billing

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class RecipientInformationListForListRecipientInformationOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'recipient_email': 'str',
        'recipient_id': 'int',
        'recipient_message': 'str',
        'recipient_name': 'str'
    }

    attribute_map = {
        'recipient_email': 'RecipientEmail',
        'recipient_id': 'RecipientID',
        'recipient_message': 'RecipientMessage',
        'recipient_name': 'RecipientName'
    }

    def __init__(self, recipient_email=None, recipient_id=None, recipient_message=None, recipient_name=None, _configuration=None):  # noqa: E501
        """RecipientInformationListForListRecipientInformationOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._recipient_email = None
        self._recipient_id = None
        self._recipient_message = None
        self._recipient_name = None
        self.discriminator = None

        if recipient_email is not None:
            self.recipient_email = recipient_email
        if recipient_id is not None:
            self.recipient_id = recipient_id
        if recipient_message is not None:
            self.recipient_message = recipient_message
        if recipient_name is not None:
            self.recipient_name = recipient_name

    @property
    def recipient_email(self):
        """Gets the recipient_email of this RecipientInformationListForListRecipientInformationOutput.  # noqa: E501


        :return: The recipient_email of this RecipientInformationListForListRecipientInformationOutput.  # noqa: E501
        :rtype: str
        """
        return self._recipient_email

    @recipient_email.setter
    def recipient_email(self, recipient_email):
        """Sets the recipient_email of this RecipientInformationListForListRecipientInformationOutput.


        :param recipient_email: The recipient_email of this RecipientInformationListForListRecipientInformationOutput.  # noqa: E501
        :type: str
        """

        self._recipient_email = recipient_email

    @property
    def recipient_id(self):
        """Gets the recipient_id of this RecipientInformationListForListRecipientInformationOutput.  # noqa: E501


        :return: The recipient_id of this RecipientInformationListForListRecipientInformationOutput.  # noqa: E501
        :rtype: int
        """
        return self._recipient_id

    @recipient_id.setter
    def recipient_id(self, recipient_id):
        """Sets the recipient_id of this RecipientInformationListForListRecipientInformationOutput.


        :param recipient_id: The recipient_id of this RecipientInformationListForListRecipientInformationOutput.  # noqa: E501
        :type: int
        """

        self._recipient_id = recipient_id

    @property
    def recipient_message(self):
        """Gets the recipient_message of this RecipientInformationListForListRecipientInformationOutput.  # noqa: E501


        :return: The recipient_message of this RecipientInformationListForListRecipientInformationOutput.  # noqa: E501
        :rtype: str
        """
        return self._recipient_message

    @recipient_message.setter
    def recipient_message(self, recipient_message):
        """Sets the recipient_message of this RecipientInformationListForListRecipientInformationOutput.


        :param recipient_message: The recipient_message of this RecipientInformationListForListRecipientInformationOutput.  # noqa: E501
        :type: str
        """

        self._recipient_message = recipient_message

    @property
    def recipient_name(self):
        """Gets the recipient_name of this RecipientInformationListForListRecipientInformationOutput.  # noqa: E501


        :return: The recipient_name of this RecipientInformationListForListRecipientInformationOutput.  # noqa: E501
        :rtype: str
        """
        return self._recipient_name

    @recipient_name.setter
    def recipient_name(self, recipient_name):
        """Sets the recipient_name of this RecipientInformationListForListRecipientInformationOutput.


        :param recipient_name: The recipient_name of this RecipientInformationListForListRecipientInformationOutput.  # noqa: E501
        :type: str
        """

        self._recipient_name = recipient_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecipientInformationListForListRecipientInformationOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecipientInformationListForListRecipientInformationOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RecipientInformationListForListRecipientInformationOutput):
            return True

        return self.to_dict() != other.to_dict()
