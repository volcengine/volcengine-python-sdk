# coding: utf-8

"""
    bmq20240901

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ClientsInfoForDescribeMQTTClientsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'connected_time': 'str',
        'connection_state': 'str',
        'disconnected_time': 'str',
        'heart_beat_interval': 'str',
        'ip_address': 'str',
        'port': 'str',
        'session_expire_interval': 'str',
        'subscriptions_count': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'client_id': 'ClientId',
        'connected_time': 'ConnectedTime',
        'connection_state': 'ConnectionState',
        'disconnected_time': 'DisconnectedTime',
        'heart_beat_interval': 'HeartBeatInterval',
        'ip_address': 'IpAddress',
        'port': 'Port',
        'session_expire_interval': 'SessionExpireInterval',
        'subscriptions_count': 'SubscriptionsCount',
        'user_name': 'UserName'
    }

    def __init__(self, client_id=None, connected_time=None, connection_state=None, disconnected_time=None, heart_beat_interval=None, ip_address=None, port=None, session_expire_interval=None, subscriptions_count=None, user_name=None, _configuration=None):  # noqa: E501
        """ClientsInfoForDescribeMQTTClientsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._client_id = None
        self._connected_time = None
        self._connection_state = None
        self._disconnected_time = None
        self._heart_beat_interval = None
        self._ip_address = None
        self._port = None
        self._session_expire_interval = None
        self._subscriptions_count = None
        self._user_name = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if connected_time is not None:
            self.connected_time = connected_time
        if connection_state is not None:
            self.connection_state = connection_state
        if disconnected_time is not None:
            self.disconnected_time = disconnected_time
        if heart_beat_interval is not None:
            self.heart_beat_interval = heart_beat_interval
        if ip_address is not None:
            self.ip_address = ip_address
        if port is not None:
            self.port = port
        if session_expire_interval is not None:
            self.session_expire_interval = session_expire_interval
        if subscriptions_count is not None:
            self.subscriptions_count = subscriptions_count
        if user_name is not None:
            self.user_name = user_name

    @property
    def client_id(self):
        """Gets the client_id of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501


        :return: The client_id of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ClientsInfoForDescribeMQTTClientsOutput.


        :param client_id: The client_id of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def connected_time(self):
        """Gets the connected_time of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501


        :return: The connected_time of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501
        :rtype: str
        """
        return self._connected_time

    @connected_time.setter
    def connected_time(self, connected_time):
        """Sets the connected_time of this ClientsInfoForDescribeMQTTClientsOutput.


        :param connected_time: The connected_time of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501
        :type: str
        """

        self._connected_time = connected_time

    @property
    def connection_state(self):
        """Gets the connection_state of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501


        :return: The connection_state of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501
        :rtype: str
        """
        return self._connection_state

    @connection_state.setter
    def connection_state(self, connection_state):
        """Sets the connection_state of this ClientsInfoForDescribeMQTTClientsOutput.


        :param connection_state: The connection_state of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501
        :type: str
        """

        self._connection_state = connection_state

    @property
    def disconnected_time(self):
        """Gets the disconnected_time of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501


        :return: The disconnected_time of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501
        :rtype: str
        """
        return self._disconnected_time

    @disconnected_time.setter
    def disconnected_time(self, disconnected_time):
        """Sets the disconnected_time of this ClientsInfoForDescribeMQTTClientsOutput.


        :param disconnected_time: The disconnected_time of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501
        :type: str
        """

        self._disconnected_time = disconnected_time

    @property
    def heart_beat_interval(self):
        """Gets the heart_beat_interval of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501


        :return: The heart_beat_interval of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501
        :rtype: str
        """
        return self._heart_beat_interval

    @heart_beat_interval.setter
    def heart_beat_interval(self, heart_beat_interval):
        """Sets the heart_beat_interval of this ClientsInfoForDescribeMQTTClientsOutput.


        :param heart_beat_interval: The heart_beat_interval of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501
        :type: str
        """

        self._heart_beat_interval = heart_beat_interval

    @property
    def ip_address(self):
        """Gets the ip_address of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501


        :return: The ip_address of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this ClientsInfoForDescribeMQTTClientsOutput.


        :param ip_address: The ip_address of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def port(self):
        """Gets the port of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501


        :return: The port of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ClientsInfoForDescribeMQTTClientsOutput.


        :param port: The port of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def session_expire_interval(self):
        """Gets the session_expire_interval of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501


        :return: The session_expire_interval of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501
        :rtype: str
        """
        return self._session_expire_interval

    @session_expire_interval.setter
    def session_expire_interval(self, session_expire_interval):
        """Sets the session_expire_interval of this ClientsInfoForDescribeMQTTClientsOutput.


        :param session_expire_interval: The session_expire_interval of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501
        :type: str
        """

        self._session_expire_interval = session_expire_interval

    @property
    def subscriptions_count(self):
        """Gets the subscriptions_count of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501


        :return: The subscriptions_count of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501
        :rtype: str
        """
        return self._subscriptions_count

    @subscriptions_count.setter
    def subscriptions_count(self, subscriptions_count):
        """Sets the subscriptions_count of this ClientsInfoForDescribeMQTTClientsOutput.


        :param subscriptions_count: The subscriptions_count of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501
        :type: str
        """

        self._subscriptions_count = subscriptions_count

    @property
    def user_name(self):
        """Gets the user_name of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501


        :return: The user_name of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ClientsInfoForDescribeMQTTClientsOutput.


        :param user_name: The user_name of this ClientsInfoForDescribeMQTTClientsOutput.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientsInfoForDescribeMQTTClientsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientsInfoForDescribeMQTTClientsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClientsInfoForDescribeMQTTClientsOutput):
            return True

        return self.to_dict() != other.to_dict()
