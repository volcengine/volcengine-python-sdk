# coding: utf-8

"""
    resource_share

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ListResourceSharePermissionsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_results': 'int',
        'next_token': 'str',
        'resource_share_trn': 'str'
    }

    attribute_map = {
        'max_results': 'MaxResults',
        'next_token': 'NextToken',
        'resource_share_trn': 'ResourceShareTrn'
    }

    def __init__(self, max_results=None, next_token=None, resource_share_trn=None, _configuration=None):  # noqa: E501
        """ListResourceSharePermissionsRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._max_results = None
        self._next_token = None
        self._resource_share_trn = None
        self.discriminator = None

        if max_results is not None:
            self.max_results = max_results
        if next_token is not None:
            self.next_token = next_token
        self.resource_share_trn = resource_share_trn

    @property
    def max_results(self):
        """Gets the max_results of this ListResourceSharePermissionsRequest.  # noqa: E501


        :return: The max_results of this ListResourceSharePermissionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListResourceSharePermissionsRequest.


        :param max_results: The max_results of this ListResourceSharePermissionsRequest.  # noqa: E501
        :type: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListResourceSharePermissionsRequest.  # noqa: E501


        :return: The next_token of this ListResourceSharePermissionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListResourceSharePermissionsRequest.


        :param next_token: The next_token of this ListResourceSharePermissionsRequest.  # noqa: E501
        :type: str
        """

        self._next_token = next_token

    @property
    def resource_share_trn(self):
        """Gets the resource_share_trn of this ListResourceSharePermissionsRequest.  # noqa: E501


        :return: The resource_share_trn of this ListResourceSharePermissionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_share_trn

    @resource_share_trn.setter
    def resource_share_trn(self, resource_share_trn):
        """Sets the resource_share_trn of this ListResourceSharePermissionsRequest.


        :param resource_share_trn: The resource_share_trn of this ListResourceSharePermissionsRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and resource_share_trn is None:
            raise ValueError("Invalid value for `resource_share_trn`, must not be `None`")  # noqa: E501

        self._resource_share_trn = resource_share_trn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListResourceSharePermissionsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListResourceSharePermissionsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListResourceSharePermissionsRequest):
            return True

        return self.to_dict() != other.to_dict()
