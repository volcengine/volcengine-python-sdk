# coding: utf-8

"""
    organization

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class AccountListForListAccountsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_name': 'str',
        'allow_console': 'int',
        'allow_exit': 'int',
        'created_time': 'str',
        'delete_uk': 'str',
        'deleted_time': 'str',
        'description': 'str',
        'id': 'str',
        'iam_role': 'str',
        'is_owner': 'int',
        'join_type': 'int',
        'org_id': 'str',
        'org_type': 'int',
        'org_unit_id': 'str',
        'org_unit_name': 'str',
        'org_verification_id': 'str',
        'owner': 'str',
        'show_name': 'str',
        'tags': 'list[TagForListAccountsOutput]',
        'updated_time': 'str'
    }

    attribute_map = {
        'account_id': 'AccountID',
        'account_name': 'AccountName',
        'allow_console': 'AllowConsole',
        'allow_exit': 'AllowExit',
        'created_time': 'CreatedTime',
        'delete_uk': 'DeleteUk',
        'deleted_time': 'DeletedTime',
        'description': 'Description',
        'id': 'ID',
        'iam_role': 'IamRole',
        'is_owner': 'IsOwner',
        'join_type': 'JoinType',
        'org_id': 'OrgID',
        'org_type': 'OrgType',
        'org_unit_id': 'OrgUnitID',
        'org_unit_name': 'OrgUnitName',
        'org_verification_id': 'OrgVerificationID',
        'owner': 'Owner',
        'show_name': 'ShowName',
        'tags': 'Tags',
        'updated_time': 'UpdatedTime'
    }

    def __init__(self, account_id=None, account_name=None, allow_console=None, allow_exit=None, created_time=None, delete_uk=None, deleted_time=None, description=None, id=None, iam_role=None, is_owner=None, join_type=None, org_id=None, org_type=None, org_unit_id=None, org_unit_name=None, org_verification_id=None, owner=None, show_name=None, tags=None, updated_time=None, _configuration=None):  # noqa: E501
        """AccountListForListAccountsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._account_name = None
        self._allow_console = None
        self._allow_exit = None
        self._created_time = None
        self._delete_uk = None
        self._deleted_time = None
        self._description = None
        self._id = None
        self._iam_role = None
        self._is_owner = None
        self._join_type = None
        self._org_id = None
        self._org_type = None
        self._org_unit_id = None
        self._org_unit_name = None
        self._org_verification_id = None
        self._owner = None
        self._show_name = None
        self._tags = None
        self._updated_time = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if account_name is not None:
            self.account_name = account_name
        if allow_console is not None:
            self.allow_console = allow_console
        if allow_exit is not None:
            self.allow_exit = allow_exit
        if created_time is not None:
            self.created_time = created_time
        if delete_uk is not None:
            self.delete_uk = delete_uk
        if deleted_time is not None:
            self.deleted_time = deleted_time
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if iam_role is not None:
            self.iam_role = iam_role
        if is_owner is not None:
            self.is_owner = is_owner
        if join_type is not None:
            self.join_type = join_type
        if org_id is not None:
            self.org_id = org_id
        if org_type is not None:
            self.org_type = org_type
        if org_unit_id is not None:
            self.org_unit_id = org_unit_id
        if org_unit_name is not None:
            self.org_unit_name = org_unit_name
        if org_verification_id is not None:
            self.org_verification_id = org_verification_id
        if owner is not None:
            self.owner = owner
        if show_name is not None:
            self.show_name = show_name
        if tags is not None:
            self.tags = tags
        if updated_time is not None:
            self.updated_time = updated_time

    @property
    def account_id(self):
        """Gets the account_id of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The account_id of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountListForListAccountsOutput.


        :param account_id: The account_id of this AccountListForListAccountsOutput.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The account_name of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this AccountListForListAccountsOutput.


        :param account_name: The account_name of this AccountListForListAccountsOutput.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def allow_console(self):
        """Gets the allow_console of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The allow_console of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: int
        """
        return self._allow_console

    @allow_console.setter
    def allow_console(self, allow_console):
        """Sets the allow_console of this AccountListForListAccountsOutput.


        :param allow_console: The allow_console of this AccountListForListAccountsOutput.  # noqa: E501
        :type: int
        """

        self._allow_console = allow_console

    @property
    def allow_exit(self):
        """Gets the allow_exit of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The allow_exit of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: int
        """
        return self._allow_exit

    @allow_exit.setter
    def allow_exit(self, allow_exit):
        """Sets the allow_exit of this AccountListForListAccountsOutput.


        :param allow_exit: The allow_exit of this AccountListForListAccountsOutput.  # noqa: E501
        :type: int
        """

        self._allow_exit = allow_exit

    @property
    def created_time(self):
        """Gets the created_time of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The created_time of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this AccountListForListAccountsOutput.


        :param created_time: The created_time of this AccountListForListAccountsOutput.  # noqa: E501
        :type: str
        """

        self._created_time = created_time

    @property
    def delete_uk(self):
        """Gets the delete_uk of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The delete_uk of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: str
        """
        return self._delete_uk

    @delete_uk.setter
    def delete_uk(self, delete_uk):
        """Sets the delete_uk of this AccountListForListAccountsOutput.


        :param delete_uk: The delete_uk of this AccountListForListAccountsOutput.  # noqa: E501
        :type: str
        """

        self._delete_uk = delete_uk

    @property
    def deleted_time(self):
        """Gets the deleted_time of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The deleted_time of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: str
        """
        return self._deleted_time

    @deleted_time.setter
    def deleted_time(self, deleted_time):
        """Sets the deleted_time of this AccountListForListAccountsOutput.


        :param deleted_time: The deleted_time of this AccountListForListAccountsOutput.  # noqa: E501
        :type: str
        """

        self._deleted_time = deleted_time

    @property
    def description(self):
        """Gets the description of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The description of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountListForListAccountsOutput.


        :param description: The description of this AccountListForListAccountsOutput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The id of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountListForListAccountsOutput.


        :param id: The id of this AccountListForListAccountsOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def iam_role(self):
        """Gets the iam_role of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The iam_role of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: str
        """
        return self._iam_role

    @iam_role.setter
    def iam_role(self, iam_role):
        """Sets the iam_role of this AccountListForListAccountsOutput.


        :param iam_role: The iam_role of this AccountListForListAccountsOutput.  # noqa: E501
        :type: str
        """

        self._iam_role = iam_role

    @property
    def is_owner(self):
        """Gets the is_owner of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The is_owner of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: int
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this AccountListForListAccountsOutput.


        :param is_owner: The is_owner of this AccountListForListAccountsOutput.  # noqa: E501
        :type: int
        """

        self._is_owner = is_owner

    @property
    def join_type(self):
        """Gets the join_type of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The join_type of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: int
        """
        return self._join_type

    @join_type.setter
    def join_type(self, join_type):
        """Sets the join_type of this AccountListForListAccountsOutput.


        :param join_type: The join_type of this AccountListForListAccountsOutput.  # noqa: E501
        :type: int
        """

        self._join_type = join_type

    @property
    def org_id(self):
        """Gets the org_id of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The org_id of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this AccountListForListAccountsOutput.


        :param org_id: The org_id of this AccountListForListAccountsOutput.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def org_type(self):
        """Gets the org_type of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The org_type of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: int
        """
        return self._org_type

    @org_type.setter
    def org_type(self, org_type):
        """Sets the org_type of this AccountListForListAccountsOutput.


        :param org_type: The org_type of this AccountListForListAccountsOutput.  # noqa: E501
        :type: int
        """

        self._org_type = org_type

    @property
    def org_unit_id(self):
        """Gets the org_unit_id of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The org_unit_id of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: str
        """
        return self._org_unit_id

    @org_unit_id.setter
    def org_unit_id(self, org_unit_id):
        """Sets the org_unit_id of this AccountListForListAccountsOutput.


        :param org_unit_id: The org_unit_id of this AccountListForListAccountsOutput.  # noqa: E501
        :type: str
        """

        self._org_unit_id = org_unit_id

    @property
    def org_unit_name(self):
        """Gets the org_unit_name of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The org_unit_name of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: str
        """
        return self._org_unit_name

    @org_unit_name.setter
    def org_unit_name(self, org_unit_name):
        """Sets the org_unit_name of this AccountListForListAccountsOutput.


        :param org_unit_name: The org_unit_name of this AccountListForListAccountsOutput.  # noqa: E501
        :type: str
        """

        self._org_unit_name = org_unit_name

    @property
    def org_verification_id(self):
        """Gets the org_verification_id of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The org_verification_id of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: str
        """
        return self._org_verification_id

    @org_verification_id.setter
    def org_verification_id(self, org_verification_id):
        """Sets the org_verification_id of this AccountListForListAccountsOutput.


        :param org_verification_id: The org_verification_id of this AccountListForListAccountsOutput.  # noqa: E501
        :type: str
        """

        self._org_verification_id = org_verification_id

    @property
    def owner(self):
        """Gets the owner of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The owner of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this AccountListForListAccountsOutput.


        :param owner: The owner of this AccountListForListAccountsOutput.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def show_name(self):
        """Gets the show_name of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The show_name of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: str
        """
        return self._show_name

    @show_name.setter
    def show_name(self, show_name):
        """Sets the show_name of this AccountListForListAccountsOutput.


        :param show_name: The show_name of this AccountListForListAccountsOutput.  # noqa: E501
        :type: str
        """

        self._show_name = show_name

    @property
    def tags(self):
        """Gets the tags of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The tags of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: list[TagForListAccountsOutput]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AccountListForListAccountsOutput.


        :param tags: The tags of this AccountListForListAccountsOutput.  # noqa: E501
        :type: list[TagForListAccountsOutput]
        """

        self._tags = tags

    @property
    def updated_time(self):
        """Gets the updated_time of this AccountListForListAccountsOutput.  # noqa: E501


        :return: The updated_time of this AccountListForListAccountsOutput.  # noqa: E501
        :rtype: str
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this AccountListForListAccountsOutput.


        :param updated_time: The updated_time of this AccountListForListAccountsOutput.  # noqa: E501
        :type: str
        """

        self._updated_time = updated_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountListForListAccountsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountListForListAccountsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountListForListAccountsOutput):
            return True

        return self.to_dict() != other.to_dict()
