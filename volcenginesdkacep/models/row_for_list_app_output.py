# coding: utf-8

"""
    acep

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class RowForListAppOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_desc': 'str',
        'app_id': 'str',
        'app_mode': 'str',
        'app_name': 'str',
        'app_status': 'int',
        'app_type': 'int',
        'apply_num': 'int',
        'deploy_status': 'int',
        'deploy_version_num': 'int',
        'icon_url': 'str',
        'latest_version': 'LatestVersionForListAppOutput',
        'package_name': 'str',
        'product_id': 'str',
        'ready_num': 'int',
        'rotation': 'int'
    }

    attribute_map = {
        'app_desc': 'AppDesc',
        'app_id': 'AppId',
        'app_mode': 'AppMode',
        'app_name': 'AppName',
        'app_status': 'AppStatus',
        'app_type': 'AppType',
        'apply_num': 'ApplyNum',
        'deploy_status': 'DeployStatus',
        'deploy_version_num': 'DeployVersionNum',
        'icon_url': 'IconUrl',
        'latest_version': 'LatestVersion',
        'package_name': 'PackageName',
        'product_id': 'ProductId',
        'ready_num': 'ReadyNum',
        'rotation': 'Rotation'
    }

    def __init__(self, app_desc=None, app_id=None, app_mode=None, app_name=None, app_status=None, app_type=None, apply_num=None, deploy_status=None, deploy_version_num=None, icon_url=None, latest_version=None, package_name=None, product_id=None, ready_num=None, rotation=None, _configuration=None):  # noqa: E501
        """RowForListAppOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._app_desc = None
        self._app_id = None
        self._app_mode = None
        self._app_name = None
        self._app_status = None
        self._app_type = None
        self._apply_num = None
        self._deploy_status = None
        self._deploy_version_num = None
        self._icon_url = None
        self._latest_version = None
        self._package_name = None
        self._product_id = None
        self._ready_num = None
        self._rotation = None
        self.discriminator = None

        if app_desc is not None:
            self.app_desc = app_desc
        if app_id is not None:
            self.app_id = app_id
        if app_mode is not None:
            self.app_mode = app_mode
        if app_name is not None:
            self.app_name = app_name
        if app_status is not None:
            self.app_status = app_status
        if app_type is not None:
            self.app_type = app_type
        if apply_num is not None:
            self.apply_num = apply_num
        if deploy_status is not None:
            self.deploy_status = deploy_status
        if deploy_version_num is not None:
            self.deploy_version_num = deploy_version_num
        if icon_url is not None:
            self.icon_url = icon_url
        if latest_version is not None:
            self.latest_version = latest_version
        if package_name is not None:
            self.package_name = package_name
        if product_id is not None:
            self.product_id = product_id
        if ready_num is not None:
            self.ready_num = ready_num
        if rotation is not None:
            self.rotation = rotation

    @property
    def app_desc(self):
        """Gets the app_desc of this RowForListAppOutput.  # noqa: E501


        :return: The app_desc of this RowForListAppOutput.  # noqa: E501
        :rtype: str
        """
        return self._app_desc

    @app_desc.setter
    def app_desc(self, app_desc):
        """Sets the app_desc of this RowForListAppOutput.


        :param app_desc: The app_desc of this RowForListAppOutput.  # noqa: E501
        :type: str
        """

        self._app_desc = app_desc

    @property
    def app_id(self):
        """Gets the app_id of this RowForListAppOutput.  # noqa: E501


        :return: The app_id of this RowForListAppOutput.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this RowForListAppOutput.


        :param app_id: The app_id of this RowForListAppOutput.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def app_mode(self):
        """Gets the app_mode of this RowForListAppOutput.  # noqa: E501


        :return: The app_mode of this RowForListAppOutput.  # noqa: E501
        :rtype: str
        """
        return self._app_mode

    @app_mode.setter
    def app_mode(self, app_mode):
        """Sets the app_mode of this RowForListAppOutput.


        :param app_mode: The app_mode of this RowForListAppOutput.  # noqa: E501
        :type: str
        """

        self._app_mode = app_mode

    @property
    def app_name(self):
        """Gets the app_name of this RowForListAppOutput.  # noqa: E501


        :return: The app_name of this RowForListAppOutput.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this RowForListAppOutput.


        :param app_name: The app_name of this RowForListAppOutput.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def app_status(self):
        """Gets the app_status of this RowForListAppOutput.  # noqa: E501


        :return: The app_status of this RowForListAppOutput.  # noqa: E501
        :rtype: int
        """
        return self._app_status

    @app_status.setter
    def app_status(self, app_status):
        """Sets the app_status of this RowForListAppOutput.


        :param app_status: The app_status of this RowForListAppOutput.  # noqa: E501
        :type: int
        """

        self._app_status = app_status

    @property
    def app_type(self):
        """Gets the app_type of this RowForListAppOutput.  # noqa: E501


        :return: The app_type of this RowForListAppOutput.  # noqa: E501
        :rtype: int
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this RowForListAppOutput.


        :param app_type: The app_type of this RowForListAppOutput.  # noqa: E501
        :type: int
        """

        self._app_type = app_type

    @property
    def apply_num(self):
        """Gets the apply_num of this RowForListAppOutput.  # noqa: E501


        :return: The apply_num of this RowForListAppOutput.  # noqa: E501
        :rtype: int
        """
        return self._apply_num

    @apply_num.setter
    def apply_num(self, apply_num):
        """Sets the apply_num of this RowForListAppOutput.


        :param apply_num: The apply_num of this RowForListAppOutput.  # noqa: E501
        :type: int
        """

        self._apply_num = apply_num

    @property
    def deploy_status(self):
        """Gets the deploy_status of this RowForListAppOutput.  # noqa: E501


        :return: The deploy_status of this RowForListAppOutput.  # noqa: E501
        :rtype: int
        """
        return self._deploy_status

    @deploy_status.setter
    def deploy_status(self, deploy_status):
        """Sets the deploy_status of this RowForListAppOutput.


        :param deploy_status: The deploy_status of this RowForListAppOutput.  # noqa: E501
        :type: int
        """

        self._deploy_status = deploy_status

    @property
    def deploy_version_num(self):
        """Gets the deploy_version_num of this RowForListAppOutput.  # noqa: E501


        :return: The deploy_version_num of this RowForListAppOutput.  # noqa: E501
        :rtype: int
        """
        return self._deploy_version_num

    @deploy_version_num.setter
    def deploy_version_num(self, deploy_version_num):
        """Sets the deploy_version_num of this RowForListAppOutput.


        :param deploy_version_num: The deploy_version_num of this RowForListAppOutput.  # noqa: E501
        :type: int
        """

        self._deploy_version_num = deploy_version_num

    @property
    def icon_url(self):
        """Gets the icon_url of this RowForListAppOutput.  # noqa: E501


        :return: The icon_url of this RowForListAppOutput.  # noqa: E501
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this RowForListAppOutput.


        :param icon_url: The icon_url of this RowForListAppOutput.  # noqa: E501
        :type: str
        """

        self._icon_url = icon_url

    @property
    def latest_version(self):
        """Gets the latest_version of this RowForListAppOutput.  # noqa: E501


        :return: The latest_version of this RowForListAppOutput.  # noqa: E501
        :rtype: LatestVersionForListAppOutput
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """Sets the latest_version of this RowForListAppOutput.


        :param latest_version: The latest_version of this RowForListAppOutput.  # noqa: E501
        :type: LatestVersionForListAppOutput
        """

        self._latest_version = latest_version

    @property
    def package_name(self):
        """Gets the package_name of this RowForListAppOutput.  # noqa: E501


        :return: The package_name of this RowForListAppOutput.  # noqa: E501
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this RowForListAppOutput.


        :param package_name: The package_name of this RowForListAppOutput.  # noqa: E501
        :type: str
        """

        self._package_name = package_name

    @property
    def product_id(self):
        """Gets the product_id of this RowForListAppOutput.  # noqa: E501


        :return: The product_id of this RowForListAppOutput.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this RowForListAppOutput.


        :param product_id: The product_id of this RowForListAppOutput.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def ready_num(self):
        """Gets the ready_num of this RowForListAppOutput.  # noqa: E501


        :return: The ready_num of this RowForListAppOutput.  # noqa: E501
        :rtype: int
        """
        return self._ready_num

    @ready_num.setter
    def ready_num(self, ready_num):
        """Sets the ready_num of this RowForListAppOutput.


        :param ready_num: The ready_num of this RowForListAppOutput.  # noqa: E501
        :type: int
        """

        self._ready_num = ready_num

    @property
    def rotation(self):
        """Gets the rotation of this RowForListAppOutput.  # noqa: E501


        :return: The rotation of this RowForListAppOutput.  # noqa: E501
        :rtype: int
        """
        return self._rotation

    @rotation.setter
    def rotation(self, rotation):
        """Sets the rotation of this RowForListAppOutput.


        :param rotation: The rotation of this RowForListAppOutput.  # noqa: E501
        :type: int
        """

        self._rotation = rotation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RowForListAppOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RowForListAppOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RowForListAppOutput):
            return True

        return self.to_dict() != other.to_dict()
