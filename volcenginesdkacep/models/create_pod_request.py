# coding: utf-8

"""
    acep

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreatePodRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'configuration_code': 'str',
        'custom_route_id': 'str',
        'dnsid': 'str',
        'data_size': 'str',
        'dc': 'str',
        'display_layout_id': 'str',
        'down_bandwidth_limit': 'int',
        'host_id': 'str',
        'ip_white_list': 'str',
        'image_id': 'str',
        'overlay_persist_property': 'list[OverlayPersistPropertyForCreatePodInput]',
        'overlay_property': 'list[OverlayPropertyForCreatePodInput]',
        'overlay_settings': 'list[OverlaySettingForCreatePodInput]',
        'phone_template_id': 'str',
        'pod_name': 'str',
        'pod_spec_list': 'list[PodSpecListForCreatePodInput]',
        'port_mapping_rule_id_list': 'list[str]',
        'product_id': 'str',
        'resource_type': 'int',
        'start': 'bool',
        'tag_id': 'str',
        'up_bandwidth_limit': 'int',
        'use_phone_template': 'int'
    }

    attribute_map = {
        'configuration_code': 'ConfigurationCode',
        'custom_route_id': 'CustomRouteId',
        'dnsid': 'DNSId',
        'data_size': 'DataSize',
        'dc': 'Dc',
        'display_layout_id': 'DisplayLayoutId',
        'down_bandwidth_limit': 'DownBandwidthLimit',
        'host_id': 'HostId',
        'ip_white_list': 'IPWhiteList',
        'image_id': 'ImageId',
        'overlay_persist_property': 'OverlayPersistProperty',
        'overlay_property': 'OverlayProperty',
        'overlay_settings': 'OverlaySettings',
        'phone_template_id': 'PhoneTemplateId',
        'pod_name': 'PodName',
        'pod_spec_list': 'PodSpecList',
        'port_mapping_rule_id_list': 'PortMappingRuleIdList',
        'product_id': 'ProductId',
        'resource_type': 'ResourceType',
        'start': 'Start',
        'tag_id': 'TagId',
        'up_bandwidth_limit': 'UpBandwidthLimit',
        'use_phone_template': 'UsePhoneTemplate'
    }

    def __init__(self, configuration_code=None, custom_route_id=None, dnsid=None, data_size=None, dc=None, display_layout_id=None, down_bandwidth_limit=None, host_id=None, ip_white_list=None, image_id=None, overlay_persist_property=None, overlay_property=None, overlay_settings=None, phone_template_id=None, pod_name=None, pod_spec_list=None, port_mapping_rule_id_list=None, product_id=None, resource_type=None, start=None, tag_id=None, up_bandwidth_limit=None, use_phone_template=None, _configuration=None):  # noqa: E501
        """CreatePodRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._configuration_code = None
        self._custom_route_id = None
        self._dnsid = None
        self._data_size = None
        self._dc = None
        self._display_layout_id = None
        self._down_bandwidth_limit = None
        self._host_id = None
        self._ip_white_list = None
        self._image_id = None
        self._overlay_persist_property = None
        self._overlay_property = None
        self._overlay_settings = None
        self._phone_template_id = None
        self._pod_name = None
        self._pod_spec_list = None
        self._port_mapping_rule_id_list = None
        self._product_id = None
        self._resource_type = None
        self._start = None
        self._tag_id = None
        self._up_bandwidth_limit = None
        self._use_phone_template = None
        self.discriminator = None

        if configuration_code is not None:
            self.configuration_code = configuration_code
        if custom_route_id is not None:
            self.custom_route_id = custom_route_id
        if dnsid is not None:
            self.dnsid = dnsid
        if data_size is not None:
            self.data_size = data_size
        if dc is not None:
            self.dc = dc
        if display_layout_id is not None:
            self.display_layout_id = display_layout_id
        if down_bandwidth_limit is not None:
            self.down_bandwidth_limit = down_bandwidth_limit
        if host_id is not None:
            self.host_id = host_id
        if ip_white_list is not None:
            self.ip_white_list = ip_white_list
        if image_id is not None:
            self.image_id = image_id
        if overlay_persist_property is not None:
            self.overlay_persist_property = overlay_persist_property
        if overlay_property is not None:
            self.overlay_property = overlay_property
        if overlay_settings is not None:
            self.overlay_settings = overlay_settings
        if phone_template_id is not None:
            self.phone_template_id = phone_template_id
        if pod_name is not None:
            self.pod_name = pod_name
        if pod_spec_list is not None:
            self.pod_spec_list = pod_spec_list
        if port_mapping_rule_id_list is not None:
            self.port_mapping_rule_id_list = port_mapping_rule_id_list
        self.product_id = product_id
        if resource_type is not None:
            self.resource_type = resource_type
        if start is not None:
            self.start = start
        if tag_id is not None:
            self.tag_id = tag_id
        if up_bandwidth_limit is not None:
            self.up_bandwidth_limit = up_bandwidth_limit
        if use_phone_template is not None:
            self.use_phone_template = use_phone_template

    @property
    def configuration_code(self):
        """Gets the configuration_code of this CreatePodRequest.  # noqa: E501


        :return: The configuration_code of this CreatePodRequest.  # noqa: E501
        :rtype: str
        """
        return self._configuration_code

    @configuration_code.setter
    def configuration_code(self, configuration_code):
        """Sets the configuration_code of this CreatePodRequest.


        :param configuration_code: The configuration_code of this CreatePodRequest.  # noqa: E501
        :type: str
        """

        self._configuration_code = configuration_code

    @property
    def custom_route_id(self):
        """Gets the custom_route_id of this CreatePodRequest.  # noqa: E501


        :return: The custom_route_id of this CreatePodRequest.  # noqa: E501
        :rtype: str
        """
        return self._custom_route_id

    @custom_route_id.setter
    def custom_route_id(self, custom_route_id):
        """Sets the custom_route_id of this CreatePodRequest.


        :param custom_route_id: The custom_route_id of this CreatePodRequest.  # noqa: E501
        :type: str
        """

        self._custom_route_id = custom_route_id

    @property
    def dnsid(self):
        """Gets the dnsid of this CreatePodRequest.  # noqa: E501


        :return: The dnsid of this CreatePodRequest.  # noqa: E501
        :rtype: str
        """
        return self._dnsid

    @dnsid.setter
    def dnsid(self, dnsid):
        """Sets the dnsid of this CreatePodRequest.


        :param dnsid: The dnsid of this CreatePodRequest.  # noqa: E501
        :type: str
        """

        self._dnsid = dnsid

    @property
    def data_size(self):
        """Gets the data_size of this CreatePodRequest.  # noqa: E501


        :return: The data_size of this CreatePodRequest.  # noqa: E501
        :rtype: str
        """
        return self._data_size

    @data_size.setter
    def data_size(self, data_size):
        """Sets the data_size of this CreatePodRequest.


        :param data_size: The data_size of this CreatePodRequest.  # noqa: E501
        :type: str
        """

        self._data_size = data_size

    @property
    def dc(self):
        """Gets the dc of this CreatePodRequest.  # noqa: E501


        :return: The dc of this CreatePodRequest.  # noqa: E501
        :rtype: str
        """
        return self._dc

    @dc.setter
    def dc(self, dc):
        """Sets the dc of this CreatePodRequest.


        :param dc: The dc of this CreatePodRequest.  # noqa: E501
        :type: str
        """

        self._dc = dc

    @property
    def display_layout_id(self):
        """Gets the display_layout_id of this CreatePodRequest.  # noqa: E501


        :return: The display_layout_id of this CreatePodRequest.  # noqa: E501
        :rtype: str
        """
        return self._display_layout_id

    @display_layout_id.setter
    def display_layout_id(self, display_layout_id):
        """Sets the display_layout_id of this CreatePodRequest.


        :param display_layout_id: The display_layout_id of this CreatePodRequest.  # noqa: E501
        :type: str
        """

        self._display_layout_id = display_layout_id

    @property
    def down_bandwidth_limit(self):
        """Gets the down_bandwidth_limit of this CreatePodRequest.  # noqa: E501


        :return: The down_bandwidth_limit of this CreatePodRequest.  # noqa: E501
        :rtype: int
        """
        return self._down_bandwidth_limit

    @down_bandwidth_limit.setter
    def down_bandwidth_limit(self, down_bandwidth_limit):
        """Sets the down_bandwidth_limit of this CreatePodRequest.


        :param down_bandwidth_limit: The down_bandwidth_limit of this CreatePodRequest.  # noqa: E501
        :type: int
        """

        self._down_bandwidth_limit = down_bandwidth_limit

    @property
    def host_id(self):
        """Gets the host_id of this CreatePodRequest.  # noqa: E501


        :return: The host_id of this CreatePodRequest.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this CreatePodRequest.


        :param host_id: The host_id of this CreatePodRequest.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def ip_white_list(self):
        """Gets the ip_white_list of this CreatePodRequest.  # noqa: E501


        :return: The ip_white_list of this CreatePodRequest.  # noqa: E501
        :rtype: str
        """
        return self._ip_white_list

    @ip_white_list.setter
    def ip_white_list(self, ip_white_list):
        """Sets the ip_white_list of this CreatePodRequest.


        :param ip_white_list: The ip_white_list of this CreatePodRequest.  # noqa: E501
        :type: str
        """

        self._ip_white_list = ip_white_list

    @property
    def image_id(self):
        """Gets the image_id of this CreatePodRequest.  # noqa: E501


        :return: The image_id of this CreatePodRequest.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this CreatePodRequest.


        :param image_id: The image_id of this CreatePodRequest.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def overlay_persist_property(self):
        """Gets the overlay_persist_property of this CreatePodRequest.  # noqa: E501


        :return: The overlay_persist_property of this CreatePodRequest.  # noqa: E501
        :rtype: list[OverlayPersistPropertyForCreatePodInput]
        """
        return self._overlay_persist_property

    @overlay_persist_property.setter
    def overlay_persist_property(self, overlay_persist_property):
        """Sets the overlay_persist_property of this CreatePodRequest.


        :param overlay_persist_property: The overlay_persist_property of this CreatePodRequest.  # noqa: E501
        :type: list[OverlayPersistPropertyForCreatePodInput]
        """

        self._overlay_persist_property = overlay_persist_property

    @property
    def overlay_property(self):
        """Gets the overlay_property of this CreatePodRequest.  # noqa: E501


        :return: The overlay_property of this CreatePodRequest.  # noqa: E501
        :rtype: list[OverlayPropertyForCreatePodInput]
        """
        return self._overlay_property

    @overlay_property.setter
    def overlay_property(self, overlay_property):
        """Sets the overlay_property of this CreatePodRequest.


        :param overlay_property: The overlay_property of this CreatePodRequest.  # noqa: E501
        :type: list[OverlayPropertyForCreatePodInput]
        """

        self._overlay_property = overlay_property

    @property
    def overlay_settings(self):
        """Gets the overlay_settings of this CreatePodRequest.  # noqa: E501


        :return: The overlay_settings of this CreatePodRequest.  # noqa: E501
        :rtype: list[OverlaySettingForCreatePodInput]
        """
        return self._overlay_settings

    @overlay_settings.setter
    def overlay_settings(self, overlay_settings):
        """Sets the overlay_settings of this CreatePodRequest.


        :param overlay_settings: The overlay_settings of this CreatePodRequest.  # noqa: E501
        :type: list[OverlaySettingForCreatePodInput]
        """

        self._overlay_settings = overlay_settings

    @property
    def phone_template_id(self):
        """Gets the phone_template_id of this CreatePodRequest.  # noqa: E501


        :return: The phone_template_id of this CreatePodRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_template_id

    @phone_template_id.setter
    def phone_template_id(self, phone_template_id):
        """Sets the phone_template_id of this CreatePodRequest.


        :param phone_template_id: The phone_template_id of this CreatePodRequest.  # noqa: E501
        :type: str
        """

        self._phone_template_id = phone_template_id

    @property
    def pod_name(self):
        """Gets the pod_name of this CreatePodRequest.  # noqa: E501


        :return: The pod_name of this CreatePodRequest.  # noqa: E501
        :rtype: str
        """
        return self._pod_name

    @pod_name.setter
    def pod_name(self, pod_name):
        """Sets the pod_name of this CreatePodRequest.


        :param pod_name: The pod_name of this CreatePodRequest.  # noqa: E501
        :type: str
        """

        self._pod_name = pod_name

    @property
    def pod_spec_list(self):
        """Gets the pod_spec_list of this CreatePodRequest.  # noqa: E501


        :return: The pod_spec_list of this CreatePodRequest.  # noqa: E501
        :rtype: list[PodSpecListForCreatePodInput]
        """
        return self._pod_spec_list

    @pod_spec_list.setter
    def pod_spec_list(self, pod_spec_list):
        """Sets the pod_spec_list of this CreatePodRequest.


        :param pod_spec_list: The pod_spec_list of this CreatePodRequest.  # noqa: E501
        :type: list[PodSpecListForCreatePodInput]
        """

        self._pod_spec_list = pod_spec_list

    @property
    def port_mapping_rule_id_list(self):
        """Gets the port_mapping_rule_id_list of this CreatePodRequest.  # noqa: E501


        :return: The port_mapping_rule_id_list of this CreatePodRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._port_mapping_rule_id_list

    @port_mapping_rule_id_list.setter
    def port_mapping_rule_id_list(self, port_mapping_rule_id_list):
        """Sets the port_mapping_rule_id_list of this CreatePodRequest.


        :param port_mapping_rule_id_list: The port_mapping_rule_id_list of this CreatePodRequest.  # noqa: E501
        :type: list[str]
        """

        self._port_mapping_rule_id_list = port_mapping_rule_id_list

    @property
    def product_id(self):
        """Gets the product_id of this CreatePodRequest.  # noqa: E501


        :return: The product_id of this CreatePodRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this CreatePodRequest.


        :param product_id: The product_id of this CreatePodRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def resource_type(self):
        """Gets the resource_type of this CreatePodRequest.  # noqa: E501


        :return: The resource_type of this CreatePodRequest.  # noqa: E501
        :rtype: int
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this CreatePodRequest.


        :param resource_type: The resource_type of this CreatePodRequest.  # noqa: E501
        :type: int
        """

        self._resource_type = resource_type

    @property
    def start(self):
        """Gets the start of this CreatePodRequest.  # noqa: E501


        :return: The start of this CreatePodRequest.  # noqa: E501
        :rtype: bool
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this CreatePodRequest.


        :param start: The start of this CreatePodRequest.  # noqa: E501
        :type: bool
        """

        self._start = start

    @property
    def tag_id(self):
        """Gets the tag_id of this CreatePodRequest.  # noqa: E501


        :return: The tag_id of this CreatePodRequest.  # noqa: E501
        :rtype: str
        """
        return self._tag_id

    @tag_id.setter
    def tag_id(self, tag_id):
        """Sets the tag_id of this CreatePodRequest.


        :param tag_id: The tag_id of this CreatePodRequest.  # noqa: E501
        :type: str
        """

        self._tag_id = tag_id

    @property
    def up_bandwidth_limit(self):
        """Gets the up_bandwidth_limit of this CreatePodRequest.  # noqa: E501


        :return: The up_bandwidth_limit of this CreatePodRequest.  # noqa: E501
        :rtype: int
        """
        return self._up_bandwidth_limit

    @up_bandwidth_limit.setter
    def up_bandwidth_limit(self, up_bandwidth_limit):
        """Sets the up_bandwidth_limit of this CreatePodRequest.


        :param up_bandwidth_limit: The up_bandwidth_limit of this CreatePodRequest.  # noqa: E501
        :type: int
        """

        self._up_bandwidth_limit = up_bandwidth_limit

    @property
    def use_phone_template(self):
        """Gets the use_phone_template of this CreatePodRequest.  # noqa: E501


        :return: The use_phone_template of this CreatePodRequest.  # noqa: E501
        :rtype: int
        """
        return self._use_phone_template

    @use_phone_template.setter
    def use_phone_template(self, use_phone_template):
        """Sets the use_phone_template of this CreatePodRequest.


        :param use_phone_template: The use_phone_template of this CreatePodRequest.  # noqa: E501
        :type: int
        """

        self._use_phone_template = use_phone_template

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreatePodRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePodRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreatePodRequest):
            return True

        return self.to_dict() != other.to_dict()
