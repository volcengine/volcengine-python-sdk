# coding: utf-8

"""
    acep

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class JobForResetPodOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backup_data_id': 'str',
        'host_id': 'str',
        'job_action': 'str',
        'job_id': 'str',
        'job_message': 'str',
        'package_name': 'str',
        'pod_id': 'str',
        'status': 'int'
    }

    attribute_map = {
        'backup_data_id': 'BackupDataId',
        'host_id': 'HostId',
        'job_action': 'JobAction',
        'job_id': 'JobId',
        'job_message': 'JobMessage',
        'package_name': 'PackageName',
        'pod_id': 'PodId',
        'status': 'Status'
    }

    def __init__(self, backup_data_id=None, host_id=None, job_action=None, job_id=None, job_message=None, package_name=None, pod_id=None, status=None, _configuration=None):  # noqa: E501
        """JobForResetPodOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._backup_data_id = None
        self._host_id = None
        self._job_action = None
        self._job_id = None
        self._job_message = None
        self._package_name = None
        self._pod_id = None
        self._status = None
        self.discriminator = None

        if backup_data_id is not None:
            self.backup_data_id = backup_data_id
        if host_id is not None:
            self.host_id = host_id
        if job_action is not None:
            self.job_action = job_action
        if job_id is not None:
            self.job_id = job_id
        if job_message is not None:
            self.job_message = job_message
        if package_name is not None:
            self.package_name = package_name
        if pod_id is not None:
            self.pod_id = pod_id
        if status is not None:
            self.status = status

    @property
    def backup_data_id(self):
        """Gets the backup_data_id of this JobForResetPodOutput.  # noqa: E501


        :return: The backup_data_id of this JobForResetPodOutput.  # noqa: E501
        :rtype: str
        """
        return self._backup_data_id

    @backup_data_id.setter
    def backup_data_id(self, backup_data_id):
        """Sets the backup_data_id of this JobForResetPodOutput.


        :param backup_data_id: The backup_data_id of this JobForResetPodOutput.  # noqa: E501
        :type: str
        """

        self._backup_data_id = backup_data_id

    @property
    def host_id(self):
        """Gets the host_id of this JobForResetPodOutput.  # noqa: E501


        :return: The host_id of this JobForResetPodOutput.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this JobForResetPodOutput.


        :param host_id: The host_id of this JobForResetPodOutput.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def job_action(self):
        """Gets the job_action of this JobForResetPodOutput.  # noqa: E501


        :return: The job_action of this JobForResetPodOutput.  # noqa: E501
        :rtype: str
        """
        return self._job_action

    @job_action.setter
    def job_action(self, job_action):
        """Sets the job_action of this JobForResetPodOutput.


        :param job_action: The job_action of this JobForResetPodOutput.  # noqa: E501
        :type: str
        """

        self._job_action = job_action

    @property
    def job_id(self):
        """Gets the job_id of this JobForResetPodOutput.  # noqa: E501


        :return: The job_id of this JobForResetPodOutput.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobForResetPodOutput.


        :param job_id: The job_id of this JobForResetPodOutput.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def job_message(self):
        """Gets the job_message of this JobForResetPodOutput.  # noqa: E501


        :return: The job_message of this JobForResetPodOutput.  # noqa: E501
        :rtype: str
        """
        return self._job_message

    @job_message.setter
    def job_message(self, job_message):
        """Sets the job_message of this JobForResetPodOutput.


        :param job_message: The job_message of this JobForResetPodOutput.  # noqa: E501
        :type: str
        """

        self._job_message = job_message

    @property
    def package_name(self):
        """Gets the package_name of this JobForResetPodOutput.  # noqa: E501


        :return: The package_name of this JobForResetPodOutput.  # noqa: E501
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this JobForResetPodOutput.


        :param package_name: The package_name of this JobForResetPodOutput.  # noqa: E501
        :type: str
        """

        self._package_name = package_name

    @property
    def pod_id(self):
        """Gets the pod_id of this JobForResetPodOutput.  # noqa: E501


        :return: The pod_id of this JobForResetPodOutput.  # noqa: E501
        :rtype: str
        """
        return self._pod_id

    @pod_id.setter
    def pod_id(self, pod_id):
        """Sets the pod_id of this JobForResetPodOutput.


        :param pod_id: The pod_id of this JobForResetPodOutput.  # noqa: E501
        :type: str
        """

        self._pod_id = pod_id

    @property
    def status(self):
        """Gets the status of this JobForResetPodOutput.  # noqa: E501


        :return: The status of this JobForResetPodOutput.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobForResetPodOutput.


        :param status: The status of this JobForResetPodOutput.  # noqa: E501
        :type: int
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobForResetPodOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobForResetPodOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobForResetPodOutput):
            return True

        return self.to_dict() != other.to_dict()
