# coding: utf-8

"""
    acep

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class StartScreenShotRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'duration_limit': 'int',
        'file_type': 'str',
        'interval': 'int',
        'pod_id_list': 'list[str]',
        'product_id': 'str',
        'quality': 'int',
        'rotation': 'int',
        'scale': 'float',
        'tos_info': 'TosInfoForStartScreenShotInput',
        'upload_type': 'int'
    }

    attribute_map = {
        'duration_limit': 'DurationLimit',
        'file_type': 'FileType',
        'interval': 'Interval',
        'pod_id_list': 'PodIdList',
        'product_id': 'ProductId',
        'quality': 'Quality',
        'rotation': 'Rotation',
        'scale': 'Scale',
        'tos_info': 'TosInfo',
        'upload_type': 'UploadType'
    }

    def __init__(self, duration_limit=None, file_type=None, interval=None, pod_id_list=None, product_id=None, quality=None, rotation=None, scale=None, tos_info=None, upload_type=None, _configuration=None):  # noqa: E501
        """StartScreenShotRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._duration_limit = None
        self._file_type = None
        self._interval = None
        self._pod_id_list = None
        self._product_id = None
        self._quality = None
        self._rotation = None
        self._scale = None
        self._tos_info = None
        self._upload_type = None
        self.discriminator = None

        if duration_limit is not None:
            self.duration_limit = duration_limit
        if file_type is not None:
            self.file_type = file_type
        if interval is not None:
            self.interval = interval
        if pod_id_list is not None:
            self.pod_id_list = pod_id_list
        self.product_id = product_id
        if quality is not None:
            self.quality = quality
        if rotation is not None:
            self.rotation = rotation
        if scale is not None:
            self.scale = scale
        if tos_info is not None:
            self.tos_info = tos_info
        if upload_type is not None:
            self.upload_type = upload_type

    @property
    def duration_limit(self):
        """Gets the duration_limit of this StartScreenShotRequest.  # noqa: E501


        :return: The duration_limit of this StartScreenShotRequest.  # noqa: E501
        :rtype: int
        """
        return self._duration_limit

    @duration_limit.setter
    def duration_limit(self, duration_limit):
        """Sets the duration_limit of this StartScreenShotRequest.


        :param duration_limit: The duration_limit of this StartScreenShotRequest.  # noqa: E501
        :type: int
        """

        self._duration_limit = duration_limit

    @property
    def file_type(self):
        """Gets the file_type of this StartScreenShotRequest.  # noqa: E501


        :return: The file_type of this StartScreenShotRequest.  # noqa: E501
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this StartScreenShotRequest.


        :param file_type: The file_type of this StartScreenShotRequest.  # noqa: E501
        :type: str
        """

        self._file_type = file_type

    @property
    def interval(self):
        """Gets the interval of this StartScreenShotRequest.  # noqa: E501


        :return: The interval of this StartScreenShotRequest.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this StartScreenShotRequest.


        :param interval: The interval of this StartScreenShotRequest.  # noqa: E501
        :type: int
        """

        self._interval = interval

    @property
    def pod_id_list(self):
        """Gets the pod_id_list of this StartScreenShotRequest.  # noqa: E501


        :return: The pod_id_list of this StartScreenShotRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._pod_id_list

    @pod_id_list.setter
    def pod_id_list(self, pod_id_list):
        """Sets the pod_id_list of this StartScreenShotRequest.


        :param pod_id_list: The pod_id_list of this StartScreenShotRequest.  # noqa: E501
        :type: list[str]
        """

        self._pod_id_list = pod_id_list

    @property
    def product_id(self):
        """Gets the product_id of this StartScreenShotRequest.  # noqa: E501


        :return: The product_id of this StartScreenShotRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this StartScreenShotRequest.


        :param product_id: The product_id of this StartScreenShotRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def quality(self):
        """Gets the quality of this StartScreenShotRequest.  # noqa: E501


        :return: The quality of this StartScreenShotRequest.  # noqa: E501
        :rtype: int
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this StartScreenShotRequest.


        :param quality: The quality of this StartScreenShotRequest.  # noqa: E501
        :type: int
        """

        self._quality = quality

    @property
    def rotation(self):
        """Gets the rotation of this StartScreenShotRequest.  # noqa: E501


        :return: The rotation of this StartScreenShotRequest.  # noqa: E501
        :rtype: int
        """
        return self._rotation

    @rotation.setter
    def rotation(self, rotation):
        """Sets the rotation of this StartScreenShotRequest.


        :param rotation: The rotation of this StartScreenShotRequest.  # noqa: E501
        :type: int
        """

        self._rotation = rotation

    @property
    def scale(self):
        """Gets the scale of this StartScreenShotRequest.  # noqa: E501


        :return: The scale of this StartScreenShotRequest.  # noqa: E501
        :rtype: float
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this StartScreenShotRequest.


        :param scale: The scale of this StartScreenShotRequest.  # noqa: E501
        :type: float
        """

        self._scale = scale

    @property
    def tos_info(self):
        """Gets the tos_info of this StartScreenShotRequest.  # noqa: E501


        :return: The tos_info of this StartScreenShotRequest.  # noqa: E501
        :rtype: TosInfoForStartScreenShotInput
        """
        return self._tos_info

    @tos_info.setter
    def tos_info(self, tos_info):
        """Sets the tos_info of this StartScreenShotRequest.


        :param tos_info: The tos_info of this StartScreenShotRequest.  # noqa: E501
        :type: TosInfoForStartScreenShotInput
        """

        self._tos_info = tos_info

    @property
    def upload_type(self):
        """Gets the upload_type of this StartScreenShotRequest.  # noqa: E501


        :return: The upload_type of this StartScreenShotRequest.  # noqa: E501
        :rtype: int
        """
        return self._upload_type

    @upload_type.setter
    def upload_type(self, upload_type):
        """Sets the upload_type of this StartScreenShotRequest.


        :param upload_type: The upload_type of this StartScreenShotRequest.  # noqa: E501
        :type: int
        """

        self._upload_type = upload_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StartScreenShotRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StartScreenShotRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StartScreenShotRequest):
            return True

        return self.to_dict() != other.to_dict()
