# coding: utf-8

"""
    acep

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class RowForListBackupDataOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aosp_version': 'str',
        'account_id': 'str',
        'backup_data_id': 'str',
        'backup_data_name': 'str',
        'backup_job_id': 'str',
        'backup_size': 'int',
        'backup_task_id': 'str',
        'backup_type': 'str',
        'completed_time': 'int',
        'compression_type': 'str',
        'created_time': 'int',
        'data_size': 'int',
        'description': 'str',
        'detail': 'str',
        'expire_time': 'int',
        'finished_time': 'int',
        'in_use_count': 'int',
        'md5_sum': 'str',
        'product_id': 'str',
        'restore_count': 'int',
        'size': 'int',
        'source_pod_id': 'str',
        'started_time': 'int',
        'status': 'str',
        'storage_resource': 'str',
        'storage_type': 'str',
        'updated_time': 'int'
    }

    attribute_map = {
        'aosp_version': 'AOSPVersion',
        'account_id': 'AccountId',
        'backup_data_id': 'BackupDataId',
        'backup_data_name': 'BackupDataName',
        'backup_job_id': 'BackupJobId',
        'backup_size': 'BackupSize',
        'backup_task_id': 'BackupTaskId',
        'backup_type': 'BackupType',
        'completed_time': 'CompletedTime',
        'compression_type': 'CompressionType',
        'created_time': 'CreatedTime',
        'data_size': 'DataSize',
        'description': 'Description',
        'detail': 'Detail',
        'expire_time': 'ExpireTime',
        'finished_time': 'FinishedTime',
        'in_use_count': 'InUseCount',
        'md5_sum': 'Md5Sum',
        'product_id': 'ProductId',
        'restore_count': 'RestoreCount',
        'size': 'Size',
        'source_pod_id': 'SourcePodId',
        'started_time': 'StartedTime',
        'status': 'Status',
        'storage_resource': 'StorageResource',
        'storage_type': 'StorageType',
        'updated_time': 'UpdatedTime'
    }

    def __init__(self, aosp_version=None, account_id=None, backup_data_id=None, backup_data_name=None, backup_job_id=None, backup_size=None, backup_task_id=None, backup_type=None, completed_time=None, compression_type=None, created_time=None, data_size=None, description=None, detail=None, expire_time=None, finished_time=None, in_use_count=None, md5_sum=None, product_id=None, restore_count=None, size=None, source_pod_id=None, started_time=None, status=None, storage_resource=None, storage_type=None, updated_time=None, _configuration=None):  # noqa: E501
        """RowForListBackupDataOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._aosp_version = None
        self._account_id = None
        self._backup_data_id = None
        self._backup_data_name = None
        self._backup_job_id = None
        self._backup_size = None
        self._backup_task_id = None
        self._backup_type = None
        self._completed_time = None
        self._compression_type = None
        self._created_time = None
        self._data_size = None
        self._description = None
        self._detail = None
        self._expire_time = None
        self._finished_time = None
        self._in_use_count = None
        self._md5_sum = None
        self._product_id = None
        self._restore_count = None
        self._size = None
        self._source_pod_id = None
        self._started_time = None
        self._status = None
        self._storage_resource = None
        self._storage_type = None
        self._updated_time = None
        self.discriminator = None

        if aosp_version is not None:
            self.aosp_version = aosp_version
        if account_id is not None:
            self.account_id = account_id
        if backup_data_id is not None:
            self.backup_data_id = backup_data_id
        if backup_data_name is not None:
            self.backup_data_name = backup_data_name
        if backup_job_id is not None:
            self.backup_job_id = backup_job_id
        if backup_size is not None:
            self.backup_size = backup_size
        if backup_task_id is not None:
            self.backup_task_id = backup_task_id
        if backup_type is not None:
            self.backup_type = backup_type
        if completed_time is not None:
            self.completed_time = completed_time
        if compression_type is not None:
            self.compression_type = compression_type
        if created_time is not None:
            self.created_time = created_time
        if data_size is not None:
            self.data_size = data_size
        if description is not None:
            self.description = description
        if detail is not None:
            self.detail = detail
        if expire_time is not None:
            self.expire_time = expire_time
        if finished_time is not None:
            self.finished_time = finished_time
        if in_use_count is not None:
            self.in_use_count = in_use_count
        if md5_sum is not None:
            self.md5_sum = md5_sum
        if product_id is not None:
            self.product_id = product_id
        if restore_count is not None:
            self.restore_count = restore_count
        if size is not None:
            self.size = size
        if source_pod_id is not None:
            self.source_pod_id = source_pod_id
        if started_time is not None:
            self.started_time = started_time
        if status is not None:
            self.status = status
        if storage_resource is not None:
            self.storage_resource = storage_resource
        if storage_type is not None:
            self.storage_type = storage_type
        if updated_time is not None:
            self.updated_time = updated_time

    @property
    def aosp_version(self):
        """Gets the aosp_version of this RowForListBackupDataOutput.  # noqa: E501


        :return: The aosp_version of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: str
        """
        return self._aosp_version

    @aosp_version.setter
    def aosp_version(self, aosp_version):
        """Sets the aosp_version of this RowForListBackupDataOutput.


        :param aosp_version: The aosp_version of this RowForListBackupDataOutput.  # noqa: E501
        :type: str
        """

        self._aosp_version = aosp_version

    @property
    def account_id(self):
        """Gets the account_id of this RowForListBackupDataOutput.  # noqa: E501


        :return: The account_id of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this RowForListBackupDataOutput.


        :param account_id: The account_id of this RowForListBackupDataOutput.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def backup_data_id(self):
        """Gets the backup_data_id of this RowForListBackupDataOutput.  # noqa: E501


        :return: The backup_data_id of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: str
        """
        return self._backup_data_id

    @backup_data_id.setter
    def backup_data_id(self, backup_data_id):
        """Sets the backup_data_id of this RowForListBackupDataOutput.


        :param backup_data_id: The backup_data_id of this RowForListBackupDataOutput.  # noqa: E501
        :type: str
        """

        self._backup_data_id = backup_data_id

    @property
    def backup_data_name(self):
        """Gets the backup_data_name of this RowForListBackupDataOutput.  # noqa: E501


        :return: The backup_data_name of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: str
        """
        return self._backup_data_name

    @backup_data_name.setter
    def backup_data_name(self, backup_data_name):
        """Sets the backup_data_name of this RowForListBackupDataOutput.


        :param backup_data_name: The backup_data_name of this RowForListBackupDataOutput.  # noqa: E501
        :type: str
        """

        self._backup_data_name = backup_data_name

    @property
    def backup_job_id(self):
        """Gets the backup_job_id of this RowForListBackupDataOutput.  # noqa: E501


        :return: The backup_job_id of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: str
        """
        return self._backup_job_id

    @backup_job_id.setter
    def backup_job_id(self, backup_job_id):
        """Sets the backup_job_id of this RowForListBackupDataOutput.


        :param backup_job_id: The backup_job_id of this RowForListBackupDataOutput.  # noqa: E501
        :type: str
        """

        self._backup_job_id = backup_job_id

    @property
    def backup_size(self):
        """Gets the backup_size of this RowForListBackupDataOutput.  # noqa: E501


        :return: The backup_size of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: int
        """
        return self._backup_size

    @backup_size.setter
    def backup_size(self, backup_size):
        """Sets the backup_size of this RowForListBackupDataOutput.


        :param backup_size: The backup_size of this RowForListBackupDataOutput.  # noqa: E501
        :type: int
        """

        self._backup_size = backup_size

    @property
    def backup_task_id(self):
        """Gets the backup_task_id of this RowForListBackupDataOutput.  # noqa: E501


        :return: The backup_task_id of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: str
        """
        return self._backup_task_id

    @backup_task_id.setter
    def backup_task_id(self, backup_task_id):
        """Sets the backup_task_id of this RowForListBackupDataOutput.


        :param backup_task_id: The backup_task_id of this RowForListBackupDataOutput.  # noqa: E501
        :type: str
        """

        self._backup_task_id = backup_task_id

    @property
    def backup_type(self):
        """Gets the backup_type of this RowForListBackupDataOutput.  # noqa: E501


        :return: The backup_type of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: str
        """
        return self._backup_type

    @backup_type.setter
    def backup_type(self, backup_type):
        """Sets the backup_type of this RowForListBackupDataOutput.


        :param backup_type: The backup_type of this RowForListBackupDataOutput.  # noqa: E501
        :type: str
        """

        self._backup_type = backup_type

    @property
    def completed_time(self):
        """Gets the completed_time of this RowForListBackupDataOutput.  # noqa: E501


        :return: The completed_time of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: int
        """
        return self._completed_time

    @completed_time.setter
    def completed_time(self, completed_time):
        """Sets the completed_time of this RowForListBackupDataOutput.


        :param completed_time: The completed_time of this RowForListBackupDataOutput.  # noqa: E501
        :type: int
        """

        self._completed_time = completed_time

    @property
    def compression_type(self):
        """Gets the compression_type of this RowForListBackupDataOutput.  # noqa: E501


        :return: The compression_type of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: str
        """
        return self._compression_type

    @compression_type.setter
    def compression_type(self, compression_type):
        """Sets the compression_type of this RowForListBackupDataOutput.


        :param compression_type: The compression_type of this RowForListBackupDataOutput.  # noqa: E501
        :type: str
        """

        self._compression_type = compression_type

    @property
    def created_time(self):
        """Gets the created_time of this RowForListBackupDataOutput.  # noqa: E501


        :return: The created_time of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this RowForListBackupDataOutput.


        :param created_time: The created_time of this RowForListBackupDataOutput.  # noqa: E501
        :type: int
        """

        self._created_time = created_time

    @property
    def data_size(self):
        """Gets the data_size of this RowForListBackupDataOutput.  # noqa: E501


        :return: The data_size of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: int
        """
        return self._data_size

    @data_size.setter
    def data_size(self, data_size):
        """Sets the data_size of this RowForListBackupDataOutput.


        :param data_size: The data_size of this RowForListBackupDataOutput.  # noqa: E501
        :type: int
        """

        self._data_size = data_size

    @property
    def description(self):
        """Gets the description of this RowForListBackupDataOutput.  # noqa: E501


        :return: The description of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RowForListBackupDataOutput.


        :param description: The description of this RowForListBackupDataOutput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def detail(self):
        """Gets the detail of this RowForListBackupDataOutput.  # noqa: E501


        :return: The detail of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this RowForListBackupDataOutput.


        :param detail: The detail of this RowForListBackupDataOutput.  # noqa: E501
        :type: str
        """

        self._detail = detail

    @property
    def expire_time(self):
        """Gets the expire_time of this RowForListBackupDataOutput.  # noqa: E501


        :return: The expire_time of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: int
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this RowForListBackupDataOutput.


        :param expire_time: The expire_time of this RowForListBackupDataOutput.  # noqa: E501
        :type: int
        """

        self._expire_time = expire_time

    @property
    def finished_time(self):
        """Gets the finished_time of this RowForListBackupDataOutput.  # noqa: E501


        :return: The finished_time of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: int
        """
        return self._finished_time

    @finished_time.setter
    def finished_time(self, finished_time):
        """Sets the finished_time of this RowForListBackupDataOutput.


        :param finished_time: The finished_time of this RowForListBackupDataOutput.  # noqa: E501
        :type: int
        """

        self._finished_time = finished_time

    @property
    def in_use_count(self):
        """Gets the in_use_count of this RowForListBackupDataOutput.  # noqa: E501


        :return: The in_use_count of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: int
        """
        return self._in_use_count

    @in_use_count.setter
    def in_use_count(self, in_use_count):
        """Sets the in_use_count of this RowForListBackupDataOutput.


        :param in_use_count: The in_use_count of this RowForListBackupDataOutput.  # noqa: E501
        :type: int
        """

        self._in_use_count = in_use_count

    @property
    def md5_sum(self):
        """Gets the md5_sum of this RowForListBackupDataOutput.  # noqa: E501


        :return: The md5_sum of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: str
        """
        return self._md5_sum

    @md5_sum.setter
    def md5_sum(self, md5_sum):
        """Sets the md5_sum of this RowForListBackupDataOutput.


        :param md5_sum: The md5_sum of this RowForListBackupDataOutput.  # noqa: E501
        :type: str
        """

        self._md5_sum = md5_sum

    @property
    def product_id(self):
        """Gets the product_id of this RowForListBackupDataOutput.  # noqa: E501


        :return: The product_id of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this RowForListBackupDataOutput.


        :param product_id: The product_id of this RowForListBackupDataOutput.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def restore_count(self):
        """Gets the restore_count of this RowForListBackupDataOutput.  # noqa: E501


        :return: The restore_count of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: int
        """
        return self._restore_count

    @restore_count.setter
    def restore_count(self, restore_count):
        """Sets the restore_count of this RowForListBackupDataOutput.


        :param restore_count: The restore_count of this RowForListBackupDataOutput.  # noqa: E501
        :type: int
        """

        self._restore_count = restore_count

    @property
    def size(self):
        """Gets the size of this RowForListBackupDataOutput.  # noqa: E501


        :return: The size of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this RowForListBackupDataOutput.


        :param size: The size of this RowForListBackupDataOutput.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def source_pod_id(self):
        """Gets the source_pod_id of this RowForListBackupDataOutput.  # noqa: E501


        :return: The source_pod_id of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: str
        """
        return self._source_pod_id

    @source_pod_id.setter
    def source_pod_id(self, source_pod_id):
        """Sets the source_pod_id of this RowForListBackupDataOutput.


        :param source_pod_id: The source_pod_id of this RowForListBackupDataOutput.  # noqa: E501
        :type: str
        """

        self._source_pod_id = source_pod_id

    @property
    def started_time(self):
        """Gets the started_time of this RowForListBackupDataOutput.  # noqa: E501


        :return: The started_time of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: int
        """
        return self._started_time

    @started_time.setter
    def started_time(self, started_time):
        """Sets the started_time of this RowForListBackupDataOutput.


        :param started_time: The started_time of this RowForListBackupDataOutput.  # noqa: E501
        :type: int
        """

        self._started_time = started_time

    @property
    def status(self):
        """Gets the status of this RowForListBackupDataOutput.  # noqa: E501


        :return: The status of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RowForListBackupDataOutput.


        :param status: The status of this RowForListBackupDataOutput.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def storage_resource(self):
        """Gets the storage_resource of this RowForListBackupDataOutput.  # noqa: E501


        :return: The storage_resource of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: str
        """
        return self._storage_resource

    @storage_resource.setter
    def storage_resource(self, storage_resource):
        """Sets the storage_resource of this RowForListBackupDataOutput.


        :param storage_resource: The storage_resource of this RowForListBackupDataOutput.  # noqa: E501
        :type: str
        """

        self._storage_resource = storage_resource

    @property
    def storage_type(self):
        """Gets the storage_type of this RowForListBackupDataOutput.  # noqa: E501


        :return: The storage_type of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: str
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this RowForListBackupDataOutput.


        :param storage_type: The storage_type of this RowForListBackupDataOutput.  # noqa: E501
        :type: str
        """

        self._storage_type = storage_type

    @property
    def updated_time(self):
        """Gets the updated_time of this RowForListBackupDataOutput.  # noqa: E501


        :return: The updated_time of this RowForListBackupDataOutput.  # noqa: E501
        :rtype: int
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this RowForListBackupDataOutput.


        :param updated_time: The updated_time of this RowForListBackupDataOutput.  # noqa: E501
        :type: int
        """

        self._updated_time = updated_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RowForListBackupDataOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RowForListBackupDataOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RowForListBackupDataOutput):
            return True

        return self.to_dict() != other.to_dict()
