# coding: utf-8

"""
    acep

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class PodSettingForUpdatePodPropertyInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'settings_name': 'str',
        'settings_type': 'str',
        'settings_value': 'str',
        'settings_value_type': 'str'
    }

    attribute_map = {
        'settings_name': 'SettingsName',
        'settings_type': 'SettingsType',
        'settings_value': 'SettingsValue',
        'settings_value_type': 'SettingsValueType'
    }

    def __init__(self, settings_name=None, settings_type=None, settings_value=None, settings_value_type=None, _configuration=None):  # noqa: E501
        """PodSettingForUpdatePodPropertyInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._settings_name = None
        self._settings_type = None
        self._settings_value = None
        self._settings_value_type = None
        self.discriminator = None

        if settings_name is not None:
            self.settings_name = settings_name
        if settings_type is not None:
            self.settings_type = settings_type
        if settings_value is not None:
            self.settings_value = settings_value
        if settings_value_type is not None:
            self.settings_value_type = settings_value_type

    @property
    def settings_name(self):
        """Gets the settings_name of this PodSettingForUpdatePodPropertyInput.  # noqa: E501


        :return: The settings_name of this PodSettingForUpdatePodPropertyInput.  # noqa: E501
        :rtype: str
        """
        return self._settings_name

    @settings_name.setter
    def settings_name(self, settings_name):
        """Sets the settings_name of this PodSettingForUpdatePodPropertyInput.


        :param settings_name: The settings_name of this PodSettingForUpdatePodPropertyInput.  # noqa: E501
        :type: str
        """

        self._settings_name = settings_name

    @property
    def settings_type(self):
        """Gets the settings_type of this PodSettingForUpdatePodPropertyInput.  # noqa: E501


        :return: The settings_type of this PodSettingForUpdatePodPropertyInput.  # noqa: E501
        :rtype: str
        """
        return self._settings_type

    @settings_type.setter
    def settings_type(self, settings_type):
        """Sets the settings_type of this PodSettingForUpdatePodPropertyInput.


        :param settings_type: The settings_type of this PodSettingForUpdatePodPropertyInput.  # noqa: E501
        :type: str
        """

        self._settings_type = settings_type

    @property
    def settings_value(self):
        """Gets the settings_value of this PodSettingForUpdatePodPropertyInput.  # noqa: E501


        :return: The settings_value of this PodSettingForUpdatePodPropertyInput.  # noqa: E501
        :rtype: str
        """
        return self._settings_value

    @settings_value.setter
    def settings_value(self, settings_value):
        """Sets the settings_value of this PodSettingForUpdatePodPropertyInput.


        :param settings_value: The settings_value of this PodSettingForUpdatePodPropertyInput.  # noqa: E501
        :type: str
        """

        self._settings_value = settings_value

    @property
    def settings_value_type(self):
        """Gets the settings_value_type of this PodSettingForUpdatePodPropertyInput.  # noqa: E501


        :return: The settings_value_type of this PodSettingForUpdatePodPropertyInput.  # noqa: E501
        :rtype: str
        """
        return self._settings_value_type

    @settings_value_type.setter
    def settings_value_type(self, settings_value_type):
        """Sets the settings_value_type of this PodSettingForUpdatePodPropertyInput.


        :param settings_value_type: The settings_value_type of this PodSettingForUpdatePodPropertyInput.  # noqa: E501
        :type: str
        """

        self._settings_value_type = settings_value_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PodSettingForUpdatePodPropertyInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PodSettingForUpdatePodPropertyInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PodSettingForUpdatePodPropertyInput):
            return True

        return self.to_dict() != other.to_dict()
