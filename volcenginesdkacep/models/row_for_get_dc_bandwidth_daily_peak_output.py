# coding: utf-8

"""
    acep

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class RowForGetDcBandwidthDailyPeakOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        '_date': 'str',
        'dc_id': 'str',
        'down_peak_bandwidth': 'float',
        'product_id': 'str',
        'up_peak_bandwidth': 'float'
    }

    attribute_map = {
        'account_id': 'AccountId',
        '_date': 'Date',
        'dc_id': 'DcId',
        'down_peak_bandwidth': 'DownPeakBandwidth',
        'product_id': 'ProductId',
        'up_peak_bandwidth': 'UpPeakBandwidth'
    }

    def __init__(self, account_id=None, _date=None, dc_id=None, down_peak_bandwidth=None, product_id=None, up_peak_bandwidth=None, _configuration=None):  # noqa: E501
        """RowForGetDcBandwidthDailyPeakOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self.__date = None
        self._dc_id = None
        self._down_peak_bandwidth = None
        self._product_id = None
        self._up_peak_bandwidth = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if _date is not None:
            self._date = _date
        if dc_id is not None:
            self.dc_id = dc_id
        if down_peak_bandwidth is not None:
            self.down_peak_bandwidth = down_peak_bandwidth
        if product_id is not None:
            self.product_id = product_id
        if up_peak_bandwidth is not None:
            self.up_peak_bandwidth = up_peak_bandwidth

    @property
    def account_id(self):
        """Gets the account_id of this RowForGetDcBandwidthDailyPeakOutput.  # noqa: E501


        :return: The account_id of this RowForGetDcBandwidthDailyPeakOutput.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this RowForGetDcBandwidthDailyPeakOutput.


        :param account_id: The account_id of this RowForGetDcBandwidthDailyPeakOutput.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def _date(self):
        """Gets the _date of this RowForGetDcBandwidthDailyPeakOutput.  # noqa: E501


        :return: The _date of this RowForGetDcBandwidthDailyPeakOutput.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this RowForGetDcBandwidthDailyPeakOutput.


        :param _date: The _date of this RowForGetDcBandwidthDailyPeakOutput.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def dc_id(self):
        """Gets the dc_id of this RowForGetDcBandwidthDailyPeakOutput.  # noqa: E501


        :return: The dc_id of this RowForGetDcBandwidthDailyPeakOutput.  # noqa: E501
        :rtype: str
        """
        return self._dc_id

    @dc_id.setter
    def dc_id(self, dc_id):
        """Sets the dc_id of this RowForGetDcBandwidthDailyPeakOutput.


        :param dc_id: The dc_id of this RowForGetDcBandwidthDailyPeakOutput.  # noqa: E501
        :type: str
        """

        self._dc_id = dc_id

    @property
    def down_peak_bandwidth(self):
        """Gets the down_peak_bandwidth of this RowForGetDcBandwidthDailyPeakOutput.  # noqa: E501


        :return: The down_peak_bandwidth of this RowForGetDcBandwidthDailyPeakOutput.  # noqa: E501
        :rtype: float
        """
        return self._down_peak_bandwidth

    @down_peak_bandwidth.setter
    def down_peak_bandwidth(self, down_peak_bandwidth):
        """Sets the down_peak_bandwidth of this RowForGetDcBandwidthDailyPeakOutput.


        :param down_peak_bandwidth: The down_peak_bandwidth of this RowForGetDcBandwidthDailyPeakOutput.  # noqa: E501
        :type: float
        """

        self._down_peak_bandwidth = down_peak_bandwidth

    @property
    def product_id(self):
        """Gets the product_id of this RowForGetDcBandwidthDailyPeakOutput.  # noqa: E501


        :return: The product_id of this RowForGetDcBandwidthDailyPeakOutput.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this RowForGetDcBandwidthDailyPeakOutput.


        :param product_id: The product_id of this RowForGetDcBandwidthDailyPeakOutput.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def up_peak_bandwidth(self):
        """Gets the up_peak_bandwidth of this RowForGetDcBandwidthDailyPeakOutput.  # noqa: E501


        :return: The up_peak_bandwidth of this RowForGetDcBandwidthDailyPeakOutput.  # noqa: E501
        :rtype: float
        """
        return self._up_peak_bandwidth

    @up_peak_bandwidth.setter
    def up_peak_bandwidth(self, up_peak_bandwidth):
        """Sets the up_peak_bandwidth of this RowForGetDcBandwidthDailyPeakOutput.


        :param up_peak_bandwidth: The up_peak_bandwidth of this RowForGetDcBandwidthDailyPeakOutput.  # noqa: E501
        :type: float
        """

        self._up_peak_bandwidth = up_peak_bandwidth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RowForGetDcBandwidthDailyPeakOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RowForGetDcBandwidthDailyPeakOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RowForGetDcBandwidthDailyPeakOutput):
            return True

        return self.to_dict() != other.to_dict()
