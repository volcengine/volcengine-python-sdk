# coding: utf-8

"""
    acep

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ListPhoneTemplateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aosp_version': 'str',
        'max_results': 'int',
        'next_token': 'str',
        'phone_template_id': 'str',
        'phone_template_name': 'str',
        'status': 'int',
        'tag_id': 'str'
    }

    attribute_map = {
        'aosp_version': 'AospVersion',
        'max_results': 'MaxResults',
        'next_token': 'NextToken',
        'phone_template_id': 'PhoneTemplateId',
        'phone_template_name': 'PhoneTemplateName',
        'status': 'Status',
        'tag_id': 'TagId'
    }

    def __init__(self, aosp_version=None, max_results=None, next_token=None, phone_template_id=None, phone_template_name=None, status=None, tag_id=None, _configuration=None):  # noqa: E501
        """ListPhoneTemplateRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._aosp_version = None
        self._max_results = None
        self._next_token = None
        self._phone_template_id = None
        self._phone_template_name = None
        self._status = None
        self._tag_id = None
        self.discriminator = None

        if aosp_version is not None:
            self.aosp_version = aosp_version
        if max_results is not None:
            self.max_results = max_results
        if next_token is not None:
            self.next_token = next_token
        if phone_template_id is not None:
            self.phone_template_id = phone_template_id
        if phone_template_name is not None:
            self.phone_template_name = phone_template_name
        if status is not None:
            self.status = status
        if tag_id is not None:
            self.tag_id = tag_id

    @property
    def aosp_version(self):
        """Gets the aosp_version of this ListPhoneTemplateRequest.  # noqa: E501


        :return: The aosp_version of this ListPhoneTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._aosp_version

    @aosp_version.setter
    def aosp_version(self, aosp_version):
        """Sets the aosp_version of this ListPhoneTemplateRequest.


        :param aosp_version: The aosp_version of this ListPhoneTemplateRequest.  # noqa: E501
        :type: str
        """

        self._aosp_version = aosp_version

    @property
    def max_results(self):
        """Gets the max_results of this ListPhoneTemplateRequest.  # noqa: E501


        :return: The max_results of this ListPhoneTemplateRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListPhoneTemplateRequest.


        :param max_results: The max_results of this ListPhoneTemplateRequest.  # noqa: E501
        :type: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListPhoneTemplateRequest.  # noqa: E501


        :return: The next_token of this ListPhoneTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListPhoneTemplateRequest.


        :param next_token: The next_token of this ListPhoneTemplateRequest.  # noqa: E501
        :type: str
        """

        self._next_token = next_token

    @property
    def phone_template_id(self):
        """Gets the phone_template_id of this ListPhoneTemplateRequest.  # noqa: E501


        :return: The phone_template_id of this ListPhoneTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_template_id

    @phone_template_id.setter
    def phone_template_id(self, phone_template_id):
        """Sets the phone_template_id of this ListPhoneTemplateRequest.


        :param phone_template_id: The phone_template_id of this ListPhoneTemplateRequest.  # noqa: E501
        :type: str
        """

        self._phone_template_id = phone_template_id

    @property
    def phone_template_name(self):
        """Gets the phone_template_name of this ListPhoneTemplateRequest.  # noqa: E501


        :return: The phone_template_name of this ListPhoneTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_template_name

    @phone_template_name.setter
    def phone_template_name(self, phone_template_name):
        """Sets the phone_template_name of this ListPhoneTemplateRequest.


        :param phone_template_name: The phone_template_name of this ListPhoneTemplateRequest.  # noqa: E501
        :type: str
        """

        self._phone_template_name = phone_template_name

    @property
    def status(self):
        """Gets the status of this ListPhoneTemplateRequest.  # noqa: E501


        :return: The status of this ListPhoneTemplateRequest.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ListPhoneTemplateRequest.


        :param status: The status of this ListPhoneTemplateRequest.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def tag_id(self):
        """Gets the tag_id of this ListPhoneTemplateRequest.  # noqa: E501


        :return: The tag_id of this ListPhoneTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._tag_id

    @tag_id.setter
    def tag_id(self, tag_id):
        """Sets the tag_id of this ListPhoneTemplateRequest.


        :param tag_id: The tag_id of this ListPhoneTemplateRequest.  # noqa: E501
        :type: str
        """

        self._tag_id = tag_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListPhoneTemplateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListPhoneTemplateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListPhoneTemplateRequest):
            return True

        return self.to_dict() != other.to_dict()
