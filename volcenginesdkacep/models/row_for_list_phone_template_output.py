# coding: utf-8

"""
    acep

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class RowForListPhoneTemplateOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aosp_version': 'str',
        'overlay_persist_property': 'list[OverlayPersistPropertyForListPhoneTemplateOutput]',
        'overlay_property': 'list[OverlayPropertyForListPhoneTemplateOutput]',
        'overlay_settings': 'list[OverlaySettingForListPhoneTemplateOutput]',
        'phone_template_id': 'str',
        'phone_template_name': 'str',
        'status': 'int'
    }

    attribute_map = {
        'aosp_version': 'AospVersion',
        'overlay_persist_property': 'OverlayPersistProperty',
        'overlay_property': 'OverlayProperty',
        'overlay_settings': 'OverlaySettings',
        'phone_template_id': 'PhoneTemplateId',
        'phone_template_name': 'PhoneTemplateName',
        'status': 'Status'
    }

    def __init__(self, aosp_version=None, overlay_persist_property=None, overlay_property=None, overlay_settings=None, phone_template_id=None, phone_template_name=None, status=None, _configuration=None):  # noqa: E501
        """RowForListPhoneTemplateOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._aosp_version = None
        self._overlay_persist_property = None
        self._overlay_property = None
        self._overlay_settings = None
        self._phone_template_id = None
        self._phone_template_name = None
        self._status = None
        self.discriminator = None

        if aosp_version is not None:
            self.aosp_version = aosp_version
        if overlay_persist_property is not None:
            self.overlay_persist_property = overlay_persist_property
        if overlay_property is not None:
            self.overlay_property = overlay_property
        if overlay_settings is not None:
            self.overlay_settings = overlay_settings
        if phone_template_id is not None:
            self.phone_template_id = phone_template_id
        if phone_template_name is not None:
            self.phone_template_name = phone_template_name
        if status is not None:
            self.status = status

    @property
    def aosp_version(self):
        """Gets the aosp_version of this RowForListPhoneTemplateOutput.  # noqa: E501


        :return: The aosp_version of this RowForListPhoneTemplateOutput.  # noqa: E501
        :rtype: str
        """
        return self._aosp_version

    @aosp_version.setter
    def aosp_version(self, aosp_version):
        """Sets the aosp_version of this RowForListPhoneTemplateOutput.


        :param aosp_version: The aosp_version of this RowForListPhoneTemplateOutput.  # noqa: E501
        :type: str
        """

        self._aosp_version = aosp_version

    @property
    def overlay_persist_property(self):
        """Gets the overlay_persist_property of this RowForListPhoneTemplateOutput.  # noqa: E501


        :return: The overlay_persist_property of this RowForListPhoneTemplateOutput.  # noqa: E501
        :rtype: list[OverlayPersistPropertyForListPhoneTemplateOutput]
        """
        return self._overlay_persist_property

    @overlay_persist_property.setter
    def overlay_persist_property(self, overlay_persist_property):
        """Sets the overlay_persist_property of this RowForListPhoneTemplateOutput.


        :param overlay_persist_property: The overlay_persist_property of this RowForListPhoneTemplateOutput.  # noqa: E501
        :type: list[OverlayPersistPropertyForListPhoneTemplateOutput]
        """

        self._overlay_persist_property = overlay_persist_property

    @property
    def overlay_property(self):
        """Gets the overlay_property of this RowForListPhoneTemplateOutput.  # noqa: E501


        :return: The overlay_property of this RowForListPhoneTemplateOutput.  # noqa: E501
        :rtype: list[OverlayPropertyForListPhoneTemplateOutput]
        """
        return self._overlay_property

    @overlay_property.setter
    def overlay_property(self, overlay_property):
        """Sets the overlay_property of this RowForListPhoneTemplateOutput.


        :param overlay_property: The overlay_property of this RowForListPhoneTemplateOutput.  # noqa: E501
        :type: list[OverlayPropertyForListPhoneTemplateOutput]
        """

        self._overlay_property = overlay_property

    @property
    def overlay_settings(self):
        """Gets the overlay_settings of this RowForListPhoneTemplateOutput.  # noqa: E501


        :return: The overlay_settings of this RowForListPhoneTemplateOutput.  # noqa: E501
        :rtype: list[OverlaySettingForListPhoneTemplateOutput]
        """
        return self._overlay_settings

    @overlay_settings.setter
    def overlay_settings(self, overlay_settings):
        """Sets the overlay_settings of this RowForListPhoneTemplateOutput.


        :param overlay_settings: The overlay_settings of this RowForListPhoneTemplateOutput.  # noqa: E501
        :type: list[OverlaySettingForListPhoneTemplateOutput]
        """

        self._overlay_settings = overlay_settings

    @property
    def phone_template_id(self):
        """Gets the phone_template_id of this RowForListPhoneTemplateOutput.  # noqa: E501


        :return: The phone_template_id of this RowForListPhoneTemplateOutput.  # noqa: E501
        :rtype: str
        """
        return self._phone_template_id

    @phone_template_id.setter
    def phone_template_id(self, phone_template_id):
        """Sets the phone_template_id of this RowForListPhoneTemplateOutput.


        :param phone_template_id: The phone_template_id of this RowForListPhoneTemplateOutput.  # noqa: E501
        :type: str
        """

        self._phone_template_id = phone_template_id

    @property
    def phone_template_name(self):
        """Gets the phone_template_name of this RowForListPhoneTemplateOutput.  # noqa: E501


        :return: The phone_template_name of this RowForListPhoneTemplateOutput.  # noqa: E501
        :rtype: str
        """
        return self._phone_template_name

    @phone_template_name.setter
    def phone_template_name(self, phone_template_name):
        """Sets the phone_template_name of this RowForListPhoneTemplateOutput.


        :param phone_template_name: The phone_template_name of this RowForListPhoneTemplateOutput.  # noqa: E501
        :type: str
        """

        self._phone_template_name = phone_template_name

    @property
    def status(self):
        """Gets the status of this RowForListPhoneTemplateOutput.  # noqa: E501


        :return: The status of this RowForListPhoneTemplateOutput.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RowForListPhoneTemplateOutput.


        :param status: The status of this RowForListPhoneTemplateOutput.  # noqa: E501
        :type: int
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RowForListPhoneTemplateOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RowForListPhoneTemplateOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RowForListPhoneTemplateOutput):
            return True

        return self.to_dict() != other.to_dict()
