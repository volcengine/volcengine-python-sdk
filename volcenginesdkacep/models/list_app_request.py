# coding: utf-8

"""
    acep

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ListAppRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_id': 'str',
        'app_name': 'str',
        'app_type': 'int',
        'max_results': 'int',
        'next_token': 'str',
        'package_name_list': 'list[str]',
        'product_id': 'str'
    }

    attribute_map = {
        'app_id': 'AppId',
        'app_name': 'AppName',
        'app_type': 'AppType',
        'max_results': 'MaxResults',
        'next_token': 'NextToken',
        'package_name_list': 'PackageNameList',
        'product_id': 'ProductId'
    }

    def __init__(self, app_id=None, app_name=None, app_type=None, max_results=None, next_token=None, package_name_list=None, product_id=None, _configuration=None):  # noqa: E501
        """ListAppRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._app_id = None
        self._app_name = None
        self._app_type = None
        self._max_results = None
        self._next_token = None
        self._package_name_list = None
        self._product_id = None
        self.discriminator = None

        if app_id is not None:
            self.app_id = app_id
        if app_name is not None:
            self.app_name = app_name
        if app_type is not None:
            self.app_type = app_type
        if max_results is not None:
            self.max_results = max_results
        if next_token is not None:
            self.next_token = next_token
        if package_name_list is not None:
            self.package_name_list = package_name_list
        self.product_id = product_id

    @property
    def app_id(self):
        """Gets the app_id of this ListAppRequest.  # noqa: E501


        :return: The app_id of this ListAppRequest.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this ListAppRequest.


        :param app_id: The app_id of this ListAppRequest.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def app_name(self):
        """Gets the app_name of this ListAppRequest.  # noqa: E501


        :return: The app_name of this ListAppRequest.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this ListAppRequest.


        :param app_name: The app_name of this ListAppRequest.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def app_type(self):
        """Gets the app_type of this ListAppRequest.  # noqa: E501


        :return: The app_type of this ListAppRequest.  # noqa: E501
        :rtype: int
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this ListAppRequest.


        :param app_type: The app_type of this ListAppRequest.  # noqa: E501
        :type: int
        """

        self._app_type = app_type

    @property
    def max_results(self):
        """Gets the max_results of this ListAppRequest.  # noqa: E501


        :return: The max_results of this ListAppRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListAppRequest.


        :param max_results: The max_results of this ListAppRequest.  # noqa: E501
        :type: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListAppRequest.  # noqa: E501


        :return: The next_token of this ListAppRequest.  # noqa: E501
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListAppRequest.


        :param next_token: The next_token of this ListAppRequest.  # noqa: E501
        :type: str
        """

        self._next_token = next_token

    @property
    def package_name_list(self):
        """Gets the package_name_list of this ListAppRequest.  # noqa: E501


        :return: The package_name_list of this ListAppRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._package_name_list

    @package_name_list.setter
    def package_name_list(self, package_name_list):
        """Sets the package_name_list of this ListAppRequest.


        :param package_name_list: The package_name_list of this ListAppRequest.  # noqa: E501
        :type: list[str]
        """

        self._package_name_list = package_name_list

    @property
    def product_id(self):
        """Gets the product_id of this ListAppRequest.  # noqa: E501


        :return: The product_id of this ListAppRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ListAppRequest.


        :param product_id: The product_id of this ListAppRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListAppRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListAppRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListAppRequest):
            return True

        return self.to_dict() != other.to_dict()
