# coding: utf-8

"""
    vmp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class FiltersForListIntegrationTasksInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'environment': 'str',
        'ids': 'list[str]',
        'name': 'str',
        'statuses': 'list[str]',
        'type': 'str',
        'vke_cluster_ids': 'list[str]',
        'workspace_id': 'str'
    }

    attribute_map = {
        'environment': 'Environment',
        'ids': 'Ids',
        'name': 'Name',
        'statuses': 'Statuses',
        'type': 'Type',
        'vke_cluster_ids': 'VkeClusterIds',
        'workspace_id': 'WorkspaceId'
    }

    def __init__(self, environment=None, ids=None, name=None, statuses=None, type=None, vke_cluster_ids=None, workspace_id=None, _configuration=None):  # noqa: E501
        """FiltersForListIntegrationTasksInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._environment = None
        self._ids = None
        self._name = None
        self._statuses = None
        self._type = None
        self._vke_cluster_ids = None
        self._workspace_id = None
        self.discriminator = None

        if environment is not None:
            self.environment = environment
        if ids is not None:
            self.ids = ids
        if name is not None:
            self.name = name
        if statuses is not None:
            self.statuses = statuses
        if type is not None:
            self.type = type
        if vke_cluster_ids is not None:
            self.vke_cluster_ids = vke_cluster_ids
        if workspace_id is not None:
            self.workspace_id = workspace_id

    @property
    def environment(self):
        """Gets the environment of this FiltersForListIntegrationTasksInput.  # noqa: E501


        :return: The environment of this FiltersForListIntegrationTasksInput.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this FiltersForListIntegrationTasksInput.


        :param environment: The environment of this FiltersForListIntegrationTasksInput.  # noqa: E501
        :type: str
        """

        self._environment = environment

    @property
    def ids(self):
        """Gets the ids of this FiltersForListIntegrationTasksInput.  # noqa: E501


        :return: The ids of this FiltersForListIntegrationTasksInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this FiltersForListIntegrationTasksInput.


        :param ids: The ids of this FiltersForListIntegrationTasksInput.  # noqa: E501
        :type: list[str]
        """

        self._ids = ids

    @property
    def name(self):
        """Gets the name of this FiltersForListIntegrationTasksInput.  # noqa: E501


        :return: The name of this FiltersForListIntegrationTasksInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FiltersForListIntegrationTasksInput.


        :param name: The name of this FiltersForListIntegrationTasksInput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def statuses(self):
        """Gets the statuses of this FiltersForListIntegrationTasksInput.  # noqa: E501


        :return: The statuses of this FiltersForListIntegrationTasksInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this FiltersForListIntegrationTasksInput.


        :param statuses: The statuses of this FiltersForListIntegrationTasksInput.  # noqa: E501
        :type: list[str]
        """

        self._statuses = statuses

    @property
    def type(self):
        """Gets the type of this FiltersForListIntegrationTasksInput.  # noqa: E501


        :return: The type of this FiltersForListIntegrationTasksInput.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FiltersForListIntegrationTasksInput.


        :param type: The type of this FiltersForListIntegrationTasksInput.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def vke_cluster_ids(self):
        """Gets the vke_cluster_ids of this FiltersForListIntegrationTasksInput.  # noqa: E501


        :return: The vke_cluster_ids of this FiltersForListIntegrationTasksInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._vke_cluster_ids

    @vke_cluster_ids.setter
    def vke_cluster_ids(self, vke_cluster_ids):
        """Sets the vke_cluster_ids of this FiltersForListIntegrationTasksInput.


        :param vke_cluster_ids: The vke_cluster_ids of this FiltersForListIntegrationTasksInput.  # noqa: E501
        :type: list[str]
        """

        self._vke_cluster_ids = vke_cluster_ids

    @property
    def workspace_id(self):
        """Gets the workspace_id of this FiltersForListIntegrationTasksInput.  # noqa: E501


        :return: The workspace_id of this FiltersForListIntegrationTasksInput.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this FiltersForListIntegrationTasksInput.


        :param workspace_id: The workspace_id of this FiltersForListIntegrationTasksInput.  # noqa: E501
        :type: str
        """

        self._workspace_id = workspace_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FiltersForListIntegrationTasksInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FiltersForListIntegrationTasksInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FiltersForListIntegrationTasksInput):
            return True

        return self.to_dict() != other.to_dict()
