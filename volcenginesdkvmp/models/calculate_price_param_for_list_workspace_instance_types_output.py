# coding: utf-8

"""
    vmp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CalculatePriceParamForListWorkspaceInstanceTypesOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cal_charge_item_list': 'list[CalChargeItemListForListWorkspaceInstanceTypesOutput]',
        'configuration_code': 'str',
        'period': 'str'
    }

    attribute_map = {
        'cal_charge_item_list': 'CalChargeItemList',
        'configuration_code': 'ConfigurationCode',
        'period': 'Period'
    }

    def __init__(self, cal_charge_item_list=None, configuration_code=None, period=None, _configuration=None):  # noqa: E501
        """CalculatePriceParamForListWorkspaceInstanceTypesOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cal_charge_item_list = None
        self._configuration_code = None
        self._period = None
        self.discriminator = None

        if cal_charge_item_list is not None:
            self.cal_charge_item_list = cal_charge_item_list
        if configuration_code is not None:
            self.configuration_code = configuration_code
        if period is not None:
            self.period = period

    @property
    def cal_charge_item_list(self):
        """Gets the cal_charge_item_list of this CalculatePriceParamForListWorkspaceInstanceTypesOutput.  # noqa: E501


        :return: The cal_charge_item_list of this CalculatePriceParamForListWorkspaceInstanceTypesOutput.  # noqa: E501
        :rtype: list[CalChargeItemListForListWorkspaceInstanceTypesOutput]
        """
        return self._cal_charge_item_list

    @cal_charge_item_list.setter
    def cal_charge_item_list(self, cal_charge_item_list):
        """Sets the cal_charge_item_list of this CalculatePriceParamForListWorkspaceInstanceTypesOutput.


        :param cal_charge_item_list: The cal_charge_item_list of this CalculatePriceParamForListWorkspaceInstanceTypesOutput.  # noqa: E501
        :type: list[CalChargeItemListForListWorkspaceInstanceTypesOutput]
        """

        self._cal_charge_item_list = cal_charge_item_list

    @property
    def configuration_code(self):
        """Gets the configuration_code of this CalculatePriceParamForListWorkspaceInstanceTypesOutput.  # noqa: E501


        :return: The configuration_code of this CalculatePriceParamForListWorkspaceInstanceTypesOutput.  # noqa: E501
        :rtype: str
        """
        return self._configuration_code

    @configuration_code.setter
    def configuration_code(self, configuration_code):
        """Sets the configuration_code of this CalculatePriceParamForListWorkspaceInstanceTypesOutput.


        :param configuration_code: The configuration_code of this CalculatePriceParamForListWorkspaceInstanceTypesOutput.  # noqa: E501
        :type: str
        """

        self._configuration_code = configuration_code

    @property
    def period(self):
        """Gets the period of this CalculatePriceParamForListWorkspaceInstanceTypesOutput.  # noqa: E501


        :return: The period of this CalculatePriceParamForListWorkspaceInstanceTypesOutput.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this CalculatePriceParamForListWorkspaceInstanceTypesOutput.


        :param period: The period of this CalculatePriceParamForListWorkspaceInstanceTypesOutput.  # noqa: E501
        :type: str
        """

        self._period = period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalculatePriceParamForListWorkspaceInstanceTypesOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalculatePriceParamForListWorkspaceInstanceTypesOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CalculatePriceParamForListWorkspaceInstanceTypesOutput):
            return True

        return self.to_dict() != other.to_dict()
