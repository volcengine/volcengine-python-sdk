# coding: utf-8

"""
    vmp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DingTalkBotWebhookForListContactsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'at_mobiles': 'list[str]',
        'at_user_ids': 'list[str]',
        'secret_key': 'str'
    }

    attribute_map = {
        'address': 'Address',
        'at_mobiles': 'AtMobiles',
        'at_user_ids': 'AtUserIds',
        'secret_key': 'SecretKey'
    }

    def __init__(self, address=None, at_mobiles=None, at_user_ids=None, secret_key=None, _configuration=None):  # noqa: E501
        """DingTalkBotWebhookForListContactsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address = None
        self._at_mobiles = None
        self._at_user_ids = None
        self._secret_key = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if at_mobiles is not None:
            self.at_mobiles = at_mobiles
        if at_user_ids is not None:
            self.at_user_ids = at_user_ids
        if secret_key is not None:
            self.secret_key = secret_key

    @property
    def address(self):
        """Gets the address of this DingTalkBotWebhookForListContactsOutput.  # noqa: E501


        :return: The address of this DingTalkBotWebhookForListContactsOutput.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DingTalkBotWebhookForListContactsOutput.


        :param address: The address of this DingTalkBotWebhookForListContactsOutput.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def at_mobiles(self):
        """Gets the at_mobiles of this DingTalkBotWebhookForListContactsOutput.  # noqa: E501


        :return: The at_mobiles of this DingTalkBotWebhookForListContactsOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._at_mobiles

    @at_mobiles.setter
    def at_mobiles(self, at_mobiles):
        """Sets the at_mobiles of this DingTalkBotWebhookForListContactsOutput.


        :param at_mobiles: The at_mobiles of this DingTalkBotWebhookForListContactsOutput.  # noqa: E501
        :type: list[str]
        """

        self._at_mobiles = at_mobiles

    @property
    def at_user_ids(self):
        """Gets the at_user_ids of this DingTalkBotWebhookForListContactsOutput.  # noqa: E501


        :return: The at_user_ids of this DingTalkBotWebhookForListContactsOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._at_user_ids

    @at_user_ids.setter
    def at_user_ids(self, at_user_ids):
        """Sets the at_user_ids of this DingTalkBotWebhookForListContactsOutput.


        :param at_user_ids: The at_user_ids of this DingTalkBotWebhookForListContactsOutput.  # noqa: E501
        :type: list[str]
        """

        self._at_user_ids = at_user_ids

    @property
    def secret_key(self):
        """Gets the secret_key of this DingTalkBotWebhookForListContactsOutput.  # noqa: E501


        :return: The secret_key of this DingTalkBotWebhookForListContactsOutput.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this DingTalkBotWebhookForListContactsOutput.


        :param secret_key: The secret_key of this DingTalkBotWebhookForListContactsOutput.  # noqa: E501
        :type: str
        """

        self._secret_key = secret_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DingTalkBotWebhookForListContactsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DingTalkBotWebhookForListContactsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DingTalkBotWebhookForListContactsOutput):
            return True

        return self.to_dict() != other.to_dict()
