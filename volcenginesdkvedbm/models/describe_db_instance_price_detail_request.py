# coding: utf-8

"""
    vedbm

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DescribeDBInstancePriceDetailRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charge_type': 'str',
        'node_number': 'int',
        'node_spec': 'str',
        'number': 'int',
        'period': 'int',
        'period_unit': 'str',
        'pre_paid_storage_in_gb': 'int',
        'storage_charge_type': 'str'
    }

    attribute_map = {
        'charge_type': 'ChargeType',
        'node_number': 'NodeNumber',
        'node_spec': 'NodeSpec',
        'number': 'Number',
        'period': 'Period',
        'period_unit': 'PeriodUnit',
        'pre_paid_storage_in_gb': 'PrePaidStorageInGB',
        'storage_charge_type': 'StorageChargeType'
    }

    def __init__(self, charge_type=None, node_number=None, node_spec=None, number=None, period=None, period_unit=None, pre_paid_storage_in_gb=None, storage_charge_type=None, _configuration=None):  # noqa: E501
        """DescribeDBInstancePriceDetailRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._charge_type = None
        self._node_number = None
        self._node_spec = None
        self._number = None
        self._period = None
        self._period_unit = None
        self._pre_paid_storage_in_gb = None
        self._storage_charge_type = None
        self.discriminator = None

        if charge_type is not None:
            self.charge_type = charge_type
        self.node_number = node_number
        self.node_spec = node_spec
        if number is not None:
            self.number = number
        if period is not None:
            self.period = period
        if period_unit is not None:
            self.period_unit = period_unit
        if pre_paid_storage_in_gb is not None:
            self.pre_paid_storage_in_gb = pre_paid_storage_in_gb
        if storage_charge_type is not None:
            self.storage_charge_type = storage_charge_type

    @property
    def charge_type(self):
        """Gets the charge_type of this DescribeDBInstancePriceDetailRequest.  # noqa: E501


        :return: The charge_type of this DescribeDBInstancePriceDetailRequest.  # noqa: E501
        :rtype: str
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """Sets the charge_type of this DescribeDBInstancePriceDetailRequest.


        :param charge_type: The charge_type of this DescribeDBInstancePriceDetailRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["PostPaid", "PrePaid"]  # noqa: E501
        if (self._configuration.client_side_validation and
                charge_type not in allowed_values):
            raise ValueError(
                "Invalid value for `charge_type` ({0}), must be one of {1}"  # noqa: E501
                .format(charge_type, allowed_values)
            )

        self._charge_type = charge_type

    @property
    def node_number(self):
        """Gets the node_number of this DescribeDBInstancePriceDetailRequest.  # noqa: E501


        :return: The node_number of this DescribeDBInstancePriceDetailRequest.  # noqa: E501
        :rtype: int
        """
        return self._node_number

    @node_number.setter
    def node_number(self, node_number):
        """Sets the node_number of this DescribeDBInstancePriceDetailRequest.


        :param node_number: The node_number of this DescribeDBInstancePriceDetailRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and node_number is None:
            raise ValueError("Invalid value for `node_number`, must not be `None`")  # noqa: E501

        self._node_number = node_number

    @property
    def node_spec(self):
        """Gets the node_spec of this DescribeDBInstancePriceDetailRequest.  # noqa: E501


        :return: The node_spec of this DescribeDBInstancePriceDetailRequest.  # noqa: E501
        :rtype: str
        """
        return self._node_spec

    @node_spec.setter
    def node_spec(self, node_spec):
        """Sets the node_spec of this DescribeDBInstancePriceDetailRequest.


        :param node_spec: The node_spec of this DescribeDBInstancePriceDetailRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and node_spec is None:
            raise ValueError("Invalid value for `node_spec`, must not be `None`")  # noqa: E501

        self._node_spec = node_spec

    @property
    def number(self):
        """Gets the number of this DescribeDBInstancePriceDetailRequest.  # noqa: E501


        :return: The number of this DescribeDBInstancePriceDetailRequest.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this DescribeDBInstancePriceDetailRequest.


        :param number: The number of this DescribeDBInstancePriceDetailRequest.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def period(self):
        """Gets the period of this DescribeDBInstancePriceDetailRequest.  # noqa: E501


        :return: The period of this DescribeDBInstancePriceDetailRequest.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this DescribeDBInstancePriceDetailRequest.


        :param period: The period of this DescribeDBInstancePriceDetailRequest.  # noqa: E501
        :type: int
        """

        self._period = period

    @property
    def period_unit(self):
        """Gets the period_unit of this DescribeDBInstancePriceDetailRequest.  # noqa: E501


        :return: The period_unit of this DescribeDBInstancePriceDetailRequest.  # noqa: E501
        :rtype: str
        """
        return self._period_unit

    @period_unit.setter
    def period_unit(self, period_unit):
        """Sets the period_unit of this DescribeDBInstancePriceDetailRequest.


        :param period_unit: The period_unit of this DescribeDBInstancePriceDetailRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["month", "year"]  # noqa: E501
        if (self._configuration.client_side_validation and
                period_unit not in allowed_values):
            raise ValueError(
                "Invalid value for `period_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(period_unit, allowed_values)
            )

        self._period_unit = period_unit

    @property
    def pre_paid_storage_in_gb(self):
        """Gets the pre_paid_storage_in_gb of this DescribeDBInstancePriceDetailRequest.  # noqa: E501


        :return: The pre_paid_storage_in_gb of this DescribeDBInstancePriceDetailRequest.  # noqa: E501
        :rtype: int
        """
        return self._pre_paid_storage_in_gb

    @pre_paid_storage_in_gb.setter
    def pre_paid_storage_in_gb(self, pre_paid_storage_in_gb):
        """Sets the pre_paid_storage_in_gb of this DescribeDBInstancePriceDetailRequest.


        :param pre_paid_storage_in_gb: The pre_paid_storage_in_gb of this DescribeDBInstancePriceDetailRequest.  # noqa: E501
        :type: int
        """

        self._pre_paid_storage_in_gb = pre_paid_storage_in_gb

    @property
    def storage_charge_type(self):
        """Gets the storage_charge_type of this DescribeDBInstancePriceDetailRequest.  # noqa: E501


        :return: The storage_charge_type of this DescribeDBInstancePriceDetailRequest.  # noqa: E501
        :rtype: str
        """
        return self._storage_charge_type

    @storage_charge_type.setter
    def storage_charge_type(self, storage_charge_type):
        """Sets the storage_charge_type of this DescribeDBInstancePriceDetailRequest.


        :param storage_charge_type: The storage_charge_type of this DescribeDBInstancePriceDetailRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["PostPaid", "PrePaid"]  # noqa: E501
        if (self._configuration.client_side_validation and
                storage_charge_type not in allowed_values):
            raise ValueError(
                "Invalid value for `storage_charge_type` ({0}), must be one of {1}"  # noqa: E501
                .format(storage_charge_type, allowed_values)
            )

        self._storage_charge_type = storage_charge_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DescribeDBInstancePriceDetailRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DescribeDBInstancePriceDetailRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DescribeDBInstancePriceDetailRequest):
            return True

        return self.to_dict() != other.to_dict()
