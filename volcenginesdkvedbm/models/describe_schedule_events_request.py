# coding: utf-8

"""
    vedbm

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DescribeScheduleEventsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'begin_time': 'str',
        'end_time': 'str',
        'event_id': 'str',
        'event_kind': 'list[str]',
        'instance_id': 'str',
        'limit': 'int',
        'offset': 'int',
        'project_name': 'str',
        'status': 'list[str]'
    }

    attribute_map = {
        'begin_time': 'BeginTime',
        'end_time': 'EndTime',
        'event_id': 'EventId',
        'event_kind': 'EventKind',
        'instance_id': 'InstanceId',
        'limit': 'Limit',
        'offset': 'Offset',
        'project_name': 'ProjectName',
        'status': 'Status'
    }

    def __init__(self, begin_time=None, end_time=None, event_id=None, event_kind=None, instance_id=None, limit=None, offset=None, project_name=None, status=None, _configuration=None):  # noqa: E501
        """DescribeScheduleEventsRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._begin_time = None
        self._end_time = None
        self._event_id = None
        self._event_kind = None
        self._instance_id = None
        self._limit = None
        self._offset = None
        self._project_name = None
        self._status = None
        self.discriminator = None

        if begin_time is not None:
            self.begin_time = begin_time
        if end_time is not None:
            self.end_time = end_time
        if event_id is not None:
            self.event_id = event_id
        if event_kind is not None:
            self.event_kind = event_kind
        if instance_id is not None:
            self.instance_id = instance_id
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if project_name is not None:
            self.project_name = project_name
        if status is not None:
            self.status = status

    @property
    def begin_time(self):
        """Gets the begin_time of this DescribeScheduleEventsRequest.  # noqa: E501


        :return: The begin_time of this DescribeScheduleEventsRequest.  # noqa: E501
        :rtype: str
        """
        return self._begin_time

    @begin_time.setter
    def begin_time(self, begin_time):
        """Sets the begin_time of this DescribeScheduleEventsRequest.


        :param begin_time: The begin_time of this DescribeScheduleEventsRequest.  # noqa: E501
        :type: str
        """

        self._begin_time = begin_time

    @property
    def end_time(self):
        """Gets the end_time of this DescribeScheduleEventsRequest.  # noqa: E501


        :return: The end_time of this DescribeScheduleEventsRequest.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this DescribeScheduleEventsRequest.


        :param end_time: The end_time of this DescribeScheduleEventsRequest.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def event_id(self):
        """Gets the event_id of this DescribeScheduleEventsRequest.  # noqa: E501


        :return: The event_id of this DescribeScheduleEventsRequest.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this DescribeScheduleEventsRequest.


        :param event_id: The event_id of this DescribeScheduleEventsRequest.  # noqa: E501
        :type: str
        """

        self._event_id = event_id

    @property
    def event_kind(self):
        """Gets the event_kind of this DescribeScheduleEventsRequest.  # noqa: E501


        :return: The event_kind of this DescribeScheduleEventsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._event_kind

    @event_kind.setter
    def event_kind(self, event_kind):
        """Sets the event_kind of this DescribeScheduleEventsRequest.


        :param event_kind: The event_kind of this DescribeScheduleEventsRequest.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ModifyDBInstanceParameters", "ModifyDBInstanceSpec", "RestartDBInstance", "UpgradeInstance"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(event_kind).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `event_kind` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(event_kind) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._event_kind = event_kind

    @property
    def instance_id(self):
        """Gets the instance_id of this DescribeScheduleEventsRequest.  # noqa: E501


        :return: The instance_id of this DescribeScheduleEventsRequest.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this DescribeScheduleEventsRequest.


        :param instance_id: The instance_id of this DescribeScheduleEventsRequest.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def limit(self):
        """Gets the limit of this DescribeScheduleEventsRequest.  # noqa: E501


        :return: The limit of this DescribeScheduleEventsRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this DescribeScheduleEventsRequest.


        :param limit: The limit of this DescribeScheduleEventsRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this DescribeScheduleEventsRequest.  # noqa: E501


        :return: The offset of this DescribeScheduleEventsRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this DescribeScheduleEventsRequest.


        :param offset: The offset of this DescribeScheduleEventsRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def project_name(self):
        """Gets the project_name of this DescribeScheduleEventsRequest.  # noqa: E501


        :return: The project_name of this DescribeScheduleEventsRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this DescribeScheduleEventsRequest.


        :param project_name: The project_name of this DescribeScheduleEventsRequest.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def status(self):
        """Gets the status of this DescribeScheduleEventsRequest.  # noqa: E501


        :return: The status of this DescribeScheduleEventsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DescribeScheduleEventsRequest.


        :param status: The status of this DescribeScheduleEventsRequest.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["cancel", "executing", "failure", "finish", "pending"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(status).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `status` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(status) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DescribeScheduleEventsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DescribeScheduleEventsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DescribeScheduleEventsRequest):
            return True

        return self.to_dict() != other.to_dict()
