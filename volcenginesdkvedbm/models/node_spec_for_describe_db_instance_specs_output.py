# coding: utf-8

"""
    vedbm

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class NodeSpecForDescribeDBInstanceSpecsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection': 'int',
        'max_iops': 'int',
        'memory': 'int',
        'node_spec': 'str',
        'pre_paid_max_storage': 'int',
        'pre_paid_min_storage': 'int',
        'spec_family': 'str',
        'v_cpu': 'int'
    }

    attribute_map = {
        'connection': 'Connection',
        'max_iops': 'MaxIops',
        'memory': 'Memory',
        'node_spec': 'NodeSpec',
        'pre_paid_max_storage': 'PrePaidMaxStorage',
        'pre_paid_min_storage': 'PrePaidMinStorage',
        'spec_family': 'SpecFamily',
        'v_cpu': 'vCPU'
    }

    def __init__(self, connection=None, max_iops=None, memory=None, node_spec=None, pre_paid_max_storage=None, pre_paid_min_storage=None, spec_family=None, v_cpu=None, _configuration=None):  # noqa: E501
        """NodeSpecForDescribeDBInstanceSpecsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._connection = None
        self._max_iops = None
        self._memory = None
        self._node_spec = None
        self._pre_paid_max_storage = None
        self._pre_paid_min_storage = None
        self._spec_family = None
        self._v_cpu = None
        self.discriminator = None

        if connection is not None:
            self.connection = connection
        if max_iops is not None:
            self.max_iops = max_iops
        if memory is not None:
            self.memory = memory
        if node_spec is not None:
            self.node_spec = node_spec
        if pre_paid_max_storage is not None:
            self.pre_paid_max_storage = pre_paid_max_storage
        if pre_paid_min_storage is not None:
            self.pre_paid_min_storage = pre_paid_min_storage
        if spec_family is not None:
            self.spec_family = spec_family
        if v_cpu is not None:
            self.v_cpu = v_cpu

    @property
    def connection(self):
        """Gets the connection of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501


        :return: The connection of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501
        :rtype: int
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this NodeSpecForDescribeDBInstanceSpecsOutput.


        :param connection: The connection of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501
        :type: int
        """

        self._connection = connection

    @property
    def max_iops(self):
        """Gets the max_iops of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501


        :return: The max_iops of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501
        :rtype: int
        """
        return self._max_iops

    @max_iops.setter
    def max_iops(self, max_iops):
        """Sets the max_iops of this NodeSpecForDescribeDBInstanceSpecsOutput.


        :param max_iops: The max_iops of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501
        :type: int
        """

        self._max_iops = max_iops

    @property
    def memory(self):
        """Gets the memory of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501


        :return: The memory of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this NodeSpecForDescribeDBInstanceSpecsOutput.


        :param memory: The memory of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501
        :type: int
        """

        self._memory = memory

    @property
    def node_spec(self):
        """Gets the node_spec of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501


        :return: The node_spec of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501
        :rtype: str
        """
        return self._node_spec

    @node_spec.setter
    def node_spec(self, node_spec):
        """Sets the node_spec of this NodeSpecForDescribeDBInstanceSpecsOutput.


        :param node_spec: The node_spec of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501
        :type: str
        """

        self._node_spec = node_spec

    @property
    def pre_paid_max_storage(self):
        """Gets the pre_paid_max_storage of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501


        :return: The pre_paid_max_storage of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501
        :rtype: int
        """
        return self._pre_paid_max_storage

    @pre_paid_max_storage.setter
    def pre_paid_max_storage(self, pre_paid_max_storage):
        """Sets the pre_paid_max_storage of this NodeSpecForDescribeDBInstanceSpecsOutput.


        :param pre_paid_max_storage: The pre_paid_max_storage of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501
        :type: int
        """

        self._pre_paid_max_storage = pre_paid_max_storage

    @property
    def pre_paid_min_storage(self):
        """Gets the pre_paid_min_storage of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501


        :return: The pre_paid_min_storage of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501
        :rtype: int
        """
        return self._pre_paid_min_storage

    @pre_paid_min_storage.setter
    def pre_paid_min_storage(self, pre_paid_min_storage):
        """Sets the pre_paid_min_storage of this NodeSpecForDescribeDBInstanceSpecsOutput.


        :param pre_paid_min_storage: The pre_paid_min_storage of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501
        :type: int
        """

        self._pre_paid_min_storage = pre_paid_min_storage

    @property
    def spec_family(self):
        """Gets the spec_family of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501


        :return: The spec_family of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501
        :rtype: str
        """
        return self._spec_family

    @spec_family.setter
    def spec_family(self, spec_family):
        """Sets the spec_family of this NodeSpecForDescribeDBInstanceSpecsOutput.


        :param spec_family: The spec_family of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501
        :type: str
        """

        self._spec_family = spec_family

    @property
    def v_cpu(self):
        """Gets the v_cpu of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501


        :return: The v_cpu of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501
        :rtype: int
        """
        return self._v_cpu

    @v_cpu.setter
    def v_cpu(self, v_cpu):
        """Sets the v_cpu of this NodeSpecForDescribeDBInstanceSpecsOutput.


        :param v_cpu: The v_cpu of this NodeSpecForDescribeDBInstanceSpecsOutput.  # noqa: E501
        :type: int
        """

        self._v_cpu = v_cpu

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeSpecForDescribeDBInstanceSpecsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeSpecForDescribeDBInstanceSpecsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NodeSpecForDescribeDBInstanceSpecsOutput):
            return True

        return self.to_dict() != other.to_dict()
