# coding: utf-8

"""
    milvus

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class NodeInfoListForDescribeNodeInfoOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_time': 'str',
        'display_name': 'str',
        'node_name': 'str',
        'node_type': 'str',
        'status': 'str',
        'total_cpu': 'str',
        'total_mem_in_bytes': 'str',
        'update_time': 'str',
        'used_cpu': 'str',
        'used_mem_in_bytes': 'str'
    }

    attribute_map = {
        'create_time': 'CreateTime',
        'display_name': 'DisplayName',
        'node_name': 'NodeName',
        'node_type': 'NodeType',
        'status': 'Status',
        'total_cpu': 'TotalCpu',
        'total_mem_in_bytes': 'TotalMemInBytes',
        'update_time': 'UpdateTime',
        'used_cpu': 'UsedCpu',
        'used_mem_in_bytes': 'UsedMemInBytes'
    }

    def __init__(self, create_time=None, display_name=None, node_name=None, node_type=None, status=None, total_cpu=None, total_mem_in_bytes=None, update_time=None, used_cpu=None, used_mem_in_bytes=None, _configuration=None):  # noqa: E501
        """NodeInfoListForDescribeNodeInfoOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._create_time = None
        self._display_name = None
        self._node_name = None
        self._node_type = None
        self._status = None
        self._total_cpu = None
        self._total_mem_in_bytes = None
        self._update_time = None
        self._used_cpu = None
        self._used_mem_in_bytes = None
        self.discriminator = None

        if create_time is not None:
            self.create_time = create_time
        if display_name is not None:
            self.display_name = display_name
        if node_name is not None:
            self.node_name = node_name
        if node_type is not None:
            self.node_type = node_type
        if status is not None:
            self.status = status
        if total_cpu is not None:
            self.total_cpu = total_cpu
        if total_mem_in_bytes is not None:
            self.total_mem_in_bytes = total_mem_in_bytes
        if update_time is not None:
            self.update_time = update_time
        if used_cpu is not None:
            self.used_cpu = used_cpu
        if used_mem_in_bytes is not None:
            self.used_mem_in_bytes = used_mem_in_bytes

    @property
    def create_time(self):
        """Gets the create_time of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501


        :return: The create_time of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this NodeInfoListForDescribeNodeInfoOutput.


        :param create_time: The create_time of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def display_name(self):
        """Gets the display_name of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501


        :return: The display_name of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this NodeInfoListForDescribeNodeInfoOutput.


        :param display_name: The display_name of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def node_name(self):
        """Gets the node_name of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501


        :return: The node_name of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this NodeInfoListForDescribeNodeInfoOutput.


        :param node_name: The node_name of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501
        :type: str
        """

        self._node_name = node_name

    @property
    def node_type(self):
        """Gets the node_type of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501


        :return: The node_type of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this NodeInfoListForDescribeNodeInfoOutput.


        :param node_type: The node_type of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501
        :type: str
        """

        self._node_type = node_type

    @property
    def status(self):
        """Gets the status of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501


        :return: The status of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NodeInfoListForDescribeNodeInfoOutput.


        :param status: The status of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def total_cpu(self):
        """Gets the total_cpu of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501


        :return: The total_cpu of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._total_cpu

    @total_cpu.setter
    def total_cpu(self, total_cpu):
        """Sets the total_cpu of this NodeInfoListForDescribeNodeInfoOutput.


        :param total_cpu: The total_cpu of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501
        :type: str
        """

        self._total_cpu = total_cpu

    @property
    def total_mem_in_bytes(self):
        """Gets the total_mem_in_bytes of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501


        :return: The total_mem_in_bytes of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._total_mem_in_bytes

    @total_mem_in_bytes.setter
    def total_mem_in_bytes(self, total_mem_in_bytes):
        """Sets the total_mem_in_bytes of this NodeInfoListForDescribeNodeInfoOutput.


        :param total_mem_in_bytes: The total_mem_in_bytes of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501
        :type: str
        """

        self._total_mem_in_bytes = total_mem_in_bytes

    @property
    def update_time(self):
        """Gets the update_time of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501


        :return: The update_time of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this NodeInfoListForDescribeNodeInfoOutput.


        :param update_time: The update_time of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    @property
    def used_cpu(self):
        """Gets the used_cpu of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501


        :return: The used_cpu of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._used_cpu

    @used_cpu.setter
    def used_cpu(self, used_cpu):
        """Sets the used_cpu of this NodeInfoListForDescribeNodeInfoOutput.


        :param used_cpu: The used_cpu of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501
        :type: str
        """

        self._used_cpu = used_cpu

    @property
    def used_mem_in_bytes(self):
        """Gets the used_mem_in_bytes of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501


        :return: The used_mem_in_bytes of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._used_mem_in_bytes

    @used_mem_in_bytes.setter
    def used_mem_in_bytes(self, used_mem_in_bytes):
        """Sets the used_mem_in_bytes of this NodeInfoListForDescribeNodeInfoOutput.


        :param used_mem_in_bytes: The used_mem_in_bytes of this NodeInfoListForDescribeNodeInfoOutput.  # noqa: E501
        :type: str
        """

        self._used_mem_in_bytes = used_mem_in_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeInfoListForDescribeNodeInfoOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeInfoListForDescribeNodeInfoOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NodeInfoListForDescribeNodeInfoOutput):
            return True

        return self.to_dict() != other.to_dict()
