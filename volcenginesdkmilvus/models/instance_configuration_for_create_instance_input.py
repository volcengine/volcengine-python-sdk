# coding: utf-8

"""
    milvus

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class InstanceConfigurationForCreateInstanceInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'admin_password': 'str',
        'component_spec_list': 'list[ComponentSpecListForCreateInstanceInput]',
        'ha_enabled': 'bool',
        'instance_name': 'str',
        'instance_version': 'str'
    }

    attribute_map = {
        'admin_password': 'AdminPassword',
        'component_spec_list': 'ComponentSpecList',
        'ha_enabled': 'HaEnabled',
        'instance_name': 'InstanceName',
        'instance_version': 'InstanceVersion'
    }

    def __init__(self, admin_password=None, component_spec_list=None, ha_enabled=None, instance_name=None, instance_version=None, _configuration=None):  # noqa: E501
        """InstanceConfigurationForCreateInstanceInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._admin_password = None
        self._component_spec_list = None
        self._ha_enabled = None
        self._instance_name = None
        self._instance_version = None
        self.discriminator = None

        if admin_password is not None:
            self.admin_password = admin_password
        if component_spec_list is not None:
            self.component_spec_list = component_spec_list
        if ha_enabled is not None:
            self.ha_enabled = ha_enabled
        if instance_name is not None:
            self.instance_name = instance_name
        if instance_version is not None:
            self.instance_version = instance_version

    @property
    def admin_password(self):
        """Gets the admin_password of this InstanceConfigurationForCreateInstanceInput.  # noqa: E501


        :return: The admin_password of this InstanceConfigurationForCreateInstanceInput.  # noqa: E501
        :rtype: str
        """
        return self._admin_password

    @admin_password.setter
    def admin_password(self, admin_password):
        """Sets the admin_password of this InstanceConfigurationForCreateInstanceInput.


        :param admin_password: The admin_password of this InstanceConfigurationForCreateInstanceInput.  # noqa: E501
        :type: str
        """

        self._admin_password = admin_password

    @property
    def component_spec_list(self):
        """Gets the component_spec_list of this InstanceConfigurationForCreateInstanceInput.  # noqa: E501


        :return: The component_spec_list of this InstanceConfigurationForCreateInstanceInput.  # noqa: E501
        :rtype: list[ComponentSpecListForCreateInstanceInput]
        """
        return self._component_spec_list

    @component_spec_list.setter
    def component_spec_list(self, component_spec_list):
        """Sets the component_spec_list of this InstanceConfigurationForCreateInstanceInput.


        :param component_spec_list: The component_spec_list of this InstanceConfigurationForCreateInstanceInput.  # noqa: E501
        :type: list[ComponentSpecListForCreateInstanceInput]
        """

        self._component_spec_list = component_spec_list

    @property
    def ha_enabled(self):
        """Gets the ha_enabled of this InstanceConfigurationForCreateInstanceInput.  # noqa: E501


        :return: The ha_enabled of this InstanceConfigurationForCreateInstanceInput.  # noqa: E501
        :rtype: bool
        """
        return self._ha_enabled

    @ha_enabled.setter
    def ha_enabled(self, ha_enabled):
        """Sets the ha_enabled of this InstanceConfigurationForCreateInstanceInput.


        :param ha_enabled: The ha_enabled of this InstanceConfigurationForCreateInstanceInput.  # noqa: E501
        :type: bool
        """

        self._ha_enabled = ha_enabled

    @property
    def instance_name(self):
        """Gets the instance_name of this InstanceConfigurationForCreateInstanceInput.  # noqa: E501


        :return: The instance_name of this InstanceConfigurationForCreateInstanceInput.  # noqa: E501
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this InstanceConfigurationForCreateInstanceInput.


        :param instance_name: The instance_name of this InstanceConfigurationForCreateInstanceInput.  # noqa: E501
        :type: str
        """

        self._instance_name = instance_name

    @property
    def instance_version(self):
        """Gets the instance_version of this InstanceConfigurationForCreateInstanceInput.  # noqa: E501


        :return: The instance_version of this InstanceConfigurationForCreateInstanceInput.  # noqa: E501
        :rtype: str
        """
        return self._instance_version

    @instance_version.setter
    def instance_version(self, instance_version):
        """Sets the instance_version of this InstanceConfigurationForCreateInstanceInput.


        :param instance_version: The instance_version of this InstanceConfigurationForCreateInstanceInput.  # noqa: E501
        :type: str
        """

        self._instance_version = instance_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstanceConfigurationForCreateInstanceInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceConfigurationForCreateInstanceInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InstanceConfigurationForCreateInstanceInput):
            return True

        return self.to_dict() != other.to_dict()
