# coding: utf-8

"""
    milvus

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class EndpointListForDescribeInstanceDetailOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_group_list': 'list[AllowGroupListForDescribeInstanceDetailOutput]',
        'allow_list': 'list[str]',
        'domain': 'str',
        'eip': 'str',
        'eip_id': 'str',
        'ip': 'str',
        'private_domain_publish_enabled': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'allow_group_list': 'AllowGroupList',
        'allow_list': 'AllowList',
        'domain': 'Domain',
        'eip': 'Eip',
        'eip_id': 'EipId',
        'ip': 'Ip',
        'private_domain_publish_enabled': 'PrivateDomainPublishEnabled',
        'type': 'Type'
    }

    def __init__(self, allow_group_list=None, allow_list=None, domain=None, eip=None, eip_id=None, ip=None, private_domain_publish_enabled=None, type=None, _configuration=None):  # noqa: E501
        """EndpointListForDescribeInstanceDetailOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allow_group_list = None
        self._allow_list = None
        self._domain = None
        self._eip = None
        self._eip_id = None
        self._ip = None
        self._private_domain_publish_enabled = None
        self._type = None
        self.discriminator = None

        if allow_group_list is not None:
            self.allow_group_list = allow_group_list
        if allow_list is not None:
            self.allow_list = allow_list
        if domain is not None:
            self.domain = domain
        if eip is not None:
            self.eip = eip
        if eip_id is not None:
            self.eip_id = eip_id
        if ip is not None:
            self.ip = ip
        if private_domain_publish_enabled is not None:
            self.private_domain_publish_enabled = private_domain_publish_enabled
        if type is not None:
            self.type = type

    @property
    def allow_group_list(self):
        """Gets the allow_group_list of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501


        :return: The allow_group_list of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501
        :rtype: list[AllowGroupListForDescribeInstanceDetailOutput]
        """
        return self._allow_group_list

    @allow_group_list.setter
    def allow_group_list(self, allow_group_list):
        """Sets the allow_group_list of this EndpointListForDescribeInstanceDetailOutput.


        :param allow_group_list: The allow_group_list of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501
        :type: list[AllowGroupListForDescribeInstanceDetailOutput]
        """

        self._allow_group_list = allow_group_list

    @property
    def allow_list(self):
        """Gets the allow_list of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501


        :return: The allow_list of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._allow_list

    @allow_list.setter
    def allow_list(self, allow_list):
        """Sets the allow_list of this EndpointListForDescribeInstanceDetailOutput.


        :param allow_list: The allow_list of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501
        :type: list[str]
        """

        self._allow_list = allow_list

    @property
    def domain(self):
        """Gets the domain of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501


        :return: The domain of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this EndpointListForDescribeInstanceDetailOutput.


        :param domain: The domain of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def eip(self):
        """Gets the eip of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501


        :return: The eip of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501
        :rtype: str
        """
        return self._eip

    @eip.setter
    def eip(self, eip):
        """Sets the eip of this EndpointListForDescribeInstanceDetailOutput.


        :param eip: The eip of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501
        :type: str
        """

        self._eip = eip

    @property
    def eip_id(self):
        """Gets the eip_id of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501


        :return: The eip_id of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501
        :rtype: str
        """
        return self._eip_id

    @eip_id.setter
    def eip_id(self, eip_id):
        """Sets the eip_id of this EndpointListForDescribeInstanceDetailOutput.


        :param eip_id: The eip_id of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501
        :type: str
        """

        self._eip_id = eip_id

    @property
    def ip(self):
        """Gets the ip of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501


        :return: The ip of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this EndpointListForDescribeInstanceDetailOutput.


        :param ip: The ip of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def private_domain_publish_enabled(self):
        """Gets the private_domain_publish_enabled of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501


        :return: The private_domain_publish_enabled of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501
        :rtype: bool
        """
        return self._private_domain_publish_enabled

    @private_domain_publish_enabled.setter
    def private_domain_publish_enabled(self, private_domain_publish_enabled):
        """Sets the private_domain_publish_enabled of this EndpointListForDescribeInstanceDetailOutput.


        :param private_domain_publish_enabled: The private_domain_publish_enabled of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501
        :type: bool
        """

        self._private_domain_publish_enabled = private_domain_publish_enabled

    @property
    def type(self):
        """Gets the type of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501


        :return: The type of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EndpointListForDescribeInstanceDetailOutput.


        :param type: The type of this EndpointListForDescribeInstanceDetailOutput.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EndpointListForDescribeInstanceDetailOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EndpointListForDescribeInstanceDetailOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EndpointListForDescribeInstanceDetailOutput):
            return True

        return self.to_dict() != other.to_dict()
