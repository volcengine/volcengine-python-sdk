# coding: utf-8

"""
    milvus

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateInstanceOneStepRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charge_config': 'ChargeConfigForCreateInstanceOneStepInput',
        'delete_protect_enabled': 'bool',
        'instance_configuration': 'InstanceConfigurationForCreateInstanceOneStepInput',
        'network_config': 'NetworkConfigForCreateInstanceOneStepInput',
        'project_name': 'str',
        'region': 'str',
        'tags': 'list[TagForCreateInstanceOneStepInput]',
        'zones': 'list[str]'
    }

    attribute_map = {
        'charge_config': 'ChargeConfig',
        'delete_protect_enabled': 'DeleteProtectEnabled',
        'instance_configuration': 'InstanceConfiguration',
        'network_config': 'NetworkConfig',
        'project_name': 'ProjectName',
        'region': 'Region',
        'tags': 'Tags',
        'zones': 'Zones'
    }

    def __init__(self, charge_config=None, delete_protect_enabled=None, instance_configuration=None, network_config=None, project_name=None, region=None, tags=None, zones=None, _configuration=None):  # noqa: E501
        """CreateInstanceOneStepRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._charge_config = None
        self._delete_protect_enabled = None
        self._instance_configuration = None
        self._network_config = None
        self._project_name = None
        self._region = None
        self._tags = None
        self._zones = None
        self.discriminator = None

        if charge_config is not None:
            self.charge_config = charge_config
        if delete_protect_enabled is not None:
            self.delete_protect_enabled = delete_protect_enabled
        if instance_configuration is not None:
            self.instance_configuration = instance_configuration
        if network_config is not None:
            self.network_config = network_config
        if project_name is not None:
            self.project_name = project_name
        self.region = region
        if tags is not None:
            self.tags = tags
        if zones is not None:
            self.zones = zones

    @property
    def charge_config(self):
        """Gets the charge_config of this CreateInstanceOneStepRequest.  # noqa: E501


        :return: The charge_config of this CreateInstanceOneStepRequest.  # noqa: E501
        :rtype: ChargeConfigForCreateInstanceOneStepInput
        """
        return self._charge_config

    @charge_config.setter
    def charge_config(self, charge_config):
        """Sets the charge_config of this CreateInstanceOneStepRequest.


        :param charge_config: The charge_config of this CreateInstanceOneStepRequest.  # noqa: E501
        :type: ChargeConfigForCreateInstanceOneStepInput
        """

        self._charge_config = charge_config

    @property
    def delete_protect_enabled(self):
        """Gets the delete_protect_enabled of this CreateInstanceOneStepRequest.  # noqa: E501


        :return: The delete_protect_enabled of this CreateInstanceOneStepRequest.  # noqa: E501
        :rtype: bool
        """
        return self._delete_protect_enabled

    @delete_protect_enabled.setter
    def delete_protect_enabled(self, delete_protect_enabled):
        """Sets the delete_protect_enabled of this CreateInstanceOneStepRequest.


        :param delete_protect_enabled: The delete_protect_enabled of this CreateInstanceOneStepRequest.  # noqa: E501
        :type: bool
        """

        self._delete_protect_enabled = delete_protect_enabled

    @property
    def instance_configuration(self):
        """Gets the instance_configuration of this CreateInstanceOneStepRequest.  # noqa: E501


        :return: The instance_configuration of this CreateInstanceOneStepRequest.  # noqa: E501
        :rtype: InstanceConfigurationForCreateInstanceOneStepInput
        """
        return self._instance_configuration

    @instance_configuration.setter
    def instance_configuration(self, instance_configuration):
        """Sets the instance_configuration of this CreateInstanceOneStepRequest.


        :param instance_configuration: The instance_configuration of this CreateInstanceOneStepRequest.  # noqa: E501
        :type: InstanceConfigurationForCreateInstanceOneStepInput
        """

        self._instance_configuration = instance_configuration

    @property
    def network_config(self):
        """Gets the network_config of this CreateInstanceOneStepRequest.  # noqa: E501


        :return: The network_config of this CreateInstanceOneStepRequest.  # noqa: E501
        :rtype: NetworkConfigForCreateInstanceOneStepInput
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this CreateInstanceOneStepRequest.


        :param network_config: The network_config of this CreateInstanceOneStepRequest.  # noqa: E501
        :type: NetworkConfigForCreateInstanceOneStepInput
        """

        self._network_config = network_config

    @property
    def project_name(self):
        """Gets the project_name of this CreateInstanceOneStepRequest.  # noqa: E501


        :return: The project_name of this CreateInstanceOneStepRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this CreateInstanceOneStepRequest.


        :param project_name: The project_name of this CreateInstanceOneStepRequest.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def region(self):
        """Gets the region of this CreateInstanceOneStepRequest.  # noqa: E501


        :return: The region of this CreateInstanceOneStepRequest.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CreateInstanceOneStepRequest.


        :param region: The region of this CreateInstanceOneStepRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def tags(self):
        """Gets the tags of this CreateInstanceOneStepRequest.  # noqa: E501


        :return: The tags of this CreateInstanceOneStepRequest.  # noqa: E501
        :rtype: list[TagForCreateInstanceOneStepInput]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateInstanceOneStepRequest.


        :param tags: The tags of this CreateInstanceOneStepRequest.  # noqa: E501
        :type: list[TagForCreateInstanceOneStepInput]
        """

        self._tags = tags

    @property
    def zones(self):
        """Gets the zones of this CreateInstanceOneStepRequest.  # noqa: E501


        :return: The zones of this CreateInstanceOneStepRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this CreateInstanceOneStepRequest.


        :param zones: The zones of this CreateInstanceOneStepRequest.  # noqa: E501
        :type: list[str]
        """

        self._zones = zones

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateInstanceOneStepRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateInstanceOneStepRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateInstanceOneStepRequest):
            return True

        return self.to_dict() != other.to_dict()
