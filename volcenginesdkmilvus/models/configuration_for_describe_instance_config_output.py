# coding: utf-8

"""
    milvus

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ConfigurationForDescribeInstanceConfigOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config_key': 'str',
        'cur_value': 'str',
        'default_value': 'str',
        'description': 'str',
        'hot_update_enabled': 'bool',
        'module': 'str',
        'unit': 'str',
        'value_range': 'str',
        'value_type': 'str'
    }

    attribute_map = {
        'config_key': 'ConfigKey',
        'cur_value': 'CurValue',
        'default_value': 'DefaultValue',
        'description': 'Description',
        'hot_update_enabled': 'HotUpdateEnabled',
        'module': 'Module',
        'unit': 'Unit',
        'value_range': 'ValueRange',
        'value_type': 'ValueType'
    }

    def __init__(self, config_key=None, cur_value=None, default_value=None, description=None, hot_update_enabled=None, module=None, unit=None, value_range=None, value_type=None, _configuration=None):  # noqa: E501
        """ConfigurationForDescribeInstanceConfigOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._config_key = None
        self._cur_value = None
        self._default_value = None
        self._description = None
        self._hot_update_enabled = None
        self._module = None
        self._unit = None
        self._value_range = None
        self._value_type = None
        self.discriminator = None

        if config_key is not None:
            self.config_key = config_key
        if cur_value is not None:
            self.cur_value = cur_value
        if default_value is not None:
            self.default_value = default_value
        if description is not None:
            self.description = description
        if hot_update_enabled is not None:
            self.hot_update_enabled = hot_update_enabled
        if module is not None:
            self.module = module
        if unit is not None:
            self.unit = unit
        if value_range is not None:
            self.value_range = value_range
        if value_type is not None:
            self.value_type = value_type

    @property
    def config_key(self):
        """Gets the config_key of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501


        :return: The config_key of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._config_key

    @config_key.setter
    def config_key(self, config_key):
        """Sets the config_key of this ConfigurationForDescribeInstanceConfigOutput.


        :param config_key: The config_key of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501
        :type: str
        """

        self._config_key = config_key

    @property
    def cur_value(self):
        """Gets the cur_value of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501


        :return: The cur_value of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._cur_value

    @cur_value.setter
    def cur_value(self, cur_value):
        """Sets the cur_value of this ConfigurationForDescribeInstanceConfigOutput.


        :param cur_value: The cur_value of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501
        :type: str
        """

        self._cur_value = cur_value

    @property
    def default_value(self):
        """Gets the default_value of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501


        :return: The default_value of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this ConfigurationForDescribeInstanceConfigOutput.


        :param default_value: The default_value of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def description(self):
        """Gets the description of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501


        :return: The description of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigurationForDescribeInstanceConfigOutput.


        :param description: The description of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def hot_update_enabled(self):
        """Gets the hot_update_enabled of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501


        :return: The hot_update_enabled of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501
        :rtype: bool
        """
        return self._hot_update_enabled

    @hot_update_enabled.setter
    def hot_update_enabled(self, hot_update_enabled):
        """Sets the hot_update_enabled of this ConfigurationForDescribeInstanceConfigOutput.


        :param hot_update_enabled: The hot_update_enabled of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501
        :type: bool
        """

        self._hot_update_enabled = hot_update_enabled

    @property
    def module(self):
        """Gets the module of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501


        :return: The module of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this ConfigurationForDescribeInstanceConfigOutput.


        :param module: The module of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501
        :type: str
        """

        self._module = module

    @property
    def unit(self):
        """Gets the unit of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501


        :return: The unit of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ConfigurationForDescribeInstanceConfigOutput.


        :param unit: The unit of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def value_range(self):
        """Gets the value_range of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501


        :return: The value_range of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._value_range

    @value_range.setter
    def value_range(self, value_range):
        """Sets the value_range of this ConfigurationForDescribeInstanceConfigOutput.


        :param value_range: The value_range of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501
        :type: str
        """

        self._value_range = value_range

    @property
    def value_type(self):
        """Gets the value_type of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501


        :return: The value_type of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this ConfigurationForDescribeInstanceConfigOutput.


        :param value_type: The value_type of this ConfigurationForDescribeInstanceConfigOutput.  # noqa: E501
        :type: str
        """

        self._value_type = value_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigurationForDescribeInstanceConfigOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigurationForDescribeInstanceConfigOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigurationForDescribeInstanceConfigOutput):
            return True

        return self.to_dict() != other.to_dict()
