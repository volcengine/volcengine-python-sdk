# coding: utf-8

"""
    milvus

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class InstanceInfoForDescribeInstancesOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charge_config': 'ChargeConfigForDescribeInstancesOutput',
        'create_time': 'str',
        'delete_protect_enabled': 'bool',
        'instance_id': 'str',
        'instance_name': 'str',
        'instance_version': 'str',
        'network_config': 'NetworkConfigForDescribeInstancesOutput',
        'project_name': 'str',
        'region': 'str',
        'status': 'str',
        'tags': 'list[TagForDescribeInstancesOutput]',
        'zones': 'list[str]'
    }

    attribute_map = {
        'charge_config': 'ChargeConfig',
        'create_time': 'CreateTime',
        'delete_protect_enabled': 'DeleteProtectEnabled',
        'instance_id': 'InstanceId',
        'instance_name': 'InstanceName',
        'instance_version': 'InstanceVersion',
        'network_config': 'NetworkConfig',
        'project_name': 'ProjectName',
        'region': 'Region',
        'status': 'Status',
        'tags': 'Tags',
        'zones': 'Zones'
    }

    def __init__(self, charge_config=None, create_time=None, delete_protect_enabled=None, instance_id=None, instance_name=None, instance_version=None, network_config=None, project_name=None, region=None, status=None, tags=None, zones=None, _configuration=None):  # noqa: E501
        """InstanceInfoForDescribeInstancesOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._charge_config = None
        self._create_time = None
        self._delete_protect_enabled = None
        self._instance_id = None
        self._instance_name = None
        self._instance_version = None
        self._network_config = None
        self._project_name = None
        self._region = None
        self._status = None
        self._tags = None
        self._zones = None
        self.discriminator = None

        if charge_config is not None:
            self.charge_config = charge_config
        if create_time is not None:
            self.create_time = create_time
        if delete_protect_enabled is not None:
            self.delete_protect_enabled = delete_protect_enabled
        if instance_id is not None:
            self.instance_id = instance_id
        if instance_name is not None:
            self.instance_name = instance_name
        if instance_version is not None:
            self.instance_version = instance_version
        if network_config is not None:
            self.network_config = network_config
        if project_name is not None:
            self.project_name = project_name
        if region is not None:
            self.region = region
        if status is not None:
            self.status = status
        if tags is not None:
            self.tags = tags
        if zones is not None:
            self.zones = zones

    @property
    def charge_config(self):
        """Gets the charge_config of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501


        :return: The charge_config of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :rtype: ChargeConfigForDescribeInstancesOutput
        """
        return self._charge_config

    @charge_config.setter
    def charge_config(self, charge_config):
        """Sets the charge_config of this InstanceInfoForDescribeInstancesOutput.


        :param charge_config: The charge_config of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :type: ChargeConfigForDescribeInstancesOutput
        """

        self._charge_config = charge_config

    @property
    def create_time(self):
        """Gets the create_time of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501


        :return: The create_time of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this InstanceInfoForDescribeInstancesOutput.


        :param create_time: The create_time of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def delete_protect_enabled(self):
        """Gets the delete_protect_enabled of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501


        :return: The delete_protect_enabled of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :rtype: bool
        """
        return self._delete_protect_enabled

    @delete_protect_enabled.setter
    def delete_protect_enabled(self, delete_protect_enabled):
        """Sets the delete_protect_enabled of this InstanceInfoForDescribeInstancesOutput.


        :param delete_protect_enabled: The delete_protect_enabled of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :type: bool
        """

        self._delete_protect_enabled = delete_protect_enabled

    @property
    def instance_id(self):
        """Gets the instance_id of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501


        :return: The instance_id of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this InstanceInfoForDescribeInstancesOutput.


        :param instance_id: The instance_id of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def instance_name(self):
        """Gets the instance_name of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501


        :return: The instance_name of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this InstanceInfoForDescribeInstancesOutput.


        :param instance_name: The instance_name of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :type: str
        """

        self._instance_name = instance_name

    @property
    def instance_version(self):
        """Gets the instance_version of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501


        :return: The instance_version of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :rtype: str
        """
        return self._instance_version

    @instance_version.setter
    def instance_version(self, instance_version):
        """Sets the instance_version of this InstanceInfoForDescribeInstancesOutput.


        :param instance_version: The instance_version of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :type: str
        """

        self._instance_version = instance_version

    @property
    def network_config(self):
        """Gets the network_config of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501


        :return: The network_config of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :rtype: NetworkConfigForDescribeInstancesOutput
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this InstanceInfoForDescribeInstancesOutput.


        :param network_config: The network_config of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :type: NetworkConfigForDescribeInstancesOutput
        """

        self._network_config = network_config

    @property
    def project_name(self):
        """Gets the project_name of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501


        :return: The project_name of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this InstanceInfoForDescribeInstancesOutput.


        :param project_name: The project_name of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def region(self):
        """Gets the region of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501


        :return: The region of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this InstanceInfoForDescribeInstancesOutput.


        :param region: The region of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def status(self):
        """Gets the status of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501


        :return: The status of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InstanceInfoForDescribeInstancesOutput.


        :param status: The status of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501


        :return: The tags of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :rtype: list[TagForDescribeInstancesOutput]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this InstanceInfoForDescribeInstancesOutput.


        :param tags: The tags of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :type: list[TagForDescribeInstancesOutput]
        """

        self._tags = tags

    @property
    def zones(self):
        """Gets the zones of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501


        :return: The zones of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this InstanceInfoForDescribeInstancesOutput.


        :param zones: The zones of this InstanceInfoForDescribeInstancesOutput.  # noqa: E501
        :type: list[str]
        """

        self._zones = zones

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstanceInfoForDescribeInstancesOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceInfoForDescribeInstancesOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InstanceInfoForDescribeInstancesOutput):
            return True

        return self.to_dict() != other.to_dict()
