# coding: utf-8

"""
    milvus

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DescribeAvailableSpecResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_cu_type_support_spec_list': 'list[NodeCuTypeSupportSpecListForDescribeAvailableSpecOutput]',
        'node_support_spec_list': 'list[NodeSupportSpecListForDescribeAvailableSpecOutput]',
        'spec_list': 'list[SpecListForDescribeAvailableSpecOutput]',
        'zone_support_spec_list': 'list[ZoneSupportSpecListForDescribeAvailableSpecOutput]'
    }

    attribute_map = {
        'node_cu_type_support_spec_list': 'NodeCuTypeSupportSpecList',
        'node_support_spec_list': 'NodeSupportSpecList',
        'spec_list': 'SpecList',
        'zone_support_spec_list': 'ZoneSupportSpecList'
    }

    def __init__(self, node_cu_type_support_spec_list=None, node_support_spec_list=None, spec_list=None, zone_support_spec_list=None, _configuration=None):  # noqa: E501
        """DescribeAvailableSpecResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._node_cu_type_support_spec_list = None
        self._node_support_spec_list = None
        self._spec_list = None
        self._zone_support_spec_list = None
        self.discriminator = None

        if node_cu_type_support_spec_list is not None:
            self.node_cu_type_support_spec_list = node_cu_type_support_spec_list
        if node_support_spec_list is not None:
            self.node_support_spec_list = node_support_spec_list
        if spec_list is not None:
            self.spec_list = spec_list
        if zone_support_spec_list is not None:
            self.zone_support_spec_list = zone_support_spec_list

    @property
    def node_cu_type_support_spec_list(self):
        """Gets the node_cu_type_support_spec_list of this DescribeAvailableSpecResponse.  # noqa: E501


        :return: The node_cu_type_support_spec_list of this DescribeAvailableSpecResponse.  # noqa: E501
        :rtype: list[NodeCuTypeSupportSpecListForDescribeAvailableSpecOutput]
        """
        return self._node_cu_type_support_spec_list

    @node_cu_type_support_spec_list.setter
    def node_cu_type_support_spec_list(self, node_cu_type_support_spec_list):
        """Sets the node_cu_type_support_spec_list of this DescribeAvailableSpecResponse.


        :param node_cu_type_support_spec_list: The node_cu_type_support_spec_list of this DescribeAvailableSpecResponse.  # noqa: E501
        :type: list[NodeCuTypeSupportSpecListForDescribeAvailableSpecOutput]
        """

        self._node_cu_type_support_spec_list = node_cu_type_support_spec_list

    @property
    def node_support_spec_list(self):
        """Gets the node_support_spec_list of this DescribeAvailableSpecResponse.  # noqa: E501


        :return: The node_support_spec_list of this DescribeAvailableSpecResponse.  # noqa: E501
        :rtype: list[NodeSupportSpecListForDescribeAvailableSpecOutput]
        """
        return self._node_support_spec_list

    @node_support_spec_list.setter
    def node_support_spec_list(self, node_support_spec_list):
        """Sets the node_support_spec_list of this DescribeAvailableSpecResponse.


        :param node_support_spec_list: The node_support_spec_list of this DescribeAvailableSpecResponse.  # noqa: E501
        :type: list[NodeSupportSpecListForDescribeAvailableSpecOutput]
        """

        self._node_support_spec_list = node_support_spec_list

    @property
    def spec_list(self):
        """Gets the spec_list of this DescribeAvailableSpecResponse.  # noqa: E501


        :return: The spec_list of this DescribeAvailableSpecResponse.  # noqa: E501
        :rtype: list[SpecListForDescribeAvailableSpecOutput]
        """
        return self._spec_list

    @spec_list.setter
    def spec_list(self, spec_list):
        """Sets the spec_list of this DescribeAvailableSpecResponse.


        :param spec_list: The spec_list of this DescribeAvailableSpecResponse.  # noqa: E501
        :type: list[SpecListForDescribeAvailableSpecOutput]
        """

        self._spec_list = spec_list

    @property
    def zone_support_spec_list(self):
        """Gets the zone_support_spec_list of this DescribeAvailableSpecResponse.  # noqa: E501


        :return: The zone_support_spec_list of this DescribeAvailableSpecResponse.  # noqa: E501
        :rtype: list[ZoneSupportSpecListForDescribeAvailableSpecOutput]
        """
        return self._zone_support_spec_list

    @zone_support_spec_list.setter
    def zone_support_spec_list(self, zone_support_spec_list):
        """Sets the zone_support_spec_list of this DescribeAvailableSpecResponse.


        :param zone_support_spec_list: The zone_support_spec_list of this DescribeAvailableSpecResponse.  # noqa: E501
        :type: list[ZoneSupportSpecListForDescribeAvailableSpecOutput]
        """

        self._zone_support_spec_list = zone_support_spec_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DescribeAvailableSpecResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DescribeAvailableSpecResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DescribeAvailableSpecResponse):
            return True

        return self.to_dict() != other.to_dict()
