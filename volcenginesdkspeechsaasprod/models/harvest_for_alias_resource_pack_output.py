# coding: utf-8

"""
    speech_saas_prod

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class HarvestForAliasResourcePackOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crop_type': 'str',
        'current_usage': 'float',
        'purchased_amount': 'float',
        'resource_id': 'str',
        'unit': 'str'
    }

    attribute_map = {
        'crop_type': 'CropType',
        'current_usage': 'CurrentUsage',
        'purchased_amount': 'PurchasedAmount',
        'resource_id': 'ResourceID',
        'unit': 'Unit'
    }

    def __init__(self, crop_type=None, current_usage=None, purchased_amount=None, resource_id=None, unit=None, _configuration=None):  # noqa: E501
        """HarvestForAliasResourcePackOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._crop_type = None
        self._current_usage = None
        self._purchased_amount = None
        self._resource_id = None
        self._unit = None
        self.discriminator = None

        if crop_type is not None:
            self.crop_type = crop_type
        if current_usage is not None:
            self.current_usage = current_usage
        if purchased_amount is not None:
            self.purchased_amount = purchased_amount
        if resource_id is not None:
            self.resource_id = resource_id
        if unit is not None:
            self.unit = unit

    @property
    def crop_type(self):
        """Gets the crop_type of this HarvestForAliasResourcePackOutput.  # noqa: E501


        :return: The crop_type of this HarvestForAliasResourcePackOutput.  # noqa: E501
        :rtype: str
        """
        return self._crop_type

    @crop_type.setter
    def crop_type(self, crop_type):
        """Sets the crop_type of this HarvestForAliasResourcePackOutput.


        :param crop_type: The crop_type of this HarvestForAliasResourcePackOutput.  # noqa: E501
        :type: str
        """

        self._crop_type = crop_type

    @property
    def current_usage(self):
        """Gets the current_usage of this HarvestForAliasResourcePackOutput.  # noqa: E501


        :return: The current_usage of this HarvestForAliasResourcePackOutput.  # noqa: E501
        :rtype: float
        """
        return self._current_usage

    @current_usage.setter
    def current_usage(self, current_usage):
        """Sets the current_usage of this HarvestForAliasResourcePackOutput.


        :param current_usage: The current_usage of this HarvestForAliasResourcePackOutput.  # noqa: E501
        :type: float
        """

        self._current_usage = current_usage

    @property
    def purchased_amount(self):
        """Gets the purchased_amount of this HarvestForAliasResourcePackOutput.  # noqa: E501


        :return: The purchased_amount of this HarvestForAliasResourcePackOutput.  # noqa: E501
        :rtype: float
        """
        return self._purchased_amount

    @purchased_amount.setter
    def purchased_amount(self, purchased_amount):
        """Sets the purchased_amount of this HarvestForAliasResourcePackOutput.


        :param purchased_amount: The purchased_amount of this HarvestForAliasResourcePackOutput.  # noqa: E501
        :type: float
        """

        self._purchased_amount = purchased_amount

    @property
    def resource_id(self):
        """Gets the resource_id of this HarvestForAliasResourcePackOutput.  # noqa: E501


        :return: The resource_id of this HarvestForAliasResourcePackOutput.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this HarvestForAliasResourcePackOutput.


        :param resource_id: The resource_id of this HarvestForAliasResourcePackOutput.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def unit(self):
        """Gets the unit of this HarvestForAliasResourcePackOutput.  # noqa: E501


        :return: The unit of this HarvestForAliasResourcePackOutput.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this HarvestForAliasResourcePackOutput.


        :param unit: The unit of this HarvestForAliasResourcePackOutput.  # noqa: E501
        :type: str
        """

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HarvestForAliasResourcePackOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HarvestForAliasResourcePackOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HarvestForAliasResourcePackOutput):
            return True

        return self.to_dict() != other.to_dict()
