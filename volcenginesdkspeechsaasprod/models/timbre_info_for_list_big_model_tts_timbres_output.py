# coding: utf-8

"""
    speech_saas_prod

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class TimbreInfoForListBigModelTTSTimbresOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'age': 'str',
        'categories': 'list[CategoryForListBigModelTTSTimbresOutput]',
        'emotions': 'list[EmotionForListBigModelTTSTimbresOutput]',
        'gender': 'str',
        'speaker_name': 'str'
    }

    attribute_map = {
        'age': 'Age',
        'categories': 'Categories',
        'emotions': 'Emotions',
        'gender': 'Gender',
        'speaker_name': 'SpeakerName'
    }

    def __init__(self, age=None, categories=None, emotions=None, gender=None, speaker_name=None, _configuration=None):  # noqa: E501
        """TimbreInfoForListBigModelTTSTimbresOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._age = None
        self._categories = None
        self._emotions = None
        self._gender = None
        self._speaker_name = None
        self.discriminator = None

        if age is not None:
            self.age = age
        if categories is not None:
            self.categories = categories
        if emotions is not None:
            self.emotions = emotions
        if gender is not None:
            self.gender = gender
        if speaker_name is not None:
            self.speaker_name = speaker_name

    @property
    def age(self):
        """Gets the age of this TimbreInfoForListBigModelTTSTimbresOutput.  # noqa: E501


        :return: The age of this TimbreInfoForListBigModelTTSTimbresOutput.  # noqa: E501
        :rtype: str
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this TimbreInfoForListBigModelTTSTimbresOutput.


        :param age: The age of this TimbreInfoForListBigModelTTSTimbresOutput.  # noqa: E501
        :type: str
        """

        self._age = age

    @property
    def categories(self):
        """Gets the categories of this TimbreInfoForListBigModelTTSTimbresOutput.  # noqa: E501


        :return: The categories of this TimbreInfoForListBigModelTTSTimbresOutput.  # noqa: E501
        :rtype: list[CategoryForListBigModelTTSTimbresOutput]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this TimbreInfoForListBigModelTTSTimbresOutput.


        :param categories: The categories of this TimbreInfoForListBigModelTTSTimbresOutput.  # noqa: E501
        :type: list[CategoryForListBigModelTTSTimbresOutput]
        """

        self._categories = categories

    @property
    def emotions(self):
        """Gets the emotions of this TimbreInfoForListBigModelTTSTimbresOutput.  # noqa: E501


        :return: The emotions of this TimbreInfoForListBigModelTTSTimbresOutput.  # noqa: E501
        :rtype: list[EmotionForListBigModelTTSTimbresOutput]
        """
        return self._emotions

    @emotions.setter
    def emotions(self, emotions):
        """Sets the emotions of this TimbreInfoForListBigModelTTSTimbresOutput.


        :param emotions: The emotions of this TimbreInfoForListBigModelTTSTimbresOutput.  # noqa: E501
        :type: list[EmotionForListBigModelTTSTimbresOutput]
        """

        self._emotions = emotions

    @property
    def gender(self):
        """Gets the gender of this TimbreInfoForListBigModelTTSTimbresOutput.  # noqa: E501


        :return: The gender of this TimbreInfoForListBigModelTTSTimbresOutput.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this TimbreInfoForListBigModelTTSTimbresOutput.


        :param gender: The gender of this TimbreInfoForListBigModelTTSTimbresOutput.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def speaker_name(self):
        """Gets the speaker_name of this TimbreInfoForListBigModelTTSTimbresOutput.  # noqa: E501


        :return: The speaker_name of this TimbreInfoForListBigModelTTSTimbresOutput.  # noqa: E501
        :rtype: str
        """
        return self._speaker_name

    @speaker_name.setter
    def speaker_name(self, speaker_name):
        """Sets the speaker_name of this TimbreInfoForListBigModelTTSTimbresOutput.


        :param speaker_name: The speaker_name of this TimbreInfoForListBigModelTTSTimbresOutput.  # noqa: E501
        :type: str
        """

        self._speaker_name = speaker_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimbreInfoForListBigModelTTSTimbresOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimbreInfoForListBigModelTTSTimbresOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimbreInfoForListBigModelTTSTimbresOutput):
            return True

        return self.to_dict() != other.to_dict()
