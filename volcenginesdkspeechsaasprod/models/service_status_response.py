# coding: utf-8

"""
    speech_saas_prod

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ServiceStatusResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billing_resource': 'BillingResourceForServiceStatusOutput',
        'billing_resources': 'list[BillingResourceForServiceStatusOutput]',
        'billing_rules': 'str',
        'clusters': 'list[str]',
        'instance_number': 'str',
        'level': 'str',
        'product_doc': 'str',
        'quota_resource': 'QuotaResourceForServiceStatusOutput',
        'quota_resources': 'list[QuotaResourceForServiceStatusOutput]',
        'resource_id': 'str',
        'status': 'str',
        'tags': 'list[TagForServiceStatusOutput]'
    }

    attribute_map = {
        'billing_resource': 'BillingResource',
        'billing_resources': 'BillingResources',
        'billing_rules': 'BillingRules',
        'clusters': 'Clusters',
        'instance_number': 'InstanceNumber',
        'level': 'Level',
        'product_doc': 'ProductDoc',
        'quota_resource': 'QuotaResource',
        'quota_resources': 'QuotaResources',
        'resource_id': 'ResourceID',
        'status': 'Status',
        'tags': 'Tags'
    }

    def __init__(self, billing_resource=None, billing_resources=None, billing_rules=None, clusters=None, instance_number=None, level=None, product_doc=None, quota_resource=None, quota_resources=None, resource_id=None, status=None, tags=None, _configuration=None):  # noqa: E501
        """ServiceStatusResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._billing_resource = None
        self._billing_resources = None
        self._billing_rules = None
        self._clusters = None
        self._instance_number = None
        self._level = None
        self._product_doc = None
        self._quota_resource = None
        self._quota_resources = None
        self._resource_id = None
        self._status = None
        self._tags = None
        self.discriminator = None

        if billing_resource is not None:
            self.billing_resource = billing_resource
        if billing_resources is not None:
            self.billing_resources = billing_resources
        if billing_rules is not None:
            self.billing_rules = billing_rules
        if clusters is not None:
            self.clusters = clusters
        if instance_number is not None:
            self.instance_number = instance_number
        if level is not None:
            self.level = level
        if product_doc is not None:
            self.product_doc = product_doc
        if quota_resource is not None:
            self.quota_resource = quota_resource
        if quota_resources is not None:
            self.quota_resources = quota_resources
        if resource_id is not None:
            self.resource_id = resource_id
        if status is not None:
            self.status = status
        if tags is not None:
            self.tags = tags

    @property
    def billing_resource(self):
        """Gets the billing_resource of this ServiceStatusResponse.  # noqa: E501


        :return: The billing_resource of this ServiceStatusResponse.  # noqa: E501
        :rtype: BillingResourceForServiceStatusOutput
        """
        return self._billing_resource

    @billing_resource.setter
    def billing_resource(self, billing_resource):
        """Sets the billing_resource of this ServiceStatusResponse.


        :param billing_resource: The billing_resource of this ServiceStatusResponse.  # noqa: E501
        :type: BillingResourceForServiceStatusOutput
        """

        self._billing_resource = billing_resource

    @property
    def billing_resources(self):
        """Gets the billing_resources of this ServiceStatusResponse.  # noqa: E501


        :return: The billing_resources of this ServiceStatusResponse.  # noqa: E501
        :rtype: list[BillingResourceForServiceStatusOutput]
        """
        return self._billing_resources

    @billing_resources.setter
    def billing_resources(self, billing_resources):
        """Sets the billing_resources of this ServiceStatusResponse.


        :param billing_resources: The billing_resources of this ServiceStatusResponse.  # noqa: E501
        :type: list[BillingResourceForServiceStatusOutput]
        """

        self._billing_resources = billing_resources

    @property
    def billing_rules(self):
        """Gets the billing_rules of this ServiceStatusResponse.  # noqa: E501


        :return: The billing_rules of this ServiceStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._billing_rules

    @billing_rules.setter
    def billing_rules(self, billing_rules):
        """Sets the billing_rules of this ServiceStatusResponse.


        :param billing_rules: The billing_rules of this ServiceStatusResponse.  # noqa: E501
        :type: str
        """

        self._billing_rules = billing_rules

    @property
    def clusters(self):
        """Gets the clusters of this ServiceStatusResponse.  # noqa: E501


        :return: The clusters of this ServiceStatusResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this ServiceStatusResponse.


        :param clusters: The clusters of this ServiceStatusResponse.  # noqa: E501
        :type: list[str]
        """

        self._clusters = clusters

    @property
    def instance_number(self):
        """Gets the instance_number of this ServiceStatusResponse.  # noqa: E501


        :return: The instance_number of this ServiceStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._instance_number

    @instance_number.setter
    def instance_number(self, instance_number):
        """Sets the instance_number of this ServiceStatusResponse.


        :param instance_number: The instance_number of this ServiceStatusResponse.  # noqa: E501
        :type: str
        """

        self._instance_number = instance_number

    @property
    def level(self):
        """Gets the level of this ServiceStatusResponse.  # noqa: E501


        :return: The level of this ServiceStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this ServiceStatusResponse.


        :param level: The level of this ServiceStatusResponse.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def product_doc(self):
        """Gets the product_doc of this ServiceStatusResponse.  # noqa: E501


        :return: The product_doc of this ServiceStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._product_doc

    @product_doc.setter
    def product_doc(self, product_doc):
        """Sets the product_doc of this ServiceStatusResponse.


        :param product_doc: The product_doc of this ServiceStatusResponse.  # noqa: E501
        :type: str
        """

        self._product_doc = product_doc

    @property
    def quota_resource(self):
        """Gets the quota_resource of this ServiceStatusResponse.  # noqa: E501


        :return: The quota_resource of this ServiceStatusResponse.  # noqa: E501
        :rtype: QuotaResourceForServiceStatusOutput
        """
        return self._quota_resource

    @quota_resource.setter
    def quota_resource(self, quota_resource):
        """Sets the quota_resource of this ServiceStatusResponse.


        :param quota_resource: The quota_resource of this ServiceStatusResponse.  # noqa: E501
        :type: QuotaResourceForServiceStatusOutput
        """

        self._quota_resource = quota_resource

    @property
    def quota_resources(self):
        """Gets the quota_resources of this ServiceStatusResponse.  # noqa: E501


        :return: The quota_resources of this ServiceStatusResponse.  # noqa: E501
        :rtype: list[QuotaResourceForServiceStatusOutput]
        """
        return self._quota_resources

    @quota_resources.setter
    def quota_resources(self, quota_resources):
        """Sets the quota_resources of this ServiceStatusResponse.


        :param quota_resources: The quota_resources of this ServiceStatusResponse.  # noqa: E501
        :type: list[QuotaResourceForServiceStatusOutput]
        """

        self._quota_resources = quota_resources

    @property
    def resource_id(self):
        """Gets the resource_id of this ServiceStatusResponse.  # noqa: E501


        :return: The resource_id of this ServiceStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ServiceStatusResponse.


        :param resource_id: The resource_id of this ServiceStatusResponse.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def status(self):
        """Gets the status of this ServiceStatusResponse.  # noqa: E501


        :return: The status of this ServiceStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ServiceStatusResponse.


        :param status: The status of this ServiceStatusResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this ServiceStatusResponse.  # noqa: E501


        :return: The tags of this ServiceStatusResponse.  # noqa: E501
        :rtype: list[TagForServiceStatusOutput]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ServiceStatusResponse.


        :param tags: The tags of this ServiceStatusResponse.  # noqa: E501
        :type: list[TagForServiceStatusOutput]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceStatusResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceStatusResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceStatusResponse):
            return True

        return self.to_dict() != other.to_dict()
