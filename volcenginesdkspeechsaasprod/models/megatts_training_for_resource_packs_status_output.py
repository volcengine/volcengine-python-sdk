# coding: utf-8

"""
    speech_saas_prod

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class MegattsTrainingForResourcePacksStatusOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available_training_times': 'int',
        'create_time': 'int',
        'is_activatable': 'bool',
        'state': 'str',
        'version': 'str'
    }

    attribute_map = {
        'available_training_times': 'AvailableTrainingTimes',
        'create_time': 'CreateTime',
        'is_activatable': 'IsActivatable',
        'state': 'State',
        'version': 'Version'
    }

    def __init__(self, available_training_times=None, create_time=None, is_activatable=None, state=None, version=None, _configuration=None):  # noqa: E501
        """MegattsTrainingForResourcePacksStatusOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._available_training_times = None
        self._create_time = None
        self._is_activatable = None
        self._state = None
        self._version = None
        self.discriminator = None

        if available_training_times is not None:
            self.available_training_times = available_training_times
        if create_time is not None:
            self.create_time = create_time
        if is_activatable is not None:
            self.is_activatable = is_activatable
        if state is not None:
            self.state = state
        if version is not None:
            self.version = version

    @property
    def available_training_times(self):
        """Gets the available_training_times of this MegattsTrainingForResourcePacksStatusOutput.  # noqa: E501


        :return: The available_training_times of this MegattsTrainingForResourcePacksStatusOutput.  # noqa: E501
        :rtype: int
        """
        return self._available_training_times

    @available_training_times.setter
    def available_training_times(self, available_training_times):
        """Sets the available_training_times of this MegattsTrainingForResourcePacksStatusOutput.


        :param available_training_times: The available_training_times of this MegattsTrainingForResourcePacksStatusOutput.  # noqa: E501
        :type: int
        """

        self._available_training_times = available_training_times

    @property
    def create_time(self):
        """Gets the create_time of this MegattsTrainingForResourcePacksStatusOutput.  # noqa: E501


        :return: The create_time of this MegattsTrainingForResourcePacksStatusOutput.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this MegattsTrainingForResourcePacksStatusOutput.


        :param create_time: The create_time of this MegattsTrainingForResourcePacksStatusOutput.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def is_activatable(self):
        """Gets the is_activatable of this MegattsTrainingForResourcePacksStatusOutput.  # noqa: E501


        :return: The is_activatable of this MegattsTrainingForResourcePacksStatusOutput.  # noqa: E501
        :rtype: bool
        """
        return self._is_activatable

    @is_activatable.setter
    def is_activatable(self, is_activatable):
        """Sets the is_activatable of this MegattsTrainingForResourcePacksStatusOutput.


        :param is_activatable: The is_activatable of this MegattsTrainingForResourcePacksStatusOutput.  # noqa: E501
        :type: bool
        """

        self._is_activatable = is_activatable

    @property
    def state(self):
        """Gets the state of this MegattsTrainingForResourcePacksStatusOutput.  # noqa: E501


        :return: The state of this MegattsTrainingForResourcePacksStatusOutput.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MegattsTrainingForResourcePacksStatusOutput.


        :param state: The state of this MegattsTrainingForResourcePacksStatusOutput.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def version(self):
        """Gets the version of this MegattsTrainingForResourcePacksStatusOutput.  # noqa: E501


        :return: The version of this MegattsTrainingForResourcePacksStatusOutput.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this MegattsTrainingForResourcePacksStatusOutput.


        :param version: The version of this MegattsTrainingForResourcePacksStatusOutput.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MegattsTrainingForResourcePacksStatusOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MegattsTrainingForResourcePacksStatusOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MegattsTrainingForResourcePacksStatusOutput):
            return True

        return self.to_dict() != other.to_dict()
