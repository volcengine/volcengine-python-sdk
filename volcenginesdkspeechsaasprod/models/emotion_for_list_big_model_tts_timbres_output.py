# coding: utf-8

"""
    speech_saas_prod

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class EmotionForListBigModelTTSTimbresOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'demo_text': 'str',
        'demo_url': 'str',
        'emotion': 'str',
        'emotion_type': 'str'
    }

    attribute_map = {
        'demo_text': 'DemoText',
        'demo_url': 'DemoURL',
        'emotion': 'Emotion',
        'emotion_type': 'EmotionType'
    }

    def __init__(self, demo_text=None, demo_url=None, emotion=None, emotion_type=None, _configuration=None):  # noqa: E501
        """EmotionForListBigModelTTSTimbresOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._demo_text = None
        self._demo_url = None
        self._emotion = None
        self._emotion_type = None
        self.discriminator = None

        if demo_text is not None:
            self.demo_text = demo_text
        if demo_url is not None:
            self.demo_url = demo_url
        if emotion is not None:
            self.emotion = emotion
        if emotion_type is not None:
            self.emotion_type = emotion_type

    @property
    def demo_text(self):
        """Gets the demo_text of this EmotionForListBigModelTTSTimbresOutput.  # noqa: E501


        :return: The demo_text of this EmotionForListBigModelTTSTimbresOutput.  # noqa: E501
        :rtype: str
        """
        return self._demo_text

    @demo_text.setter
    def demo_text(self, demo_text):
        """Sets the demo_text of this EmotionForListBigModelTTSTimbresOutput.


        :param demo_text: The demo_text of this EmotionForListBigModelTTSTimbresOutput.  # noqa: E501
        :type: str
        """

        self._demo_text = demo_text

    @property
    def demo_url(self):
        """Gets the demo_url of this EmotionForListBigModelTTSTimbresOutput.  # noqa: E501


        :return: The demo_url of this EmotionForListBigModelTTSTimbresOutput.  # noqa: E501
        :rtype: str
        """
        return self._demo_url

    @demo_url.setter
    def demo_url(self, demo_url):
        """Sets the demo_url of this EmotionForListBigModelTTSTimbresOutput.


        :param demo_url: The demo_url of this EmotionForListBigModelTTSTimbresOutput.  # noqa: E501
        :type: str
        """

        self._demo_url = demo_url

    @property
    def emotion(self):
        """Gets the emotion of this EmotionForListBigModelTTSTimbresOutput.  # noqa: E501


        :return: The emotion of this EmotionForListBigModelTTSTimbresOutput.  # noqa: E501
        :rtype: str
        """
        return self._emotion

    @emotion.setter
    def emotion(self, emotion):
        """Sets the emotion of this EmotionForListBigModelTTSTimbresOutput.


        :param emotion: The emotion of this EmotionForListBigModelTTSTimbresOutput.  # noqa: E501
        :type: str
        """

        self._emotion = emotion

    @property
    def emotion_type(self):
        """Gets the emotion_type of this EmotionForListBigModelTTSTimbresOutput.  # noqa: E501


        :return: The emotion_type of this EmotionForListBigModelTTSTimbresOutput.  # noqa: E501
        :rtype: str
        """
        return self._emotion_type

    @emotion_type.setter
    def emotion_type(self, emotion_type):
        """Sets the emotion_type of this EmotionForListBigModelTTSTimbresOutput.


        :param emotion_type: The emotion_type of this EmotionForListBigModelTTSTimbresOutput.  # noqa: E501
        :type: str
        """

        self._emotion_type = emotion_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmotionForListBigModelTTSTimbresOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmotionForListBigModelTTSTimbresOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmotionForListBigModelTTSTimbresOutput):
            return True

        return self.to_dict() != other.to_dict()
