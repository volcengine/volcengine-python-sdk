# coding: utf-8

"""
    quota

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateQuotaApplicationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'desire_value': 'float',
        'dimensions': 'list[DimensionForCreateQuotaApplicationInput]',
        'provider_code': 'str',
        'quota_code': 'str',
        'reason': 'str'
    }

    attribute_map = {
        'desire_value': 'DesireValue',
        'dimensions': 'Dimensions',
        'provider_code': 'ProviderCode',
        'quota_code': 'QuotaCode',
        'reason': 'Reason'
    }

    def __init__(self, desire_value=None, dimensions=None, provider_code=None, quota_code=None, reason=None, _configuration=None):  # noqa: E501
        """CreateQuotaApplicationRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._desire_value = None
        self._dimensions = None
        self._provider_code = None
        self._quota_code = None
        self._reason = None
        self.discriminator = None

        self.desire_value = desire_value
        if dimensions is not None:
            self.dimensions = dimensions
        self.provider_code = provider_code
        self.quota_code = quota_code
        self.reason = reason

    @property
    def desire_value(self):
        """Gets the desire_value of this CreateQuotaApplicationRequest.  # noqa: E501


        :return: The desire_value of this CreateQuotaApplicationRequest.  # noqa: E501
        :rtype: float
        """
        return self._desire_value

    @desire_value.setter
    def desire_value(self, desire_value):
        """Sets the desire_value of this CreateQuotaApplicationRequest.


        :param desire_value: The desire_value of this CreateQuotaApplicationRequest.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and desire_value is None:
            raise ValueError("Invalid value for `desire_value`, must not be `None`")  # noqa: E501

        self._desire_value = desire_value

    @property
    def dimensions(self):
        """Gets the dimensions of this CreateQuotaApplicationRequest.  # noqa: E501


        :return: The dimensions of this CreateQuotaApplicationRequest.  # noqa: E501
        :rtype: list[DimensionForCreateQuotaApplicationInput]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this CreateQuotaApplicationRequest.


        :param dimensions: The dimensions of this CreateQuotaApplicationRequest.  # noqa: E501
        :type: list[DimensionForCreateQuotaApplicationInput]
        """

        self._dimensions = dimensions

    @property
    def provider_code(self):
        """Gets the provider_code of this CreateQuotaApplicationRequest.  # noqa: E501


        :return: The provider_code of this CreateQuotaApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._provider_code

    @provider_code.setter
    def provider_code(self, provider_code):
        """Sets the provider_code of this CreateQuotaApplicationRequest.


        :param provider_code: The provider_code of this CreateQuotaApplicationRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and provider_code is None:
            raise ValueError("Invalid value for `provider_code`, must not be `None`")  # noqa: E501

        self._provider_code = provider_code

    @property
    def quota_code(self):
        """Gets the quota_code of this CreateQuotaApplicationRequest.  # noqa: E501


        :return: The quota_code of this CreateQuotaApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._quota_code

    @quota_code.setter
    def quota_code(self, quota_code):
        """Sets the quota_code of this CreateQuotaApplicationRequest.


        :param quota_code: The quota_code of this CreateQuotaApplicationRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and quota_code is None:
            raise ValueError("Invalid value for `quota_code`, must not be `None`")  # noqa: E501

        self._quota_code = quota_code

    @property
    def reason(self):
        """Gets the reason of this CreateQuotaApplicationRequest.  # noqa: E501


        :return: The reason of this CreateQuotaApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CreateQuotaApplicationRequest.


        :param reason: The reason of this CreateQuotaApplicationRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501

        self._reason = reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateQuotaApplicationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateQuotaApplicationRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateQuotaApplicationRequest):
            return True

        return self.to_dict() != other.to_dict()
