# coding: utf-8

"""
    speech_saas_prod20250521

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class QuotaMonitoringRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end': 'str',
        'mode': 'str',
        'project_name': 'str',
        'quota_type': 'str',
        'resource_id': 'str',
        'start': 'str'
    }

    attribute_map = {
        'end': 'End',
        'mode': 'Mode',
        'project_name': 'ProjectName',
        'quota_type': 'QuotaType',
        'resource_id': 'ResourceID',
        'start': 'Start'
    }

    def __init__(self, end=None, mode=None, project_name=None, quota_type=None, resource_id=None, start=None, _configuration=None):  # noqa: E501
        """QuotaMonitoringRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._end = None
        self._mode = None
        self._project_name = None
        self._quota_type = None
        self._resource_id = None
        self._start = None
        self.discriminator = None

        self.end = end
        if mode is not None:
            self.mode = mode
        self.project_name = project_name
        if quota_type is not None:
            self.quota_type = quota_type
        self.resource_id = resource_id
        self.start = start

    @property
    def end(self):
        """Gets the end of this QuotaMonitoringRequest.  # noqa: E501


        :return: The end of this QuotaMonitoringRequest.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this QuotaMonitoringRequest.


        :param end: The end of this QuotaMonitoringRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")  # noqa: E501

        self._end = end

    @property
    def mode(self):
        """Gets the mode of this QuotaMonitoringRequest.  # noqa: E501


        :return: The mode of this QuotaMonitoringRequest.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this QuotaMonitoringRequest.


        :param mode: The mode of this QuotaMonitoringRequest.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def project_name(self):
        """Gets the project_name of this QuotaMonitoringRequest.  # noqa: E501


        :return: The project_name of this QuotaMonitoringRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this QuotaMonitoringRequest.


        :param project_name: The project_name of this QuotaMonitoringRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and project_name is None:
            raise ValueError("Invalid value for `project_name`, must not be `None`")  # noqa: E501

        self._project_name = project_name

    @property
    def quota_type(self):
        """Gets the quota_type of this QuotaMonitoringRequest.  # noqa: E501


        :return: The quota_type of this QuotaMonitoringRequest.  # noqa: E501
        :rtype: str
        """
        return self._quota_type

    @quota_type.setter
    def quota_type(self, quota_type):
        """Sets the quota_type of this QuotaMonitoringRequest.


        :param quota_type: The quota_type of this QuotaMonitoringRequest.  # noqa: E501
        :type: str
        """

        self._quota_type = quota_type

    @property
    def resource_id(self):
        """Gets the resource_id of this QuotaMonitoringRequest.  # noqa: E501


        :return: The resource_id of this QuotaMonitoringRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this QuotaMonitoringRequest.


        :param resource_id: The resource_id of this QuotaMonitoringRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")  # noqa: E501

        self._resource_id = resource_id

    @property
    def start(self):
        """Gets the start of this QuotaMonitoringRequest.  # noqa: E501


        :return: The start of this QuotaMonitoringRequest.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this QuotaMonitoringRequest.


        :param start: The start of this QuotaMonitoringRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuotaMonitoringRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuotaMonitoringRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuotaMonitoringRequest):
            return True

        return self.to_dict() != other.to_dict()
