# coding: utf-8

"""
    speech_saas_prod20250521

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class OrderAccessResourcePacksRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_use_coupon': 'bool',
        'code': 'str',
        'coupon_id': 'str',
        'project_name': 'str',
        'quantity': 'int',
        'resource_id': 'str',
        'tags': 'list[TagForOrderAccessResourcePacksInput]',
        'times': 'int'
    }

    attribute_map = {
        'auto_use_coupon': 'AutoUseCoupon',
        'code': 'Code',
        'coupon_id': 'CouponID',
        'project_name': 'ProjectName',
        'quantity': 'Quantity',
        'resource_id': 'ResourceID',
        'tags': 'Tags',
        'times': 'Times'
    }

    def __init__(self, auto_use_coupon=None, code=None, coupon_id=None, project_name=None, quantity=None, resource_id=None, tags=None, times=None, _configuration=None):  # noqa: E501
        """OrderAccessResourcePacksRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auto_use_coupon = None
        self._code = None
        self._coupon_id = None
        self._project_name = None
        self._quantity = None
        self._resource_id = None
        self._tags = None
        self._times = None
        self.discriminator = None

        if auto_use_coupon is not None:
            self.auto_use_coupon = auto_use_coupon
        self.code = code
        if coupon_id is not None:
            self.coupon_id = coupon_id
        self.project_name = project_name
        self.quantity = quantity
        self.resource_id = resource_id
        if tags is not None:
            self.tags = tags
        self.times = times

    @property
    def auto_use_coupon(self):
        """Gets the auto_use_coupon of this OrderAccessResourcePacksRequest.  # noqa: E501


        :return: The auto_use_coupon of this OrderAccessResourcePacksRequest.  # noqa: E501
        :rtype: bool
        """
        return self._auto_use_coupon

    @auto_use_coupon.setter
    def auto_use_coupon(self, auto_use_coupon):
        """Sets the auto_use_coupon of this OrderAccessResourcePacksRequest.


        :param auto_use_coupon: The auto_use_coupon of this OrderAccessResourcePacksRequest.  # noqa: E501
        :type: bool
        """

        self._auto_use_coupon = auto_use_coupon

    @property
    def code(self):
        """Gets the code of this OrderAccessResourcePacksRequest.  # noqa: E501


        :return: The code of this OrderAccessResourcePacksRequest.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this OrderAccessResourcePacksRequest.


        :param code: The code of this OrderAccessResourcePacksRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def coupon_id(self):
        """Gets the coupon_id of this OrderAccessResourcePacksRequest.  # noqa: E501


        :return: The coupon_id of this OrderAccessResourcePacksRequest.  # noqa: E501
        :rtype: str
        """
        return self._coupon_id

    @coupon_id.setter
    def coupon_id(self, coupon_id):
        """Sets the coupon_id of this OrderAccessResourcePacksRequest.


        :param coupon_id: The coupon_id of this OrderAccessResourcePacksRequest.  # noqa: E501
        :type: str
        """

        self._coupon_id = coupon_id

    @property
    def project_name(self):
        """Gets the project_name of this OrderAccessResourcePacksRequest.  # noqa: E501


        :return: The project_name of this OrderAccessResourcePacksRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this OrderAccessResourcePacksRequest.


        :param project_name: The project_name of this OrderAccessResourcePacksRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and project_name is None:
            raise ValueError("Invalid value for `project_name`, must not be `None`")  # noqa: E501

        self._project_name = project_name

    @property
    def quantity(self):
        """Gets the quantity of this OrderAccessResourcePacksRequest.  # noqa: E501


        :return: The quantity of this OrderAccessResourcePacksRequest.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrderAccessResourcePacksRequest.


        :param quantity: The quantity of this OrderAccessResourcePacksRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def resource_id(self):
        """Gets the resource_id of this OrderAccessResourcePacksRequest.  # noqa: E501


        :return: The resource_id of this OrderAccessResourcePacksRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this OrderAccessResourcePacksRequest.


        :param resource_id: The resource_id of this OrderAccessResourcePacksRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")  # noqa: E501

        self._resource_id = resource_id

    @property
    def tags(self):
        """Gets the tags of this OrderAccessResourcePacksRequest.  # noqa: E501


        :return: The tags of this OrderAccessResourcePacksRequest.  # noqa: E501
        :rtype: list[TagForOrderAccessResourcePacksInput]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this OrderAccessResourcePacksRequest.


        :param tags: The tags of this OrderAccessResourcePacksRequest.  # noqa: E501
        :type: list[TagForOrderAccessResourcePacksInput]
        """

        self._tags = tags

    @property
    def times(self):
        """Gets the times of this OrderAccessResourcePacksRequest.  # noqa: E501


        :return: The times of this OrderAccessResourcePacksRequest.  # noqa: E501
        :rtype: int
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this OrderAccessResourcePacksRequest.


        :param times: The times of this OrderAccessResourcePacksRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and times is None:
            raise ValueError("Invalid value for `times`, must not be `None`")  # noqa: E501

        self._times = times

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderAccessResourcePacksRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderAccessResourcePacksRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrderAccessResourcePacksRequest):
            return True

        return self.to_dict() != other.to_dict()
