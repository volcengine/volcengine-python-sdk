# coding: utf-8

"""
    speech_saas_prod20250521

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ListMegaTTSTrainStatusRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expire_time_end': 'int',
        'expire_time_start': 'int',
        'order_time_end': 'int',
        'order_time_start': 'int',
        'project_name': 'str',
        'speaker_ids': 'list[str]',
        'state': 'str'
    }

    attribute_map = {
        'expire_time_end': 'ExpireTimeEnd',
        'expire_time_start': 'ExpireTimeStart',
        'order_time_end': 'OrderTimeEnd',
        'order_time_start': 'OrderTimeStart',
        'project_name': 'ProjectName',
        'speaker_ids': 'SpeakerIDs',
        'state': 'State'
    }

    def __init__(self, expire_time_end=None, expire_time_start=None, order_time_end=None, order_time_start=None, project_name=None, speaker_ids=None, state=None, _configuration=None):  # noqa: E501
        """ListMegaTTSTrainStatusRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._expire_time_end = None
        self._expire_time_start = None
        self._order_time_end = None
        self._order_time_start = None
        self._project_name = None
        self._speaker_ids = None
        self._state = None
        self.discriminator = None

        if expire_time_end is not None:
            self.expire_time_end = expire_time_end
        if expire_time_start is not None:
            self.expire_time_start = expire_time_start
        if order_time_end is not None:
            self.order_time_end = order_time_end
        if order_time_start is not None:
            self.order_time_start = order_time_start
        self.project_name = project_name
        if speaker_ids is not None:
            self.speaker_ids = speaker_ids
        self.state = state

    @property
    def expire_time_end(self):
        """Gets the expire_time_end of this ListMegaTTSTrainStatusRequest.  # noqa: E501


        :return: The expire_time_end of this ListMegaTTSTrainStatusRequest.  # noqa: E501
        :rtype: int
        """
        return self._expire_time_end

    @expire_time_end.setter
    def expire_time_end(self, expire_time_end):
        """Sets the expire_time_end of this ListMegaTTSTrainStatusRequest.


        :param expire_time_end: The expire_time_end of this ListMegaTTSTrainStatusRequest.  # noqa: E501
        :type: int
        """

        self._expire_time_end = expire_time_end

    @property
    def expire_time_start(self):
        """Gets the expire_time_start of this ListMegaTTSTrainStatusRequest.  # noqa: E501


        :return: The expire_time_start of this ListMegaTTSTrainStatusRequest.  # noqa: E501
        :rtype: int
        """
        return self._expire_time_start

    @expire_time_start.setter
    def expire_time_start(self, expire_time_start):
        """Sets the expire_time_start of this ListMegaTTSTrainStatusRequest.


        :param expire_time_start: The expire_time_start of this ListMegaTTSTrainStatusRequest.  # noqa: E501
        :type: int
        """

        self._expire_time_start = expire_time_start

    @property
    def order_time_end(self):
        """Gets the order_time_end of this ListMegaTTSTrainStatusRequest.  # noqa: E501


        :return: The order_time_end of this ListMegaTTSTrainStatusRequest.  # noqa: E501
        :rtype: int
        """
        return self._order_time_end

    @order_time_end.setter
    def order_time_end(self, order_time_end):
        """Sets the order_time_end of this ListMegaTTSTrainStatusRequest.


        :param order_time_end: The order_time_end of this ListMegaTTSTrainStatusRequest.  # noqa: E501
        :type: int
        """

        self._order_time_end = order_time_end

    @property
    def order_time_start(self):
        """Gets the order_time_start of this ListMegaTTSTrainStatusRequest.  # noqa: E501


        :return: The order_time_start of this ListMegaTTSTrainStatusRequest.  # noqa: E501
        :rtype: int
        """
        return self._order_time_start

    @order_time_start.setter
    def order_time_start(self, order_time_start):
        """Sets the order_time_start of this ListMegaTTSTrainStatusRequest.


        :param order_time_start: The order_time_start of this ListMegaTTSTrainStatusRequest.  # noqa: E501
        :type: int
        """

        self._order_time_start = order_time_start

    @property
    def project_name(self):
        """Gets the project_name of this ListMegaTTSTrainStatusRequest.  # noqa: E501


        :return: The project_name of this ListMegaTTSTrainStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this ListMegaTTSTrainStatusRequest.


        :param project_name: The project_name of this ListMegaTTSTrainStatusRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and project_name is None:
            raise ValueError("Invalid value for `project_name`, must not be `None`")  # noqa: E501

        self._project_name = project_name

    @property
    def speaker_ids(self):
        """Gets the speaker_ids of this ListMegaTTSTrainStatusRequest.  # noqa: E501


        :return: The speaker_ids of this ListMegaTTSTrainStatusRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._speaker_ids

    @speaker_ids.setter
    def speaker_ids(self, speaker_ids):
        """Sets the speaker_ids of this ListMegaTTSTrainStatusRequest.


        :param speaker_ids: The speaker_ids of this ListMegaTTSTrainStatusRequest.  # noqa: E501
        :type: list[str]
        """

        self._speaker_ids = speaker_ids

    @property
    def state(self):
        """Gets the state of this ListMegaTTSTrainStatusRequest.  # noqa: E501


        :return: The state of this ListMegaTTSTrainStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ListMegaTTSTrainStatusRequest.


        :param state: The state of this ListMegaTTSTrainStatusRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListMegaTTSTrainStatusRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListMegaTTSTrainStatusRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListMegaTTSTrainStatusRequest):
            return True

        return self.to_dict() != other.to_dict()
