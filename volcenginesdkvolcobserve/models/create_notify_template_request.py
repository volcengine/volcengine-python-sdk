# coding: utf-8

"""
    volc_observe

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateNotifyTemplateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel': 'str',
        'content': 'str',
        'description': 'str',
        'name': 'str',
        'title': 'str',
        'type': 'str'
    }

    attribute_map = {
        'channel': 'Channel',
        'content': 'Content',
        'description': 'Description',
        'name': 'Name',
        'title': 'Title',
        'type': 'Type'
    }

    def __init__(self, channel=None, content=None, description=None, name=None, title=None, type=None, _configuration=None):  # noqa: E501
        """CreateNotifyTemplateRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._channel = None
        self._content = None
        self._description = None
        self._name = None
        self._title = None
        self._type = None
        self.discriminator = None

        self.channel = channel
        self.content = content
        if description is not None:
            self.description = description
        self.name = name
        if title is not None:
            self.title = title
        self.type = type

    @property
    def channel(self):
        """Gets the channel of this CreateNotifyTemplateRequest.  # noqa: E501


        :return: The channel of this CreateNotifyTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this CreateNotifyTemplateRequest.


        :param channel: The channel of this CreateNotifyTemplateRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501
        allowed_values = ["email", "sms", "phone", "lark", "dingtalk", "wecom", "slack", "api"]  # noqa: E501
        if (self._configuration.client_side_validation and
                channel not in allowed_values):
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"  # noqa: E501
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def content(self):
        """Gets the content of this CreateNotifyTemplateRequest.  # noqa: E501


        :return: The content of this CreateNotifyTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CreateNotifyTemplateRequest.


        :param content: The content of this CreateNotifyTemplateRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def description(self):
        """Gets the description of this CreateNotifyTemplateRequest.  # noqa: E501


        :return: The description of this CreateNotifyTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateNotifyTemplateRequest.


        :param description: The description of this CreateNotifyTemplateRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateNotifyTemplateRequest.  # noqa: E501


        :return: The name of this CreateNotifyTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateNotifyTemplateRequest.


        :param name: The name of this CreateNotifyTemplateRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def title(self):
        """Gets the title of this CreateNotifyTemplateRequest.  # noqa: E501


        :return: The title of this CreateNotifyTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CreateNotifyTemplateRequest.


        :param title: The title of this CreateNotifyTemplateRequest.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this CreateNotifyTemplateRequest.  # noqa: E501


        :return: The type of this CreateNotifyTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateNotifyTemplateRequest.


        :param type: The type of this CreateNotifyTemplateRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["metric", "event"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateNotifyTemplateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateNotifyTemplateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateNotifyTemplateRequest):
            return True

        return self.to_dict() != other.to_dict()
