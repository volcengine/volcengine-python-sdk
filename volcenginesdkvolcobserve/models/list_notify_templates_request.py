# coding: utf-8

"""
    volc_observe

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ListNotifyTemplatesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channels': 'list[str]',
        'ids': 'list[str]',
        'name': 'str',
        'page_number': 'int',
        'page_size': 'int',
        'types': 'list[str]'
    }

    attribute_map = {
        'channels': 'Channels',
        'ids': 'Ids',
        'name': 'Name',
        'page_number': 'PageNumber',
        'page_size': 'PageSize',
        'types': 'Types'
    }

    def __init__(self, channels=None, ids=None, name=None, page_number=None, page_size=None, types=None, _configuration=None):  # noqa: E501
        """ListNotifyTemplatesRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._channels = None
        self._ids = None
        self._name = None
        self._page_number = None
        self._page_size = None
        self._types = None
        self.discriminator = None

        if channels is not None:
            self.channels = channels
        if ids is not None:
            self.ids = ids
        if name is not None:
            self.name = name
        if page_number is not None:
            self.page_number = page_number
        if page_size is not None:
            self.page_size = page_size
        if types is not None:
            self.types = types

    @property
    def channels(self):
        """Gets the channels of this ListNotifyTemplatesRequest.  # noqa: E501


        :return: The channels of this ListNotifyTemplatesRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this ListNotifyTemplatesRequest.


        :param channels: The channels of this ListNotifyTemplatesRequest.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["email", "sms", "phone", "lark", "dingtalk", "wecom", "slack", "api"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(channels).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `channels` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(channels) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._channels = channels

    @property
    def ids(self):
        """Gets the ids of this ListNotifyTemplatesRequest.  # noqa: E501


        :return: The ids of this ListNotifyTemplatesRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this ListNotifyTemplatesRequest.


        :param ids: The ids of this ListNotifyTemplatesRequest.  # noqa: E501
        :type: list[str]
        """

        self._ids = ids

    @property
    def name(self):
        """Gets the name of this ListNotifyTemplatesRequest.  # noqa: E501


        :return: The name of this ListNotifyTemplatesRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ListNotifyTemplatesRequest.


        :param name: The name of this ListNotifyTemplatesRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def page_number(self):
        """Gets the page_number of this ListNotifyTemplatesRequest.  # noqa: E501


        :return: The page_number of this ListNotifyTemplatesRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this ListNotifyTemplatesRequest.


        :param page_number: The page_number of this ListNotifyTemplatesRequest.  # noqa: E501
        :type: int
        """

        self._page_number = page_number

    @property
    def page_size(self):
        """Gets the page_size of this ListNotifyTemplatesRequest.  # noqa: E501


        :return: The page_size of this ListNotifyTemplatesRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ListNotifyTemplatesRequest.


        :param page_size: The page_size of this ListNotifyTemplatesRequest.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def types(self):
        """Gets the types of this ListNotifyTemplatesRequest.  # noqa: E501


        :return: The types of this ListNotifyTemplatesRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this ListNotifyTemplatesRequest.


        :param types: The types of this ListNotifyTemplatesRequest.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["metric", "event"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(types).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._types = types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListNotifyTemplatesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListNotifyTemplatesRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListNotifyTemplatesRequest):
            return True

        return self.to_dict() != other.to_dict()
