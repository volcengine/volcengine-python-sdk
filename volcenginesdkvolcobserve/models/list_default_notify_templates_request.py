# coding: utf-8

"""
    volc_observe

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ListDefaultNotifyTemplatesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channels': 'list[str]',
        'language': 'str',
        'type': 'str'
    }

    attribute_map = {
        'channels': 'Channels',
        'language': 'Language',
        'type': 'Type'
    }

    def __init__(self, channels=None, language=None, type=None, _configuration=None):  # noqa: E501
        """ListDefaultNotifyTemplatesRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._channels = None
        self._language = None
        self._type = None
        self.discriminator = None

        if channels is not None:
            self.channels = channels
        if language is not None:
            self.language = language
        self.type = type

    @property
    def channels(self):
        """Gets the channels of this ListDefaultNotifyTemplatesRequest.  # noqa: E501


        :return: The channels of this ListDefaultNotifyTemplatesRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this ListDefaultNotifyTemplatesRequest.


        :param channels: The channels of this ListDefaultNotifyTemplatesRequest.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["email", "sms", "phone", "lark", "dingtalk", "wecom", "slack", "api"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(channels).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `channels` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(channels) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._channels = channels

    @property
    def language(self):
        """Gets the language of this ListDefaultNotifyTemplatesRequest.  # noqa: E501


        :return: The language of this ListDefaultNotifyTemplatesRequest.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ListDefaultNotifyTemplatesRequest.


        :param language: The language of this ListDefaultNotifyTemplatesRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["zh", "en"]  # noqa: E501
        if (self._configuration.client_side_validation and
                language not in allowed_values):
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"  # noqa: E501
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def type(self):
        """Gets the type of this ListDefaultNotifyTemplatesRequest.  # noqa: E501


        :return: The type of this ListDefaultNotifyTemplatesRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ListDefaultNotifyTemplatesRequest.


        :param type: The type of this ListDefaultNotifyTemplatesRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["metric", "event"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListDefaultNotifyTemplatesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListDefaultNotifyTemplatesRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListDefaultNotifyTemplatesRequest):
            return True

        return self.to_dict() != other.to_dict()
