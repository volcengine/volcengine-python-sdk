# coding: utf-8

"""
    alb

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class RulesRuleActionForCreateRulesInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fixed_response_config': 'FixedResponseConfigForCreateRulesInput',
        'forward_group_config': 'ConvertForwardGroupConfigForCreateRulesInput',
        'redirect_config': 'ConvertRedirectConfigForCreateRulesInput',
        'rewrite_config': 'ConvertRewriteConfigForCreateRulesInput',
        'traffic_limit_config': 'TrafficLimitConfigForCreateRulesInput',
        'type': 'str'
    }

    attribute_map = {
        'fixed_response_config': 'FixedResponseConfig',
        'forward_group_config': 'ForwardGroupConfig',
        'redirect_config': 'RedirectConfig',
        'rewrite_config': 'RewriteConfig',
        'traffic_limit_config': 'TrafficLimitConfig',
        'type': 'Type'
    }

    def __init__(self, fixed_response_config=None, forward_group_config=None, redirect_config=None, rewrite_config=None, traffic_limit_config=None, type=None, _configuration=None):  # noqa: E501
        """RulesRuleActionForCreateRulesInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._fixed_response_config = None
        self._forward_group_config = None
        self._redirect_config = None
        self._rewrite_config = None
        self._traffic_limit_config = None
        self._type = None
        self.discriminator = None

        if fixed_response_config is not None:
            self.fixed_response_config = fixed_response_config
        if forward_group_config is not None:
            self.forward_group_config = forward_group_config
        if redirect_config is not None:
            self.redirect_config = redirect_config
        if rewrite_config is not None:
            self.rewrite_config = rewrite_config
        if traffic_limit_config is not None:
            self.traffic_limit_config = traffic_limit_config
        if type is not None:
            self.type = type

    @property
    def fixed_response_config(self):
        """Gets the fixed_response_config of this RulesRuleActionForCreateRulesInput.  # noqa: E501


        :return: The fixed_response_config of this RulesRuleActionForCreateRulesInput.  # noqa: E501
        :rtype: FixedResponseConfigForCreateRulesInput
        """
        return self._fixed_response_config

    @fixed_response_config.setter
    def fixed_response_config(self, fixed_response_config):
        """Sets the fixed_response_config of this RulesRuleActionForCreateRulesInput.


        :param fixed_response_config: The fixed_response_config of this RulesRuleActionForCreateRulesInput.  # noqa: E501
        :type: FixedResponseConfigForCreateRulesInput
        """

        self._fixed_response_config = fixed_response_config

    @property
    def forward_group_config(self):
        """Gets the forward_group_config of this RulesRuleActionForCreateRulesInput.  # noqa: E501


        :return: The forward_group_config of this RulesRuleActionForCreateRulesInput.  # noqa: E501
        :rtype: ConvertForwardGroupConfigForCreateRulesInput
        """
        return self._forward_group_config

    @forward_group_config.setter
    def forward_group_config(self, forward_group_config):
        """Sets the forward_group_config of this RulesRuleActionForCreateRulesInput.


        :param forward_group_config: The forward_group_config of this RulesRuleActionForCreateRulesInput.  # noqa: E501
        :type: ConvertForwardGroupConfigForCreateRulesInput
        """

        self._forward_group_config = forward_group_config

    @property
    def redirect_config(self):
        """Gets the redirect_config of this RulesRuleActionForCreateRulesInput.  # noqa: E501


        :return: The redirect_config of this RulesRuleActionForCreateRulesInput.  # noqa: E501
        :rtype: ConvertRedirectConfigForCreateRulesInput
        """
        return self._redirect_config

    @redirect_config.setter
    def redirect_config(self, redirect_config):
        """Sets the redirect_config of this RulesRuleActionForCreateRulesInput.


        :param redirect_config: The redirect_config of this RulesRuleActionForCreateRulesInput.  # noqa: E501
        :type: ConvertRedirectConfigForCreateRulesInput
        """

        self._redirect_config = redirect_config

    @property
    def rewrite_config(self):
        """Gets the rewrite_config of this RulesRuleActionForCreateRulesInput.  # noqa: E501


        :return: The rewrite_config of this RulesRuleActionForCreateRulesInput.  # noqa: E501
        :rtype: ConvertRewriteConfigForCreateRulesInput
        """
        return self._rewrite_config

    @rewrite_config.setter
    def rewrite_config(self, rewrite_config):
        """Sets the rewrite_config of this RulesRuleActionForCreateRulesInput.


        :param rewrite_config: The rewrite_config of this RulesRuleActionForCreateRulesInput.  # noqa: E501
        :type: ConvertRewriteConfigForCreateRulesInput
        """

        self._rewrite_config = rewrite_config

    @property
    def traffic_limit_config(self):
        """Gets the traffic_limit_config of this RulesRuleActionForCreateRulesInput.  # noqa: E501


        :return: The traffic_limit_config of this RulesRuleActionForCreateRulesInput.  # noqa: E501
        :rtype: TrafficLimitConfigForCreateRulesInput
        """
        return self._traffic_limit_config

    @traffic_limit_config.setter
    def traffic_limit_config(self, traffic_limit_config):
        """Sets the traffic_limit_config of this RulesRuleActionForCreateRulesInput.


        :param traffic_limit_config: The traffic_limit_config of this RulesRuleActionForCreateRulesInput.  # noqa: E501
        :type: TrafficLimitConfigForCreateRulesInput
        """

        self._traffic_limit_config = traffic_limit_config

    @property
    def type(self):
        """Gets the type of this RulesRuleActionForCreateRulesInput.  # noqa: E501


        :return: The type of this RulesRuleActionForCreateRulesInput.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RulesRuleActionForCreateRulesInput.


        :param type: The type of this RulesRuleActionForCreateRulesInput.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RulesRuleActionForCreateRulesInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RulesRuleActionForCreateRulesInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RulesRuleActionForCreateRulesInput):
            return True

        return self.to_dict() != other.to_dict()
