# coding: utf-8

"""
    alb

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class RuleConditionForDescribeRulesOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'header_config': 'HeaderConfigForDescribeRulesOutput',
        'host_config': 'HostConfigForDescribeRulesOutput',
        'method_config': 'MethodConfigForDescribeRulesOutput',
        'path_config': 'PathConfigForDescribeRulesOutput',
        'query_string_config': 'QueryStringConfigForDescribeRulesOutput',
        'type': 'str'
    }

    attribute_map = {
        'header_config': 'HeaderConfig',
        'host_config': 'HostConfig',
        'method_config': 'MethodConfig',
        'path_config': 'PathConfig',
        'query_string_config': 'QueryStringConfig',
        'type': 'Type'
    }

    def __init__(self, header_config=None, host_config=None, method_config=None, path_config=None, query_string_config=None, type=None, _configuration=None):  # noqa: E501
        """RuleConditionForDescribeRulesOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._header_config = None
        self._host_config = None
        self._method_config = None
        self._path_config = None
        self._query_string_config = None
        self._type = None
        self.discriminator = None

        if header_config is not None:
            self.header_config = header_config
        if host_config is not None:
            self.host_config = host_config
        if method_config is not None:
            self.method_config = method_config
        if path_config is not None:
            self.path_config = path_config
        if query_string_config is not None:
            self.query_string_config = query_string_config
        if type is not None:
            self.type = type

    @property
    def header_config(self):
        """Gets the header_config of this RuleConditionForDescribeRulesOutput.  # noqa: E501


        :return: The header_config of this RuleConditionForDescribeRulesOutput.  # noqa: E501
        :rtype: HeaderConfigForDescribeRulesOutput
        """
        return self._header_config

    @header_config.setter
    def header_config(self, header_config):
        """Sets the header_config of this RuleConditionForDescribeRulesOutput.


        :param header_config: The header_config of this RuleConditionForDescribeRulesOutput.  # noqa: E501
        :type: HeaderConfigForDescribeRulesOutput
        """

        self._header_config = header_config

    @property
    def host_config(self):
        """Gets the host_config of this RuleConditionForDescribeRulesOutput.  # noqa: E501


        :return: The host_config of this RuleConditionForDescribeRulesOutput.  # noqa: E501
        :rtype: HostConfigForDescribeRulesOutput
        """
        return self._host_config

    @host_config.setter
    def host_config(self, host_config):
        """Sets the host_config of this RuleConditionForDescribeRulesOutput.


        :param host_config: The host_config of this RuleConditionForDescribeRulesOutput.  # noqa: E501
        :type: HostConfigForDescribeRulesOutput
        """

        self._host_config = host_config

    @property
    def method_config(self):
        """Gets the method_config of this RuleConditionForDescribeRulesOutput.  # noqa: E501


        :return: The method_config of this RuleConditionForDescribeRulesOutput.  # noqa: E501
        :rtype: MethodConfigForDescribeRulesOutput
        """
        return self._method_config

    @method_config.setter
    def method_config(self, method_config):
        """Sets the method_config of this RuleConditionForDescribeRulesOutput.


        :param method_config: The method_config of this RuleConditionForDescribeRulesOutput.  # noqa: E501
        :type: MethodConfigForDescribeRulesOutput
        """

        self._method_config = method_config

    @property
    def path_config(self):
        """Gets the path_config of this RuleConditionForDescribeRulesOutput.  # noqa: E501


        :return: The path_config of this RuleConditionForDescribeRulesOutput.  # noqa: E501
        :rtype: PathConfigForDescribeRulesOutput
        """
        return self._path_config

    @path_config.setter
    def path_config(self, path_config):
        """Sets the path_config of this RuleConditionForDescribeRulesOutput.


        :param path_config: The path_config of this RuleConditionForDescribeRulesOutput.  # noqa: E501
        :type: PathConfigForDescribeRulesOutput
        """

        self._path_config = path_config

    @property
    def query_string_config(self):
        """Gets the query_string_config of this RuleConditionForDescribeRulesOutput.  # noqa: E501


        :return: The query_string_config of this RuleConditionForDescribeRulesOutput.  # noqa: E501
        :rtype: QueryStringConfigForDescribeRulesOutput
        """
        return self._query_string_config

    @query_string_config.setter
    def query_string_config(self, query_string_config):
        """Sets the query_string_config of this RuleConditionForDescribeRulesOutput.


        :param query_string_config: The query_string_config of this RuleConditionForDescribeRulesOutput.  # noqa: E501
        :type: QueryStringConfigForDescribeRulesOutput
        """

        self._query_string_config = query_string_config

    @property
    def type(self):
        """Gets the type of this RuleConditionForDescribeRulesOutput.  # noqa: E501


        :return: The type of this RuleConditionForDescribeRulesOutput.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RuleConditionForDescribeRulesOutput.


        :param type: The type of this RuleConditionForDescribeRulesOutput.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuleConditionForDescribeRulesOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleConditionForDescribeRulesOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RuleConditionForDescribeRulesOutput):
            return True

        return self.to_dict() != other.to_dict()
