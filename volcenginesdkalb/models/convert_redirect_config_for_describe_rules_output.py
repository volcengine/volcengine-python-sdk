# coding: utf-8

"""
    alb

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ConvertRedirectConfigForDescribeRulesOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host': 'str',
        'http_code': 'str',
        'path': 'str',
        'port': 'str',
        'protocol': 'str'
    }

    attribute_map = {
        'host': 'Host',
        'http_code': 'HttpCode',
        'path': 'Path',
        'port': 'Port',
        'protocol': 'Protocol'
    }

    def __init__(self, host=None, http_code=None, path=None, port=None, protocol=None, _configuration=None):  # noqa: E501
        """ConvertRedirectConfigForDescribeRulesOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._host = None
        self._http_code = None
        self._path = None
        self._port = None
        self._protocol = None
        self.discriminator = None

        if host is not None:
            self.host = host
        if http_code is not None:
            self.http_code = http_code
        if path is not None:
            self.path = path
        if port is not None:
            self.port = port
        if protocol is not None:
            self.protocol = protocol

    @property
    def host(self):
        """Gets the host of this ConvertRedirectConfigForDescribeRulesOutput.  # noqa: E501


        :return: The host of this ConvertRedirectConfigForDescribeRulesOutput.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ConvertRedirectConfigForDescribeRulesOutput.


        :param host: The host of this ConvertRedirectConfigForDescribeRulesOutput.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def http_code(self):
        """Gets the http_code of this ConvertRedirectConfigForDescribeRulesOutput.  # noqa: E501


        :return: The http_code of this ConvertRedirectConfigForDescribeRulesOutput.  # noqa: E501
        :rtype: str
        """
        return self._http_code

    @http_code.setter
    def http_code(self, http_code):
        """Sets the http_code of this ConvertRedirectConfigForDescribeRulesOutput.


        :param http_code: The http_code of this ConvertRedirectConfigForDescribeRulesOutput.  # noqa: E501
        :type: str
        """

        self._http_code = http_code

    @property
    def path(self):
        """Gets the path of this ConvertRedirectConfigForDescribeRulesOutput.  # noqa: E501


        :return: The path of this ConvertRedirectConfigForDescribeRulesOutput.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ConvertRedirectConfigForDescribeRulesOutput.


        :param path: The path of this ConvertRedirectConfigForDescribeRulesOutput.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def port(self):
        """Gets the port of this ConvertRedirectConfigForDescribeRulesOutput.  # noqa: E501


        :return: The port of this ConvertRedirectConfigForDescribeRulesOutput.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConvertRedirectConfigForDescribeRulesOutput.


        :param port: The port of this ConvertRedirectConfigForDescribeRulesOutput.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this ConvertRedirectConfigForDescribeRulesOutput.  # noqa: E501


        :return: The protocol of this ConvertRedirectConfigForDescribeRulesOutput.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ConvertRedirectConfigForDescribeRulesOutput.


        :param protocol: The protocol of this ConvertRedirectConfigForDescribeRulesOutput.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConvertRedirectConfigForDescribeRulesOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConvertRedirectConfigForDescribeRulesOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConvertRedirectConfigForDescribeRulesOutput):
            return True

        return self.to_dict() != other.to_dict()
