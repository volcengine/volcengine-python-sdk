# coding: utf-8

"""
    livesaas20230801

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ViewerLevelMetaForCreateViewerLevelConfigOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color': 'str',
        'description': 'str',
        'level_icon': 'str',
        'level_id': 'int',
        'level_name': 'str',
        'level_order': 'int'
    }

    attribute_map = {
        'color': 'Color',
        'description': 'Description',
        'level_icon': 'LevelIcon',
        'level_id': 'LevelId',
        'level_name': 'LevelName',
        'level_order': 'LevelOrder'
    }

    def __init__(self, color=None, description=None, level_icon=None, level_id=None, level_name=None, level_order=None, _configuration=None):  # noqa: E501
        """ViewerLevelMetaForCreateViewerLevelConfigOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._color = None
        self._description = None
        self._level_icon = None
        self._level_id = None
        self._level_name = None
        self._level_order = None
        self.discriminator = None

        if color is not None:
            self.color = color
        if description is not None:
            self.description = description
        if level_icon is not None:
            self.level_icon = level_icon
        if level_id is not None:
            self.level_id = level_id
        if level_name is not None:
            self.level_name = level_name
        if level_order is not None:
            self.level_order = level_order

    @property
    def color(self):
        """Gets the color of this ViewerLevelMetaForCreateViewerLevelConfigOutput.  # noqa: E501


        :return: The color of this ViewerLevelMetaForCreateViewerLevelConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ViewerLevelMetaForCreateViewerLevelConfigOutput.


        :param color: The color of this ViewerLevelMetaForCreateViewerLevelConfigOutput.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def description(self):
        """Gets the description of this ViewerLevelMetaForCreateViewerLevelConfigOutput.  # noqa: E501


        :return: The description of this ViewerLevelMetaForCreateViewerLevelConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ViewerLevelMetaForCreateViewerLevelConfigOutput.


        :param description: The description of this ViewerLevelMetaForCreateViewerLevelConfigOutput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def level_icon(self):
        """Gets the level_icon of this ViewerLevelMetaForCreateViewerLevelConfigOutput.  # noqa: E501


        :return: The level_icon of this ViewerLevelMetaForCreateViewerLevelConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._level_icon

    @level_icon.setter
    def level_icon(self, level_icon):
        """Sets the level_icon of this ViewerLevelMetaForCreateViewerLevelConfigOutput.


        :param level_icon: The level_icon of this ViewerLevelMetaForCreateViewerLevelConfigOutput.  # noqa: E501
        :type: str
        """

        self._level_icon = level_icon

    @property
    def level_id(self):
        """Gets the level_id of this ViewerLevelMetaForCreateViewerLevelConfigOutput.  # noqa: E501


        :return: The level_id of this ViewerLevelMetaForCreateViewerLevelConfigOutput.  # noqa: E501
        :rtype: int
        """
        return self._level_id

    @level_id.setter
    def level_id(self, level_id):
        """Sets the level_id of this ViewerLevelMetaForCreateViewerLevelConfigOutput.


        :param level_id: The level_id of this ViewerLevelMetaForCreateViewerLevelConfigOutput.  # noqa: E501
        :type: int
        """

        self._level_id = level_id

    @property
    def level_name(self):
        """Gets the level_name of this ViewerLevelMetaForCreateViewerLevelConfigOutput.  # noqa: E501


        :return: The level_name of this ViewerLevelMetaForCreateViewerLevelConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._level_name

    @level_name.setter
    def level_name(self, level_name):
        """Sets the level_name of this ViewerLevelMetaForCreateViewerLevelConfigOutput.


        :param level_name: The level_name of this ViewerLevelMetaForCreateViewerLevelConfigOutput.  # noqa: E501
        :type: str
        """

        self._level_name = level_name

    @property
    def level_order(self):
        """Gets the level_order of this ViewerLevelMetaForCreateViewerLevelConfigOutput.  # noqa: E501


        :return: The level_order of this ViewerLevelMetaForCreateViewerLevelConfigOutput.  # noqa: E501
        :rtype: int
        """
        return self._level_order

    @level_order.setter
    def level_order(self, level_order):
        """Sets the level_order of this ViewerLevelMetaForCreateViewerLevelConfigOutput.


        :param level_order: The level_order of this ViewerLevelMetaForCreateViewerLevelConfigOutput.  # noqa: E501
        :type: int
        """

        self._level_order = level_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ViewerLevelMetaForCreateViewerLevelConfigOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ViewerLevelMetaForCreateViewerLevelConfigOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ViewerLevelMetaForCreateViewerLevelConfigOutput):
            return True

        return self.to_dict() != other.to_dict()
