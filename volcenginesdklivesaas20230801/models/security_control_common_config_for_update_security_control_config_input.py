# coding: utf-8

"""
    livesaas20230801

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class SecurityControlCommonConfigForUpdateSecurityControlConfigInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ban_tip': 'str',
        'is_anonymous_comment_enable': 'int',
        'is_modify_nickname_enable': 'int',
        'is_play_page_ticker_enable': 'int',
        'is_play_page_watermark_enable': 'int',
        'is_single_sign_on_enable': 'int',
        'is_tip_off_comment_enable': 'int',
        'kick_tip': 'str',
        'ticker_config': 'TickerConfigForUpdateSecurityControlConfigInput',
        'watermark_config': 'WatermarkConfigForUpdateSecurityControlConfigInput'
    }

    attribute_map = {
        'ban_tip': 'BanTip',
        'is_anonymous_comment_enable': 'IsAnonymousCommentEnable',
        'is_modify_nickname_enable': 'IsModifyNicknameEnable',
        'is_play_page_ticker_enable': 'IsPlayPageTickerEnable',
        'is_play_page_watermark_enable': 'IsPlayPageWatermarkEnable',
        'is_single_sign_on_enable': 'IsSingleSignOnEnable',
        'is_tip_off_comment_enable': 'IsTipOffCommentEnable',
        'kick_tip': 'KickTip',
        'ticker_config': 'TickerConfig',
        'watermark_config': 'WatermarkConfig'
    }

    def __init__(self, ban_tip=None, is_anonymous_comment_enable=None, is_modify_nickname_enable=None, is_play_page_ticker_enable=None, is_play_page_watermark_enable=None, is_single_sign_on_enable=None, is_tip_off_comment_enable=None, kick_tip=None, ticker_config=None, watermark_config=None, _configuration=None):  # noqa: E501
        """SecurityControlCommonConfigForUpdateSecurityControlConfigInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ban_tip = None
        self._is_anonymous_comment_enable = None
        self._is_modify_nickname_enable = None
        self._is_play_page_ticker_enable = None
        self._is_play_page_watermark_enable = None
        self._is_single_sign_on_enable = None
        self._is_tip_off_comment_enable = None
        self._kick_tip = None
        self._ticker_config = None
        self._watermark_config = None
        self.discriminator = None

        if ban_tip is not None:
            self.ban_tip = ban_tip
        if is_anonymous_comment_enable is not None:
            self.is_anonymous_comment_enable = is_anonymous_comment_enable
        if is_modify_nickname_enable is not None:
            self.is_modify_nickname_enable = is_modify_nickname_enable
        if is_play_page_ticker_enable is not None:
            self.is_play_page_ticker_enable = is_play_page_ticker_enable
        if is_play_page_watermark_enable is not None:
            self.is_play_page_watermark_enable = is_play_page_watermark_enable
        if is_single_sign_on_enable is not None:
            self.is_single_sign_on_enable = is_single_sign_on_enable
        if is_tip_off_comment_enable is not None:
            self.is_tip_off_comment_enable = is_tip_off_comment_enable
        if kick_tip is not None:
            self.kick_tip = kick_tip
        if ticker_config is not None:
            self.ticker_config = ticker_config
        if watermark_config is not None:
            self.watermark_config = watermark_config

    @property
    def ban_tip(self):
        """Gets the ban_tip of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501


        :return: The ban_tip of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501
        :rtype: str
        """
        return self._ban_tip

    @ban_tip.setter
    def ban_tip(self, ban_tip):
        """Sets the ban_tip of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.


        :param ban_tip: The ban_tip of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501
        :type: str
        """

        self._ban_tip = ban_tip

    @property
    def is_anonymous_comment_enable(self):
        """Gets the is_anonymous_comment_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501


        :return: The is_anonymous_comment_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501
        :rtype: int
        """
        return self._is_anonymous_comment_enable

    @is_anonymous_comment_enable.setter
    def is_anonymous_comment_enable(self, is_anonymous_comment_enable):
        """Sets the is_anonymous_comment_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.


        :param is_anonymous_comment_enable: The is_anonymous_comment_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501
        :type: int
        """

        self._is_anonymous_comment_enable = is_anonymous_comment_enable

    @property
    def is_modify_nickname_enable(self):
        """Gets the is_modify_nickname_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501


        :return: The is_modify_nickname_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501
        :rtype: int
        """
        return self._is_modify_nickname_enable

    @is_modify_nickname_enable.setter
    def is_modify_nickname_enable(self, is_modify_nickname_enable):
        """Sets the is_modify_nickname_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.


        :param is_modify_nickname_enable: The is_modify_nickname_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501
        :type: int
        """

        self._is_modify_nickname_enable = is_modify_nickname_enable

    @property
    def is_play_page_ticker_enable(self):
        """Gets the is_play_page_ticker_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501


        :return: The is_play_page_ticker_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501
        :rtype: int
        """
        return self._is_play_page_ticker_enable

    @is_play_page_ticker_enable.setter
    def is_play_page_ticker_enable(self, is_play_page_ticker_enable):
        """Sets the is_play_page_ticker_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.


        :param is_play_page_ticker_enable: The is_play_page_ticker_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501
        :type: int
        """

        self._is_play_page_ticker_enable = is_play_page_ticker_enable

    @property
    def is_play_page_watermark_enable(self):
        """Gets the is_play_page_watermark_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501


        :return: The is_play_page_watermark_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501
        :rtype: int
        """
        return self._is_play_page_watermark_enable

    @is_play_page_watermark_enable.setter
    def is_play_page_watermark_enable(self, is_play_page_watermark_enable):
        """Sets the is_play_page_watermark_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.


        :param is_play_page_watermark_enable: The is_play_page_watermark_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501
        :type: int
        """

        self._is_play_page_watermark_enable = is_play_page_watermark_enable

    @property
    def is_single_sign_on_enable(self):
        """Gets the is_single_sign_on_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501


        :return: The is_single_sign_on_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501
        :rtype: int
        """
        return self._is_single_sign_on_enable

    @is_single_sign_on_enable.setter
    def is_single_sign_on_enable(self, is_single_sign_on_enable):
        """Sets the is_single_sign_on_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.


        :param is_single_sign_on_enable: The is_single_sign_on_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501
        :type: int
        """

        self._is_single_sign_on_enable = is_single_sign_on_enable

    @property
    def is_tip_off_comment_enable(self):
        """Gets the is_tip_off_comment_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501


        :return: The is_tip_off_comment_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501
        :rtype: int
        """
        return self._is_tip_off_comment_enable

    @is_tip_off_comment_enable.setter
    def is_tip_off_comment_enable(self, is_tip_off_comment_enable):
        """Sets the is_tip_off_comment_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.


        :param is_tip_off_comment_enable: The is_tip_off_comment_enable of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501
        :type: int
        """

        self._is_tip_off_comment_enable = is_tip_off_comment_enable

    @property
    def kick_tip(self):
        """Gets the kick_tip of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501


        :return: The kick_tip of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501
        :rtype: str
        """
        return self._kick_tip

    @kick_tip.setter
    def kick_tip(self, kick_tip):
        """Sets the kick_tip of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.


        :param kick_tip: The kick_tip of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501
        :type: str
        """

        self._kick_tip = kick_tip

    @property
    def ticker_config(self):
        """Gets the ticker_config of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501


        :return: The ticker_config of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501
        :rtype: TickerConfigForUpdateSecurityControlConfigInput
        """
        return self._ticker_config

    @ticker_config.setter
    def ticker_config(self, ticker_config):
        """Sets the ticker_config of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.


        :param ticker_config: The ticker_config of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501
        :type: TickerConfigForUpdateSecurityControlConfigInput
        """

        self._ticker_config = ticker_config

    @property
    def watermark_config(self):
        """Gets the watermark_config of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501


        :return: The watermark_config of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501
        :rtype: WatermarkConfigForUpdateSecurityControlConfigInput
        """
        return self._watermark_config

    @watermark_config.setter
    def watermark_config(self, watermark_config):
        """Sets the watermark_config of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.


        :param watermark_config: The watermark_config of this SecurityControlCommonConfigForUpdateSecurityControlConfigInput.  # noqa: E501
        :type: WatermarkConfigForUpdateSecurityControlConfigInput
        """

        self._watermark_config = watermark_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecurityControlCommonConfigForUpdateSecurityControlConfigInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecurityControlCommonConfigForUpdateSecurityControlConfigInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SecurityControlCommonConfigForUpdateSecurityControlConfigInput):
            return True

        return self.to_dict() != other.to_dict()
