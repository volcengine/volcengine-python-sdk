# coding: utf-8

"""
    livesaas20230801

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class UpdateSingleActivityProductRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'int',
        'activity_id': 'int',
        'product': 'ProductForUpdateSingleActivityProductInput',
        'product_config_id': 'int',
        'reorder_index': 'bool'
    }

    attribute_map = {
        'action': 'Action',
        'activity_id': 'ActivityId',
        'product': 'Product',
        'product_config_id': 'ProductConfigId',
        'reorder_index': 'ReorderIndex'
    }

    def __init__(self, action=None, activity_id=None, product=None, product_config_id=None, reorder_index=None, _configuration=None):  # noqa: E501
        """UpdateSingleActivityProductRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._action = None
        self._activity_id = None
        self._product = None
        self._product_config_id = None
        self._reorder_index = None
        self.discriminator = None

        self.action = action
        self.activity_id = activity_id
        if product is not None:
            self.product = product
        self.product_config_id = product_config_id
        if reorder_index is not None:
            self.reorder_index = reorder_index

    @property
    def action(self):
        """Gets the action of this UpdateSingleActivityProductRequest.  # noqa: E501


        :return: The action of this UpdateSingleActivityProductRequest.  # noqa: E501
        :rtype: int
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this UpdateSingleActivityProductRequest.


        :param action: The action of this UpdateSingleActivityProductRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def activity_id(self):
        """Gets the activity_id of this UpdateSingleActivityProductRequest.  # noqa: E501


        :return: The activity_id of this UpdateSingleActivityProductRequest.  # noqa: E501
        :rtype: int
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this UpdateSingleActivityProductRequest.


        :param activity_id: The activity_id of this UpdateSingleActivityProductRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and activity_id is None:
            raise ValueError("Invalid value for `activity_id`, must not be `None`")  # noqa: E501

        self._activity_id = activity_id

    @property
    def product(self):
        """Gets the product of this UpdateSingleActivityProductRequest.  # noqa: E501


        :return: The product of this UpdateSingleActivityProductRequest.  # noqa: E501
        :rtype: ProductForUpdateSingleActivityProductInput
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this UpdateSingleActivityProductRequest.


        :param product: The product of this UpdateSingleActivityProductRequest.  # noqa: E501
        :type: ProductForUpdateSingleActivityProductInput
        """

        self._product = product

    @property
    def product_config_id(self):
        """Gets the product_config_id of this UpdateSingleActivityProductRequest.  # noqa: E501


        :return: The product_config_id of this UpdateSingleActivityProductRequest.  # noqa: E501
        :rtype: int
        """
        return self._product_config_id

    @product_config_id.setter
    def product_config_id(self, product_config_id):
        """Sets the product_config_id of this UpdateSingleActivityProductRequest.


        :param product_config_id: The product_config_id of this UpdateSingleActivityProductRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and product_config_id is None:
            raise ValueError("Invalid value for `product_config_id`, must not be `None`")  # noqa: E501

        self._product_config_id = product_config_id

    @property
    def reorder_index(self):
        """Gets the reorder_index of this UpdateSingleActivityProductRequest.  # noqa: E501


        :return: The reorder_index of this UpdateSingleActivityProductRequest.  # noqa: E501
        :rtype: bool
        """
        return self._reorder_index

    @reorder_index.setter
    def reorder_index(self, reorder_index):
        """Sets the reorder_index of this UpdateSingleActivityProductRequest.


        :param reorder_index: The reorder_index of this UpdateSingleActivityProductRequest.  # noqa: E501
        :type: bool
        """

        self._reorder_index = reorder_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateSingleActivityProductRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateSingleActivityProductRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateSingleActivityProductRequest):
            return True

        return self.to_dict() != other.to_dict()
