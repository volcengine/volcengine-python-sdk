# coding: utf-8

"""
    ecs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class SystemEventForDescribeSystemEventsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'created_at': 'str',
        'extra_info': 'dict(str, str)',
        'id': 'str',
        'impact_level': 'str',
        'operated_end_at': 'str',
        'operated_start_at': 'str',
        'resource_id': 'str',
        'status': 'str',
        'type': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'category': 'Category',
        'created_at': 'CreatedAt',
        'extra_info': 'ExtraInfo',
        'id': 'Id',
        'impact_level': 'ImpactLevel',
        'operated_end_at': 'OperatedEndAt',
        'operated_start_at': 'OperatedStartAt',
        'resource_id': 'ResourceId',
        'status': 'Status',
        'type': 'Type',
        'updated_at': 'UpdatedAt'
    }

    def __init__(self, category=None, created_at=None, extra_info=None, id=None, impact_level=None, operated_end_at=None, operated_start_at=None, resource_id=None, status=None, type=None, updated_at=None, _configuration=None):  # noqa: E501
        """SystemEventForDescribeSystemEventsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._category = None
        self._created_at = None
        self._extra_info = None
        self._id = None
        self._impact_level = None
        self._operated_end_at = None
        self._operated_start_at = None
        self._resource_id = None
        self._status = None
        self._type = None
        self._updated_at = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if created_at is not None:
            self.created_at = created_at
        if extra_info is not None:
            self.extra_info = extra_info
        if id is not None:
            self.id = id
        if impact_level is not None:
            self.impact_level = impact_level
        if operated_end_at is not None:
            self.operated_end_at = operated_end_at
        if operated_start_at is not None:
            self.operated_start_at = operated_start_at
        if resource_id is not None:
            self.resource_id = resource_id
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def category(self):
        """Gets the category of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501


        :return: The category of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SystemEventForDescribeSystemEventsOutput.


        :param category: The category of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def created_at(self):
        """Gets the created_at of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501


        :return: The created_at of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SystemEventForDescribeSystemEventsOutput.


        :param created_at: The created_at of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def extra_info(self):
        """Gets the extra_info of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501


        :return: The extra_info of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._extra_info

    @extra_info.setter
    def extra_info(self, extra_info):
        """Sets the extra_info of this SystemEventForDescribeSystemEventsOutput.


        :param extra_info: The extra_info of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :type: dict(str, str)
        """

        self._extra_info = extra_info

    @property
    def id(self):
        """Gets the id of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501


        :return: The id of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SystemEventForDescribeSystemEventsOutput.


        :param id: The id of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def impact_level(self):
        """Gets the impact_level of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501


        :return: The impact_level of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._impact_level

    @impact_level.setter
    def impact_level(self, impact_level):
        """Sets the impact_level of this SystemEventForDescribeSystemEventsOutput.


        :param impact_level: The impact_level of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :type: str
        """

        self._impact_level = impact_level

    @property
    def operated_end_at(self):
        """Gets the operated_end_at of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501


        :return: The operated_end_at of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._operated_end_at

    @operated_end_at.setter
    def operated_end_at(self, operated_end_at):
        """Sets the operated_end_at of this SystemEventForDescribeSystemEventsOutput.


        :param operated_end_at: The operated_end_at of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :type: str
        """

        self._operated_end_at = operated_end_at

    @property
    def operated_start_at(self):
        """Gets the operated_start_at of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501


        :return: The operated_start_at of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._operated_start_at

    @operated_start_at.setter
    def operated_start_at(self, operated_start_at):
        """Sets the operated_start_at of this SystemEventForDescribeSystemEventsOutput.


        :param operated_start_at: The operated_start_at of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :type: str
        """

        self._operated_start_at = operated_start_at

    @property
    def resource_id(self):
        """Gets the resource_id of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501


        :return: The resource_id of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this SystemEventForDescribeSystemEventsOutput.


        :param resource_id: The resource_id of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def status(self):
        """Gets the status of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501


        :return: The status of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SystemEventForDescribeSystemEventsOutput.


        :param status: The status of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501


        :return: The type of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SystemEventForDescribeSystemEventsOutput.


        :param type: The type of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501


        :return: The updated_at of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SystemEventForDescribeSystemEventsOutput.


        :param updated_at: The updated_at of this SystemEventForDescribeSystemEventsOutput.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemEventForDescribeSystemEventsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemEventForDescribeSystemEventsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SystemEventForDescribeSystemEventsOutput):
            return True

        return self.to_dict() != other.to_dict()
