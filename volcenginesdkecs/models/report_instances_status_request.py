# coding: utf-8

"""
    ecs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ReportInstancesStatusRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'device_names': 'list[str]',
        'disk_ids': 'list[str]',
        'end_time': 'str',
        'instance_ids': 'list[str]',
        'reason': 'str',
        'start_time': 'str'
    }

    attribute_map = {
        'description': 'Description',
        'device_names': 'DeviceNames',
        'disk_ids': 'DiskIds',
        'end_time': 'EndTime',
        'instance_ids': 'InstanceIds',
        'reason': 'Reason',
        'start_time': 'StartTime'
    }

    def __init__(self, description=None, device_names=None, disk_ids=None, end_time=None, instance_ids=None, reason=None, start_time=None, _configuration=None):  # noqa: E501
        """ReportInstancesStatusRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._device_names = None
        self._disk_ids = None
        self._end_time = None
        self._instance_ids = None
        self._reason = None
        self._start_time = None
        self.discriminator = None

        self.description = description
        if device_names is not None:
            self.device_names = device_names
        if disk_ids is not None:
            self.disk_ids = disk_ids
        if end_time is not None:
            self.end_time = end_time
        if instance_ids is not None:
            self.instance_ids = instance_ids
        if reason is not None:
            self.reason = reason
        if start_time is not None:
            self.start_time = start_time

    @property
    def description(self):
        """Gets the description of this ReportInstancesStatusRequest.  # noqa: E501


        :return: The description of this ReportInstancesStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReportInstancesStatusRequest.


        :param description: The description of this ReportInstancesStatusRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def device_names(self):
        """Gets the device_names of this ReportInstancesStatusRequest.  # noqa: E501


        :return: The device_names of this ReportInstancesStatusRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._device_names

    @device_names.setter
    def device_names(self, device_names):
        """Sets the device_names of this ReportInstancesStatusRequest.


        :param device_names: The device_names of this ReportInstancesStatusRequest.  # noqa: E501
        :type: list[str]
        """

        self._device_names = device_names

    @property
    def disk_ids(self):
        """Gets the disk_ids of this ReportInstancesStatusRequest.  # noqa: E501


        :return: The disk_ids of this ReportInstancesStatusRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._disk_ids

    @disk_ids.setter
    def disk_ids(self, disk_ids):
        """Sets the disk_ids of this ReportInstancesStatusRequest.


        :param disk_ids: The disk_ids of this ReportInstancesStatusRequest.  # noqa: E501
        :type: list[str]
        """

        self._disk_ids = disk_ids

    @property
    def end_time(self):
        """Gets the end_time of this ReportInstancesStatusRequest.  # noqa: E501


        :return: The end_time of this ReportInstancesStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ReportInstancesStatusRequest.


        :param end_time: The end_time of this ReportInstancesStatusRequest.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def instance_ids(self):
        """Gets the instance_ids of this ReportInstancesStatusRequest.  # noqa: E501


        :return: The instance_ids of this ReportInstancesStatusRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._instance_ids

    @instance_ids.setter
    def instance_ids(self, instance_ids):
        """Sets the instance_ids of this ReportInstancesStatusRequest.


        :param instance_ids: The instance_ids of this ReportInstancesStatusRequest.  # noqa: E501
        :type: list[str]
        """

        self._instance_ids = instance_ids

    @property
    def reason(self):
        """Gets the reason of this ReportInstancesStatusRequest.  # noqa: E501


        :return: The reason of this ReportInstancesStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ReportInstancesStatusRequest.


        :param reason: The reason of this ReportInstancesStatusRequest.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def start_time(self):
        """Gets the start_time of this ReportInstancesStatusRequest.  # noqa: E501


        :return: The start_time of this ReportInstancesStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ReportInstancesStatusRequest.


        :param start_time: The start_time of this ReportInstancesStatusRequest.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportInstancesStatusRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportInstancesStatusRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportInstancesStatusRequest):
            return True

        return self.to_dict() != other.to_dict()
