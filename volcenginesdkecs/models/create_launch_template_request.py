# coding: utf-8

"""
    ecs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateLaunchTemplateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deployment_set_group_number': 'int',
        'deployment_set_id': 'str',
        'description': 'str',
        'eip': 'EipForCreateLaunchTemplateInput',
        'host_name': 'str',
        'hpc_cluster_id': 'str',
        'image_id': 'str',
        'image_name': 'str',
        'instance_charge_type': 'str',
        'instance_name': 'str',
        'instance_type_id': 'str',
        'keep_image_credential': 'bool',
        'key_pair_name': 'str',
        'launch_template_name': 'str',
        'launch_template_project_name': 'str',
        'launch_template_tags': 'list[LaunchTemplateTagForCreateLaunchTemplateInput]',
        'network_interfaces': 'list[NetworkInterfaceForCreateLaunchTemplateInput]',
        'project_name': 'str',
        'scheduled_instance': 'ScheduledInstanceForCreateLaunchTemplateInput',
        'security_enhancement_strategy': 'str',
        'spot_price_limit': 'float',
        'spot_strategy': 'str',
        'suffix_index': 'int',
        'tags': 'list[TagForCreateLaunchTemplateInput]',
        'unique_suffix': 'bool',
        'user_data': 'str',
        'version_description': 'str',
        'volumes': 'list[VolumeForCreateLaunchTemplateInput]',
        'vpc_id': 'str',
        'zone_id': 'str'
    }

    attribute_map = {
        'deployment_set_group_number': 'DeploymentSetGroupNumber',
        'deployment_set_id': 'DeploymentSetId',
        'description': 'Description',
        'eip': 'Eip',
        'host_name': 'HostName',
        'hpc_cluster_id': 'HpcClusterId',
        'image_id': 'ImageId',
        'image_name': 'ImageName',
        'instance_charge_type': 'InstanceChargeType',
        'instance_name': 'InstanceName',
        'instance_type_id': 'InstanceTypeId',
        'keep_image_credential': 'KeepImageCredential',
        'key_pair_name': 'KeyPairName',
        'launch_template_name': 'LaunchTemplateName',
        'launch_template_project_name': 'LaunchTemplateProjectName',
        'launch_template_tags': 'LaunchTemplateTags',
        'network_interfaces': 'NetworkInterfaces',
        'project_name': 'ProjectName',
        'scheduled_instance': 'ScheduledInstance',
        'security_enhancement_strategy': 'SecurityEnhancementStrategy',
        'spot_price_limit': 'SpotPriceLimit',
        'spot_strategy': 'SpotStrategy',
        'suffix_index': 'SuffixIndex',
        'tags': 'Tags',
        'unique_suffix': 'UniqueSuffix',
        'user_data': 'UserData',
        'version_description': 'VersionDescription',
        'volumes': 'Volumes',
        'vpc_id': 'VpcId',
        'zone_id': 'ZoneId'
    }

    def __init__(self, deployment_set_group_number=None, deployment_set_id=None, description=None, eip=None, host_name=None, hpc_cluster_id=None, image_id=None, image_name=None, instance_charge_type=None, instance_name=None, instance_type_id=None, keep_image_credential=None, key_pair_name=None, launch_template_name=None, launch_template_project_name=None, launch_template_tags=None, network_interfaces=None, project_name=None, scheduled_instance=None, security_enhancement_strategy=None, spot_price_limit=None, spot_strategy=None, suffix_index=None, tags=None, unique_suffix=None, user_data=None, version_description=None, volumes=None, vpc_id=None, zone_id=None, _configuration=None):  # noqa: E501
        """CreateLaunchTemplateRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._deployment_set_group_number = None
        self._deployment_set_id = None
        self._description = None
        self._eip = None
        self._host_name = None
        self._hpc_cluster_id = None
        self._image_id = None
        self._image_name = None
        self._instance_charge_type = None
        self._instance_name = None
        self._instance_type_id = None
        self._keep_image_credential = None
        self._key_pair_name = None
        self._launch_template_name = None
        self._launch_template_project_name = None
        self._launch_template_tags = None
        self._network_interfaces = None
        self._project_name = None
        self._scheduled_instance = None
        self._security_enhancement_strategy = None
        self._spot_price_limit = None
        self._spot_strategy = None
        self._suffix_index = None
        self._tags = None
        self._unique_suffix = None
        self._user_data = None
        self._version_description = None
        self._volumes = None
        self._vpc_id = None
        self._zone_id = None
        self.discriminator = None

        if deployment_set_group_number is not None:
            self.deployment_set_group_number = deployment_set_group_number
        if deployment_set_id is not None:
            self.deployment_set_id = deployment_set_id
        if description is not None:
            self.description = description
        if eip is not None:
            self.eip = eip
        if host_name is not None:
            self.host_name = host_name
        if hpc_cluster_id is not None:
            self.hpc_cluster_id = hpc_cluster_id
        if image_id is not None:
            self.image_id = image_id
        if image_name is not None:
            self.image_name = image_name
        if instance_charge_type is not None:
            self.instance_charge_type = instance_charge_type
        if instance_name is not None:
            self.instance_name = instance_name
        if instance_type_id is not None:
            self.instance_type_id = instance_type_id
        if keep_image_credential is not None:
            self.keep_image_credential = keep_image_credential
        if key_pair_name is not None:
            self.key_pair_name = key_pair_name
        self.launch_template_name = launch_template_name
        if launch_template_project_name is not None:
            self.launch_template_project_name = launch_template_project_name
        if launch_template_tags is not None:
            self.launch_template_tags = launch_template_tags
        if network_interfaces is not None:
            self.network_interfaces = network_interfaces
        if project_name is not None:
            self.project_name = project_name
        if scheduled_instance is not None:
            self.scheduled_instance = scheduled_instance
        if security_enhancement_strategy is not None:
            self.security_enhancement_strategy = security_enhancement_strategy
        if spot_price_limit is not None:
            self.spot_price_limit = spot_price_limit
        if spot_strategy is not None:
            self.spot_strategy = spot_strategy
        if suffix_index is not None:
            self.suffix_index = suffix_index
        if tags is not None:
            self.tags = tags
        if unique_suffix is not None:
            self.unique_suffix = unique_suffix
        if user_data is not None:
            self.user_data = user_data
        if version_description is not None:
            self.version_description = version_description
        if volumes is not None:
            self.volumes = volumes
        if vpc_id is not None:
            self.vpc_id = vpc_id
        if zone_id is not None:
            self.zone_id = zone_id

    @property
    def deployment_set_group_number(self):
        """Gets the deployment_set_group_number of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The deployment_set_group_number of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: int
        """
        return self._deployment_set_group_number

    @deployment_set_group_number.setter
    def deployment_set_group_number(self, deployment_set_group_number):
        """Sets the deployment_set_group_number of this CreateLaunchTemplateRequest.


        :param deployment_set_group_number: The deployment_set_group_number of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: int
        """

        self._deployment_set_group_number = deployment_set_group_number

    @property
    def deployment_set_id(self):
        """Gets the deployment_set_id of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The deployment_set_id of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._deployment_set_id

    @deployment_set_id.setter
    def deployment_set_id(self, deployment_set_id):
        """Sets the deployment_set_id of this CreateLaunchTemplateRequest.


        :param deployment_set_id: The deployment_set_id of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: str
        """

        self._deployment_set_id = deployment_set_id

    @property
    def description(self):
        """Gets the description of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The description of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateLaunchTemplateRequest.


        :param description: The description of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def eip(self):
        """Gets the eip of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The eip of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: EipForCreateLaunchTemplateInput
        """
        return self._eip

    @eip.setter
    def eip(self, eip):
        """Sets the eip of this CreateLaunchTemplateRequest.


        :param eip: The eip of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: EipForCreateLaunchTemplateInput
        """

        self._eip = eip

    @property
    def host_name(self):
        """Gets the host_name of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The host_name of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this CreateLaunchTemplateRequest.


        :param host_name: The host_name of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def hpc_cluster_id(self):
        """Gets the hpc_cluster_id of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The hpc_cluster_id of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._hpc_cluster_id

    @hpc_cluster_id.setter
    def hpc_cluster_id(self, hpc_cluster_id):
        """Sets the hpc_cluster_id of this CreateLaunchTemplateRequest.


        :param hpc_cluster_id: The hpc_cluster_id of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: str
        """

        self._hpc_cluster_id = hpc_cluster_id

    @property
    def image_id(self):
        """Gets the image_id of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The image_id of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this CreateLaunchTemplateRequest.


        :param image_id: The image_id of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def image_name(self):
        """Gets the image_name of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The image_name of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this CreateLaunchTemplateRequest.


        :param image_name: The image_name of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: str
        """

        self._image_name = image_name

    @property
    def instance_charge_type(self):
        """Gets the instance_charge_type of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The instance_charge_type of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._instance_charge_type

    @instance_charge_type.setter
    def instance_charge_type(self, instance_charge_type):
        """Sets the instance_charge_type of this CreateLaunchTemplateRequest.


        :param instance_charge_type: The instance_charge_type of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: str
        """

        self._instance_charge_type = instance_charge_type

    @property
    def instance_name(self):
        """Gets the instance_name of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The instance_name of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this CreateLaunchTemplateRequest.


        :param instance_name: The instance_name of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: str
        """

        self._instance_name = instance_name

    @property
    def instance_type_id(self):
        """Gets the instance_type_id of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The instance_type_id of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._instance_type_id

    @instance_type_id.setter
    def instance_type_id(self, instance_type_id):
        """Sets the instance_type_id of this CreateLaunchTemplateRequest.


        :param instance_type_id: The instance_type_id of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: str
        """

        self._instance_type_id = instance_type_id

    @property
    def keep_image_credential(self):
        """Gets the keep_image_credential of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The keep_image_credential of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._keep_image_credential

    @keep_image_credential.setter
    def keep_image_credential(self, keep_image_credential):
        """Sets the keep_image_credential of this CreateLaunchTemplateRequest.


        :param keep_image_credential: The keep_image_credential of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: bool
        """

        self._keep_image_credential = keep_image_credential

    @property
    def key_pair_name(self):
        """Gets the key_pair_name of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The key_pair_name of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._key_pair_name

    @key_pair_name.setter
    def key_pair_name(self, key_pair_name):
        """Sets the key_pair_name of this CreateLaunchTemplateRequest.


        :param key_pair_name: The key_pair_name of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: str
        """

        self._key_pair_name = key_pair_name

    @property
    def launch_template_name(self):
        """Gets the launch_template_name of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The launch_template_name of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._launch_template_name

    @launch_template_name.setter
    def launch_template_name(self, launch_template_name):
        """Sets the launch_template_name of this CreateLaunchTemplateRequest.


        :param launch_template_name: The launch_template_name of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and launch_template_name is None:
            raise ValueError("Invalid value for `launch_template_name`, must not be `None`")  # noqa: E501

        self._launch_template_name = launch_template_name

    @property
    def launch_template_project_name(self):
        """Gets the launch_template_project_name of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The launch_template_project_name of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._launch_template_project_name

    @launch_template_project_name.setter
    def launch_template_project_name(self, launch_template_project_name):
        """Sets the launch_template_project_name of this CreateLaunchTemplateRequest.


        :param launch_template_project_name: The launch_template_project_name of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: str
        """

        self._launch_template_project_name = launch_template_project_name

    @property
    def launch_template_tags(self):
        """Gets the launch_template_tags of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The launch_template_tags of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: list[LaunchTemplateTagForCreateLaunchTemplateInput]
        """
        return self._launch_template_tags

    @launch_template_tags.setter
    def launch_template_tags(self, launch_template_tags):
        """Sets the launch_template_tags of this CreateLaunchTemplateRequest.


        :param launch_template_tags: The launch_template_tags of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: list[LaunchTemplateTagForCreateLaunchTemplateInput]
        """

        self._launch_template_tags = launch_template_tags

    @property
    def network_interfaces(self):
        """Gets the network_interfaces of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The network_interfaces of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: list[NetworkInterfaceForCreateLaunchTemplateInput]
        """
        return self._network_interfaces

    @network_interfaces.setter
    def network_interfaces(self, network_interfaces):
        """Sets the network_interfaces of this CreateLaunchTemplateRequest.


        :param network_interfaces: The network_interfaces of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: list[NetworkInterfaceForCreateLaunchTemplateInput]
        """

        self._network_interfaces = network_interfaces

    @property
    def project_name(self):
        """Gets the project_name of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The project_name of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this CreateLaunchTemplateRequest.


        :param project_name: The project_name of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def scheduled_instance(self):
        """Gets the scheduled_instance of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The scheduled_instance of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: ScheduledInstanceForCreateLaunchTemplateInput
        """
        return self._scheduled_instance

    @scheduled_instance.setter
    def scheduled_instance(self, scheduled_instance):
        """Sets the scheduled_instance of this CreateLaunchTemplateRequest.


        :param scheduled_instance: The scheduled_instance of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: ScheduledInstanceForCreateLaunchTemplateInput
        """

        self._scheduled_instance = scheduled_instance

    @property
    def security_enhancement_strategy(self):
        """Gets the security_enhancement_strategy of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The security_enhancement_strategy of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._security_enhancement_strategy

    @security_enhancement_strategy.setter
    def security_enhancement_strategy(self, security_enhancement_strategy):
        """Sets the security_enhancement_strategy of this CreateLaunchTemplateRequest.


        :param security_enhancement_strategy: The security_enhancement_strategy of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: str
        """

        self._security_enhancement_strategy = security_enhancement_strategy

    @property
    def spot_price_limit(self):
        """Gets the spot_price_limit of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The spot_price_limit of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: float
        """
        return self._spot_price_limit

    @spot_price_limit.setter
    def spot_price_limit(self, spot_price_limit):
        """Sets the spot_price_limit of this CreateLaunchTemplateRequest.


        :param spot_price_limit: The spot_price_limit of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: float
        """

        self._spot_price_limit = spot_price_limit

    @property
    def spot_strategy(self):
        """Gets the spot_strategy of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The spot_strategy of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._spot_strategy

    @spot_strategy.setter
    def spot_strategy(self, spot_strategy):
        """Sets the spot_strategy of this CreateLaunchTemplateRequest.


        :param spot_strategy: The spot_strategy of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: str
        """

        self._spot_strategy = spot_strategy

    @property
    def suffix_index(self):
        """Gets the suffix_index of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The suffix_index of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: int
        """
        return self._suffix_index

    @suffix_index.setter
    def suffix_index(self, suffix_index):
        """Sets the suffix_index of this CreateLaunchTemplateRequest.


        :param suffix_index: The suffix_index of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: int
        """

        self._suffix_index = suffix_index

    @property
    def tags(self):
        """Gets the tags of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The tags of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: list[TagForCreateLaunchTemplateInput]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateLaunchTemplateRequest.


        :param tags: The tags of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: list[TagForCreateLaunchTemplateInput]
        """

        self._tags = tags

    @property
    def unique_suffix(self):
        """Gets the unique_suffix of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The unique_suffix of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._unique_suffix

    @unique_suffix.setter
    def unique_suffix(self, unique_suffix):
        """Sets the unique_suffix of this CreateLaunchTemplateRequest.


        :param unique_suffix: The unique_suffix of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: bool
        """

        self._unique_suffix = unique_suffix

    @property
    def user_data(self):
        """Gets the user_data of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The user_data of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this CreateLaunchTemplateRequest.


        :param user_data: The user_data of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: str
        """

        self._user_data = user_data

    @property
    def version_description(self):
        """Gets the version_description of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The version_description of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._version_description

    @version_description.setter
    def version_description(self, version_description):
        """Sets the version_description of this CreateLaunchTemplateRequest.


        :param version_description: The version_description of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: str
        """

        self._version_description = version_description

    @property
    def volumes(self):
        """Gets the volumes of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The volumes of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: list[VolumeForCreateLaunchTemplateInput]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this CreateLaunchTemplateRequest.


        :param volumes: The volumes of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: list[VolumeForCreateLaunchTemplateInput]
        """

        self._volumes = volumes

    @property
    def vpc_id(self):
        """Gets the vpc_id of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The vpc_id of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this CreateLaunchTemplateRequest.


        :param vpc_id: The vpc_id of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: str
        """

        self._vpc_id = vpc_id

    @property
    def zone_id(self):
        """Gets the zone_id of this CreateLaunchTemplateRequest.  # noqa: E501


        :return: The zone_id of this CreateLaunchTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this CreateLaunchTemplateRequest.


        :param zone_id: The zone_id of this CreateLaunchTemplateRequest.  # noqa: E501
        :type: str
        """

        self._zone_id = zone_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateLaunchTemplateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateLaunchTemplateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateLaunchTemplateRequest):
            return True

        return self.to_dict() != other.to_dict()
