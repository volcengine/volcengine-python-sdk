# coding: utf-8

"""
    ecs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ModifySystemEventDefaultActionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_action': 'str',
        'event_id': 'str',
        'operated_end_at': 'str',
        'operated_start_at': 'str'
    }

    attribute_map = {
        'default_action': 'DefaultAction',
        'event_id': 'EventId',
        'operated_end_at': 'OperatedEndAt',
        'operated_start_at': 'OperatedStartAt'
    }

    def __init__(self, default_action=None, event_id=None, operated_end_at=None, operated_start_at=None, _configuration=None):  # noqa: E501
        """ModifySystemEventDefaultActionRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._default_action = None
        self._event_id = None
        self._operated_end_at = None
        self._operated_start_at = None
        self.discriminator = None

        self.default_action = default_action
        self.event_id = event_id
        if operated_end_at is not None:
            self.operated_end_at = operated_end_at
        if operated_start_at is not None:
            self.operated_start_at = operated_start_at

    @property
    def default_action(self):
        """Gets the default_action of this ModifySystemEventDefaultActionRequest.  # noqa: E501


        :return: The default_action of this ModifySystemEventDefaultActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._default_action

    @default_action.setter
    def default_action(self, default_action):
        """Sets the default_action of this ModifySystemEventDefaultActionRequest.


        :param default_action: The default_action of this ModifySystemEventDefaultActionRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and default_action is None:
            raise ValueError("Invalid value for `default_action`, must not be `None`")  # noqa: E501
        allowed_values = ["ColdMigrate", "ReplaceDisk"]  # noqa: E501
        if (self._configuration.client_side_validation and
                default_action not in allowed_values):
            raise ValueError(
                "Invalid value for `default_action` ({0}), must be one of {1}"  # noqa: E501
                .format(default_action, allowed_values)
            )

        self._default_action = default_action

    @property
    def event_id(self):
        """Gets the event_id of this ModifySystemEventDefaultActionRequest.  # noqa: E501


        :return: The event_id of this ModifySystemEventDefaultActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this ModifySystemEventDefaultActionRequest.


        :param event_id: The event_id of this ModifySystemEventDefaultActionRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")  # noqa: E501

        self._event_id = event_id

    @property
    def operated_end_at(self):
        """Gets the operated_end_at of this ModifySystemEventDefaultActionRequest.  # noqa: E501


        :return: The operated_end_at of this ModifySystemEventDefaultActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._operated_end_at

    @operated_end_at.setter
    def operated_end_at(self, operated_end_at):
        """Sets the operated_end_at of this ModifySystemEventDefaultActionRequest.


        :param operated_end_at: The operated_end_at of this ModifySystemEventDefaultActionRequest.  # noqa: E501
        :type: str
        """

        self._operated_end_at = operated_end_at

    @property
    def operated_start_at(self):
        """Gets the operated_start_at of this ModifySystemEventDefaultActionRequest.  # noqa: E501


        :return: The operated_start_at of this ModifySystemEventDefaultActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._operated_start_at

    @operated_start_at.setter
    def operated_start_at(self, operated_start_at):
        """Sets the operated_start_at of this ModifySystemEventDefaultActionRequest.


        :param operated_start_at: The operated_start_at of this ModifySystemEventDefaultActionRequest.  # noqa: E501
        :type: str
        """

        self._operated_start_at = operated_start_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModifySystemEventDefaultActionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModifySystemEventDefaultActionRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModifySystemEventDefaultActionRequest):
            return True

        return self.to_dict() != other.to_dict()
