# coding: utf-8

"""
    ecs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class LaunchTemplateForDescribeLaunchTemplatesOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'str',
        'default_version_number': 'int',
        'latest_version_number': 'int',
        'launch_template_id': 'str',
        'launch_template_name': 'str',
        'launch_template_project_name': 'str',
        'launch_template_tags': 'list[LaunchTemplateTagForDescribeLaunchTemplatesOutput]',
        'updated_at': 'str'
    }

    attribute_map = {
        'created_at': 'CreatedAt',
        'default_version_number': 'DefaultVersionNumber',
        'latest_version_number': 'LatestVersionNumber',
        'launch_template_id': 'LaunchTemplateId',
        'launch_template_name': 'LaunchTemplateName',
        'launch_template_project_name': 'LaunchTemplateProjectName',
        'launch_template_tags': 'LaunchTemplateTags',
        'updated_at': 'UpdatedAt'
    }

    def __init__(self, created_at=None, default_version_number=None, latest_version_number=None, launch_template_id=None, launch_template_name=None, launch_template_project_name=None, launch_template_tags=None, updated_at=None, _configuration=None):  # noqa: E501
        """LaunchTemplateForDescribeLaunchTemplatesOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created_at = None
        self._default_version_number = None
        self._latest_version_number = None
        self._launch_template_id = None
        self._launch_template_name = None
        self._launch_template_project_name = None
        self._launch_template_tags = None
        self._updated_at = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if default_version_number is not None:
            self.default_version_number = default_version_number
        if latest_version_number is not None:
            self.latest_version_number = latest_version_number
        if launch_template_id is not None:
            self.launch_template_id = launch_template_id
        if launch_template_name is not None:
            self.launch_template_name = launch_template_name
        if launch_template_project_name is not None:
            self.launch_template_project_name = launch_template_project_name
        if launch_template_tags is not None:
            self.launch_template_tags = launch_template_tags
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501


        :return: The created_at of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LaunchTemplateForDescribeLaunchTemplatesOutput.


        :param created_at: The created_at of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def default_version_number(self):
        """Gets the default_version_number of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501


        :return: The default_version_number of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501
        :rtype: int
        """
        return self._default_version_number

    @default_version_number.setter
    def default_version_number(self, default_version_number):
        """Sets the default_version_number of this LaunchTemplateForDescribeLaunchTemplatesOutput.


        :param default_version_number: The default_version_number of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501
        :type: int
        """

        self._default_version_number = default_version_number

    @property
    def latest_version_number(self):
        """Gets the latest_version_number of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501


        :return: The latest_version_number of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501
        :rtype: int
        """
        return self._latest_version_number

    @latest_version_number.setter
    def latest_version_number(self, latest_version_number):
        """Sets the latest_version_number of this LaunchTemplateForDescribeLaunchTemplatesOutput.


        :param latest_version_number: The latest_version_number of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501
        :type: int
        """

        self._latest_version_number = latest_version_number

    @property
    def launch_template_id(self):
        """Gets the launch_template_id of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501


        :return: The launch_template_id of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501
        :rtype: str
        """
        return self._launch_template_id

    @launch_template_id.setter
    def launch_template_id(self, launch_template_id):
        """Sets the launch_template_id of this LaunchTemplateForDescribeLaunchTemplatesOutput.


        :param launch_template_id: The launch_template_id of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501
        :type: str
        """

        self._launch_template_id = launch_template_id

    @property
    def launch_template_name(self):
        """Gets the launch_template_name of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501


        :return: The launch_template_name of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501
        :rtype: str
        """
        return self._launch_template_name

    @launch_template_name.setter
    def launch_template_name(self, launch_template_name):
        """Sets the launch_template_name of this LaunchTemplateForDescribeLaunchTemplatesOutput.


        :param launch_template_name: The launch_template_name of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501
        :type: str
        """

        self._launch_template_name = launch_template_name

    @property
    def launch_template_project_name(self):
        """Gets the launch_template_project_name of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501


        :return: The launch_template_project_name of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501
        :rtype: str
        """
        return self._launch_template_project_name

    @launch_template_project_name.setter
    def launch_template_project_name(self, launch_template_project_name):
        """Sets the launch_template_project_name of this LaunchTemplateForDescribeLaunchTemplatesOutput.


        :param launch_template_project_name: The launch_template_project_name of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501
        :type: str
        """

        self._launch_template_project_name = launch_template_project_name

    @property
    def launch_template_tags(self):
        """Gets the launch_template_tags of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501


        :return: The launch_template_tags of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501
        :rtype: list[LaunchTemplateTagForDescribeLaunchTemplatesOutput]
        """
        return self._launch_template_tags

    @launch_template_tags.setter
    def launch_template_tags(self, launch_template_tags):
        """Sets the launch_template_tags of this LaunchTemplateForDescribeLaunchTemplatesOutput.


        :param launch_template_tags: The launch_template_tags of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501
        :type: list[LaunchTemplateTagForDescribeLaunchTemplatesOutput]
        """

        self._launch_template_tags = launch_template_tags

    @property
    def updated_at(self):
        """Gets the updated_at of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501


        :return: The updated_at of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LaunchTemplateForDescribeLaunchTemplatesOutput.


        :param updated_at: The updated_at of this LaunchTemplateForDescribeLaunchTemplatesOutput.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LaunchTemplateForDescribeLaunchTemplatesOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LaunchTemplateForDescribeLaunchTemplatesOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LaunchTemplateForDescribeLaunchTemplatesOutput):
            return True

        return self.to_dict() != other.to_dict()
