# coding: utf-8

"""
    ecs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class RdmaNetworkInterfaceDetailForDescribeInstancesOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gateway': 'str',
        'ip': 'str',
        'mask': 'str',
        'switch_name': 'str',
        'switch_port': 'str'
    }

    attribute_map = {
        'gateway': 'Gateway',
        'ip': 'Ip',
        'mask': 'Mask',
        'switch_name': 'SwitchName',
        'switch_port': 'SwitchPort'
    }

    def __init__(self, gateway=None, ip=None, mask=None, switch_name=None, switch_port=None, _configuration=None):  # noqa: E501
        """RdmaNetworkInterfaceDetailForDescribeInstancesOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._gateway = None
        self._ip = None
        self._mask = None
        self._switch_name = None
        self._switch_port = None
        self.discriminator = None

        if gateway is not None:
            self.gateway = gateway
        if ip is not None:
            self.ip = ip
        if mask is not None:
            self.mask = mask
        if switch_name is not None:
            self.switch_name = switch_name
        if switch_port is not None:
            self.switch_port = switch_port

    @property
    def gateway(self):
        """Gets the gateway of this RdmaNetworkInterfaceDetailForDescribeInstancesOutput.  # noqa: E501


        :return: The gateway of this RdmaNetworkInterfaceDetailForDescribeInstancesOutput.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this RdmaNetworkInterfaceDetailForDescribeInstancesOutput.


        :param gateway: The gateway of this RdmaNetworkInterfaceDetailForDescribeInstancesOutput.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def ip(self):
        """Gets the ip of this RdmaNetworkInterfaceDetailForDescribeInstancesOutput.  # noqa: E501


        :return: The ip of this RdmaNetworkInterfaceDetailForDescribeInstancesOutput.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this RdmaNetworkInterfaceDetailForDescribeInstancesOutput.


        :param ip: The ip of this RdmaNetworkInterfaceDetailForDescribeInstancesOutput.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def mask(self):
        """Gets the mask of this RdmaNetworkInterfaceDetailForDescribeInstancesOutput.  # noqa: E501


        :return: The mask of this RdmaNetworkInterfaceDetailForDescribeInstancesOutput.  # noqa: E501
        :rtype: str
        """
        return self._mask

    @mask.setter
    def mask(self, mask):
        """Sets the mask of this RdmaNetworkInterfaceDetailForDescribeInstancesOutput.


        :param mask: The mask of this RdmaNetworkInterfaceDetailForDescribeInstancesOutput.  # noqa: E501
        :type: str
        """

        self._mask = mask

    @property
    def switch_name(self):
        """Gets the switch_name of this RdmaNetworkInterfaceDetailForDescribeInstancesOutput.  # noqa: E501


        :return: The switch_name of this RdmaNetworkInterfaceDetailForDescribeInstancesOutput.  # noqa: E501
        :rtype: str
        """
        return self._switch_name

    @switch_name.setter
    def switch_name(self, switch_name):
        """Sets the switch_name of this RdmaNetworkInterfaceDetailForDescribeInstancesOutput.


        :param switch_name: The switch_name of this RdmaNetworkInterfaceDetailForDescribeInstancesOutput.  # noqa: E501
        :type: str
        """

        self._switch_name = switch_name

    @property
    def switch_port(self):
        """Gets the switch_port of this RdmaNetworkInterfaceDetailForDescribeInstancesOutput.  # noqa: E501


        :return: The switch_port of this RdmaNetworkInterfaceDetailForDescribeInstancesOutput.  # noqa: E501
        :rtype: str
        """
        return self._switch_port

    @switch_port.setter
    def switch_port(self, switch_port):
        """Sets the switch_port of this RdmaNetworkInterfaceDetailForDescribeInstancesOutput.


        :param switch_port: The switch_port of this RdmaNetworkInterfaceDetailForDescribeInstancesOutput.  # noqa: E501
        :type: str
        """

        self._switch_port = switch_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RdmaNetworkInterfaceDetailForDescribeInstancesOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RdmaNetworkInterfaceDetailForDescribeInstancesOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RdmaNetworkInterfaceDetailForDescribeInstancesOutput):
            return True

        return self.to_dict() != other.to_dict()
