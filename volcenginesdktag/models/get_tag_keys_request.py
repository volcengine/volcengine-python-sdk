# coding: utf-8

"""
    tag

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class GetTagKeysRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'match_type': 'str',
        'max_results': 'int',
        'next_token': 'str',
        'tag_key': 'str',
        'tag_type': 'str'
    }

    attribute_map = {
        'match_type': 'MatchType',
        'max_results': 'MaxResults',
        'next_token': 'NextToken',
        'tag_key': 'TagKey',
        'tag_type': 'TagType'
    }

    def __init__(self, match_type=None, max_results=None, next_token=None, tag_key=None, tag_type=None, _configuration=None):  # noqa: E501
        """GetTagKeysRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._match_type = None
        self._max_results = None
        self._next_token = None
        self._tag_key = None
        self._tag_type = None
        self.discriminator = None

        if match_type is not None:
            self.match_type = match_type
        if max_results is not None:
            self.max_results = max_results
        if next_token is not None:
            self.next_token = next_token
        if tag_key is not None:
            self.tag_key = tag_key
        if tag_type is not None:
            self.tag_type = tag_type

    @property
    def match_type(self):
        """Gets the match_type of this GetTagKeysRequest.  # noqa: E501


        :return: The match_type of this GetTagKeysRequest.  # noqa: E501
        :rtype: str
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this GetTagKeysRequest.


        :param match_type: The match_type of this GetTagKeysRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["prefix", "equals", "contain"]  # noqa: E501
        if (self._configuration.client_side_validation and
                match_type not in allowed_values):
            raise ValueError(
                "Invalid value for `match_type` ({0}), must be one of {1}"  # noqa: E501
                .format(match_type, allowed_values)
            )

        self._match_type = match_type

    @property
    def max_results(self):
        """Gets the max_results of this GetTagKeysRequest.  # noqa: E501


        :return: The max_results of this GetTagKeysRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this GetTagKeysRequest.


        :param max_results: The max_results of this GetTagKeysRequest.  # noqa: E501
        :type: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this GetTagKeysRequest.  # noqa: E501


        :return: The next_token of this GetTagKeysRequest.  # noqa: E501
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetTagKeysRequest.


        :param next_token: The next_token of this GetTagKeysRequest.  # noqa: E501
        :type: str
        """

        self._next_token = next_token

    @property
    def tag_key(self):
        """Gets the tag_key of this GetTagKeysRequest.  # noqa: E501


        :return: The tag_key of this GetTagKeysRequest.  # noqa: E501
        :rtype: str
        """
        return self._tag_key

    @tag_key.setter
    def tag_key(self, tag_key):
        """Sets the tag_key of this GetTagKeysRequest.


        :param tag_key: The tag_key of this GetTagKeysRequest.  # noqa: E501
        :type: str
        """

        self._tag_key = tag_key

    @property
    def tag_type(self):
        """Gets the tag_type of this GetTagKeysRequest.  # noqa: E501


        :return: The tag_type of this GetTagKeysRequest.  # noqa: E501
        :rtype: str
        """
        return self._tag_type

    @tag_type.setter
    def tag_type(self, tag_type):
        """Sets the tag_type of this GetTagKeysRequest.


        :param tag_type: The tag_type of this GetTagKeysRequest.  # noqa: E501
        :type: str
        """

        self._tag_type = tag_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetTagKeysRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetTagKeysRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetTagKeysRequest):
            return True

        return self.to_dict() != other.to_dict()
