# coding: utf-8

"""
    clb

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class AccessLogForDescribeLoadBalancerAttributesOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bucket_name': 'str',
        'enabled': 'bool',
        'tls_enabled': 'bool',
        'tls_project_id': 'str',
        'tls_topic_id': 'str'
    }

    attribute_map = {
        'bucket_name': 'BucketName',
        'enabled': 'Enabled',
        'tls_enabled': 'TlsEnabled',
        'tls_project_id': 'TlsProjectId',
        'tls_topic_id': 'TlsTopicId'
    }

    def __init__(self, bucket_name=None, enabled=None, tls_enabled=None, tls_project_id=None, tls_topic_id=None, _configuration=None):  # noqa: E501
        """AccessLogForDescribeLoadBalancerAttributesOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bucket_name = None
        self._enabled = None
        self._tls_enabled = None
        self._tls_project_id = None
        self._tls_topic_id = None
        self.discriminator = None

        if bucket_name is not None:
            self.bucket_name = bucket_name
        if enabled is not None:
            self.enabled = enabled
        if tls_enabled is not None:
            self.tls_enabled = tls_enabled
        if tls_project_id is not None:
            self.tls_project_id = tls_project_id
        if tls_topic_id is not None:
            self.tls_topic_id = tls_topic_id

    @property
    def bucket_name(self):
        """Gets the bucket_name of this AccessLogForDescribeLoadBalancerAttributesOutput.  # noqa: E501


        :return: The bucket_name of this AccessLogForDescribeLoadBalancerAttributesOutput.  # noqa: E501
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this AccessLogForDescribeLoadBalancerAttributesOutput.


        :param bucket_name: The bucket_name of this AccessLogForDescribeLoadBalancerAttributesOutput.  # noqa: E501
        :type: str
        """

        self._bucket_name = bucket_name

    @property
    def enabled(self):
        """Gets the enabled of this AccessLogForDescribeLoadBalancerAttributesOutput.  # noqa: E501


        :return: The enabled of this AccessLogForDescribeLoadBalancerAttributesOutput.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AccessLogForDescribeLoadBalancerAttributesOutput.


        :param enabled: The enabled of this AccessLogForDescribeLoadBalancerAttributesOutput.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def tls_enabled(self):
        """Gets the tls_enabled of this AccessLogForDescribeLoadBalancerAttributesOutput.  # noqa: E501


        :return: The tls_enabled of this AccessLogForDescribeLoadBalancerAttributesOutput.  # noqa: E501
        :rtype: bool
        """
        return self._tls_enabled

    @tls_enabled.setter
    def tls_enabled(self, tls_enabled):
        """Sets the tls_enabled of this AccessLogForDescribeLoadBalancerAttributesOutput.


        :param tls_enabled: The tls_enabled of this AccessLogForDescribeLoadBalancerAttributesOutput.  # noqa: E501
        :type: bool
        """

        self._tls_enabled = tls_enabled

    @property
    def tls_project_id(self):
        """Gets the tls_project_id of this AccessLogForDescribeLoadBalancerAttributesOutput.  # noqa: E501


        :return: The tls_project_id of this AccessLogForDescribeLoadBalancerAttributesOutput.  # noqa: E501
        :rtype: str
        """
        return self._tls_project_id

    @tls_project_id.setter
    def tls_project_id(self, tls_project_id):
        """Sets the tls_project_id of this AccessLogForDescribeLoadBalancerAttributesOutput.


        :param tls_project_id: The tls_project_id of this AccessLogForDescribeLoadBalancerAttributesOutput.  # noqa: E501
        :type: str
        """

        self._tls_project_id = tls_project_id

    @property
    def tls_topic_id(self):
        """Gets the tls_topic_id of this AccessLogForDescribeLoadBalancerAttributesOutput.  # noqa: E501


        :return: The tls_topic_id of this AccessLogForDescribeLoadBalancerAttributesOutput.  # noqa: E501
        :rtype: str
        """
        return self._tls_topic_id

    @tls_topic_id.setter
    def tls_topic_id(self, tls_topic_id):
        """Sets the tls_topic_id of this AccessLogForDescribeLoadBalancerAttributesOutput.


        :param tls_topic_id: The tls_topic_id of this AccessLogForDescribeLoadBalancerAttributesOutput.  # noqa: E501
        :type: str
        """

        self._tls_topic_id = tls_topic_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessLogForDescribeLoadBalancerAttributesOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessLogForDescribeLoadBalancerAttributesOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccessLogForDescribeLoadBalancerAttributesOutput):
            return True

        return self.to_dict() != other.to_dict()
