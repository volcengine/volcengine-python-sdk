# coding: utf-8

"""
    rds_mysql_v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ChangeObjectForSyncAllowListOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'added_ip_list': 'list[str]',
        'bind_mode': 'str',
        'has_changed': 'bool',
        'has_deleted': 'bool',
        'new_ip_list': 'list[str]',
        'old_ip_list': 'list[str]',
        'removed_ip_list': 'list[str]',
        'security_group_id': 'str',
        'security_group_name': 'str'
    }

    attribute_map = {
        'added_ip_list': 'AddedIpList',
        'bind_mode': 'BindMode',
        'has_changed': 'HasChanged',
        'has_deleted': 'HasDeleted',
        'new_ip_list': 'NewIpList',
        'old_ip_list': 'OldIpList',
        'removed_ip_list': 'RemovedIpList',
        'security_group_id': 'SecurityGroupId',
        'security_group_name': 'SecurityGroupName'
    }

    def __init__(self, added_ip_list=None, bind_mode=None, has_changed=None, has_deleted=None, new_ip_list=None, old_ip_list=None, removed_ip_list=None, security_group_id=None, security_group_name=None, _configuration=None):  # noqa: E501
        """ChangeObjectForSyncAllowListOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._added_ip_list = None
        self._bind_mode = None
        self._has_changed = None
        self._has_deleted = None
        self._new_ip_list = None
        self._old_ip_list = None
        self._removed_ip_list = None
        self._security_group_id = None
        self._security_group_name = None
        self.discriminator = None

        if added_ip_list is not None:
            self.added_ip_list = added_ip_list
        if bind_mode is not None:
            self.bind_mode = bind_mode
        if has_changed is not None:
            self.has_changed = has_changed
        if has_deleted is not None:
            self.has_deleted = has_deleted
        if new_ip_list is not None:
            self.new_ip_list = new_ip_list
        if old_ip_list is not None:
            self.old_ip_list = old_ip_list
        if removed_ip_list is not None:
            self.removed_ip_list = removed_ip_list
        if security_group_id is not None:
            self.security_group_id = security_group_id
        if security_group_name is not None:
            self.security_group_name = security_group_name

    @property
    def added_ip_list(self):
        """Gets the added_ip_list of this ChangeObjectForSyncAllowListOutput.  # noqa: E501


        :return: The added_ip_list of this ChangeObjectForSyncAllowListOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._added_ip_list

    @added_ip_list.setter
    def added_ip_list(self, added_ip_list):
        """Sets the added_ip_list of this ChangeObjectForSyncAllowListOutput.


        :param added_ip_list: The added_ip_list of this ChangeObjectForSyncAllowListOutput.  # noqa: E501
        :type: list[str]
        """

        self._added_ip_list = added_ip_list

    @property
    def bind_mode(self):
        """Gets the bind_mode of this ChangeObjectForSyncAllowListOutput.  # noqa: E501


        :return: The bind_mode of this ChangeObjectForSyncAllowListOutput.  # noqa: E501
        :rtype: str
        """
        return self._bind_mode

    @bind_mode.setter
    def bind_mode(self, bind_mode):
        """Sets the bind_mode of this ChangeObjectForSyncAllowListOutput.


        :param bind_mode: The bind_mode of this ChangeObjectForSyncAllowListOutput.  # noqa: E501
        :type: str
        """

        self._bind_mode = bind_mode

    @property
    def has_changed(self):
        """Gets the has_changed of this ChangeObjectForSyncAllowListOutput.  # noqa: E501


        :return: The has_changed of this ChangeObjectForSyncAllowListOutput.  # noqa: E501
        :rtype: bool
        """
        return self._has_changed

    @has_changed.setter
    def has_changed(self, has_changed):
        """Sets the has_changed of this ChangeObjectForSyncAllowListOutput.


        :param has_changed: The has_changed of this ChangeObjectForSyncAllowListOutput.  # noqa: E501
        :type: bool
        """

        self._has_changed = has_changed

    @property
    def has_deleted(self):
        """Gets the has_deleted of this ChangeObjectForSyncAllowListOutput.  # noqa: E501


        :return: The has_deleted of this ChangeObjectForSyncAllowListOutput.  # noqa: E501
        :rtype: bool
        """
        return self._has_deleted

    @has_deleted.setter
    def has_deleted(self, has_deleted):
        """Sets the has_deleted of this ChangeObjectForSyncAllowListOutput.


        :param has_deleted: The has_deleted of this ChangeObjectForSyncAllowListOutput.  # noqa: E501
        :type: bool
        """

        self._has_deleted = has_deleted

    @property
    def new_ip_list(self):
        """Gets the new_ip_list of this ChangeObjectForSyncAllowListOutput.  # noqa: E501


        :return: The new_ip_list of this ChangeObjectForSyncAllowListOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._new_ip_list

    @new_ip_list.setter
    def new_ip_list(self, new_ip_list):
        """Sets the new_ip_list of this ChangeObjectForSyncAllowListOutput.


        :param new_ip_list: The new_ip_list of this ChangeObjectForSyncAllowListOutput.  # noqa: E501
        :type: list[str]
        """

        self._new_ip_list = new_ip_list

    @property
    def old_ip_list(self):
        """Gets the old_ip_list of this ChangeObjectForSyncAllowListOutput.  # noqa: E501


        :return: The old_ip_list of this ChangeObjectForSyncAllowListOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._old_ip_list

    @old_ip_list.setter
    def old_ip_list(self, old_ip_list):
        """Sets the old_ip_list of this ChangeObjectForSyncAllowListOutput.


        :param old_ip_list: The old_ip_list of this ChangeObjectForSyncAllowListOutput.  # noqa: E501
        :type: list[str]
        """

        self._old_ip_list = old_ip_list

    @property
    def removed_ip_list(self):
        """Gets the removed_ip_list of this ChangeObjectForSyncAllowListOutput.  # noqa: E501


        :return: The removed_ip_list of this ChangeObjectForSyncAllowListOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._removed_ip_list

    @removed_ip_list.setter
    def removed_ip_list(self, removed_ip_list):
        """Sets the removed_ip_list of this ChangeObjectForSyncAllowListOutput.


        :param removed_ip_list: The removed_ip_list of this ChangeObjectForSyncAllowListOutput.  # noqa: E501
        :type: list[str]
        """

        self._removed_ip_list = removed_ip_list

    @property
    def security_group_id(self):
        """Gets the security_group_id of this ChangeObjectForSyncAllowListOutput.  # noqa: E501


        :return: The security_group_id of this ChangeObjectForSyncAllowListOutput.  # noqa: E501
        :rtype: str
        """
        return self._security_group_id

    @security_group_id.setter
    def security_group_id(self, security_group_id):
        """Sets the security_group_id of this ChangeObjectForSyncAllowListOutput.


        :param security_group_id: The security_group_id of this ChangeObjectForSyncAllowListOutput.  # noqa: E501
        :type: str
        """

        self._security_group_id = security_group_id

    @property
    def security_group_name(self):
        """Gets the security_group_name of this ChangeObjectForSyncAllowListOutput.  # noqa: E501


        :return: The security_group_name of this ChangeObjectForSyncAllowListOutput.  # noqa: E501
        :rtype: str
        """
        return self._security_group_name

    @security_group_name.setter
    def security_group_name(self, security_group_name):
        """Sets the security_group_name of this ChangeObjectForSyncAllowListOutput.


        :param security_group_name: The security_group_name of this ChangeObjectForSyncAllowListOutput.  # noqa: E501
        :type: str
        """

        self._security_group_name = security_group_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChangeObjectForSyncAllowListOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangeObjectForSyncAllowListOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChangeObjectForSyncAllowListOutput):
            return True

        return self.to_dict() != other.to_dict()
