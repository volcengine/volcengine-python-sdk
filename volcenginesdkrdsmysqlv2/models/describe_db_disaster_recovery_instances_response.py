# coding: utf-8

"""
    rds_mysql_v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DescribeDBDisasterRecoveryInstancesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disaster_recovery_instances': 'list[DisasterRecoveryInstanceForDescribeDBDisasterRecoveryInstancesOutput]',
        'dr_dts_task_id': 'str',
        'dr_dts_task_name': 'str',
        'dr_dts_task_status': 'str',
        'dr_seconds_behind_master': 'int',
        'master_instance_id': 'str',
        'master_instance_name': 'str',
        'master_region': 'str'
    }

    attribute_map = {
        'disaster_recovery_instances': 'DisasterRecoveryInstances',
        'dr_dts_task_id': 'DrDtsTaskId',
        'dr_dts_task_name': 'DrDtsTaskName',
        'dr_dts_task_status': 'DrDtsTaskStatus',
        'dr_seconds_behind_master': 'DrSecondsBehindMaster',
        'master_instance_id': 'MasterInstanceId',
        'master_instance_name': 'MasterInstanceName',
        'master_region': 'MasterRegion'
    }

    def __init__(self, disaster_recovery_instances=None, dr_dts_task_id=None, dr_dts_task_name=None, dr_dts_task_status=None, dr_seconds_behind_master=None, master_instance_id=None, master_instance_name=None, master_region=None, _configuration=None):  # noqa: E501
        """DescribeDBDisasterRecoveryInstancesResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._disaster_recovery_instances = None
        self._dr_dts_task_id = None
        self._dr_dts_task_name = None
        self._dr_dts_task_status = None
        self._dr_seconds_behind_master = None
        self._master_instance_id = None
        self._master_instance_name = None
        self._master_region = None
        self.discriminator = None

        if disaster_recovery_instances is not None:
            self.disaster_recovery_instances = disaster_recovery_instances
        if dr_dts_task_id is not None:
            self.dr_dts_task_id = dr_dts_task_id
        if dr_dts_task_name is not None:
            self.dr_dts_task_name = dr_dts_task_name
        if dr_dts_task_status is not None:
            self.dr_dts_task_status = dr_dts_task_status
        if dr_seconds_behind_master is not None:
            self.dr_seconds_behind_master = dr_seconds_behind_master
        if master_instance_id is not None:
            self.master_instance_id = master_instance_id
        if master_instance_name is not None:
            self.master_instance_name = master_instance_name
        if master_region is not None:
            self.master_region = master_region

    @property
    def disaster_recovery_instances(self):
        """Gets the disaster_recovery_instances of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501


        :return: The disaster_recovery_instances of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501
        :rtype: list[DisasterRecoveryInstanceForDescribeDBDisasterRecoveryInstancesOutput]
        """
        return self._disaster_recovery_instances

    @disaster_recovery_instances.setter
    def disaster_recovery_instances(self, disaster_recovery_instances):
        """Sets the disaster_recovery_instances of this DescribeDBDisasterRecoveryInstancesResponse.


        :param disaster_recovery_instances: The disaster_recovery_instances of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501
        :type: list[DisasterRecoveryInstanceForDescribeDBDisasterRecoveryInstancesOutput]
        """

        self._disaster_recovery_instances = disaster_recovery_instances

    @property
    def dr_dts_task_id(self):
        """Gets the dr_dts_task_id of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501


        :return: The dr_dts_task_id of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501
        :rtype: str
        """
        return self._dr_dts_task_id

    @dr_dts_task_id.setter
    def dr_dts_task_id(self, dr_dts_task_id):
        """Sets the dr_dts_task_id of this DescribeDBDisasterRecoveryInstancesResponse.


        :param dr_dts_task_id: The dr_dts_task_id of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501
        :type: str
        """

        self._dr_dts_task_id = dr_dts_task_id

    @property
    def dr_dts_task_name(self):
        """Gets the dr_dts_task_name of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501


        :return: The dr_dts_task_name of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501
        :rtype: str
        """
        return self._dr_dts_task_name

    @dr_dts_task_name.setter
    def dr_dts_task_name(self, dr_dts_task_name):
        """Sets the dr_dts_task_name of this DescribeDBDisasterRecoveryInstancesResponse.


        :param dr_dts_task_name: The dr_dts_task_name of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501
        :type: str
        """

        self._dr_dts_task_name = dr_dts_task_name

    @property
    def dr_dts_task_status(self):
        """Gets the dr_dts_task_status of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501


        :return: The dr_dts_task_status of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501
        :rtype: str
        """
        return self._dr_dts_task_status

    @dr_dts_task_status.setter
    def dr_dts_task_status(self, dr_dts_task_status):
        """Sets the dr_dts_task_status of this DescribeDBDisasterRecoveryInstancesResponse.


        :param dr_dts_task_status: The dr_dts_task_status of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501
        :type: str
        """

        self._dr_dts_task_status = dr_dts_task_status

    @property
    def dr_seconds_behind_master(self):
        """Gets the dr_seconds_behind_master of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501


        :return: The dr_seconds_behind_master of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501
        :rtype: int
        """
        return self._dr_seconds_behind_master

    @dr_seconds_behind_master.setter
    def dr_seconds_behind_master(self, dr_seconds_behind_master):
        """Sets the dr_seconds_behind_master of this DescribeDBDisasterRecoveryInstancesResponse.


        :param dr_seconds_behind_master: The dr_seconds_behind_master of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501
        :type: int
        """

        self._dr_seconds_behind_master = dr_seconds_behind_master

    @property
    def master_instance_id(self):
        """Gets the master_instance_id of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501


        :return: The master_instance_id of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501
        :rtype: str
        """
        return self._master_instance_id

    @master_instance_id.setter
    def master_instance_id(self, master_instance_id):
        """Sets the master_instance_id of this DescribeDBDisasterRecoveryInstancesResponse.


        :param master_instance_id: The master_instance_id of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501
        :type: str
        """

        self._master_instance_id = master_instance_id

    @property
    def master_instance_name(self):
        """Gets the master_instance_name of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501


        :return: The master_instance_name of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501
        :rtype: str
        """
        return self._master_instance_name

    @master_instance_name.setter
    def master_instance_name(self, master_instance_name):
        """Sets the master_instance_name of this DescribeDBDisasterRecoveryInstancesResponse.


        :param master_instance_name: The master_instance_name of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501
        :type: str
        """

        self._master_instance_name = master_instance_name

    @property
    def master_region(self):
        """Gets the master_region of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501


        :return: The master_region of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501
        :rtype: str
        """
        return self._master_region

    @master_region.setter
    def master_region(self, master_region):
        """Sets the master_region of this DescribeDBDisasterRecoveryInstancesResponse.


        :param master_region: The master_region of this DescribeDBDisasterRecoveryInstancesResponse.  # noqa: E501
        :type: str
        """

        self._master_region = master_region

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DescribeDBDisasterRecoveryInstancesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DescribeDBDisasterRecoveryInstancesResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DescribeDBDisasterRecoveryInstancesResponse):
            return True

        return self.to_dict() != other.to_dict()
