# coding: utf-8

"""
    fwcenter

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ModifyAddressBookListRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_detail_list': 'list[AddressDetailListForModifyAddressBookListInput]',
        'cloud_firewall_id': 'str',
        'group_uuid': 'str',
        'modify_type': 'str'
    }

    attribute_map = {
        'address_detail_list': 'AddressDetailList',
        'cloud_firewall_id': 'CloudFirewallId',
        'group_uuid': 'GroupUuid',
        'modify_type': 'ModifyType'
    }

    def __init__(self, address_detail_list=None, cloud_firewall_id=None, group_uuid=None, modify_type=None, _configuration=None):  # noqa: E501
        """ModifyAddressBookListRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address_detail_list = None
        self._cloud_firewall_id = None
        self._group_uuid = None
        self._modify_type = None
        self.discriminator = None

        if address_detail_list is not None:
            self.address_detail_list = address_detail_list
        if cloud_firewall_id is not None:
            self.cloud_firewall_id = cloud_firewall_id
        self.group_uuid = group_uuid
        self.modify_type = modify_type

    @property
    def address_detail_list(self):
        """Gets the address_detail_list of this ModifyAddressBookListRequest.  # noqa: E501


        :return: The address_detail_list of this ModifyAddressBookListRequest.  # noqa: E501
        :rtype: list[AddressDetailListForModifyAddressBookListInput]
        """
        return self._address_detail_list

    @address_detail_list.setter
    def address_detail_list(self, address_detail_list):
        """Sets the address_detail_list of this ModifyAddressBookListRequest.


        :param address_detail_list: The address_detail_list of this ModifyAddressBookListRequest.  # noqa: E501
        :type: list[AddressDetailListForModifyAddressBookListInput]
        """

        self._address_detail_list = address_detail_list

    @property
    def cloud_firewall_id(self):
        """Gets the cloud_firewall_id of this ModifyAddressBookListRequest.  # noqa: E501


        :return: The cloud_firewall_id of this ModifyAddressBookListRequest.  # noqa: E501
        :rtype: str
        """
        return self._cloud_firewall_id

    @cloud_firewall_id.setter
    def cloud_firewall_id(self, cloud_firewall_id):
        """Sets the cloud_firewall_id of this ModifyAddressBookListRequest.


        :param cloud_firewall_id: The cloud_firewall_id of this ModifyAddressBookListRequest.  # noqa: E501
        :type: str
        """

        self._cloud_firewall_id = cloud_firewall_id

    @property
    def group_uuid(self):
        """Gets the group_uuid of this ModifyAddressBookListRequest.  # noqa: E501


        :return: The group_uuid of this ModifyAddressBookListRequest.  # noqa: E501
        :rtype: str
        """
        return self._group_uuid

    @group_uuid.setter
    def group_uuid(self, group_uuid):
        """Sets the group_uuid of this ModifyAddressBookListRequest.


        :param group_uuid: The group_uuid of this ModifyAddressBookListRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and group_uuid is None:
            raise ValueError("Invalid value for `group_uuid`, must not be `None`")  # noqa: E501

        self._group_uuid = group_uuid

    @property
    def modify_type(self):
        """Gets the modify_type of this ModifyAddressBookListRequest.  # noqa: E501


        :return: The modify_type of this ModifyAddressBookListRequest.  # noqa: E501
        :rtype: str
        """
        return self._modify_type

    @modify_type.setter
    def modify_type(self, modify_type):
        """Sets the modify_type of this ModifyAddressBookListRequest.


        :param modify_type: The modify_type of this ModifyAddressBookListRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and modify_type is None:
            raise ValueError("Invalid value for `modify_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Add", "Remove"]  # noqa: E501
        if (self._configuration.client_side_validation and
                modify_type not in allowed_values):
            raise ValueError(
                "Invalid value for `modify_type` ({0}), must be one of {1}"  # noqa: E501
                .format(modify_type, allowed_values)
            )

        self._modify_type = modify_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModifyAddressBookListRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModifyAddressBookListRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModifyAddressBookListRequest):
            return True

        return self.to_dict() != other.to_dict()
