# coding: utf-8

"""
    fwcenter

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateNatFirewallRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bandwidth': 'int',
        'cloud_firewall_id': 'str',
        'firewall_cidr': 'str',
        'nat_firewall_name': 'str',
        'nat_gateway_id': 'str',
        'project_name': 'str',
        'tags': 'list[TagForCreateNatFirewallInput]'
    }

    attribute_map = {
        'bandwidth': 'Bandwidth',
        'cloud_firewall_id': 'CloudFirewallId',
        'firewall_cidr': 'FirewallCidr',
        'nat_firewall_name': 'NatFirewallName',
        'nat_gateway_id': 'NatGatewayId',
        'project_name': 'ProjectName',
        'tags': 'Tags'
    }

    def __init__(self, bandwidth=None, cloud_firewall_id=None, firewall_cidr=None, nat_firewall_name=None, nat_gateway_id=None, project_name=None, tags=None, _configuration=None):  # noqa: E501
        """CreateNatFirewallRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bandwidth = None
        self._cloud_firewall_id = None
        self._firewall_cidr = None
        self._nat_firewall_name = None
        self._nat_gateway_id = None
        self._project_name = None
        self._tags = None
        self.discriminator = None

        self.bandwidth = bandwidth
        if cloud_firewall_id is not None:
            self.cloud_firewall_id = cloud_firewall_id
        self.firewall_cidr = firewall_cidr
        self.nat_firewall_name = nat_firewall_name
        self.nat_gateway_id = nat_gateway_id
        if project_name is not None:
            self.project_name = project_name
        if tags is not None:
            self.tags = tags

    @property
    def bandwidth(self):
        """Gets the bandwidth of this CreateNatFirewallRequest.  # noqa: E501


        :return: The bandwidth of this CreateNatFirewallRequest.  # noqa: E501
        :rtype: int
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth):
        """Sets the bandwidth of this CreateNatFirewallRequest.


        :param bandwidth: The bandwidth of this CreateNatFirewallRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and bandwidth is None:
            raise ValueError("Invalid value for `bandwidth`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                bandwidth is not None and bandwidth < 10):  # noqa: E501
            raise ValueError("Invalid value for `bandwidth`, must be a value greater than or equal to `10`")  # noqa: E501

        self._bandwidth = bandwidth

    @property
    def cloud_firewall_id(self):
        """Gets the cloud_firewall_id of this CreateNatFirewallRequest.  # noqa: E501


        :return: The cloud_firewall_id of this CreateNatFirewallRequest.  # noqa: E501
        :rtype: str
        """
        return self._cloud_firewall_id

    @cloud_firewall_id.setter
    def cloud_firewall_id(self, cloud_firewall_id):
        """Sets the cloud_firewall_id of this CreateNatFirewallRequest.


        :param cloud_firewall_id: The cloud_firewall_id of this CreateNatFirewallRequest.  # noqa: E501
        :type: str
        """

        self._cloud_firewall_id = cloud_firewall_id

    @property
    def firewall_cidr(self):
        """Gets the firewall_cidr of this CreateNatFirewallRequest.  # noqa: E501


        :return: The firewall_cidr of this CreateNatFirewallRequest.  # noqa: E501
        :rtype: str
        """
        return self._firewall_cidr

    @firewall_cidr.setter
    def firewall_cidr(self, firewall_cidr):
        """Sets the firewall_cidr of this CreateNatFirewallRequest.


        :param firewall_cidr: The firewall_cidr of this CreateNatFirewallRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and firewall_cidr is None:
            raise ValueError("Invalid value for `firewall_cidr`, must not be `None`")  # noqa: E501

        self._firewall_cidr = firewall_cidr

    @property
    def nat_firewall_name(self):
        """Gets the nat_firewall_name of this CreateNatFirewallRequest.  # noqa: E501


        :return: The nat_firewall_name of this CreateNatFirewallRequest.  # noqa: E501
        :rtype: str
        """
        return self._nat_firewall_name

    @nat_firewall_name.setter
    def nat_firewall_name(self, nat_firewall_name):
        """Sets the nat_firewall_name of this CreateNatFirewallRequest.


        :param nat_firewall_name: The nat_firewall_name of this CreateNatFirewallRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and nat_firewall_name is None:
            raise ValueError("Invalid value for `nat_firewall_name`, must not be `None`")  # noqa: E501

        self._nat_firewall_name = nat_firewall_name

    @property
    def nat_gateway_id(self):
        """Gets the nat_gateway_id of this CreateNatFirewallRequest.  # noqa: E501


        :return: The nat_gateway_id of this CreateNatFirewallRequest.  # noqa: E501
        :rtype: str
        """
        return self._nat_gateway_id

    @nat_gateway_id.setter
    def nat_gateway_id(self, nat_gateway_id):
        """Sets the nat_gateway_id of this CreateNatFirewallRequest.


        :param nat_gateway_id: The nat_gateway_id of this CreateNatFirewallRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and nat_gateway_id is None:
            raise ValueError("Invalid value for `nat_gateway_id`, must not be `None`")  # noqa: E501

        self._nat_gateway_id = nat_gateway_id

    @property
    def project_name(self):
        """Gets the project_name of this CreateNatFirewallRequest.  # noqa: E501


        :return: The project_name of this CreateNatFirewallRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this CreateNatFirewallRequest.


        :param project_name: The project_name of this CreateNatFirewallRequest.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def tags(self):
        """Gets the tags of this CreateNatFirewallRequest.  # noqa: E501


        :return: The tags of this CreateNatFirewallRequest.  # noqa: E501
        :rtype: list[TagForCreateNatFirewallInput]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateNatFirewallRequest.


        :param tags: The tags of this CreateNatFirewallRequest.  # noqa: E501
        :type: list[TagForCreateNatFirewallInput]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateNatFirewallRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateNatFirewallRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateNatFirewallRequest):
            return True

        return self.to_dict() != other.to_dict()
