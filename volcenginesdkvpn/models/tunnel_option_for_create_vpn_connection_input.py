# coding: utf-8

"""
    vpn

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class TunnelOptionForCreateVpnConnectionInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_gateway_id': 'str',
        'dpd_action': 'str',
        'ike_config': 'IkeConfigForCreateVpnConnectionInput',
        'ipsec_config': 'IpsecConfigForCreateVpnConnectionInput',
        'nat_traversal': 'bool',
        'role': 'str'
    }

    attribute_map = {
        'customer_gateway_id': 'CustomerGatewayId',
        'dpd_action': 'DpdAction',
        'ike_config': 'IkeConfig',
        'ipsec_config': 'IpsecConfig',
        'nat_traversal': 'NatTraversal',
        'role': 'Role'
    }

    def __init__(self, customer_gateway_id=None, dpd_action=None, ike_config=None, ipsec_config=None, nat_traversal=None, role=None, _configuration=None):  # noqa: E501
        """TunnelOptionForCreateVpnConnectionInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._customer_gateway_id = None
        self._dpd_action = None
        self._ike_config = None
        self._ipsec_config = None
        self._nat_traversal = None
        self._role = None
        self.discriminator = None

        if customer_gateway_id is not None:
            self.customer_gateway_id = customer_gateway_id
        if dpd_action is not None:
            self.dpd_action = dpd_action
        if ike_config is not None:
            self.ike_config = ike_config
        if ipsec_config is not None:
            self.ipsec_config = ipsec_config
        if nat_traversal is not None:
            self.nat_traversal = nat_traversal
        if role is not None:
            self.role = role

    @property
    def customer_gateway_id(self):
        """Gets the customer_gateway_id of this TunnelOptionForCreateVpnConnectionInput.  # noqa: E501


        :return: The customer_gateway_id of this TunnelOptionForCreateVpnConnectionInput.  # noqa: E501
        :rtype: str
        """
        return self._customer_gateway_id

    @customer_gateway_id.setter
    def customer_gateway_id(self, customer_gateway_id):
        """Sets the customer_gateway_id of this TunnelOptionForCreateVpnConnectionInput.


        :param customer_gateway_id: The customer_gateway_id of this TunnelOptionForCreateVpnConnectionInput.  # noqa: E501
        :type: str
        """

        self._customer_gateway_id = customer_gateway_id

    @property
    def dpd_action(self):
        """Gets the dpd_action of this TunnelOptionForCreateVpnConnectionInput.  # noqa: E501


        :return: The dpd_action of this TunnelOptionForCreateVpnConnectionInput.  # noqa: E501
        :rtype: str
        """
        return self._dpd_action

    @dpd_action.setter
    def dpd_action(self, dpd_action):
        """Sets the dpd_action of this TunnelOptionForCreateVpnConnectionInput.


        :param dpd_action: The dpd_action of this TunnelOptionForCreateVpnConnectionInput.  # noqa: E501
        :type: str
        """

        self._dpd_action = dpd_action

    @property
    def ike_config(self):
        """Gets the ike_config of this TunnelOptionForCreateVpnConnectionInput.  # noqa: E501


        :return: The ike_config of this TunnelOptionForCreateVpnConnectionInput.  # noqa: E501
        :rtype: IkeConfigForCreateVpnConnectionInput
        """
        return self._ike_config

    @ike_config.setter
    def ike_config(self, ike_config):
        """Sets the ike_config of this TunnelOptionForCreateVpnConnectionInput.


        :param ike_config: The ike_config of this TunnelOptionForCreateVpnConnectionInput.  # noqa: E501
        :type: IkeConfigForCreateVpnConnectionInput
        """

        self._ike_config = ike_config

    @property
    def ipsec_config(self):
        """Gets the ipsec_config of this TunnelOptionForCreateVpnConnectionInput.  # noqa: E501


        :return: The ipsec_config of this TunnelOptionForCreateVpnConnectionInput.  # noqa: E501
        :rtype: IpsecConfigForCreateVpnConnectionInput
        """
        return self._ipsec_config

    @ipsec_config.setter
    def ipsec_config(self, ipsec_config):
        """Sets the ipsec_config of this TunnelOptionForCreateVpnConnectionInput.


        :param ipsec_config: The ipsec_config of this TunnelOptionForCreateVpnConnectionInput.  # noqa: E501
        :type: IpsecConfigForCreateVpnConnectionInput
        """

        self._ipsec_config = ipsec_config

    @property
    def nat_traversal(self):
        """Gets the nat_traversal of this TunnelOptionForCreateVpnConnectionInput.  # noqa: E501


        :return: The nat_traversal of this TunnelOptionForCreateVpnConnectionInput.  # noqa: E501
        :rtype: bool
        """
        return self._nat_traversal

    @nat_traversal.setter
    def nat_traversal(self, nat_traversal):
        """Sets the nat_traversal of this TunnelOptionForCreateVpnConnectionInput.


        :param nat_traversal: The nat_traversal of this TunnelOptionForCreateVpnConnectionInput.  # noqa: E501
        :type: bool
        """

        self._nat_traversal = nat_traversal

    @property
    def role(self):
        """Gets the role of this TunnelOptionForCreateVpnConnectionInput.  # noqa: E501


        :return: The role of this TunnelOptionForCreateVpnConnectionInput.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this TunnelOptionForCreateVpnConnectionInput.


        :param role: The role of this TunnelOptionForCreateVpnConnectionInput.  # noqa: E501
        :type: str
        """

        self._role = role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TunnelOptionForCreateVpnConnectionInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TunnelOptionForCreateVpnConnectionInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TunnelOptionForCreateVpnConnectionInput):
            return True

        return self.to_dict() != other.to_dict()
