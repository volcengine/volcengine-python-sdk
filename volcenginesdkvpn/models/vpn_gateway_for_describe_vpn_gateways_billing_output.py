# coding: utf-8

"""
    vpn

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class VpnGatewayForDescribeVpnGatewaysBillingOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'asn': 'int',
        'bandwidth': 'int',
        'billing_type': 'int',
        'business_status': 'str',
        'connection_count': 'int',
        'creation_time': 'str',
        'deleted_time': 'str',
        'description': 'str',
        'dual_tunnel_enabled': 'bool',
        'expired_time': 'str',
        'ip_address': 'str',
        'ipsec_enabled': 'bool',
        'is_blocked': 'bool',
        'lock_reason': 'str',
        'overdue_time': 'str',
        'project_name': 'str',
        'route_count': 'int',
        'secondary_ip_address': 'str',
        'secondary_subnet_id': 'str',
        'ssl_enabled': 'bool',
        'ssl_max_connections': 'int',
        'status': 'str',
        'subnet_id': 'str',
        'tags': 'list[TagForDescribeVpnGatewaysBillingOutput]',
        'update_time': 'str',
        'vpc_id': 'str',
        'vpn_gateway_id': 'str',
        'vpn_gateway_name': 'str'
    }

    attribute_map = {
        'account_id': 'AccountId',
        'asn': 'Asn',
        'bandwidth': 'Bandwidth',
        'billing_type': 'BillingType',
        'business_status': 'BusinessStatus',
        'connection_count': 'ConnectionCount',
        'creation_time': 'CreationTime',
        'deleted_time': 'DeletedTime',
        'description': 'Description',
        'dual_tunnel_enabled': 'DualTunnelEnabled',
        'expired_time': 'ExpiredTime',
        'ip_address': 'IpAddress',
        'ipsec_enabled': 'IpsecEnabled',
        'is_blocked': 'IsBlocked',
        'lock_reason': 'LockReason',
        'overdue_time': 'OverdueTime',
        'project_name': 'ProjectName',
        'route_count': 'RouteCount',
        'secondary_ip_address': 'SecondaryIpAddress',
        'secondary_subnet_id': 'SecondarySubnetId',
        'ssl_enabled': 'SslEnabled',
        'ssl_max_connections': 'SslMaxConnections',
        'status': 'Status',
        'subnet_id': 'SubnetId',
        'tags': 'Tags',
        'update_time': 'UpdateTime',
        'vpc_id': 'VpcId',
        'vpn_gateway_id': 'VpnGatewayId',
        'vpn_gateway_name': 'VpnGatewayName'
    }

    def __init__(self, account_id=None, asn=None, bandwidth=None, billing_type=None, business_status=None, connection_count=None, creation_time=None, deleted_time=None, description=None, dual_tunnel_enabled=None, expired_time=None, ip_address=None, ipsec_enabled=None, is_blocked=None, lock_reason=None, overdue_time=None, project_name=None, route_count=None, secondary_ip_address=None, secondary_subnet_id=None, ssl_enabled=None, ssl_max_connections=None, status=None, subnet_id=None, tags=None, update_time=None, vpc_id=None, vpn_gateway_id=None, vpn_gateway_name=None, _configuration=None):  # noqa: E501
        """VpnGatewayForDescribeVpnGatewaysBillingOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._asn = None
        self._bandwidth = None
        self._billing_type = None
        self._business_status = None
        self._connection_count = None
        self._creation_time = None
        self._deleted_time = None
        self._description = None
        self._dual_tunnel_enabled = None
        self._expired_time = None
        self._ip_address = None
        self._ipsec_enabled = None
        self._is_blocked = None
        self._lock_reason = None
        self._overdue_time = None
        self._project_name = None
        self._route_count = None
        self._secondary_ip_address = None
        self._secondary_subnet_id = None
        self._ssl_enabled = None
        self._ssl_max_connections = None
        self._status = None
        self._subnet_id = None
        self._tags = None
        self._update_time = None
        self._vpc_id = None
        self._vpn_gateway_id = None
        self._vpn_gateway_name = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if asn is not None:
            self.asn = asn
        if bandwidth is not None:
            self.bandwidth = bandwidth
        if billing_type is not None:
            self.billing_type = billing_type
        if business_status is not None:
            self.business_status = business_status
        if connection_count is not None:
            self.connection_count = connection_count
        if creation_time is not None:
            self.creation_time = creation_time
        if deleted_time is not None:
            self.deleted_time = deleted_time
        if description is not None:
            self.description = description
        if dual_tunnel_enabled is not None:
            self.dual_tunnel_enabled = dual_tunnel_enabled
        if expired_time is not None:
            self.expired_time = expired_time
        if ip_address is not None:
            self.ip_address = ip_address
        if ipsec_enabled is not None:
            self.ipsec_enabled = ipsec_enabled
        if is_blocked is not None:
            self.is_blocked = is_blocked
        if lock_reason is not None:
            self.lock_reason = lock_reason
        if overdue_time is not None:
            self.overdue_time = overdue_time
        if project_name is not None:
            self.project_name = project_name
        if route_count is not None:
            self.route_count = route_count
        if secondary_ip_address is not None:
            self.secondary_ip_address = secondary_ip_address
        if secondary_subnet_id is not None:
            self.secondary_subnet_id = secondary_subnet_id
        if ssl_enabled is not None:
            self.ssl_enabled = ssl_enabled
        if ssl_max_connections is not None:
            self.ssl_max_connections = ssl_max_connections
        if status is not None:
            self.status = status
        if subnet_id is not None:
            self.subnet_id = subnet_id
        if tags is not None:
            self.tags = tags
        if update_time is not None:
            self.update_time = update_time
        if vpc_id is not None:
            self.vpc_id = vpc_id
        if vpn_gateway_id is not None:
            self.vpn_gateway_id = vpn_gateway_id
        if vpn_gateway_name is not None:
            self.vpn_gateway_name = vpn_gateway_name

    @property
    def account_id(self):
        """Gets the account_id of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The account_id of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param account_id: The account_id of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def asn(self):
        """Gets the asn of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The asn of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: int
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param asn: The asn of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: int
        """

        self._asn = asn

    @property
    def bandwidth(self):
        """Gets the bandwidth of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The bandwidth of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: int
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth):
        """Sets the bandwidth of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param bandwidth: The bandwidth of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: int
        """

        self._bandwidth = bandwidth

    @property
    def billing_type(self):
        """Gets the billing_type of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The billing_type of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: int
        """
        return self._billing_type

    @billing_type.setter
    def billing_type(self, billing_type):
        """Sets the billing_type of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param billing_type: The billing_type of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: int
        """

        self._billing_type = billing_type

    @property
    def business_status(self):
        """Gets the business_status of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The business_status of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: str
        """
        return self._business_status

    @business_status.setter
    def business_status(self, business_status):
        """Sets the business_status of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param business_status: The business_status of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: str
        """

        self._business_status = business_status

    @property
    def connection_count(self):
        """Gets the connection_count of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The connection_count of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: int
        """
        return self._connection_count

    @connection_count.setter
    def connection_count(self, connection_count):
        """Sets the connection_count of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param connection_count: The connection_count of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: int
        """

        self._connection_count = connection_count

    @property
    def creation_time(self):
        """Gets the creation_time of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The creation_time of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param creation_time: The creation_time of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: str
        """

        self._creation_time = creation_time

    @property
    def deleted_time(self):
        """Gets the deleted_time of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The deleted_time of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: str
        """
        return self._deleted_time

    @deleted_time.setter
    def deleted_time(self, deleted_time):
        """Sets the deleted_time of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param deleted_time: The deleted_time of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: str
        """

        self._deleted_time = deleted_time

    @property
    def description(self):
        """Gets the description of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The description of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param description: The description of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dual_tunnel_enabled(self):
        """Gets the dual_tunnel_enabled of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The dual_tunnel_enabled of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: bool
        """
        return self._dual_tunnel_enabled

    @dual_tunnel_enabled.setter
    def dual_tunnel_enabled(self, dual_tunnel_enabled):
        """Sets the dual_tunnel_enabled of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param dual_tunnel_enabled: The dual_tunnel_enabled of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: bool
        """

        self._dual_tunnel_enabled = dual_tunnel_enabled

    @property
    def expired_time(self):
        """Gets the expired_time of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The expired_time of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: str
        """
        return self._expired_time

    @expired_time.setter
    def expired_time(self, expired_time):
        """Sets the expired_time of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param expired_time: The expired_time of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: str
        """

        self._expired_time = expired_time

    @property
    def ip_address(self):
        """Gets the ip_address of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The ip_address of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param ip_address: The ip_address of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def ipsec_enabled(self):
        """Gets the ipsec_enabled of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The ipsec_enabled of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: bool
        """
        return self._ipsec_enabled

    @ipsec_enabled.setter
    def ipsec_enabled(self, ipsec_enabled):
        """Sets the ipsec_enabled of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param ipsec_enabled: The ipsec_enabled of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: bool
        """

        self._ipsec_enabled = ipsec_enabled

    @property
    def is_blocked(self):
        """Gets the is_blocked of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The is_blocked of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: bool
        """
        return self._is_blocked

    @is_blocked.setter
    def is_blocked(self, is_blocked):
        """Sets the is_blocked of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param is_blocked: The is_blocked of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: bool
        """

        self._is_blocked = is_blocked

    @property
    def lock_reason(self):
        """Gets the lock_reason of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The lock_reason of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: str
        """
        return self._lock_reason

    @lock_reason.setter
    def lock_reason(self, lock_reason):
        """Sets the lock_reason of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param lock_reason: The lock_reason of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: str
        """

        self._lock_reason = lock_reason

    @property
    def overdue_time(self):
        """Gets the overdue_time of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The overdue_time of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: str
        """
        return self._overdue_time

    @overdue_time.setter
    def overdue_time(self, overdue_time):
        """Sets the overdue_time of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param overdue_time: The overdue_time of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: str
        """

        self._overdue_time = overdue_time

    @property
    def project_name(self):
        """Gets the project_name of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The project_name of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param project_name: The project_name of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def route_count(self):
        """Gets the route_count of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The route_count of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: int
        """
        return self._route_count

    @route_count.setter
    def route_count(self, route_count):
        """Sets the route_count of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param route_count: The route_count of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: int
        """

        self._route_count = route_count

    @property
    def secondary_ip_address(self):
        """Gets the secondary_ip_address of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The secondary_ip_address of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: str
        """
        return self._secondary_ip_address

    @secondary_ip_address.setter
    def secondary_ip_address(self, secondary_ip_address):
        """Sets the secondary_ip_address of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param secondary_ip_address: The secondary_ip_address of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: str
        """

        self._secondary_ip_address = secondary_ip_address

    @property
    def secondary_subnet_id(self):
        """Gets the secondary_subnet_id of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The secondary_subnet_id of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: str
        """
        return self._secondary_subnet_id

    @secondary_subnet_id.setter
    def secondary_subnet_id(self, secondary_subnet_id):
        """Sets the secondary_subnet_id of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param secondary_subnet_id: The secondary_subnet_id of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: str
        """

        self._secondary_subnet_id = secondary_subnet_id

    @property
    def ssl_enabled(self):
        """Gets the ssl_enabled of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The ssl_enabled of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: bool
        """
        return self._ssl_enabled

    @ssl_enabled.setter
    def ssl_enabled(self, ssl_enabled):
        """Sets the ssl_enabled of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param ssl_enabled: The ssl_enabled of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: bool
        """

        self._ssl_enabled = ssl_enabled

    @property
    def ssl_max_connections(self):
        """Gets the ssl_max_connections of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The ssl_max_connections of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: int
        """
        return self._ssl_max_connections

    @ssl_max_connections.setter
    def ssl_max_connections(self, ssl_max_connections):
        """Sets the ssl_max_connections of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param ssl_max_connections: The ssl_max_connections of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: int
        """

        self._ssl_max_connections = ssl_max_connections

    @property
    def status(self):
        """Gets the status of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The status of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param status: The status of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def subnet_id(self):
        """Gets the subnet_id of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The subnet_id of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param subnet_id: The subnet_id of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: str
        """

        self._subnet_id = subnet_id

    @property
    def tags(self):
        """Gets the tags of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The tags of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: list[TagForDescribeVpnGatewaysBillingOutput]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param tags: The tags of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: list[TagForDescribeVpnGatewaysBillingOutput]
        """

        self._tags = tags

    @property
    def update_time(self):
        """Gets the update_time of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The update_time of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param update_time: The update_time of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    @property
    def vpc_id(self):
        """Gets the vpc_id of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The vpc_id of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param vpc_id: The vpc_id of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: str
        """

        self._vpc_id = vpc_id

    @property
    def vpn_gateway_id(self):
        """Gets the vpn_gateway_id of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The vpn_gateway_id of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: str
        """
        return self._vpn_gateway_id

    @vpn_gateway_id.setter
    def vpn_gateway_id(self, vpn_gateway_id):
        """Sets the vpn_gateway_id of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param vpn_gateway_id: The vpn_gateway_id of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: str
        """

        self._vpn_gateway_id = vpn_gateway_id

    @property
    def vpn_gateway_name(self):
        """Gets the vpn_gateway_name of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501


        :return: The vpn_gateway_name of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :rtype: str
        """
        return self._vpn_gateway_name

    @vpn_gateway_name.setter
    def vpn_gateway_name(self, vpn_gateway_name):
        """Sets the vpn_gateway_name of this VpnGatewayForDescribeVpnGatewaysBillingOutput.


        :param vpn_gateway_name: The vpn_gateway_name of this VpnGatewayForDescribeVpnGatewaysBillingOutput.  # noqa: E501
        :type: str
        """

        self._vpn_gateway_name = vpn_gateway_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VpnGatewayForDescribeVpnGatewaysBillingOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VpnGatewayForDescribeVpnGatewaysBillingOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VpnGatewayForDescribeVpnGatewaysBillingOutput):
            return True

        return self.to_dict() != other.to_dict()
