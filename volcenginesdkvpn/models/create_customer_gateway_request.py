# coding: utf-8

"""
    vpn

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateCustomerGatewayRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asn': 'int',
        'client_token': 'str',
        'customer_gateway_name': 'str',
        'description': 'str',
        'ip_address': 'str',
        'ip_version': 'str',
        'project_name': 'str'
    }

    attribute_map = {
        'asn': 'Asn',
        'client_token': 'ClientToken',
        'customer_gateway_name': 'CustomerGatewayName',
        'description': 'Description',
        'ip_address': 'IpAddress',
        'ip_version': 'IpVersion',
        'project_name': 'ProjectName'
    }

    def __init__(self, asn=None, client_token=None, customer_gateway_name=None, description=None, ip_address=None, ip_version=None, project_name=None, _configuration=None):  # noqa: E501
        """CreateCustomerGatewayRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._asn = None
        self._client_token = None
        self._customer_gateway_name = None
        self._description = None
        self._ip_address = None
        self._ip_version = None
        self._project_name = None
        self.discriminator = None

        if asn is not None:
            self.asn = asn
        if client_token is not None:
            self.client_token = client_token
        if customer_gateway_name is not None:
            self.customer_gateway_name = customer_gateway_name
        if description is not None:
            self.description = description
        self.ip_address = ip_address
        if ip_version is not None:
            self.ip_version = ip_version
        if project_name is not None:
            self.project_name = project_name

    @property
    def asn(self):
        """Gets the asn of this CreateCustomerGatewayRequest.  # noqa: E501


        :return: The asn of this CreateCustomerGatewayRequest.  # noqa: E501
        :rtype: int
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this CreateCustomerGatewayRequest.


        :param asn: The asn of this CreateCustomerGatewayRequest.  # noqa: E501
        :type: int
        """

        self._asn = asn

    @property
    def client_token(self):
        """Gets the client_token of this CreateCustomerGatewayRequest.  # noqa: E501


        :return: The client_token of this CreateCustomerGatewayRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateCustomerGatewayRequest.


        :param client_token: The client_token of this CreateCustomerGatewayRequest.  # noqa: E501
        :type: str
        """

        self._client_token = client_token

    @property
    def customer_gateway_name(self):
        """Gets the customer_gateway_name of this CreateCustomerGatewayRequest.  # noqa: E501


        :return: The customer_gateway_name of this CreateCustomerGatewayRequest.  # noqa: E501
        :rtype: str
        """
        return self._customer_gateway_name

    @customer_gateway_name.setter
    def customer_gateway_name(self, customer_gateway_name):
        """Sets the customer_gateway_name of this CreateCustomerGatewayRequest.


        :param customer_gateway_name: The customer_gateway_name of this CreateCustomerGatewayRequest.  # noqa: E501
        :type: str
        """

        self._customer_gateway_name = customer_gateway_name

    @property
    def description(self):
        """Gets the description of this CreateCustomerGatewayRequest.  # noqa: E501


        :return: The description of this CreateCustomerGatewayRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateCustomerGatewayRequest.


        :param description: The description of this CreateCustomerGatewayRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def ip_address(self):
        """Gets the ip_address of this CreateCustomerGatewayRequest.  # noqa: E501


        :return: The ip_address of this CreateCustomerGatewayRequest.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this CreateCustomerGatewayRequest.


        :param ip_address: The ip_address of this CreateCustomerGatewayRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self._ip_address = ip_address

    @property
    def ip_version(self):
        """Gets the ip_version of this CreateCustomerGatewayRequest.  # noqa: E501


        :return: The ip_version of this CreateCustomerGatewayRequest.  # noqa: E501
        :rtype: str
        """
        return self._ip_version

    @ip_version.setter
    def ip_version(self, ip_version):
        """Sets the ip_version of this CreateCustomerGatewayRequest.


        :param ip_version: The ip_version of this CreateCustomerGatewayRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["ipv4", "ipv6"]  # noqa: E501
        if (self._configuration.client_side_validation and
                ip_version not in allowed_values):
            raise ValueError(
                "Invalid value for `ip_version` ({0}), must be one of {1}"  # noqa: E501
                .format(ip_version, allowed_values)
            )

        self._ip_version = ip_version

    @property
    def project_name(self):
        """Gets the project_name of this CreateCustomerGatewayRequest.  # noqa: E501


        :return: The project_name of this CreateCustomerGatewayRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this CreateCustomerGatewayRequest.


        :param project_name: The project_name of this CreateCustomerGatewayRequest.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateCustomerGatewayRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCustomerGatewayRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateCustomerGatewayRequest):
            return True

        return self.to_dict() != other.to_dict()
