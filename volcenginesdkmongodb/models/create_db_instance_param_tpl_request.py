# coding: utf-8

"""
    mongodb

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateDBInstanceParamTplRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'db_engine_version': 'str',
        'description': 'str',
        'param_role': 'str',
        'params': 'list[ParamForCreateDBInstanceParamTplInput]',
        'project_name': 'str',
        'template_name': 'str'
    }

    attribute_map = {
        'db_engine_version': 'DBEngineVersion',
        'description': 'Description',
        'param_role': 'ParamRole',
        'params': 'Params',
        'project_name': 'ProjectName',
        'template_name': 'TemplateName'
    }

    def __init__(self, db_engine_version=None, description=None, param_role=None, params=None, project_name=None, template_name=None, _configuration=None):  # noqa: E501
        """CreateDBInstanceParamTplRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._db_engine_version = None
        self._description = None
        self._param_role = None
        self._params = None
        self._project_name = None
        self._template_name = None
        self.discriminator = None

        self.db_engine_version = db_engine_version
        if description is not None:
            self.description = description
        self.param_role = param_role
        if params is not None:
            self.params = params
        if project_name is not None:
            self.project_name = project_name
        self.template_name = template_name

    @property
    def db_engine_version(self):
        """Gets the db_engine_version of this CreateDBInstanceParamTplRequest.  # noqa: E501


        :return: The db_engine_version of this CreateDBInstanceParamTplRequest.  # noqa: E501
        :rtype: str
        """
        return self._db_engine_version

    @db_engine_version.setter
    def db_engine_version(self, db_engine_version):
        """Sets the db_engine_version of this CreateDBInstanceParamTplRequest.


        :param db_engine_version: The db_engine_version of this CreateDBInstanceParamTplRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and db_engine_version is None:
            raise ValueError("Invalid value for `db_engine_version`, must not be `None`")  # noqa: E501

        self._db_engine_version = db_engine_version

    @property
    def description(self):
        """Gets the description of this CreateDBInstanceParamTplRequest.  # noqa: E501


        :return: The description of this CreateDBInstanceParamTplRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateDBInstanceParamTplRequest.


        :param description: The description of this CreateDBInstanceParamTplRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def param_role(self):
        """Gets the param_role of this CreateDBInstanceParamTplRequest.  # noqa: E501


        :return: The param_role of this CreateDBInstanceParamTplRequest.  # noqa: E501
        :rtype: str
        """
        return self._param_role

    @param_role.setter
    def param_role(self, param_role):
        """Sets the param_role of this CreateDBInstanceParamTplRequest.


        :param param_role: The param_role of this CreateDBInstanceParamTplRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and param_role is None:
            raise ValueError("Invalid value for `param_role`, must not be `None`")  # noqa: E501

        self._param_role = param_role

    @property
    def params(self):
        """Gets the params of this CreateDBInstanceParamTplRequest.  # noqa: E501


        :return: The params of this CreateDBInstanceParamTplRequest.  # noqa: E501
        :rtype: list[ParamForCreateDBInstanceParamTplInput]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this CreateDBInstanceParamTplRequest.


        :param params: The params of this CreateDBInstanceParamTplRequest.  # noqa: E501
        :type: list[ParamForCreateDBInstanceParamTplInput]
        """

        self._params = params

    @property
    def project_name(self):
        """Gets the project_name of this CreateDBInstanceParamTplRequest.  # noqa: E501


        :return: The project_name of this CreateDBInstanceParamTplRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this CreateDBInstanceParamTplRequest.


        :param project_name: The project_name of this CreateDBInstanceParamTplRequest.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def template_name(self):
        """Gets the template_name of this CreateDBInstanceParamTplRequest.  # noqa: E501


        :return: The template_name of this CreateDBInstanceParamTplRequest.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this CreateDBInstanceParamTplRequest.


        :param template_name: The template_name of this CreateDBInstanceParamTplRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")  # noqa: E501

        self._template_name = template_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateDBInstanceParamTplRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateDBInstanceParamTplRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateDBInstanceParamTplRequest):
            return True

        return self.to_dict() != other.to_dict()
