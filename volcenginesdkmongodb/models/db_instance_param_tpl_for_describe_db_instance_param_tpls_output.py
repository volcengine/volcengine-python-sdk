# coding: utf-8

"""
    mongodb

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DBInstanceParamTplForDescribeDBInstanceParamTplsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_time': 'str',
        'db_engine_version': 'str',
        'description': 'str',
        'need_restart': 'bool',
        'param_count': 'int',
        'param_role': 'str',
        'template_id': 'str',
        'template_name': 'str',
        'template_source': 'str',
        'update_time': 'str'
    }

    attribute_map = {
        'create_time': 'CreateTime',
        'db_engine_version': 'DBEngineVersion',
        'description': 'Description',
        'need_restart': 'NeedRestart',
        'param_count': 'ParamCount',
        'param_role': 'ParamRole',
        'template_id': 'TemplateId',
        'template_name': 'TemplateName',
        'template_source': 'TemplateSource',
        'update_time': 'UpdateTime'
    }

    def __init__(self, create_time=None, db_engine_version=None, description=None, need_restart=None, param_count=None, param_role=None, template_id=None, template_name=None, template_source=None, update_time=None, _configuration=None):  # noqa: E501
        """DBInstanceParamTplForDescribeDBInstanceParamTplsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._create_time = None
        self._db_engine_version = None
        self._description = None
        self._need_restart = None
        self._param_count = None
        self._param_role = None
        self._template_id = None
        self._template_name = None
        self._template_source = None
        self._update_time = None
        self.discriminator = None

        if create_time is not None:
            self.create_time = create_time
        if db_engine_version is not None:
            self.db_engine_version = db_engine_version
        if description is not None:
            self.description = description
        if need_restart is not None:
            self.need_restart = need_restart
        if param_count is not None:
            self.param_count = param_count
        if param_role is not None:
            self.param_role = param_role
        if template_id is not None:
            self.template_id = template_id
        if template_name is not None:
            self.template_name = template_name
        if template_source is not None:
            self.template_source = template_source
        if update_time is not None:
            self.update_time = update_time

    @property
    def create_time(self):
        """Gets the create_time of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501


        :return: The create_time of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.


        :param create_time: The create_time of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def db_engine_version(self):
        """Gets the db_engine_version of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501


        :return: The db_engine_version of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501
        :rtype: str
        """
        return self._db_engine_version

    @db_engine_version.setter
    def db_engine_version(self, db_engine_version):
        """Sets the db_engine_version of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.


        :param db_engine_version: The db_engine_version of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501
        :type: str
        """

        self._db_engine_version = db_engine_version

    @property
    def description(self):
        """Gets the description of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501


        :return: The description of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.


        :param description: The description of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def need_restart(self):
        """Gets the need_restart of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501


        :return: The need_restart of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501
        :rtype: bool
        """
        return self._need_restart

    @need_restart.setter
    def need_restart(self, need_restart):
        """Sets the need_restart of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.


        :param need_restart: The need_restart of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501
        :type: bool
        """

        self._need_restart = need_restart

    @property
    def param_count(self):
        """Gets the param_count of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501


        :return: The param_count of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501
        :rtype: int
        """
        return self._param_count

    @param_count.setter
    def param_count(self, param_count):
        """Sets the param_count of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.


        :param param_count: The param_count of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501
        :type: int
        """

        self._param_count = param_count

    @property
    def param_role(self):
        """Gets the param_role of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501


        :return: The param_role of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501
        :rtype: str
        """
        return self._param_role

    @param_role.setter
    def param_role(self, param_role):
        """Sets the param_role of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.


        :param param_role: The param_role of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501
        :type: str
        """

        self._param_role = param_role

    @property
    def template_id(self):
        """Gets the template_id of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501


        :return: The template_id of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.


        :param template_id: The template_id of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    @property
    def template_name(self):
        """Gets the template_name of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501


        :return: The template_name of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.


        :param template_name: The template_name of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501
        :type: str
        """

        self._template_name = template_name

    @property
    def template_source(self):
        """Gets the template_source of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501


        :return: The template_source of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501
        :rtype: str
        """
        return self._template_source

    @template_source.setter
    def template_source(self, template_source):
        """Sets the template_source of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.


        :param template_source: The template_source of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501
        :type: str
        """

        self._template_source = template_source

    @property
    def update_time(self):
        """Gets the update_time of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501


        :return: The update_time of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.


        :param update_time: The update_time of this DBInstanceParamTplForDescribeDBInstanceParamTplsOutput.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DBInstanceParamTplForDescribeDBInstanceParamTplsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DBInstanceParamTplForDescribeDBInstanceParamTplsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DBInstanceParamTplForDescribeDBInstanceParamTplsOutput):
            return True

        return self.to_dict() != other.to_dict()
