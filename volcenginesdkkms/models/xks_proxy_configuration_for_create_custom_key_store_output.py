# coding: utf-8

"""
    kms

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class XksProxyConfigurationForCreateCustomKeyStoreOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_key': 'str',
        'connectivity': 'str',
        'uri_endpoint': 'str',
        'uri_path': 'str',
        'vpc_endpoint_service_name': 'str'
    }

    attribute_map = {
        'access_key': 'AccessKey',
        'connectivity': 'Connectivity',
        'uri_endpoint': 'UriEndpoint',
        'uri_path': 'UriPath',
        'vpc_endpoint_service_name': 'VpcEndpointServiceName'
    }

    def __init__(self, access_key=None, connectivity=None, uri_endpoint=None, uri_path=None, vpc_endpoint_service_name=None, _configuration=None):  # noqa: E501
        """XksProxyConfigurationForCreateCustomKeyStoreOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_key = None
        self._connectivity = None
        self._uri_endpoint = None
        self._uri_path = None
        self._vpc_endpoint_service_name = None
        self.discriminator = None

        if access_key is not None:
            self.access_key = access_key
        if connectivity is not None:
            self.connectivity = connectivity
        if uri_endpoint is not None:
            self.uri_endpoint = uri_endpoint
        if uri_path is not None:
            self.uri_path = uri_path
        if vpc_endpoint_service_name is not None:
            self.vpc_endpoint_service_name = vpc_endpoint_service_name

    @property
    def access_key(self):
        """Gets the access_key of this XksProxyConfigurationForCreateCustomKeyStoreOutput.  # noqa: E501


        :return: The access_key of this XksProxyConfigurationForCreateCustomKeyStoreOutput.  # noqa: E501
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this XksProxyConfigurationForCreateCustomKeyStoreOutput.


        :param access_key: The access_key of this XksProxyConfigurationForCreateCustomKeyStoreOutput.  # noqa: E501
        :type: str
        """

        self._access_key = access_key

    @property
    def connectivity(self):
        """Gets the connectivity of this XksProxyConfigurationForCreateCustomKeyStoreOutput.  # noqa: E501


        :return: The connectivity of this XksProxyConfigurationForCreateCustomKeyStoreOutput.  # noqa: E501
        :rtype: str
        """
        return self._connectivity

    @connectivity.setter
    def connectivity(self, connectivity):
        """Sets the connectivity of this XksProxyConfigurationForCreateCustomKeyStoreOutput.


        :param connectivity: The connectivity of this XksProxyConfigurationForCreateCustomKeyStoreOutput.  # noqa: E501
        :type: str
        """

        self._connectivity = connectivity

    @property
    def uri_endpoint(self):
        """Gets the uri_endpoint of this XksProxyConfigurationForCreateCustomKeyStoreOutput.  # noqa: E501


        :return: The uri_endpoint of this XksProxyConfigurationForCreateCustomKeyStoreOutput.  # noqa: E501
        :rtype: str
        """
        return self._uri_endpoint

    @uri_endpoint.setter
    def uri_endpoint(self, uri_endpoint):
        """Sets the uri_endpoint of this XksProxyConfigurationForCreateCustomKeyStoreOutput.


        :param uri_endpoint: The uri_endpoint of this XksProxyConfigurationForCreateCustomKeyStoreOutput.  # noqa: E501
        :type: str
        """

        self._uri_endpoint = uri_endpoint

    @property
    def uri_path(self):
        """Gets the uri_path of this XksProxyConfigurationForCreateCustomKeyStoreOutput.  # noqa: E501


        :return: The uri_path of this XksProxyConfigurationForCreateCustomKeyStoreOutput.  # noqa: E501
        :rtype: str
        """
        return self._uri_path

    @uri_path.setter
    def uri_path(self, uri_path):
        """Sets the uri_path of this XksProxyConfigurationForCreateCustomKeyStoreOutput.


        :param uri_path: The uri_path of this XksProxyConfigurationForCreateCustomKeyStoreOutput.  # noqa: E501
        :type: str
        """

        self._uri_path = uri_path

    @property
    def vpc_endpoint_service_name(self):
        """Gets the vpc_endpoint_service_name of this XksProxyConfigurationForCreateCustomKeyStoreOutput.  # noqa: E501


        :return: The vpc_endpoint_service_name of this XksProxyConfigurationForCreateCustomKeyStoreOutput.  # noqa: E501
        :rtype: str
        """
        return self._vpc_endpoint_service_name

    @vpc_endpoint_service_name.setter
    def vpc_endpoint_service_name(self, vpc_endpoint_service_name):
        """Sets the vpc_endpoint_service_name of this XksProxyConfigurationForCreateCustomKeyStoreOutput.


        :param vpc_endpoint_service_name: The vpc_endpoint_service_name of this XksProxyConfigurationForCreateCustomKeyStoreOutput.  # noqa: E501
        :type: str
        """

        self._vpc_endpoint_service_name = vpc_endpoint_service_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(XksProxyConfigurationForCreateCustomKeyStoreOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XksProxyConfigurationForCreateCustomKeyStoreOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XksProxyConfigurationForCreateCustomKeyStoreOutput):
            return True

        return self.to_dict() != other.to_dict()
