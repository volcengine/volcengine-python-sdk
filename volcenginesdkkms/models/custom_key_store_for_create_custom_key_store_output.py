# coding: utf-8

"""
    kms

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CustomKeyStoreForCreateCustomKeyStoreOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_error_code': 'str',
        'connection_state': 'str',
        'creation_date': 'int',
        'custom_key_store_name': 'str',
        'custom_key_store_type': 'str',
        'id': 'str',
        'trust_anchor_certificate': 'str',
        'uid': 'str',
        'update_date': 'int',
        'xks_proxy_configuration': 'XksProxyConfigurationForCreateCustomKeyStoreOutput'
    }

    attribute_map = {
        'connection_error_code': 'ConnectionErrorCode',
        'connection_state': 'ConnectionState',
        'creation_date': 'CreationDate',
        'custom_key_store_name': 'CustomKeyStoreName',
        'custom_key_store_type': 'CustomKeyStoreType',
        'id': 'ID',
        'trust_anchor_certificate': 'TrustAnchorCertificate',
        'uid': 'UID',
        'update_date': 'UpdateDate',
        'xks_proxy_configuration': 'XksProxyConfiguration'
    }

    def __init__(self, connection_error_code=None, connection_state=None, creation_date=None, custom_key_store_name=None, custom_key_store_type=None, id=None, trust_anchor_certificate=None, uid=None, update_date=None, xks_proxy_configuration=None, _configuration=None):  # noqa: E501
        """CustomKeyStoreForCreateCustomKeyStoreOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._connection_error_code = None
        self._connection_state = None
        self._creation_date = None
        self._custom_key_store_name = None
        self._custom_key_store_type = None
        self._id = None
        self._trust_anchor_certificate = None
        self._uid = None
        self._update_date = None
        self._xks_proxy_configuration = None
        self.discriminator = None

        if connection_error_code is not None:
            self.connection_error_code = connection_error_code
        if connection_state is not None:
            self.connection_state = connection_state
        if creation_date is not None:
            self.creation_date = creation_date
        if custom_key_store_name is not None:
            self.custom_key_store_name = custom_key_store_name
        if custom_key_store_type is not None:
            self.custom_key_store_type = custom_key_store_type
        if id is not None:
            self.id = id
        if trust_anchor_certificate is not None:
            self.trust_anchor_certificate = trust_anchor_certificate
        if uid is not None:
            self.uid = uid
        if update_date is not None:
            self.update_date = update_date
        if xks_proxy_configuration is not None:
            self.xks_proxy_configuration = xks_proxy_configuration

    @property
    def connection_error_code(self):
        """Gets the connection_error_code of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501


        :return: The connection_error_code of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501
        :rtype: str
        """
        return self._connection_error_code

    @connection_error_code.setter
    def connection_error_code(self, connection_error_code):
        """Sets the connection_error_code of this CustomKeyStoreForCreateCustomKeyStoreOutput.


        :param connection_error_code: The connection_error_code of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501
        :type: str
        """

        self._connection_error_code = connection_error_code

    @property
    def connection_state(self):
        """Gets the connection_state of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501


        :return: The connection_state of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501
        :rtype: str
        """
        return self._connection_state

    @connection_state.setter
    def connection_state(self, connection_state):
        """Sets the connection_state of this CustomKeyStoreForCreateCustomKeyStoreOutput.


        :param connection_state: The connection_state of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501
        :type: str
        """

        self._connection_state = connection_state

    @property
    def creation_date(self):
        """Gets the creation_date of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501


        :return: The creation_date of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this CustomKeyStoreForCreateCustomKeyStoreOutput.


        :param creation_date: The creation_date of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501
        :type: int
        """

        self._creation_date = creation_date

    @property
    def custom_key_store_name(self):
        """Gets the custom_key_store_name of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501


        :return: The custom_key_store_name of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501
        :rtype: str
        """
        return self._custom_key_store_name

    @custom_key_store_name.setter
    def custom_key_store_name(self, custom_key_store_name):
        """Sets the custom_key_store_name of this CustomKeyStoreForCreateCustomKeyStoreOutput.


        :param custom_key_store_name: The custom_key_store_name of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501
        :type: str
        """

        self._custom_key_store_name = custom_key_store_name

    @property
    def custom_key_store_type(self):
        """Gets the custom_key_store_type of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501


        :return: The custom_key_store_type of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501
        :rtype: str
        """
        return self._custom_key_store_type

    @custom_key_store_type.setter
    def custom_key_store_type(self, custom_key_store_type):
        """Sets the custom_key_store_type of this CustomKeyStoreForCreateCustomKeyStoreOutput.


        :param custom_key_store_type: The custom_key_store_type of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501
        :type: str
        """

        self._custom_key_store_type = custom_key_store_type

    @property
    def id(self):
        """Gets the id of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501


        :return: The id of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomKeyStoreForCreateCustomKeyStoreOutput.


        :param id: The id of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def trust_anchor_certificate(self):
        """Gets the trust_anchor_certificate of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501


        :return: The trust_anchor_certificate of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501
        :rtype: str
        """
        return self._trust_anchor_certificate

    @trust_anchor_certificate.setter
    def trust_anchor_certificate(self, trust_anchor_certificate):
        """Sets the trust_anchor_certificate of this CustomKeyStoreForCreateCustomKeyStoreOutput.


        :param trust_anchor_certificate: The trust_anchor_certificate of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501
        :type: str
        """

        self._trust_anchor_certificate = trust_anchor_certificate

    @property
    def uid(self):
        """Gets the uid of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501


        :return: The uid of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this CustomKeyStoreForCreateCustomKeyStoreOutput.


        :param uid: The uid of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def update_date(self):
        """Gets the update_date of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501


        :return: The update_date of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501
        :rtype: int
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this CustomKeyStoreForCreateCustomKeyStoreOutput.


        :param update_date: The update_date of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501
        :type: int
        """

        self._update_date = update_date

    @property
    def xks_proxy_configuration(self):
        """Gets the xks_proxy_configuration of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501


        :return: The xks_proxy_configuration of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501
        :rtype: XksProxyConfigurationForCreateCustomKeyStoreOutput
        """
        return self._xks_proxy_configuration

    @xks_proxy_configuration.setter
    def xks_proxy_configuration(self, xks_proxy_configuration):
        """Sets the xks_proxy_configuration of this CustomKeyStoreForCreateCustomKeyStoreOutput.


        :param xks_proxy_configuration: The xks_proxy_configuration of this CustomKeyStoreForCreateCustomKeyStoreOutput.  # noqa: E501
        :type: XksProxyConfigurationForCreateCustomKeyStoreOutput
        """

        self._xks_proxy_configuration = xks_proxy_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomKeyStoreForCreateCustomKeyStoreOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomKeyStoreForCreateCustomKeyStoreOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomKeyStoreForCreateCustomKeyStoreOutput):
            return True

        return self.to_dict() != other.to_dict()
