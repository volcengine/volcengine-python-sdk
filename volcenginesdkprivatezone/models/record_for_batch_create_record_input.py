# coding: utf-8

"""
    private_zone

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class RecordForBatchCreateRecordInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host': 'str',
        'line': 'str',
        'remark': 'str',
        'ttl': 'int',
        'type': 'str',
        'value': 'str',
        'weight': 'int'
    }

    attribute_map = {
        'host': 'Host',
        'line': 'Line',
        'remark': 'Remark',
        'ttl': 'TTL',
        'type': 'Type',
        'value': 'Value',
        'weight': 'Weight'
    }

    def __init__(self, host=None, line=None, remark=None, ttl=None, type=None, value=None, weight=None, _configuration=None):  # noqa: E501
        """RecordForBatchCreateRecordInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._host = None
        self._line = None
        self._remark = None
        self._ttl = None
        self._type = None
        self._value = None
        self._weight = None
        self.discriminator = None

        if host is not None:
            self.host = host
        if line is not None:
            self.line = line
        if remark is not None:
            self.remark = remark
        if ttl is not None:
            self.ttl = ttl
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value
        if weight is not None:
            self.weight = weight

    @property
    def host(self):
        """Gets the host of this RecordForBatchCreateRecordInput.  # noqa: E501


        :return: The host of this RecordForBatchCreateRecordInput.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this RecordForBatchCreateRecordInput.


        :param host: The host of this RecordForBatchCreateRecordInput.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def line(self):
        """Gets the line of this RecordForBatchCreateRecordInput.  # noqa: E501


        :return: The line of this RecordForBatchCreateRecordInput.  # noqa: E501
        :rtype: str
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this RecordForBatchCreateRecordInput.


        :param line: The line of this RecordForBatchCreateRecordInput.  # noqa: E501
        :type: str
        """

        self._line = line

    @property
    def remark(self):
        """Gets the remark of this RecordForBatchCreateRecordInput.  # noqa: E501


        :return: The remark of this RecordForBatchCreateRecordInput.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this RecordForBatchCreateRecordInput.


        :param remark: The remark of this RecordForBatchCreateRecordInput.  # noqa: E501
        :type: str
        """

        self._remark = remark

    @property
    def ttl(self):
        """Gets the ttl of this RecordForBatchCreateRecordInput.  # noqa: E501


        :return: The ttl of this RecordForBatchCreateRecordInput.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this RecordForBatchCreateRecordInput.


        :param ttl: The ttl of this RecordForBatchCreateRecordInput.  # noqa: E501
        :type: int
        """

        self._ttl = ttl

    @property
    def type(self):
        """Gets the type of this RecordForBatchCreateRecordInput.  # noqa: E501


        :return: The type of this RecordForBatchCreateRecordInput.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RecordForBatchCreateRecordInput.


        :param type: The type of this RecordForBatchCreateRecordInput.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this RecordForBatchCreateRecordInput.  # noqa: E501


        :return: The value of this RecordForBatchCreateRecordInput.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RecordForBatchCreateRecordInput.


        :param value: The value of this RecordForBatchCreateRecordInput.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def weight(self):
        """Gets the weight of this RecordForBatchCreateRecordInput.  # noqa: E501


        :return: The weight of this RecordForBatchCreateRecordInput.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this RecordForBatchCreateRecordInput.


        :param weight: The weight of this RecordForBatchCreateRecordInput.  # noqa: E501
        :type: int
        """

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecordForBatchCreateRecordInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecordForBatchCreateRecordInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RecordForBatchCreateRecordInput):
            return True

        return self.to_dict() != other.to_dict()
