# coding: utf-8

"""
    dbw

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class AggForListSlowQueryAdviceApiOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'db': 'str',
        'execute_count': 'int',
        'execute_count_ratio': 'float',
        'first_appear_time': 'int',
        'last_appear_time': 'int',
        'lock_time_ratio': 'float',
        'lock_time_stats': 'LockTimeStatsForListSlowQueryAdviceApiOutput',
        'psm': 'str',
        'pt_analysis_result': 'str',
        'query_time_ratio': 'float',
        'query_time_stats': 'QueryTimeStatsForListSlowQueryAdviceApiOutput',
        'rows_examined_ratio': 'float',
        'rows_examined_stats': 'RowsExaminedStatsForListSlowQueryAdviceApiOutput',
        'rows_sent_ratio': 'float',
        'rows_sent_stats': 'RowsSentStatsForListSlowQueryAdviceApiOutput',
        'sql_template': 'str',
        'sql_template_id': 'str',
        'source_ip': 'str',
        'sql_fingerprint': 'str',
        'sql_method': 'str',
        'table': 'str',
        'user': 'str'
    }

    attribute_map = {
        'db': 'DB',
        'execute_count': 'ExecuteCount',
        'execute_count_ratio': 'ExecuteCountRatio',
        'first_appear_time': 'FirstAppearTime',
        'last_appear_time': 'LastAppearTime',
        'lock_time_ratio': 'LockTimeRatio',
        'lock_time_stats': 'LockTimeStats',
        'psm': 'PSM',
        'pt_analysis_result': 'PTAnalysisResult',
        'query_time_ratio': 'QueryTimeRatio',
        'query_time_stats': 'QueryTimeStats',
        'rows_examined_ratio': 'RowsExaminedRatio',
        'rows_examined_stats': 'RowsExaminedStats',
        'rows_sent_ratio': 'RowsSentRatio',
        'rows_sent_stats': 'RowsSentStats',
        'sql_template': 'SQLTemplate',
        'sql_template_id': 'SQLTemplateID',
        'source_ip': 'SourceIP',
        'sql_fingerprint': 'SqlFingerprint',
        'sql_method': 'SqlMethod',
        'table': 'Table',
        'user': 'User'
    }

    def __init__(self, db=None, execute_count=None, execute_count_ratio=None, first_appear_time=None, last_appear_time=None, lock_time_ratio=None, lock_time_stats=None, psm=None, pt_analysis_result=None, query_time_ratio=None, query_time_stats=None, rows_examined_ratio=None, rows_examined_stats=None, rows_sent_ratio=None, rows_sent_stats=None, sql_template=None, sql_template_id=None, source_ip=None, sql_fingerprint=None, sql_method=None, table=None, user=None, _configuration=None):  # noqa: E501
        """AggForListSlowQueryAdviceApiOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._db = None
        self._execute_count = None
        self._execute_count_ratio = None
        self._first_appear_time = None
        self._last_appear_time = None
        self._lock_time_ratio = None
        self._lock_time_stats = None
        self._psm = None
        self._pt_analysis_result = None
        self._query_time_ratio = None
        self._query_time_stats = None
        self._rows_examined_ratio = None
        self._rows_examined_stats = None
        self._rows_sent_ratio = None
        self._rows_sent_stats = None
        self._sql_template = None
        self._sql_template_id = None
        self._source_ip = None
        self._sql_fingerprint = None
        self._sql_method = None
        self._table = None
        self._user = None
        self.discriminator = None

        if db is not None:
            self.db = db
        if execute_count is not None:
            self.execute_count = execute_count
        if execute_count_ratio is not None:
            self.execute_count_ratio = execute_count_ratio
        if first_appear_time is not None:
            self.first_appear_time = first_appear_time
        if last_appear_time is not None:
            self.last_appear_time = last_appear_time
        if lock_time_ratio is not None:
            self.lock_time_ratio = lock_time_ratio
        if lock_time_stats is not None:
            self.lock_time_stats = lock_time_stats
        if psm is not None:
            self.psm = psm
        if pt_analysis_result is not None:
            self.pt_analysis_result = pt_analysis_result
        if query_time_ratio is not None:
            self.query_time_ratio = query_time_ratio
        if query_time_stats is not None:
            self.query_time_stats = query_time_stats
        if rows_examined_ratio is not None:
            self.rows_examined_ratio = rows_examined_ratio
        if rows_examined_stats is not None:
            self.rows_examined_stats = rows_examined_stats
        if rows_sent_ratio is not None:
            self.rows_sent_ratio = rows_sent_ratio
        if rows_sent_stats is not None:
            self.rows_sent_stats = rows_sent_stats
        if sql_template is not None:
            self.sql_template = sql_template
        if sql_template_id is not None:
            self.sql_template_id = sql_template_id
        if source_ip is not None:
            self.source_ip = source_ip
        if sql_fingerprint is not None:
            self.sql_fingerprint = sql_fingerprint
        if sql_method is not None:
            self.sql_method = sql_method
        if table is not None:
            self.table = table
        if user is not None:
            self.user = user

    @property
    def db(self):
        """Gets the db of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The db of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: str
        """
        return self._db

    @db.setter
    def db(self, db):
        """Sets the db of this AggForListSlowQueryAdviceApiOutput.


        :param db: The db of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: str
        """

        self._db = db

    @property
    def execute_count(self):
        """Gets the execute_count of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The execute_count of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: int
        """
        return self._execute_count

    @execute_count.setter
    def execute_count(self, execute_count):
        """Sets the execute_count of this AggForListSlowQueryAdviceApiOutput.


        :param execute_count: The execute_count of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: int
        """

        self._execute_count = execute_count

    @property
    def execute_count_ratio(self):
        """Gets the execute_count_ratio of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The execute_count_ratio of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: float
        """
        return self._execute_count_ratio

    @execute_count_ratio.setter
    def execute_count_ratio(self, execute_count_ratio):
        """Sets the execute_count_ratio of this AggForListSlowQueryAdviceApiOutput.


        :param execute_count_ratio: The execute_count_ratio of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: float
        """

        self._execute_count_ratio = execute_count_ratio

    @property
    def first_appear_time(self):
        """Gets the first_appear_time of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The first_appear_time of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: int
        """
        return self._first_appear_time

    @first_appear_time.setter
    def first_appear_time(self, first_appear_time):
        """Sets the first_appear_time of this AggForListSlowQueryAdviceApiOutput.


        :param first_appear_time: The first_appear_time of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: int
        """

        self._first_appear_time = first_appear_time

    @property
    def last_appear_time(self):
        """Gets the last_appear_time of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The last_appear_time of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: int
        """
        return self._last_appear_time

    @last_appear_time.setter
    def last_appear_time(self, last_appear_time):
        """Sets the last_appear_time of this AggForListSlowQueryAdviceApiOutput.


        :param last_appear_time: The last_appear_time of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: int
        """

        self._last_appear_time = last_appear_time

    @property
    def lock_time_ratio(self):
        """Gets the lock_time_ratio of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The lock_time_ratio of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: float
        """
        return self._lock_time_ratio

    @lock_time_ratio.setter
    def lock_time_ratio(self, lock_time_ratio):
        """Sets the lock_time_ratio of this AggForListSlowQueryAdviceApiOutput.


        :param lock_time_ratio: The lock_time_ratio of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: float
        """

        self._lock_time_ratio = lock_time_ratio

    @property
    def lock_time_stats(self):
        """Gets the lock_time_stats of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The lock_time_stats of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: LockTimeStatsForListSlowQueryAdviceApiOutput
        """
        return self._lock_time_stats

    @lock_time_stats.setter
    def lock_time_stats(self, lock_time_stats):
        """Sets the lock_time_stats of this AggForListSlowQueryAdviceApiOutput.


        :param lock_time_stats: The lock_time_stats of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: LockTimeStatsForListSlowQueryAdviceApiOutput
        """

        self._lock_time_stats = lock_time_stats

    @property
    def psm(self):
        """Gets the psm of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The psm of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: str
        """
        return self._psm

    @psm.setter
    def psm(self, psm):
        """Sets the psm of this AggForListSlowQueryAdviceApiOutput.


        :param psm: The psm of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: str
        """

        self._psm = psm

    @property
    def pt_analysis_result(self):
        """Gets the pt_analysis_result of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The pt_analysis_result of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: str
        """
        return self._pt_analysis_result

    @pt_analysis_result.setter
    def pt_analysis_result(self, pt_analysis_result):
        """Sets the pt_analysis_result of this AggForListSlowQueryAdviceApiOutput.


        :param pt_analysis_result: The pt_analysis_result of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: str
        """

        self._pt_analysis_result = pt_analysis_result

    @property
    def query_time_ratio(self):
        """Gets the query_time_ratio of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The query_time_ratio of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: float
        """
        return self._query_time_ratio

    @query_time_ratio.setter
    def query_time_ratio(self, query_time_ratio):
        """Sets the query_time_ratio of this AggForListSlowQueryAdviceApiOutput.


        :param query_time_ratio: The query_time_ratio of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: float
        """

        self._query_time_ratio = query_time_ratio

    @property
    def query_time_stats(self):
        """Gets the query_time_stats of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The query_time_stats of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: QueryTimeStatsForListSlowQueryAdviceApiOutput
        """
        return self._query_time_stats

    @query_time_stats.setter
    def query_time_stats(self, query_time_stats):
        """Sets the query_time_stats of this AggForListSlowQueryAdviceApiOutput.


        :param query_time_stats: The query_time_stats of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: QueryTimeStatsForListSlowQueryAdviceApiOutput
        """

        self._query_time_stats = query_time_stats

    @property
    def rows_examined_ratio(self):
        """Gets the rows_examined_ratio of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The rows_examined_ratio of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: float
        """
        return self._rows_examined_ratio

    @rows_examined_ratio.setter
    def rows_examined_ratio(self, rows_examined_ratio):
        """Sets the rows_examined_ratio of this AggForListSlowQueryAdviceApiOutput.


        :param rows_examined_ratio: The rows_examined_ratio of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: float
        """

        self._rows_examined_ratio = rows_examined_ratio

    @property
    def rows_examined_stats(self):
        """Gets the rows_examined_stats of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The rows_examined_stats of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: RowsExaminedStatsForListSlowQueryAdviceApiOutput
        """
        return self._rows_examined_stats

    @rows_examined_stats.setter
    def rows_examined_stats(self, rows_examined_stats):
        """Sets the rows_examined_stats of this AggForListSlowQueryAdviceApiOutput.


        :param rows_examined_stats: The rows_examined_stats of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: RowsExaminedStatsForListSlowQueryAdviceApiOutput
        """

        self._rows_examined_stats = rows_examined_stats

    @property
    def rows_sent_ratio(self):
        """Gets the rows_sent_ratio of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The rows_sent_ratio of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: float
        """
        return self._rows_sent_ratio

    @rows_sent_ratio.setter
    def rows_sent_ratio(self, rows_sent_ratio):
        """Sets the rows_sent_ratio of this AggForListSlowQueryAdviceApiOutput.


        :param rows_sent_ratio: The rows_sent_ratio of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: float
        """

        self._rows_sent_ratio = rows_sent_ratio

    @property
    def rows_sent_stats(self):
        """Gets the rows_sent_stats of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The rows_sent_stats of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: RowsSentStatsForListSlowQueryAdviceApiOutput
        """
        return self._rows_sent_stats

    @rows_sent_stats.setter
    def rows_sent_stats(self, rows_sent_stats):
        """Sets the rows_sent_stats of this AggForListSlowQueryAdviceApiOutput.


        :param rows_sent_stats: The rows_sent_stats of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: RowsSentStatsForListSlowQueryAdviceApiOutput
        """

        self._rows_sent_stats = rows_sent_stats

    @property
    def sql_template(self):
        """Gets the sql_template of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The sql_template of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: str
        """
        return self._sql_template

    @sql_template.setter
    def sql_template(self, sql_template):
        """Sets the sql_template of this AggForListSlowQueryAdviceApiOutput.


        :param sql_template: The sql_template of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: str
        """

        self._sql_template = sql_template

    @property
    def sql_template_id(self):
        """Gets the sql_template_id of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The sql_template_id of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: str
        """
        return self._sql_template_id

    @sql_template_id.setter
    def sql_template_id(self, sql_template_id):
        """Sets the sql_template_id of this AggForListSlowQueryAdviceApiOutput.


        :param sql_template_id: The sql_template_id of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: str
        """

        self._sql_template_id = sql_template_id

    @property
    def source_ip(self):
        """Gets the source_ip of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The source_ip of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: str
        """
        return self._source_ip

    @source_ip.setter
    def source_ip(self, source_ip):
        """Sets the source_ip of this AggForListSlowQueryAdviceApiOutput.


        :param source_ip: The source_ip of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: str
        """

        self._source_ip = source_ip

    @property
    def sql_fingerprint(self):
        """Gets the sql_fingerprint of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The sql_fingerprint of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: str
        """
        return self._sql_fingerprint

    @sql_fingerprint.setter
    def sql_fingerprint(self, sql_fingerprint):
        """Sets the sql_fingerprint of this AggForListSlowQueryAdviceApiOutput.


        :param sql_fingerprint: The sql_fingerprint of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: str
        """

        self._sql_fingerprint = sql_fingerprint

    @property
    def sql_method(self):
        """Gets the sql_method of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The sql_method of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: str
        """
        return self._sql_method

    @sql_method.setter
    def sql_method(self, sql_method):
        """Sets the sql_method of this AggForListSlowQueryAdviceApiOutput.


        :param sql_method: The sql_method of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: str
        """

        self._sql_method = sql_method

    @property
    def table(self):
        """Gets the table of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The table of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this AggForListSlowQueryAdviceApiOutput.


        :param table: The table of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: str
        """

        self._table = table

    @property
    def user(self):
        """Gets the user of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The user of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AggForListSlowQueryAdviceApiOutput.


        :param user: The user of this AggForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AggForListSlowQueryAdviceApiOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AggForListSlowQueryAdviceApiOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AggForListSlowQueryAdviceApiOutput):
            return True

        return self.to_dict() != other.to_dict()
