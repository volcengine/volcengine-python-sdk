# coding: utf-8

"""
    dbw

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class TableOptionsForGetTableInfoOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avg_row_length': 'str',
        'auto_increment': 'str',
        'comment': 'str',
        'create_time': 'str',
        'max_row': 'str',
        'min_row': 'str',
        'row_format': 'str',
        'rows': 'str',
        'table_space': 'str'
    }

    attribute_map = {
        'avg_row_length': 'AVGRowLength',
        'auto_increment': 'AutoIncrement',
        'comment': 'Comment',
        'create_time': 'CreateTime',
        'max_row': 'MaxRow',
        'min_row': 'MinRow',
        'row_format': 'RowFormat',
        'rows': 'Rows',
        'table_space': 'TableSpace'
    }

    def __init__(self, avg_row_length=None, auto_increment=None, comment=None, create_time=None, max_row=None, min_row=None, row_format=None, rows=None, table_space=None, _configuration=None):  # noqa: E501
        """TableOptionsForGetTableInfoOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._avg_row_length = None
        self._auto_increment = None
        self._comment = None
        self._create_time = None
        self._max_row = None
        self._min_row = None
        self._row_format = None
        self._rows = None
        self._table_space = None
        self.discriminator = None

        if avg_row_length is not None:
            self.avg_row_length = avg_row_length
        if auto_increment is not None:
            self.auto_increment = auto_increment
        if comment is not None:
            self.comment = comment
        if create_time is not None:
            self.create_time = create_time
        if max_row is not None:
            self.max_row = max_row
        if min_row is not None:
            self.min_row = min_row
        if row_format is not None:
            self.row_format = row_format
        if rows is not None:
            self.rows = rows
        if table_space is not None:
            self.table_space = table_space

    @property
    def avg_row_length(self):
        """Gets the avg_row_length of this TableOptionsForGetTableInfoOutput.  # noqa: E501


        :return: The avg_row_length of this TableOptionsForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._avg_row_length

    @avg_row_length.setter
    def avg_row_length(self, avg_row_length):
        """Sets the avg_row_length of this TableOptionsForGetTableInfoOutput.


        :param avg_row_length: The avg_row_length of this TableOptionsForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._avg_row_length = avg_row_length

    @property
    def auto_increment(self):
        """Gets the auto_increment of this TableOptionsForGetTableInfoOutput.  # noqa: E501


        :return: The auto_increment of this TableOptionsForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._auto_increment

    @auto_increment.setter
    def auto_increment(self, auto_increment):
        """Sets the auto_increment of this TableOptionsForGetTableInfoOutput.


        :param auto_increment: The auto_increment of this TableOptionsForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._auto_increment = auto_increment

    @property
    def comment(self):
        """Gets the comment of this TableOptionsForGetTableInfoOutput.  # noqa: E501


        :return: The comment of this TableOptionsForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this TableOptionsForGetTableInfoOutput.


        :param comment: The comment of this TableOptionsForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def create_time(self):
        """Gets the create_time of this TableOptionsForGetTableInfoOutput.  # noqa: E501


        :return: The create_time of this TableOptionsForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this TableOptionsForGetTableInfoOutput.


        :param create_time: The create_time of this TableOptionsForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def max_row(self):
        """Gets the max_row of this TableOptionsForGetTableInfoOutput.  # noqa: E501


        :return: The max_row of this TableOptionsForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._max_row

    @max_row.setter
    def max_row(self, max_row):
        """Sets the max_row of this TableOptionsForGetTableInfoOutput.


        :param max_row: The max_row of this TableOptionsForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._max_row = max_row

    @property
    def min_row(self):
        """Gets the min_row of this TableOptionsForGetTableInfoOutput.  # noqa: E501


        :return: The min_row of this TableOptionsForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._min_row

    @min_row.setter
    def min_row(self, min_row):
        """Sets the min_row of this TableOptionsForGetTableInfoOutput.


        :param min_row: The min_row of this TableOptionsForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._min_row = min_row

    @property
    def row_format(self):
        """Gets the row_format of this TableOptionsForGetTableInfoOutput.  # noqa: E501


        :return: The row_format of this TableOptionsForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._row_format

    @row_format.setter
    def row_format(self, row_format):
        """Sets the row_format of this TableOptionsForGetTableInfoOutput.


        :param row_format: The row_format of this TableOptionsForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._row_format = row_format

    @property
    def rows(self):
        """Gets the rows of this TableOptionsForGetTableInfoOutput.  # noqa: E501


        :return: The rows of this TableOptionsForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this TableOptionsForGetTableInfoOutput.


        :param rows: The rows of this TableOptionsForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._rows = rows

    @property
    def table_space(self):
        """Gets the table_space of this TableOptionsForGetTableInfoOutput.  # noqa: E501


        :return: The table_space of this TableOptionsForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._table_space

    @table_space.setter
    def table_space(self, table_space):
        """Sets the table_space of this TableOptionsForGetTableInfoOutput.


        :param table_space: The table_space of this TableOptionsForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._table_space = table_space

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableOptionsForGetTableInfoOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableOptionsForGetTableInfoOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TableOptionsForGetTableInfoOutput):
            return True

        return self.to_dict() != other.to_dict()
