# coding: utf-8

"""
    dbw

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class TableMetaForGetTableInfoOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'character_set': 'str',
        'collations': 'str',
        'columns': 'list[ColumnForGetTableInfoOutput]',
        'definition': 'str',
        'engine': 'str',
        'foreign_keys': 'list[ForeignKeyForGetTableInfoOutput]',
        'htap_options': 'str',
        'indexes': 'list[IndexForGetTableInfoOutput]',
        'name': 'str',
        'partition_options': 'PartitionOptionsForGetTableInfoOutput',
        'table_options': 'TableOptionsForGetTableInfoOutput'
    }

    attribute_map = {
        'character_set': 'CharacterSet',
        'collations': 'Collations',
        'columns': 'Columns',
        'definition': 'Definition',
        'engine': 'Engine',
        'foreign_keys': 'ForeignKeys',
        'htap_options': 'HTAPOptions',
        'indexes': 'Indexes',
        'name': 'Name',
        'partition_options': 'PartitionOptions',
        'table_options': 'TableOptions'
    }

    def __init__(self, character_set=None, collations=None, columns=None, definition=None, engine=None, foreign_keys=None, htap_options=None, indexes=None, name=None, partition_options=None, table_options=None, _configuration=None):  # noqa: E501
        """TableMetaForGetTableInfoOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._character_set = None
        self._collations = None
        self._columns = None
        self._definition = None
        self._engine = None
        self._foreign_keys = None
        self._htap_options = None
        self._indexes = None
        self._name = None
        self._partition_options = None
        self._table_options = None
        self.discriminator = None

        if character_set is not None:
            self.character_set = character_set
        if collations is not None:
            self.collations = collations
        if columns is not None:
            self.columns = columns
        if definition is not None:
            self.definition = definition
        if engine is not None:
            self.engine = engine
        if foreign_keys is not None:
            self.foreign_keys = foreign_keys
        if htap_options is not None:
            self.htap_options = htap_options
        if indexes is not None:
            self.indexes = indexes
        if name is not None:
            self.name = name
        if partition_options is not None:
            self.partition_options = partition_options
        if table_options is not None:
            self.table_options = table_options

    @property
    def character_set(self):
        """Gets the character_set of this TableMetaForGetTableInfoOutput.  # noqa: E501


        :return: The character_set of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._character_set

    @character_set.setter
    def character_set(self, character_set):
        """Sets the character_set of this TableMetaForGetTableInfoOutput.


        :param character_set: The character_set of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._character_set = character_set

    @property
    def collations(self):
        """Gets the collations of this TableMetaForGetTableInfoOutput.  # noqa: E501


        :return: The collations of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._collations

    @collations.setter
    def collations(self, collations):
        """Sets the collations of this TableMetaForGetTableInfoOutput.


        :param collations: The collations of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._collations = collations

    @property
    def columns(self):
        """Gets the columns of this TableMetaForGetTableInfoOutput.  # noqa: E501


        :return: The columns of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :rtype: list[ColumnForGetTableInfoOutput]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this TableMetaForGetTableInfoOutput.


        :param columns: The columns of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :type: list[ColumnForGetTableInfoOutput]
        """

        self._columns = columns

    @property
    def definition(self):
        """Gets the definition of this TableMetaForGetTableInfoOutput.  # noqa: E501


        :return: The definition of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this TableMetaForGetTableInfoOutput.


        :param definition: The definition of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._definition = definition

    @property
    def engine(self):
        """Gets the engine of this TableMetaForGetTableInfoOutput.  # noqa: E501


        :return: The engine of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this TableMetaForGetTableInfoOutput.


        :param engine: The engine of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._engine = engine

    @property
    def foreign_keys(self):
        """Gets the foreign_keys of this TableMetaForGetTableInfoOutput.  # noqa: E501


        :return: The foreign_keys of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :rtype: list[ForeignKeyForGetTableInfoOutput]
        """
        return self._foreign_keys

    @foreign_keys.setter
    def foreign_keys(self, foreign_keys):
        """Sets the foreign_keys of this TableMetaForGetTableInfoOutput.


        :param foreign_keys: The foreign_keys of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :type: list[ForeignKeyForGetTableInfoOutput]
        """

        self._foreign_keys = foreign_keys

    @property
    def htap_options(self):
        """Gets the htap_options of this TableMetaForGetTableInfoOutput.  # noqa: E501


        :return: The htap_options of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._htap_options

    @htap_options.setter
    def htap_options(self, htap_options):
        """Sets the htap_options of this TableMetaForGetTableInfoOutput.


        :param htap_options: The htap_options of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._htap_options = htap_options

    @property
    def indexes(self):
        """Gets the indexes of this TableMetaForGetTableInfoOutput.  # noqa: E501


        :return: The indexes of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :rtype: list[IndexForGetTableInfoOutput]
        """
        return self._indexes

    @indexes.setter
    def indexes(self, indexes):
        """Sets the indexes of this TableMetaForGetTableInfoOutput.


        :param indexes: The indexes of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :type: list[IndexForGetTableInfoOutput]
        """

        self._indexes = indexes

    @property
    def name(self):
        """Gets the name of this TableMetaForGetTableInfoOutput.  # noqa: E501


        :return: The name of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TableMetaForGetTableInfoOutput.


        :param name: The name of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def partition_options(self):
        """Gets the partition_options of this TableMetaForGetTableInfoOutput.  # noqa: E501


        :return: The partition_options of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :rtype: PartitionOptionsForGetTableInfoOutput
        """
        return self._partition_options

    @partition_options.setter
    def partition_options(self, partition_options):
        """Sets the partition_options of this TableMetaForGetTableInfoOutput.


        :param partition_options: The partition_options of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :type: PartitionOptionsForGetTableInfoOutput
        """

        self._partition_options = partition_options

    @property
    def table_options(self):
        """Gets the table_options of this TableMetaForGetTableInfoOutput.  # noqa: E501


        :return: The table_options of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :rtype: TableOptionsForGetTableInfoOutput
        """
        return self._table_options

    @table_options.setter
    def table_options(self, table_options):
        """Sets the table_options of this TableMetaForGetTableInfoOutput.


        :param table_options: The table_options of this TableMetaForGetTableInfoOutput.  # noqa: E501
        :type: TableOptionsForGetTableInfoOutput
        """

        self._table_options = table_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableMetaForGetTableInfoOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableMetaForGetTableInfoOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TableMetaForGetTableInfoOutput):
            return True

        return self.to_dict() != other.to_dict()
