# coding: utf-8

"""
    dbw

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class IndexForGetTableInfoOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'columns': 'list[str]',
        'index_type': 'str',
        'name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'columns': 'Columns',
        'index_type': 'IndexType',
        'name': 'Name',
        'type': 'Type'
    }

    def __init__(self, columns=None, index_type=None, name=None, type=None, _configuration=None):  # noqa: E501
        """IndexForGetTableInfoOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._columns = None
        self._index_type = None
        self._name = None
        self._type = None
        self.discriminator = None

        if columns is not None:
            self.columns = columns
        if index_type is not None:
            self.index_type = index_type
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type

    @property
    def columns(self):
        """Gets the columns of this IndexForGetTableInfoOutput.  # noqa: E501


        :return: The columns of this IndexForGetTableInfoOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this IndexForGetTableInfoOutput.


        :param columns: The columns of this IndexForGetTableInfoOutput.  # noqa: E501
        :type: list[str]
        """

        self._columns = columns

    @property
    def index_type(self):
        """Gets the index_type of this IndexForGetTableInfoOutput.  # noqa: E501


        :return: The index_type of this IndexForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._index_type

    @index_type.setter
    def index_type(self, index_type):
        """Sets the index_type of this IndexForGetTableInfoOutput.


        :param index_type: The index_type of this IndexForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._index_type = index_type

    @property
    def name(self):
        """Gets the name of this IndexForGetTableInfoOutput.  # noqa: E501


        :return: The name of this IndexForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IndexForGetTableInfoOutput.


        :param name: The name of this IndexForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this IndexForGetTableInfoOutput.  # noqa: E501


        :return: The type of this IndexForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IndexForGetTableInfoOutput.


        :param type: The type of this IndexForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IndexForGetTableInfoOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndexForGetTableInfoOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IndexForGetTableInfoOutput):
            return True

        return self.to_dict() != other.to_dict()
