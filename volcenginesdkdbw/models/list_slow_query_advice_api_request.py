# coding: utf-8

"""
    dbw

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ListSlowQueryAdviceApiRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advice_type': 'str',
        'group_by': 'str',
        'instance_id': 'str',
        'instance_type': 'str',
        'order_by': 'str',
        'page_number': 'int',
        'page_size': 'int',
        'summary_id': 'str'
    }

    attribute_map = {
        'advice_type': 'AdviceType',
        'group_by': 'GroupBy',
        'instance_id': 'InstanceId',
        'instance_type': 'InstanceType',
        'order_by': 'OrderBy',
        'page_number': 'PageNumber',
        'page_size': 'PageSize',
        'summary_id': 'SummaryId'
    }

    def __init__(self, advice_type=None, group_by=None, instance_id=None, instance_type=None, order_by=None, page_number=None, page_size=None, summary_id=None, _configuration=None):  # noqa: E501
        """ListSlowQueryAdviceApiRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._advice_type = None
        self._group_by = None
        self._instance_id = None
        self._instance_type = None
        self._order_by = None
        self._page_number = None
        self._page_size = None
        self._summary_id = None
        self.discriminator = None

        self.advice_type = advice_type
        self.group_by = group_by
        self.instance_id = instance_id
        self.instance_type = instance_type
        self.order_by = order_by
        self.page_number = page_number
        self.page_size = page_size
        self.summary_id = summary_id

    @property
    def advice_type(self):
        """Gets the advice_type of this ListSlowQueryAdviceApiRequest.  # noqa: E501


        :return: The advice_type of this ListSlowQueryAdviceApiRequest.  # noqa: E501
        :rtype: str
        """
        return self._advice_type

    @advice_type.setter
    def advice_type(self, advice_type):
        """Sets the advice_type of this ListSlowQueryAdviceApiRequest.


        :param advice_type: The advice_type of this ListSlowQueryAdviceApiRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and advice_type is None:
            raise ValueError("Invalid value for `advice_type`, must not be `None`")  # noqa: E501
        allowed_values = ["no_advice", "index_advice", "rewrite_sql_advice"]  # noqa: E501
        if (self._configuration.client_side_validation and
                advice_type not in allowed_values):
            raise ValueError(
                "Invalid value for `advice_type` ({0}), must be one of {1}"  # noqa: E501
                .format(advice_type, allowed_values)
            )

        self._advice_type = advice_type

    @property
    def group_by(self):
        """Gets the group_by of this ListSlowQueryAdviceApiRequest.  # noqa: E501


        :return: The group_by of this ListSlowQueryAdviceApiRequest.  # noqa: E501
        :rtype: str
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this ListSlowQueryAdviceApiRequest.


        :param group_by: The group_by of this ListSlowQueryAdviceApiRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and group_by is None:
            raise ValueError("Invalid value for `group_by`, must not be `None`")  # noqa: E501
        allowed_values = ["Advice", "Module"]  # noqa: E501
        if (self._configuration.client_side_validation and
                group_by not in allowed_values):
            raise ValueError(
                "Invalid value for `group_by` ({0}), must be one of {1}"  # noqa: E501
                .format(group_by, allowed_values)
            )

        self._group_by = group_by

    @property
    def instance_id(self):
        """Gets the instance_id of this ListSlowQueryAdviceApiRequest.  # noqa: E501


        :return: The instance_id of this ListSlowQueryAdviceApiRequest.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this ListSlowQueryAdviceApiRequest.


        :param instance_id: The instance_id of this ListSlowQueryAdviceApiRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def instance_type(self):
        """Gets the instance_type of this ListSlowQueryAdviceApiRequest.  # noqa: E501


        :return: The instance_type of this ListSlowQueryAdviceApiRequest.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this ListSlowQueryAdviceApiRequest.


        :param instance_type: The instance_type of this ListSlowQueryAdviceApiRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and instance_type is None:
            raise ValueError("Invalid value for `instance_type`, must not be `None`")  # noqa: E501
        allowed_values = ["MySQL", "Postgres", "Mongo", "Redis", "VeDBMySQL", "MetaRDS", "MSSQL", "ByteRDS", "MySQLSharding", "MetaMySQL", "ByteDoc"]  # noqa: E501
        if (self._configuration.client_side_validation and
                instance_type not in allowed_values):
            raise ValueError(
                "Invalid value for `instance_type` ({0}), must be one of {1}"  # noqa: E501
                .format(instance_type, allowed_values)
            )

        self._instance_type = instance_type

    @property
    def order_by(self):
        """Gets the order_by of this ListSlowQueryAdviceApiRequest.  # noqa: E501


        :return: The order_by of this ListSlowQueryAdviceApiRequest.  # noqa: E501
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this ListSlowQueryAdviceApiRequest.


        :param order_by: The order_by of this ListSlowQueryAdviceApiRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and order_by is None:
            raise ValueError("Invalid value for `order_by`, must not be `None`")  # noqa: E501
        allowed_values = ["QueryTimeRatioNow", "Benefit"]  # noqa: E501
        if (self._configuration.client_side_validation and
                order_by not in allowed_values):
            raise ValueError(
                "Invalid value for `order_by` ({0}), must be one of {1}"  # noqa: E501
                .format(order_by, allowed_values)
            )

        self._order_by = order_by

    @property
    def page_number(self):
        """Gets the page_number of this ListSlowQueryAdviceApiRequest.  # noqa: E501


        :return: The page_number of this ListSlowQueryAdviceApiRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this ListSlowQueryAdviceApiRequest.


        :param page_number: The page_number of this ListSlowQueryAdviceApiRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and page_number is None:
            raise ValueError("Invalid value for `page_number`, must not be `None`")  # noqa: E501

        self._page_number = page_number

    @property
    def page_size(self):
        """Gets the page_size of this ListSlowQueryAdviceApiRequest.  # noqa: E501


        :return: The page_size of this ListSlowQueryAdviceApiRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ListSlowQueryAdviceApiRequest.


        :param page_size: The page_size of this ListSlowQueryAdviceApiRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")  # noqa: E501

        self._page_size = page_size

    @property
    def summary_id(self):
        """Gets the summary_id of this ListSlowQueryAdviceApiRequest.  # noqa: E501


        :return: The summary_id of this ListSlowQueryAdviceApiRequest.  # noqa: E501
        :rtype: str
        """
        return self._summary_id

    @summary_id.setter
    def summary_id(self, summary_id):
        """Sets the summary_id of this ListSlowQueryAdviceApiRequest.


        :param summary_id: The summary_id of this ListSlowQueryAdviceApiRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and summary_id is None:
            raise ValueError("Invalid value for `summary_id`, must not be `None`")  # noqa: E501

        self._summary_id = summary_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListSlowQueryAdviceApiRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListSlowQueryAdviceApiRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListSlowQueryAdviceApiRequest):
            return True

        return self.to_dict() != other.to_dict()
