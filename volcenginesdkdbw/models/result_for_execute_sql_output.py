# coding: utf-8

"""
    dbw

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ResultForExecuteSQLOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_names': 'list[str]',
        'command_str': 'str',
        'reason_detail': 'str',
        'row_count': 'int',
        'rows': 'list[RowForExecuteSQLOutput]',
        'run_time': 'int',
        'running_info': 'RunningInfoForExecuteSQLOutput',
        'state': 'str'
    }

    attribute_map = {
        'column_names': 'ColumnNames',
        'command_str': 'CommandStr',
        'reason_detail': 'ReasonDetail',
        'row_count': 'RowCount',
        'rows': 'Rows',
        'run_time': 'RunTime',
        'running_info': 'RunningInfo',
        'state': 'State'
    }

    def __init__(self, column_names=None, command_str=None, reason_detail=None, row_count=None, rows=None, run_time=None, running_info=None, state=None, _configuration=None):  # noqa: E501
        """ResultForExecuteSQLOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._column_names = None
        self._command_str = None
        self._reason_detail = None
        self._row_count = None
        self._rows = None
        self._run_time = None
        self._running_info = None
        self._state = None
        self.discriminator = None

        if column_names is not None:
            self.column_names = column_names
        if command_str is not None:
            self.command_str = command_str
        if reason_detail is not None:
            self.reason_detail = reason_detail
        if row_count is not None:
            self.row_count = row_count
        if rows is not None:
            self.rows = rows
        if run_time is not None:
            self.run_time = run_time
        if running_info is not None:
            self.running_info = running_info
        if state is not None:
            self.state = state

    @property
    def column_names(self):
        """Gets the column_names of this ResultForExecuteSQLOutput.  # noqa: E501


        :return: The column_names of this ResultForExecuteSQLOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._column_names

    @column_names.setter
    def column_names(self, column_names):
        """Sets the column_names of this ResultForExecuteSQLOutput.


        :param column_names: The column_names of this ResultForExecuteSQLOutput.  # noqa: E501
        :type: list[str]
        """

        self._column_names = column_names

    @property
    def command_str(self):
        """Gets the command_str of this ResultForExecuteSQLOutput.  # noqa: E501


        :return: The command_str of this ResultForExecuteSQLOutput.  # noqa: E501
        :rtype: str
        """
        return self._command_str

    @command_str.setter
    def command_str(self, command_str):
        """Sets the command_str of this ResultForExecuteSQLOutput.


        :param command_str: The command_str of this ResultForExecuteSQLOutput.  # noqa: E501
        :type: str
        """

        self._command_str = command_str

    @property
    def reason_detail(self):
        """Gets the reason_detail of this ResultForExecuteSQLOutput.  # noqa: E501


        :return: The reason_detail of this ResultForExecuteSQLOutput.  # noqa: E501
        :rtype: str
        """
        return self._reason_detail

    @reason_detail.setter
    def reason_detail(self, reason_detail):
        """Sets the reason_detail of this ResultForExecuteSQLOutput.


        :param reason_detail: The reason_detail of this ResultForExecuteSQLOutput.  # noqa: E501
        :type: str
        """

        self._reason_detail = reason_detail

    @property
    def row_count(self):
        """Gets the row_count of this ResultForExecuteSQLOutput.  # noqa: E501


        :return: The row_count of this ResultForExecuteSQLOutput.  # noqa: E501
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this ResultForExecuteSQLOutput.


        :param row_count: The row_count of this ResultForExecuteSQLOutput.  # noqa: E501
        :type: int
        """

        self._row_count = row_count

    @property
    def rows(self):
        """Gets the rows of this ResultForExecuteSQLOutput.  # noqa: E501


        :return: The rows of this ResultForExecuteSQLOutput.  # noqa: E501
        :rtype: list[RowForExecuteSQLOutput]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this ResultForExecuteSQLOutput.


        :param rows: The rows of this ResultForExecuteSQLOutput.  # noqa: E501
        :type: list[RowForExecuteSQLOutput]
        """

        self._rows = rows

    @property
    def run_time(self):
        """Gets the run_time of this ResultForExecuteSQLOutput.  # noqa: E501


        :return: The run_time of this ResultForExecuteSQLOutput.  # noqa: E501
        :rtype: int
        """
        return self._run_time

    @run_time.setter
    def run_time(self, run_time):
        """Sets the run_time of this ResultForExecuteSQLOutput.


        :param run_time: The run_time of this ResultForExecuteSQLOutput.  # noqa: E501
        :type: int
        """

        self._run_time = run_time

    @property
    def running_info(self):
        """Gets the running_info of this ResultForExecuteSQLOutput.  # noqa: E501


        :return: The running_info of this ResultForExecuteSQLOutput.  # noqa: E501
        :rtype: RunningInfoForExecuteSQLOutput
        """
        return self._running_info

    @running_info.setter
    def running_info(self, running_info):
        """Sets the running_info of this ResultForExecuteSQLOutput.


        :param running_info: The running_info of this ResultForExecuteSQLOutput.  # noqa: E501
        :type: RunningInfoForExecuteSQLOutput
        """

        self._running_info = running_info

    @property
    def state(self):
        """Gets the state of this ResultForExecuteSQLOutput.  # noqa: E501


        :return: The state of this ResultForExecuteSQLOutput.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ResultForExecuteSQLOutput.


        :param state: The state of this ResultForExecuteSQLOutput.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResultForExecuteSQLOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultForExecuteSQLOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResultForExecuteSQLOutput):
            return True

        return self.to_dict() != other.to_dict()
