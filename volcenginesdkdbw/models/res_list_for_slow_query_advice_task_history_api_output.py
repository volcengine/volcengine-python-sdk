# coding: utf-8

"""
    dbw

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ResListForSlowQueryAdviceTaskHistoryApiOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advice_index_num': 'int',
        'advice_num': 'int',
        'advice_rewrite_num': 'int',
        '_date': 'str',
        'db': 'str',
        'no_advice_sql_num': 'int',
        'slow_query_num': 'int',
        'status': 'str',
        'summary_id': 'str'
    }

    attribute_map = {
        'advice_index_num': 'AdviceIndexNum',
        'advice_num': 'AdviceNum',
        'advice_rewrite_num': 'AdviceRewriteNum',
        '_date': 'Date',
        'db': 'Db',
        'no_advice_sql_num': 'NoAdviceSQLNum',
        'slow_query_num': 'SlowQueryNum',
        'status': 'Status',
        'summary_id': 'SummaryId'
    }

    def __init__(self, advice_index_num=None, advice_num=None, advice_rewrite_num=None, _date=None, db=None, no_advice_sql_num=None, slow_query_num=None, status=None, summary_id=None, _configuration=None):  # noqa: E501
        """ResListForSlowQueryAdviceTaskHistoryApiOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._advice_index_num = None
        self._advice_num = None
        self._advice_rewrite_num = None
        self.__date = None
        self._db = None
        self._no_advice_sql_num = None
        self._slow_query_num = None
        self._status = None
        self._summary_id = None
        self.discriminator = None

        if advice_index_num is not None:
            self.advice_index_num = advice_index_num
        if advice_num is not None:
            self.advice_num = advice_num
        if advice_rewrite_num is not None:
            self.advice_rewrite_num = advice_rewrite_num
        if _date is not None:
            self._date = _date
        if db is not None:
            self.db = db
        if no_advice_sql_num is not None:
            self.no_advice_sql_num = no_advice_sql_num
        if slow_query_num is not None:
            self.slow_query_num = slow_query_num
        if status is not None:
            self.status = status
        if summary_id is not None:
            self.summary_id = summary_id

    @property
    def advice_index_num(self):
        """Gets the advice_index_num of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501


        :return: The advice_index_num of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501
        :rtype: int
        """
        return self._advice_index_num

    @advice_index_num.setter
    def advice_index_num(self, advice_index_num):
        """Sets the advice_index_num of this ResListForSlowQueryAdviceTaskHistoryApiOutput.


        :param advice_index_num: The advice_index_num of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501
        :type: int
        """

        self._advice_index_num = advice_index_num

    @property
    def advice_num(self):
        """Gets the advice_num of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501


        :return: The advice_num of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501
        :rtype: int
        """
        return self._advice_num

    @advice_num.setter
    def advice_num(self, advice_num):
        """Sets the advice_num of this ResListForSlowQueryAdviceTaskHistoryApiOutput.


        :param advice_num: The advice_num of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501
        :type: int
        """

        self._advice_num = advice_num

    @property
    def advice_rewrite_num(self):
        """Gets the advice_rewrite_num of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501


        :return: The advice_rewrite_num of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501
        :rtype: int
        """
        return self._advice_rewrite_num

    @advice_rewrite_num.setter
    def advice_rewrite_num(self, advice_rewrite_num):
        """Sets the advice_rewrite_num of this ResListForSlowQueryAdviceTaskHistoryApiOutput.


        :param advice_rewrite_num: The advice_rewrite_num of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501
        :type: int
        """

        self._advice_rewrite_num = advice_rewrite_num

    @property
    def _date(self):
        """Gets the _date of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501


        :return: The _date of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ResListForSlowQueryAdviceTaskHistoryApiOutput.


        :param _date: The _date of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def db(self):
        """Gets the db of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501


        :return: The db of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501
        :rtype: str
        """
        return self._db

    @db.setter
    def db(self, db):
        """Sets the db of this ResListForSlowQueryAdviceTaskHistoryApiOutput.


        :param db: The db of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501
        :type: str
        """

        self._db = db

    @property
    def no_advice_sql_num(self):
        """Gets the no_advice_sql_num of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501


        :return: The no_advice_sql_num of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501
        :rtype: int
        """
        return self._no_advice_sql_num

    @no_advice_sql_num.setter
    def no_advice_sql_num(self, no_advice_sql_num):
        """Sets the no_advice_sql_num of this ResListForSlowQueryAdviceTaskHistoryApiOutput.


        :param no_advice_sql_num: The no_advice_sql_num of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501
        :type: int
        """

        self._no_advice_sql_num = no_advice_sql_num

    @property
    def slow_query_num(self):
        """Gets the slow_query_num of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501


        :return: The slow_query_num of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501
        :rtype: int
        """
        return self._slow_query_num

    @slow_query_num.setter
    def slow_query_num(self, slow_query_num):
        """Sets the slow_query_num of this ResListForSlowQueryAdviceTaskHistoryApiOutput.


        :param slow_query_num: The slow_query_num of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501
        :type: int
        """

        self._slow_query_num = slow_query_num

    @property
    def status(self):
        """Gets the status of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501


        :return: The status of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResListForSlowQueryAdviceTaskHistoryApiOutput.


        :param status: The status of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def summary_id(self):
        """Gets the summary_id of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501


        :return: The summary_id of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501
        :rtype: str
        """
        return self._summary_id

    @summary_id.setter
    def summary_id(self, summary_id):
        """Sets the summary_id of this ResListForSlowQueryAdviceTaskHistoryApiOutput.


        :param summary_id: The summary_id of this ResListForSlowQueryAdviceTaskHistoryApiOutput.  # noqa: E501
        :type: str
        """

        self._summary_id = summary_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResListForSlowQueryAdviceTaskHistoryApiOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResListForSlowQueryAdviceTaskHistoryApiOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResListForSlowQueryAdviceTaskHistoryApiOutput):
            return True

        return self.to_dict() != other.to_dict()
