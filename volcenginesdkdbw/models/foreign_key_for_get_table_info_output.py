# coding: utf-8

"""
    dbw

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ForeignKeyForGetTableInfoOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'columns': 'list[str]',
        'name': 'str',
        'on_delete': 'int',
        'on_update': 'int',
        'ref_columns': 'list[str]',
        'ref_db': 'str',
        'ref_table': 'str'
    }

    attribute_map = {
        'columns': 'Columns',
        'name': 'Name',
        'on_delete': 'OnDelete',
        'on_update': 'OnUpdate',
        'ref_columns': 'RefColumns',
        'ref_db': 'RefDB',
        'ref_table': 'RefTable'
    }

    def __init__(self, columns=None, name=None, on_delete=None, on_update=None, ref_columns=None, ref_db=None, ref_table=None, _configuration=None):  # noqa: E501
        """ForeignKeyForGetTableInfoOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._columns = None
        self._name = None
        self._on_delete = None
        self._on_update = None
        self._ref_columns = None
        self._ref_db = None
        self._ref_table = None
        self.discriminator = None

        if columns is not None:
            self.columns = columns
        if name is not None:
            self.name = name
        if on_delete is not None:
            self.on_delete = on_delete
        if on_update is not None:
            self.on_update = on_update
        if ref_columns is not None:
            self.ref_columns = ref_columns
        if ref_db is not None:
            self.ref_db = ref_db
        if ref_table is not None:
            self.ref_table = ref_table

    @property
    def columns(self):
        """Gets the columns of this ForeignKeyForGetTableInfoOutput.  # noqa: E501


        :return: The columns of this ForeignKeyForGetTableInfoOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this ForeignKeyForGetTableInfoOutput.


        :param columns: The columns of this ForeignKeyForGetTableInfoOutput.  # noqa: E501
        :type: list[str]
        """

        self._columns = columns

    @property
    def name(self):
        """Gets the name of this ForeignKeyForGetTableInfoOutput.  # noqa: E501


        :return: The name of this ForeignKeyForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ForeignKeyForGetTableInfoOutput.


        :param name: The name of this ForeignKeyForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def on_delete(self):
        """Gets the on_delete of this ForeignKeyForGetTableInfoOutput.  # noqa: E501


        :return: The on_delete of this ForeignKeyForGetTableInfoOutput.  # noqa: E501
        :rtype: int
        """
        return self._on_delete

    @on_delete.setter
    def on_delete(self, on_delete):
        """Sets the on_delete of this ForeignKeyForGetTableInfoOutput.


        :param on_delete: The on_delete of this ForeignKeyForGetTableInfoOutput.  # noqa: E501
        :type: int
        """

        self._on_delete = on_delete

    @property
    def on_update(self):
        """Gets the on_update of this ForeignKeyForGetTableInfoOutput.  # noqa: E501


        :return: The on_update of this ForeignKeyForGetTableInfoOutput.  # noqa: E501
        :rtype: int
        """
        return self._on_update

    @on_update.setter
    def on_update(self, on_update):
        """Sets the on_update of this ForeignKeyForGetTableInfoOutput.


        :param on_update: The on_update of this ForeignKeyForGetTableInfoOutput.  # noqa: E501
        :type: int
        """

        self._on_update = on_update

    @property
    def ref_columns(self):
        """Gets the ref_columns of this ForeignKeyForGetTableInfoOutput.  # noqa: E501


        :return: The ref_columns of this ForeignKeyForGetTableInfoOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._ref_columns

    @ref_columns.setter
    def ref_columns(self, ref_columns):
        """Sets the ref_columns of this ForeignKeyForGetTableInfoOutput.


        :param ref_columns: The ref_columns of this ForeignKeyForGetTableInfoOutput.  # noqa: E501
        :type: list[str]
        """

        self._ref_columns = ref_columns

    @property
    def ref_db(self):
        """Gets the ref_db of this ForeignKeyForGetTableInfoOutput.  # noqa: E501


        :return: The ref_db of this ForeignKeyForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._ref_db

    @ref_db.setter
    def ref_db(self, ref_db):
        """Sets the ref_db of this ForeignKeyForGetTableInfoOutput.


        :param ref_db: The ref_db of this ForeignKeyForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._ref_db = ref_db

    @property
    def ref_table(self):
        """Gets the ref_table of this ForeignKeyForGetTableInfoOutput.  # noqa: E501


        :return: The ref_table of this ForeignKeyForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._ref_table

    @ref_table.setter
    def ref_table(self, ref_table):
        """Sets the ref_table of this ForeignKeyForGetTableInfoOutput.


        :param ref_table: The ref_table of this ForeignKeyForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._ref_table = ref_table

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ForeignKeyForGetTableInfoOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForeignKeyForGetTableInfoOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ForeignKeyForGetTableInfoOutput):
            return True

        return self.to_dict() != other.to_dict()
