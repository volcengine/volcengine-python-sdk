# coding: utf-8

"""
    dbw

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ColumnForGetTableInfoOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_be_null': 'bool',
        'comment': 'str',
        'default_value': 'str',
        'is_auto_increment': 'bool',
        'is_primary_key': 'bool',
        'length': 'str',
        'name': 'str',
        'primary_key_order': 'str',
        'type': 'str'
    }

    attribute_map = {
        'allow_be_null': 'AllowBeNull',
        'comment': 'Comment',
        'default_value': 'DefaultValue',
        'is_auto_increment': 'IsAutoIncrement',
        'is_primary_key': 'IsPrimaryKey',
        'length': 'Length',
        'name': 'Name',
        'primary_key_order': 'PrimaryKeyOrder',
        'type': 'Type'
    }

    def __init__(self, allow_be_null=None, comment=None, default_value=None, is_auto_increment=None, is_primary_key=None, length=None, name=None, primary_key_order=None, type=None, _configuration=None):  # noqa: E501
        """ColumnForGetTableInfoOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allow_be_null = None
        self._comment = None
        self._default_value = None
        self._is_auto_increment = None
        self._is_primary_key = None
        self._length = None
        self._name = None
        self._primary_key_order = None
        self._type = None
        self.discriminator = None

        if allow_be_null is not None:
            self.allow_be_null = allow_be_null
        if comment is not None:
            self.comment = comment
        if default_value is not None:
            self.default_value = default_value
        if is_auto_increment is not None:
            self.is_auto_increment = is_auto_increment
        if is_primary_key is not None:
            self.is_primary_key = is_primary_key
        if length is not None:
            self.length = length
        if name is not None:
            self.name = name
        if primary_key_order is not None:
            self.primary_key_order = primary_key_order
        if type is not None:
            self.type = type

    @property
    def allow_be_null(self):
        """Gets the allow_be_null of this ColumnForGetTableInfoOutput.  # noqa: E501


        :return: The allow_be_null of this ColumnForGetTableInfoOutput.  # noqa: E501
        :rtype: bool
        """
        return self._allow_be_null

    @allow_be_null.setter
    def allow_be_null(self, allow_be_null):
        """Sets the allow_be_null of this ColumnForGetTableInfoOutput.


        :param allow_be_null: The allow_be_null of this ColumnForGetTableInfoOutput.  # noqa: E501
        :type: bool
        """

        self._allow_be_null = allow_be_null

    @property
    def comment(self):
        """Gets the comment of this ColumnForGetTableInfoOutput.  # noqa: E501


        :return: The comment of this ColumnForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ColumnForGetTableInfoOutput.


        :param comment: The comment of this ColumnForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def default_value(self):
        """Gets the default_value of this ColumnForGetTableInfoOutput.  # noqa: E501


        :return: The default_value of this ColumnForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this ColumnForGetTableInfoOutput.


        :param default_value: The default_value of this ColumnForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def is_auto_increment(self):
        """Gets the is_auto_increment of this ColumnForGetTableInfoOutput.  # noqa: E501


        :return: The is_auto_increment of this ColumnForGetTableInfoOutput.  # noqa: E501
        :rtype: bool
        """
        return self._is_auto_increment

    @is_auto_increment.setter
    def is_auto_increment(self, is_auto_increment):
        """Sets the is_auto_increment of this ColumnForGetTableInfoOutput.


        :param is_auto_increment: The is_auto_increment of this ColumnForGetTableInfoOutput.  # noqa: E501
        :type: bool
        """

        self._is_auto_increment = is_auto_increment

    @property
    def is_primary_key(self):
        """Gets the is_primary_key of this ColumnForGetTableInfoOutput.  # noqa: E501


        :return: The is_primary_key of this ColumnForGetTableInfoOutput.  # noqa: E501
        :rtype: bool
        """
        return self._is_primary_key

    @is_primary_key.setter
    def is_primary_key(self, is_primary_key):
        """Sets the is_primary_key of this ColumnForGetTableInfoOutput.


        :param is_primary_key: The is_primary_key of this ColumnForGetTableInfoOutput.  # noqa: E501
        :type: bool
        """

        self._is_primary_key = is_primary_key

    @property
    def length(self):
        """Gets the length of this ColumnForGetTableInfoOutput.  # noqa: E501


        :return: The length of this ColumnForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this ColumnForGetTableInfoOutput.


        :param length: The length of this ColumnForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._length = length

    @property
    def name(self):
        """Gets the name of this ColumnForGetTableInfoOutput.  # noqa: E501


        :return: The name of this ColumnForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ColumnForGetTableInfoOutput.


        :param name: The name of this ColumnForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def primary_key_order(self):
        """Gets the primary_key_order of this ColumnForGetTableInfoOutput.  # noqa: E501


        :return: The primary_key_order of this ColumnForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._primary_key_order

    @primary_key_order.setter
    def primary_key_order(self, primary_key_order):
        """Sets the primary_key_order of this ColumnForGetTableInfoOutput.


        :param primary_key_order: The primary_key_order of this ColumnForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._primary_key_order = primary_key_order

    @property
    def type(self):
        """Gets the type of this ColumnForGetTableInfoOutput.  # noqa: E501


        :return: The type of this ColumnForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ColumnForGetTableInfoOutput.


        :param type: The type of this ColumnForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ColumnForGetTableInfoOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ColumnForGetTableInfoOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ColumnForGetTableInfoOutput):
            return True

        return self.to_dict() != other.to_dict()
