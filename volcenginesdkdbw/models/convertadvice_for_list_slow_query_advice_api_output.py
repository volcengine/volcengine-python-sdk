# coding: utf-8

"""
    dbw

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ConvertadviceForListSlowQueryAdviceApiOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advice': 'str',
        'advice_index_size': 'float',
        'advice_level': 'str',
        'benefit': 'float',
        'db': 'str',
        'query_time_avg_after': 'float',
        'risk': 'str',
        'sql_module': 'str',
        'source_ips': 'list[str]',
        'speed_up': 'float',
        'table_name': 'str',
        'user': 'list[str]',
        'agg': 'AggForListSlowQueryAdviceApiOutput'
    }

    attribute_map = {
        'advice': 'Advice',
        'advice_index_size': 'AdviceIndexSize',
        'advice_level': 'AdviceLevel',
        'benefit': 'Benefit',
        'db': 'DB',
        'query_time_avg_after': 'QueryTimeAvgAfter',
        'risk': 'Risk',
        'sql_module': 'SQLModule',
        'source_ips': 'SourceIPs',
        'speed_up': 'SpeedUp',
        'table_name': 'TableName',
        'user': 'User',
        'agg': 'agg'
    }

    def __init__(self, advice=None, advice_index_size=None, advice_level=None, benefit=None, db=None, query_time_avg_after=None, risk=None, sql_module=None, source_ips=None, speed_up=None, table_name=None, user=None, agg=None, _configuration=None):  # noqa: E501
        """ConvertadviceForListSlowQueryAdviceApiOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._advice = None
        self._advice_index_size = None
        self._advice_level = None
        self._benefit = None
        self._db = None
        self._query_time_avg_after = None
        self._risk = None
        self._sql_module = None
        self._source_ips = None
        self._speed_up = None
        self._table_name = None
        self._user = None
        self._agg = None
        self.discriminator = None

        if advice is not None:
            self.advice = advice
        if advice_index_size is not None:
            self.advice_index_size = advice_index_size
        if advice_level is not None:
            self.advice_level = advice_level
        if benefit is not None:
            self.benefit = benefit
        if db is not None:
            self.db = db
        if query_time_avg_after is not None:
            self.query_time_avg_after = query_time_avg_after
        if risk is not None:
            self.risk = risk
        if sql_module is not None:
            self.sql_module = sql_module
        if source_ips is not None:
            self.source_ips = source_ips
        if speed_up is not None:
            self.speed_up = speed_up
        if table_name is not None:
            self.table_name = table_name
        if user is not None:
            self.user = user
        if agg is not None:
            self.agg = agg

    @property
    def advice(self):
        """Gets the advice of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The advice of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: str
        """
        return self._advice

    @advice.setter
    def advice(self, advice):
        """Sets the advice of this ConvertadviceForListSlowQueryAdviceApiOutput.


        :param advice: The advice of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: str
        """

        self._advice = advice

    @property
    def advice_index_size(self):
        """Gets the advice_index_size of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The advice_index_size of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: float
        """
        return self._advice_index_size

    @advice_index_size.setter
    def advice_index_size(self, advice_index_size):
        """Sets the advice_index_size of this ConvertadviceForListSlowQueryAdviceApiOutput.


        :param advice_index_size: The advice_index_size of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: float
        """

        self._advice_index_size = advice_index_size

    @property
    def advice_level(self):
        """Gets the advice_level of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The advice_level of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: str
        """
        return self._advice_level

    @advice_level.setter
    def advice_level(self, advice_level):
        """Sets the advice_level of this ConvertadviceForListSlowQueryAdviceApiOutput.


        :param advice_level: The advice_level of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: str
        """

        self._advice_level = advice_level

    @property
    def benefit(self):
        """Gets the benefit of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The benefit of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: float
        """
        return self._benefit

    @benefit.setter
    def benefit(self, benefit):
        """Sets the benefit of this ConvertadviceForListSlowQueryAdviceApiOutput.


        :param benefit: The benefit of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: float
        """

        self._benefit = benefit

    @property
    def db(self):
        """Gets the db of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The db of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: str
        """
        return self._db

    @db.setter
    def db(self, db):
        """Sets the db of this ConvertadviceForListSlowQueryAdviceApiOutput.


        :param db: The db of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: str
        """

        self._db = db

    @property
    def query_time_avg_after(self):
        """Gets the query_time_avg_after of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The query_time_avg_after of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: float
        """
        return self._query_time_avg_after

    @query_time_avg_after.setter
    def query_time_avg_after(self, query_time_avg_after):
        """Sets the query_time_avg_after of this ConvertadviceForListSlowQueryAdviceApiOutput.


        :param query_time_avg_after: The query_time_avg_after of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: float
        """

        self._query_time_avg_after = query_time_avg_after

    @property
    def risk(self):
        """Gets the risk of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The risk of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: str
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this ConvertadviceForListSlowQueryAdviceApiOutput.


        :param risk: The risk of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: str
        """

        self._risk = risk

    @property
    def sql_module(self):
        """Gets the sql_module of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The sql_module of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: str
        """
        return self._sql_module

    @sql_module.setter
    def sql_module(self, sql_module):
        """Sets the sql_module of this ConvertadviceForListSlowQueryAdviceApiOutput.


        :param sql_module: The sql_module of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: str
        """

        self._sql_module = sql_module

    @property
    def source_ips(self):
        """Gets the source_ips of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The source_ips of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_ips

    @source_ips.setter
    def source_ips(self, source_ips):
        """Sets the source_ips of this ConvertadviceForListSlowQueryAdviceApiOutput.


        :param source_ips: The source_ips of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: list[str]
        """

        self._source_ips = source_ips

    @property
    def speed_up(self):
        """Gets the speed_up of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The speed_up of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: float
        """
        return self._speed_up

    @speed_up.setter
    def speed_up(self, speed_up):
        """Sets the speed_up of this ConvertadviceForListSlowQueryAdviceApiOutput.


        :param speed_up: The speed_up of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: float
        """

        self._speed_up = speed_up

    @property
    def table_name(self):
        """Gets the table_name of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The table_name of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this ConvertadviceForListSlowQueryAdviceApiOutput.


        :param table_name: The table_name of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    @property
    def user(self):
        """Gets the user of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The user of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ConvertadviceForListSlowQueryAdviceApiOutput.


        :param user: The user of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: list[str]
        """

        self._user = user

    @property
    def agg(self):
        """Gets the agg of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501


        :return: The agg of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :rtype: AggForListSlowQueryAdviceApiOutput
        """
        return self._agg

    @agg.setter
    def agg(self, agg):
        """Sets the agg of this ConvertadviceForListSlowQueryAdviceApiOutput.


        :param agg: The agg of this ConvertadviceForListSlowQueryAdviceApiOutput.  # noqa: E501
        :type: AggForListSlowQueryAdviceApiOutput
        """

        self._agg = agg

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConvertadviceForListSlowQueryAdviceApiOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConvertadviceForListSlowQueryAdviceApiOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConvertadviceForListSlowQueryAdviceApiOutput):
            return True

        return self.to_dict() != other.to_dict()
