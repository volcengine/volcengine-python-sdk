# coding: utf-8

"""
    dbw

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class PartitionOptionsForGetTableInfoOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_partition_table': 'bool',
        'partition_key': 'str',
        'partition_method': 'str'
    }

    attribute_map = {
        'is_partition_table': 'IsPartitionTable',
        'partition_key': 'PartitionKey',
        'partition_method': 'PartitionMethod'
    }

    def __init__(self, is_partition_table=None, partition_key=None, partition_method=None, _configuration=None):  # noqa: E501
        """PartitionOptionsForGetTableInfoOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._is_partition_table = None
        self._partition_key = None
        self._partition_method = None
        self.discriminator = None

        if is_partition_table is not None:
            self.is_partition_table = is_partition_table
        if partition_key is not None:
            self.partition_key = partition_key
        if partition_method is not None:
            self.partition_method = partition_method

    @property
    def is_partition_table(self):
        """Gets the is_partition_table of this PartitionOptionsForGetTableInfoOutput.  # noqa: E501


        :return: The is_partition_table of this PartitionOptionsForGetTableInfoOutput.  # noqa: E501
        :rtype: bool
        """
        return self._is_partition_table

    @is_partition_table.setter
    def is_partition_table(self, is_partition_table):
        """Sets the is_partition_table of this PartitionOptionsForGetTableInfoOutput.


        :param is_partition_table: The is_partition_table of this PartitionOptionsForGetTableInfoOutput.  # noqa: E501
        :type: bool
        """

        self._is_partition_table = is_partition_table

    @property
    def partition_key(self):
        """Gets the partition_key of this PartitionOptionsForGetTableInfoOutput.  # noqa: E501


        :return: The partition_key of this PartitionOptionsForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._partition_key

    @partition_key.setter
    def partition_key(self, partition_key):
        """Sets the partition_key of this PartitionOptionsForGetTableInfoOutput.


        :param partition_key: The partition_key of this PartitionOptionsForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._partition_key = partition_key

    @property
    def partition_method(self):
        """Gets the partition_method of this PartitionOptionsForGetTableInfoOutput.  # noqa: E501


        :return: The partition_method of this PartitionOptionsForGetTableInfoOutput.  # noqa: E501
        :rtype: str
        """
        return self._partition_method

    @partition_method.setter
    def partition_method(self, partition_method):
        """Sets the partition_method of this PartitionOptionsForGetTableInfoOutput.


        :param partition_method: The partition_method of this PartitionOptionsForGetTableInfoOutput.  # noqa: E501
        :type: str
        """

        self._partition_method = partition_method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartitionOptionsForGetTableInfoOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartitionOptionsForGetTableInfoOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PartitionOptionsForGetTableInfoOutput):
            return True

        return self.to_dict() != other.to_dict()
