# coding: utf-8

"""
    mock_provider20301113

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CollectCamJsonParamResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apple_parent': 'AppleParentForCollectCamJsonParamOutput',
        'apple_vendors': 'AppleVendorsForCollectCamJsonParamOutput',
        'apples': 'list[AppleForCollectCamJsonParamOutput]',
        'success': 'bool'
    }

    attribute_map = {
        'apple_parent': 'appleParent',
        'apple_vendors': 'appleVendors',
        'apples': 'apples',
        'success': 'success'
    }

    def __init__(self, apple_parent=None, apple_vendors=None, apples=None, success=None, _configuration=None):  # noqa: E501
        """CollectCamJsonParamResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._apple_parent = None
        self._apple_vendors = None
        self._apples = None
        self._success = None
        self.discriminator = None

        if apple_parent is not None:
            self.apple_parent = apple_parent
        if apple_vendors is not None:
            self.apple_vendors = apple_vendors
        if apples is not None:
            self.apples = apples
        if success is not None:
            self.success = success

    @property
    def apple_parent(self):
        """Gets the apple_parent of this CollectCamJsonParamResponse.  # noqa: E501


        :return: The apple_parent of this CollectCamJsonParamResponse.  # noqa: E501
        :rtype: AppleParentForCollectCamJsonParamOutput
        """
        return self._apple_parent

    @apple_parent.setter
    def apple_parent(self, apple_parent):
        """Sets the apple_parent of this CollectCamJsonParamResponse.


        :param apple_parent: The apple_parent of this CollectCamJsonParamResponse.  # noqa: E501
        :type: AppleParentForCollectCamJsonParamOutput
        """

        self._apple_parent = apple_parent

    @property
    def apple_vendors(self):
        """Gets the apple_vendors of this CollectCamJsonParamResponse.  # noqa: E501


        :return: The apple_vendors of this CollectCamJsonParamResponse.  # noqa: E501
        :rtype: AppleVendorsForCollectCamJsonParamOutput
        """
        return self._apple_vendors

    @apple_vendors.setter
    def apple_vendors(self, apple_vendors):
        """Sets the apple_vendors of this CollectCamJsonParamResponse.


        :param apple_vendors: The apple_vendors of this CollectCamJsonParamResponse.  # noqa: E501
        :type: AppleVendorsForCollectCamJsonParamOutput
        """

        self._apple_vendors = apple_vendors

    @property
    def apples(self):
        """Gets the apples of this CollectCamJsonParamResponse.  # noqa: E501


        :return: The apples of this CollectCamJsonParamResponse.  # noqa: E501
        :rtype: list[AppleForCollectCamJsonParamOutput]
        """
        return self._apples

    @apples.setter
    def apples(self, apples):
        """Sets the apples of this CollectCamJsonParamResponse.


        :param apples: The apples of this CollectCamJsonParamResponse.  # noqa: E501
        :type: list[AppleForCollectCamJsonParamOutput]
        """

        self._apples = apples

    @property
    def success(self):
        """Gets the success of this CollectCamJsonParamResponse.  # noqa: E501


        :return: The success of this CollectCamJsonParamResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this CollectCamJsonParamResponse.


        :param success: The success of this CollectCamJsonParamResponse.  # noqa: E501
        :type: bool
        """

        self._success = success

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CollectCamJsonParamResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectCamJsonParamResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CollectCamJsonParamResponse):
            return True

        return self.to_dict() != other.to_dict()
