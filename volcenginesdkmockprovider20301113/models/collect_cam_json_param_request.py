# coding: utf-8

"""
    mock_provider20301113

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CollectCamJsonParamRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'a': 'list[AForCollectCamJsonParamInput]',
        'req_param': 'int',
        'req_param_one': 'str',
        'req_param_three': 'str',
        'req_param_two': 'str'
    }

    attribute_map = {
        'a': 'a',
        'req_param': 'reqParam',
        'req_param_one': 'reqParamOne',
        'req_param_three': 'reqParamThree',
        'req_param_two': 'reqParamTwo'
    }

    def __init__(self, a=None, req_param=None, req_param_one=None, req_param_three=None, req_param_two=None, _configuration=None):  # noqa: E501
        """CollectCamJsonParamRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._a = None
        self._req_param = None
        self._req_param_one = None
        self._req_param_three = None
        self._req_param_two = None
        self.discriminator = None

        if a is not None:
            self.a = a
        self.req_param = req_param
        self.req_param_one = req_param_one
        if req_param_three is not None:
            self.req_param_three = req_param_three
        self.req_param_two = req_param_two

    @property
    def a(self):
        """Gets the a of this CollectCamJsonParamRequest.  # noqa: E501


        :return: The a of this CollectCamJsonParamRequest.  # noqa: E501
        :rtype: list[AForCollectCamJsonParamInput]
        """
        return self._a

    @a.setter
    def a(self, a):
        """Sets the a of this CollectCamJsonParamRequest.


        :param a: The a of this CollectCamJsonParamRequest.  # noqa: E501
        :type: list[AForCollectCamJsonParamInput]
        """

        self._a = a

    @property
    def req_param(self):
        """Gets the req_param of this CollectCamJsonParamRequest.  # noqa: E501


        :return: The req_param of this CollectCamJsonParamRequest.  # noqa: E501
        :rtype: int
        """
        return self._req_param

    @req_param.setter
    def req_param(self, req_param):
        """Sets the req_param of this CollectCamJsonParamRequest.


        :param req_param: The req_param of this CollectCamJsonParamRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and req_param is None:
            raise ValueError("Invalid value for `req_param`, must not be `None`")  # noqa: E501

        self._req_param = req_param

    @property
    def req_param_one(self):
        """Gets the req_param_one of this CollectCamJsonParamRequest.  # noqa: E501


        :return: The req_param_one of this CollectCamJsonParamRequest.  # noqa: E501
        :rtype: str
        """
        return self._req_param_one

    @req_param_one.setter
    def req_param_one(self, req_param_one):
        """Sets the req_param_one of this CollectCamJsonParamRequest.


        :param req_param_one: The req_param_one of this CollectCamJsonParamRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and req_param_one is None:
            raise ValueError("Invalid value for `req_param_one`, must not be `None`")  # noqa: E501

        self._req_param_one = req_param_one

    @property
    def req_param_three(self):
        """Gets the req_param_three of this CollectCamJsonParamRequest.  # noqa: E501


        :return: The req_param_three of this CollectCamJsonParamRequest.  # noqa: E501
        :rtype: str
        """
        return self._req_param_three

    @req_param_three.setter
    def req_param_three(self, req_param_three):
        """Sets the req_param_three of this CollectCamJsonParamRequest.


        :param req_param_three: The req_param_three of this CollectCamJsonParamRequest.  # noqa: E501
        :type: str
        """

        self._req_param_three = req_param_three

    @property
    def req_param_two(self):
        """Gets the req_param_two of this CollectCamJsonParamRequest.  # noqa: E501


        :return: The req_param_two of this CollectCamJsonParamRequest.  # noqa: E501
        :rtype: str
        """
        return self._req_param_two

    @req_param_two.setter
    def req_param_two(self, req_param_two):
        """Sets the req_param_two of this CollectCamJsonParamRequest.


        :param req_param_two: The req_param_two of this CollectCamJsonParamRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and req_param_two is None:
            raise ValueError("Invalid value for `req_param_two`, must not be `None`")  # noqa: E501

        self._req_param_two = req_param_two

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CollectCamJsonParamRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectCamJsonParamRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CollectCamJsonParamRequest):
            return True

        return self.to_dict() != other.to_dict()
