# coding: utf-8

"""
    vefaas_dev

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class RunCodeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'data': 'str',
        'fetch_files': 'list[str]',
        'files': 'FilesForRunCodeInput',
        'function_id': 'str',
        'language': 'str',
        'sandbox_id': 'str'
    }

    attribute_map = {
        'code': 'Code',
        'data': 'Data',
        'fetch_files': 'FetchFiles',
        'files': 'Files',
        'function_id': 'FunctionId',
        'language': 'Language',
        'sandbox_id': 'SandboxId'
    }

    def __init__(self, code=None, data=None, fetch_files=None, files=None, function_id=None, language=None, sandbox_id=None, _configuration=None):  # noqa: E501
        """RunCodeRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._code = None
        self._data = None
        self._fetch_files = None
        self._files = None
        self._function_id = None
        self._language = None
        self._sandbox_id = None
        self.discriminator = None

        self.code = code
        self.data = data
        if fetch_files is not None:
            self.fetch_files = fetch_files
        if files is not None:
            self.files = files
        self.function_id = function_id
        self.language = language
        if sandbox_id is not None:
            self.sandbox_id = sandbox_id

    @property
    def code(self):
        """Gets the code of this RunCodeRequest.  # noqa: E501


        :return: The code of this RunCodeRequest.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this RunCodeRequest.


        :param code: The code of this RunCodeRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def data(self):
        """Gets the data of this RunCodeRequest.  # noqa: E501


        :return: The data of this RunCodeRequest.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this RunCodeRequest.


        :param data: The data of this RunCodeRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def fetch_files(self):
        """Gets the fetch_files of this RunCodeRequest.  # noqa: E501


        :return: The fetch_files of this RunCodeRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._fetch_files

    @fetch_files.setter
    def fetch_files(self, fetch_files):
        """Sets the fetch_files of this RunCodeRequest.


        :param fetch_files: The fetch_files of this RunCodeRequest.  # noqa: E501
        :type: list[str]
        """

        self._fetch_files = fetch_files

    @property
    def files(self):
        """Gets the files of this RunCodeRequest.  # noqa: E501


        :return: The files of this RunCodeRequest.  # noqa: E501
        :rtype: FilesForRunCodeInput
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this RunCodeRequest.


        :param files: The files of this RunCodeRequest.  # noqa: E501
        :type: FilesForRunCodeInput
        """

        self._files = files

    @property
    def function_id(self):
        """Gets the function_id of this RunCodeRequest.  # noqa: E501


        :return: The function_id of this RunCodeRequest.  # noqa: E501
        :rtype: str
        """
        return self._function_id

    @function_id.setter
    def function_id(self, function_id):
        """Sets the function_id of this RunCodeRequest.


        :param function_id: The function_id of this RunCodeRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and function_id is None:
            raise ValueError("Invalid value for `function_id`, must not be `None`")  # noqa: E501

        self._function_id = function_id

    @property
    def language(self):
        """Gets the language of this RunCodeRequest.  # noqa: E501


        :return: The language of this RunCodeRequest.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this RunCodeRequest.


        :param language: The language of this RunCodeRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language

    @property
    def sandbox_id(self):
        """Gets the sandbox_id of this RunCodeRequest.  # noqa: E501


        :return: The sandbox_id of this RunCodeRequest.  # noqa: E501
        :rtype: str
        """
        return self._sandbox_id

    @sandbox_id.setter
    def sandbox_id(self, sandbox_id):
        """Sets the sandbox_id of this RunCodeRequest.


        :param sandbox_id: The sandbox_id of this RunCodeRequest.  # noqa: E501
        :type: str
        """

        self._sandbox_id = sandbox_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunCodeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunCodeRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RunCodeRequest):
            return True

        return self.to_dict() != other.to_dict()
