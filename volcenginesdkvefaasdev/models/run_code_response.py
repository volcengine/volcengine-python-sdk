# coding: utf-8

"""
    vefaas_dev

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class RunCodeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compile_result': 'CompileResultForRunCodeOutput',
        'executor_pod_name': 'str',
        'files': 'FilesForRunCodeOutput',
        'result': 'str',
        'run_result': 'RunResultForRunCodeOutput',
        'status': 'str'
    }

    attribute_map = {
        'compile_result': 'CompileResult',
        'executor_pod_name': 'ExecutorPodName',
        'files': 'Files',
        'result': 'Result',
        'run_result': 'RunResult',
        'status': 'Status'
    }

    def __init__(self, compile_result=None, executor_pod_name=None, files=None, result=None, run_result=None, status=None, _configuration=None):  # noqa: E501
        """RunCodeResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._compile_result = None
        self._executor_pod_name = None
        self._files = None
        self._result = None
        self._run_result = None
        self._status = None
        self.discriminator = None

        if compile_result is not None:
            self.compile_result = compile_result
        if executor_pod_name is not None:
            self.executor_pod_name = executor_pod_name
        if files is not None:
            self.files = files
        if result is not None:
            self.result = result
        if run_result is not None:
            self.run_result = run_result
        if status is not None:
            self.status = status

    @property
    def compile_result(self):
        """Gets the compile_result of this RunCodeResponse.  # noqa: E501


        :return: The compile_result of this RunCodeResponse.  # noqa: E501
        :rtype: CompileResultForRunCodeOutput
        """
        return self._compile_result

    @compile_result.setter
    def compile_result(self, compile_result):
        """Sets the compile_result of this RunCodeResponse.


        :param compile_result: The compile_result of this RunCodeResponse.  # noqa: E501
        :type: CompileResultForRunCodeOutput
        """

        self._compile_result = compile_result

    @property
    def executor_pod_name(self):
        """Gets the executor_pod_name of this RunCodeResponse.  # noqa: E501


        :return: The executor_pod_name of this RunCodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._executor_pod_name

    @executor_pod_name.setter
    def executor_pod_name(self, executor_pod_name):
        """Sets the executor_pod_name of this RunCodeResponse.


        :param executor_pod_name: The executor_pod_name of this RunCodeResponse.  # noqa: E501
        :type: str
        """

        self._executor_pod_name = executor_pod_name

    @property
    def files(self):
        """Gets the files of this RunCodeResponse.  # noqa: E501


        :return: The files of this RunCodeResponse.  # noqa: E501
        :rtype: FilesForRunCodeOutput
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this RunCodeResponse.


        :param files: The files of this RunCodeResponse.  # noqa: E501
        :type: FilesForRunCodeOutput
        """

        self._files = files

    @property
    def result(self):
        """Gets the result of this RunCodeResponse.  # noqa: E501


        :return: The result of this RunCodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this RunCodeResponse.


        :param result: The result of this RunCodeResponse.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def run_result(self):
        """Gets the run_result of this RunCodeResponse.  # noqa: E501


        :return: The run_result of this RunCodeResponse.  # noqa: E501
        :rtype: RunResultForRunCodeOutput
        """
        return self._run_result

    @run_result.setter
    def run_result(self, run_result):
        """Sets the run_result of this RunCodeResponse.


        :param run_result: The run_result of this RunCodeResponse.  # noqa: E501
        :type: RunResultForRunCodeOutput
        """

        self._run_result = run_result

    @property
    def status(self):
        """Gets the status of this RunCodeResponse.  # noqa: E501


        :return: The status of this RunCodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RunCodeResponse.


        :param status: The status of this RunCodeResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunCodeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunCodeResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RunCodeResponse):
            return True

        return self.to_dict() != other.to_dict()
