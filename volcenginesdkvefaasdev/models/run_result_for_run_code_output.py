# coding: utf-8

"""
    vefaas_dev

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class RunResultForRunCodeOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_time': 'str',
        'execution_time': 'str',
        'status': 'str',
        'stderr': 'str',
        'stdout': 'str'
    }

    attribute_map = {
        'cpu_time': 'CpuTime',
        'execution_time': 'ExecutionTime',
        'status': 'Status',
        'stderr': 'Stderr',
        'stdout': 'Stdout'
    }

    def __init__(self, cpu_time=None, execution_time=None, status=None, stderr=None, stdout=None, _configuration=None):  # noqa: E501
        """RunResultForRunCodeOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cpu_time = None
        self._execution_time = None
        self._status = None
        self._stderr = None
        self._stdout = None
        self.discriminator = None

        if cpu_time is not None:
            self.cpu_time = cpu_time
        if execution_time is not None:
            self.execution_time = execution_time
        if status is not None:
            self.status = status
        if stderr is not None:
            self.stderr = stderr
        if stdout is not None:
            self.stdout = stdout

    @property
    def cpu_time(self):
        """Gets the cpu_time of this RunResultForRunCodeOutput.  # noqa: E501


        :return: The cpu_time of this RunResultForRunCodeOutput.  # noqa: E501
        :rtype: str
        """
        return self._cpu_time

    @cpu_time.setter
    def cpu_time(self, cpu_time):
        """Sets the cpu_time of this RunResultForRunCodeOutput.


        :param cpu_time: The cpu_time of this RunResultForRunCodeOutput.  # noqa: E501
        :type: str
        """

        self._cpu_time = cpu_time

    @property
    def execution_time(self):
        """Gets the execution_time of this RunResultForRunCodeOutput.  # noqa: E501


        :return: The execution_time of this RunResultForRunCodeOutput.  # noqa: E501
        :rtype: str
        """
        return self._execution_time

    @execution_time.setter
    def execution_time(self, execution_time):
        """Sets the execution_time of this RunResultForRunCodeOutput.


        :param execution_time: The execution_time of this RunResultForRunCodeOutput.  # noqa: E501
        :type: str
        """

        self._execution_time = execution_time

    @property
    def status(self):
        """Gets the status of this RunResultForRunCodeOutput.  # noqa: E501


        :return: The status of this RunResultForRunCodeOutput.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RunResultForRunCodeOutput.


        :param status: The status of this RunResultForRunCodeOutput.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def stderr(self):
        """Gets the stderr of this RunResultForRunCodeOutput.  # noqa: E501


        :return: The stderr of this RunResultForRunCodeOutput.  # noqa: E501
        :rtype: str
        """
        return self._stderr

    @stderr.setter
    def stderr(self, stderr):
        """Sets the stderr of this RunResultForRunCodeOutput.


        :param stderr: The stderr of this RunResultForRunCodeOutput.  # noqa: E501
        :type: str
        """

        self._stderr = stderr

    @property
    def stdout(self):
        """Gets the stdout of this RunResultForRunCodeOutput.  # noqa: E501


        :return: The stdout of this RunResultForRunCodeOutput.  # noqa: E501
        :rtype: str
        """
        return self._stdout

    @stdout.setter
    def stdout(self, stdout):
        """Sets the stdout of this RunResultForRunCodeOutput.


        :param stdout: The stdout of this RunResultForRunCodeOutput.  # noqa: E501
        :type: str
        """

        self._stdout = stdout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunResultForRunCodeOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunResultForRunCodeOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RunResultForRunCodeOutput):
            return True

        return self.to_dict() != other.to_dict()
