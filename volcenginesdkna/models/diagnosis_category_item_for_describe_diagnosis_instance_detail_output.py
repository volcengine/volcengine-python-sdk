# coding: utf-8

"""
    na

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DiagnosisCategoryItemForDescribeDiagnosisInstanceDetailOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'diagnosis_items': 'list[DiagnosisItemForDescribeDiagnosisInstanceDetailOutput]',
        'item_category_name': 'str'
    }

    attribute_map = {
        'diagnosis_items': 'DiagnosisItems',
        'item_category_name': 'ItemCategoryName'
    }

    def __init__(self, diagnosis_items=None, item_category_name=None, _configuration=None):  # noqa: E501
        """DiagnosisCategoryItemForDescribeDiagnosisInstanceDetailOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._diagnosis_items = None
        self._item_category_name = None
        self.discriminator = None

        if diagnosis_items is not None:
            self.diagnosis_items = diagnosis_items
        if item_category_name is not None:
            self.item_category_name = item_category_name

    @property
    def diagnosis_items(self):
        """Gets the diagnosis_items of this DiagnosisCategoryItemForDescribeDiagnosisInstanceDetailOutput.  # noqa: E501


        :return: The diagnosis_items of this DiagnosisCategoryItemForDescribeDiagnosisInstanceDetailOutput.  # noqa: E501
        :rtype: list[DiagnosisItemForDescribeDiagnosisInstanceDetailOutput]
        """
        return self._diagnosis_items

    @diagnosis_items.setter
    def diagnosis_items(self, diagnosis_items):
        """Sets the diagnosis_items of this DiagnosisCategoryItemForDescribeDiagnosisInstanceDetailOutput.


        :param diagnosis_items: The diagnosis_items of this DiagnosisCategoryItemForDescribeDiagnosisInstanceDetailOutput.  # noqa: E501
        :type: list[DiagnosisItemForDescribeDiagnosisInstanceDetailOutput]
        """

        self._diagnosis_items = diagnosis_items

    @property
    def item_category_name(self):
        """Gets the item_category_name of this DiagnosisCategoryItemForDescribeDiagnosisInstanceDetailOutput.  # noqa: E501


        :return: The item_category_name of this DiagnosisCategoryItemForDescribeDiagnosisInstanceDetailOutput.  # noqa: E501
        :rtype: str
        """
        return self._item_category_name

    @item_category_name.setter
    def item_category_name(self, item_category_name):
        """Sets the item_category_name of this DiagnosisCategoryItemForDescribeDiagnosisInstanceDetailOutput.


        :param item_category_name: The item_category_name of this DiagnosisCategoryItemForDescribeDiagnosisInstanceDetailOutput.  # noqa: E501
        :type: str
        """

        self._item_category_name = item_category_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiagnosisCategoryItemForDescribeDiagnosisInstanceDetailOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiagnosisCategoryItemForDescribeDiagnosisInstanceDetailOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DiagnosisCategoryItemForDescribeDiagnosisInstanceDetailOutput):
            return True

        return self.to_dict() != other.to_dict()
