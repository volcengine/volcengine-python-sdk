# coding: utf-8

"""
    na

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DiagnosisInstanceForDescribeDiagnosisInstancesOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'creation_time': 'str',
        'diagnosis_instance_id': 'str',
        'diagnosis_instance_status': 'str',
        'eip_address': 'str',
        'resource_deleted': 'bool',
        'resource_instance_id': 'str',
        'resource_instance_name': 'str',
        'resource_region': 'str',
        'resource_type': 'str'
    }

    attribute_map = {
        'count': 'Count',
        'creation_time': 'CreationTime',
        'diagnosis_instance_id': 'DiagnosisInstanceId',
        'diagnosis_instance_status': 'DiagnosisInstanceStatus',
        'eip_address': 'EipAddress',
        'resource_deleted': 'ResourceDeleted',
        'resource_instance_id': 'ResourceInstanceId',
        'resource_instance_name': 'ResourceInstanceName',
        'resource_region': 'ResourceRegion',
        'resource_type': 'ResourceType'
    }

    def __init__(self, count=None, creation_time=None, diagnosis_instance_id=None, diagnosis_instance_status=None, eip_address=None, resource_deleted=None, resource_instance_id=None, resource_instance_name=None, resource_region=None, resource_type=None, _configuration=None):  # noqa: E501
        """DiagnosisInstanceForDescribeDiagnosisInstancesOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._count = None
        self._creation_time = None
        self._diagnosis_instance_id = None
        self._diagnosis_instance_status = None
        self._eip_address = None
        self._resource_deleted = None
        self._resource_instance_id = None
        self._resource_instance_name = None
        self._resource_region = None
        self._resource_type = None
        self.discriminator = None

        if count is not None:
            self.count = count
        if creation_time is not None:
            self.creation_time = creation_time
        if diagnosis_instance_id is not None:
            self.diagnosis_instance_id = diagnosis_instance_id
        if diagnosis_instance_status is not None:
            self.diagnosis_instance_status = diagnosis_instance_status
        if eip_address is not None:
            self.eip_address = eip_address
        if resource_deleted is not None:
            self.resource_deleted = resource_deleted
        if resource_instance_id is not None:
            self.resource_instance_id = resource_instance_id
        if resource_instance_name is not None:
            self.resource_instance_name = resource_instance_name
        if resource_region is not None:
            self.resource_region = resource_region
        if resource_type is not None:
            self.resource_type = resource_type

    @property
    def count(self):
        """Gets the count of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501


        :return: The count of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.


        :param count: The count of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def creation_time(self):
        """Gets the creation_time of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501


        :return: The creation_time of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.


        :param creation_time: The creation_time of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501
        :type: str
        """

        self._creation_time = creation_time

    @property
    def diagnosis_instance_id(self):
        """Gets the diagnosis_instance_id of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501


        :return: The diagnosis_instance_id of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501
        :rtype: str
        """
        return self._diagnosis_instance_id

    @diagnosis_instance_id.setter
    def diagnosis_instance_id(self, diagnosis_instance_id):
        """Sets the diagnosis_instance_id of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.


        :param diagnosis_instance_id: The diagnosis_instance_id of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501
        :type: str
        """

        self._diagnosis_instance_id = diagnosis_instance_id

    @property
    def diagnosis_instance_status(self):
        """Gets the diagnosis_instance_status of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501


        :return: The diagnosis_instance_status of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501
        :rtype: str
        """
        return self._diagnosis_instance_status

    @diagnosis_instance_status.setter
    def diagnosis_instance_status(self, diagnosis_instance_status):
        """Sets the diagnosis_instance_status of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.


        :param diagnosis_instance_status: The diagnosis_instance_status of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501
        :type: str
        """

        self._diagnosis_instance_status = diagnosis_instance_status

    @property
    def eip_address(self):
        """Gets the eip_address of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501


        :return: The eip_address of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501
        :rtype: str
        """
        return self._eip_address

    @eip_address.setter
    def eip_address(self, eip_address):
        """Sets the eip_address of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.


        :param eip_address: The eip_address of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501
        :type: str
        """

        self._eip_address = eip_address

    @property
    def resource_deleted(self):
        """Gets the resource_deleted of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501


        :return: The resource_deleted of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501
        :rtype: bool
        """
        return self._resource_deleted

    @resource_deleted.setter
    def resource_deleted(self, resource_deleted):
        """Sets the resource_deleted of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.


        :param resource_deleted: The resource_deleted of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501
        :type: bool
        """

        self._resource_deleted = resource_deleted

    @property
    def resource_instance_id(self):
        """Gets the resource_instance_id of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501


        :return: The resource_instance_id of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501
        :rtype: str
        """
        return self._resource_instance_id

    @resource_instance_id.setter
    def resource_instance_id(self, resource_instance_id):
        """Sets the resource_instance_id of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.


        :param resource_instance_id: The resource_instance_id of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501
        :type: str
        """

        self._resource_instance_id = resource_instance_id

    @property
    def resource_instance_name(self):
        """Gets the resource_instance_name of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501


        :return: The resource_instance_name of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501
        :rtype: str
        """
        return self._resource_instance_name

    @resource_instance_name.setter
    def resource_instance_name(self, resource_instance_name):
        """Sets the resource_instance_name of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.


        :param resource_instance_name: The resource_instance_name of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501
        :type: str
        """

        self._resource_instance_name = resource_instance_name

    @property
    def resource_region(self):
        """Gets the resource_region of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501


        :return: The resource_region of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501
        :rtype: str
        """
        return self._resource_region

    @resource_region.setter
    def resource_region(self, resource_region):
        """Sets the resource_region of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.


        :param resource_region: The resource_region of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501
        :type: str
        """

        self._resource_region = resource_region

    @property
    def resource_type(self):
        """Gets the resource_type of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501


        :return: The resource_type of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.


        :param resource_type: The resource_type of this DiagnosisInstanceForDescribeDiagnosisInstancesOutput.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiagnosisInstanceForDescribeDiagnosisInstancesOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiagnosisInstanceForDescribeDiagnosisInstancesOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DiagnosisInstanceForDescribeDiagnosisInstancesOutput):
            return True

        return self.to_dict() != other.to_dict()
