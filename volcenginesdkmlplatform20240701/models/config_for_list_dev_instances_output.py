# coding: utf-8

"""
    ml_platform20240701

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ConfigForListDevInstancesOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cfs': 'CfsForListDevInstancesOutput',
        'nas': 'NasForListDevInstancesOutput',
        'nas_ap': 'NasAPForListDevInstancesOutput',
        'sfcs': 'SfcsForListDevInstancesOutput',
        'tos': 'TosForListDevInstancesOutput',
        'vepfs': 'VepfsForListDevInstancesOutput',
        'vepfs_ap': 'VepfsAPForListDevInstancesOutput'
    }

    attribute_map = {
        'cfs': 'Cfs',
        'nas': 'Nas',
        'nas_ap': 'NasAP',
        'sfcs': 'Sfcs',
        'tos': 'Tos',
        'vepfs': 'Vepfs',
        'vepfs_ap': 'VepfsAP'
    }

    def __init__(self, cfs=None, nas=None, nas_ap=None, sfcs=None, tos=None, vepfs=None, vepfs_ap=None, _configuration=None):  # noqa: E501
        """ConfigForListDevInstancesOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cfs = None
        self._nas = None
        self._nas_ap = None
        self._sfcs = None
        self._tos = None
        self._vepfs = None
        self._vepfs_ap = None
        self.discriminator = None

        if cfs is not None:
            self.cfs = cfs
        if nas is not None:
            self.nas = nas
        if nas_ap is not None:
            self.nas_ap = nas_ap
        if sfcs is not None:
            self.sfcs = sfcs
        if tos is not None:
            self.tos = tos
        if vepfs is not None:
            self.vepfs = vepfs
        if vepfs_ap is not None:
            self.vepfs_ap = vepfs_ap

    @property
    def cfs(self):
        """Gets the cfs of this ConfigForListDevInstancesOutput.  # noqa: E501


        :return: The cfs of this ConfigForListDevInstancesOutput.  # noqa: E501
        :rtype: CfsForListDevInstancesOutput
        """
        return self._cfs

    @cfs.setter
    def cfs(self, cfs):
        """Sets the cfs of this ConfigForListDevInstancesOutput.


        :param cfs: The cfs of this ConfigForListDevInstancesOutput.  # noqa: E501
        :type: CfsForListDevInstancesOutput
        """

        self._cfs = cfs

    @property
    def nas(self):
        """Gets the nas of this ConfigForListDevInstancesOutput.  # noqa: E501


        :return: The nas of this ConfigForListDevInstancesOutput.  # noqa: E501
        :rtype: NasForListDevInstancesOutput
        """
        return self._nas

    @nas.setter
    def nas(self, nas):
        """Sets the nas of this ConfigForListDevInstancesOutput.


        :param nas: The nas of this ConfigForListDevInstancesOutput.  # noqa: E501
        :type: NasForListDevInstancesOutput
        """

        self._nas = nas

    @property
    def nas_ap(self):
        """Gets the nas_ap of this ConfigForListDevInstancesOutput.  # noqa: E501


        :return: The nas_ap of this ConfigForListDevInstancesOutput.  # noqa: E501
        :rtype: NasAPForListDevInstancesOutput
        """
        return self._nas_ap

    @nas_ap.setter
    def nas_ap(self, nas_ap):
        """Sets the nas_ap of this ConfigForListDevInstancesOutput.


        :param nas_ap: The nas_ap of this ConfigForListDevInstancesOutput.  # noqa: E501
        :type: NasAPForListDevInstancesOutput
        """

        self._nas_ap = nas_ap

    @property
    def sfcs(self):
        """Gets the sfcs of this ConfigForListDevInstancesOutput.  # noqa: E501


        :return: The sfcs of this ConfigForListDevInstancesOutput.  # noqa: E501
        :rtype: SfcsForListDevInstancesOutput
        """
        return self._sfcs

    @sfcs.setter
    def sfcs(self, sfcs):
        """Sets the sfcs of this ConfigForListDevInstancesOutput.


        :param sfcs: The sfcs of this ConfigForListDevInstancesOutput.  # noqa: E501
        :type: SfcsForListDevInstancesOutput
        """

        self._sfcs = sfcs

    @property
    def tos(self):
        """Gets the tos of this ConfigForListDevInstancesOutput.  # noqa: E501


        :return: The tos of this ConfigForListDevInstancesOutput.  # noqa: E501
        :rtype: TosForListDevInstancesOutput
        """
        return self._tos

    @tos.setter
    def tos(self, tos):
        """Sets the tos of this ConfigForListDevInstancesOutput.


        :param tos: The tos of this ConfigForListDevInstancesOutput.  # noqa: E501
        :type: TosForListDevInstancesOutput
        """

        self._tos = tos

    @property
    def vepfs(self):
        """Gets the vepfs of this ConfigForListDevInstancesOutput.  # noqa: E501


        :return: The vepfs of this ConfigForListDevInstancesOutput.  # noqa: E501
        :rtype: VepfsForListDevInstancesOutput
        """
        return self._vepfs

    @vepfs.setter
    def vepfs(self, vepfs):
        """Sets the vepfs of this ConfigForListDevInstancesOutput.


        :param vepfs: The vepfs of this ConfigForListDevInstancesOutput.  # noqa: E501
        :type: VepfsForListDevInstancesOutput
        """

        self._vepfs = vepfs

    @property
    def vepfs_ap(self):
        """Gets the vepfs_ap of this ConfigForListDevInstancesOutput.  # noqa: E501


        :return: The vepfs_ap of this ConfigForListDevInstancesOutput.  # noqa: E501
        :rtype: VepfsAPForListDevInstancesOutput
        """
        return self._vepfs_ap

    @vepfs_ap.setter
    def vepfs_ap(self, vepfs_ap):
        """Sets the vepfs_ap of this ConfigForListDevInstancesOutput.


        :param vepfs_ap: The vepfs_ap of this ConfigForListDevInstancesOutput.  # noqa: E501
        :type: VepfsAPForListDevInstancesOutput
        """

        self._vepfs_ap = vepfs_ap

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigForListDevInstancesOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigForListDevInstancesOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigForListDevInstancesOutput):
            return True

        return self.to_dict() != other.to_dict()
