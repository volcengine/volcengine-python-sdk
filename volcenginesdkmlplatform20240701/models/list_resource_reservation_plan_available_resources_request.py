# coding: utf-8

"""
    ml_platform20240701

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ListResourceReservationPlanAvailableResourcesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compute_resource': 'ComputeResourceForListResourceReservationPlanAvailableResourcesInput',
        'max_hours_to_use': 'int',
        'min_hours_to_use': 'int',
        'time_range_end': 'str',
        'time_range_start': 'str'
    }

    attribute_map = {
        'compute_resource': 'ComputeResource',
        'max_hours_to_use': 'MaxHoursToUse',
        'min_hours_to_use': 'MinHoursToUse',
        'time_range_end': 'TimeRangeEnd',
        'time_range_start': 'TimeRangeStart'
    }

    def __init__(self, compute_resource=None, max_hours_to_use=None, min_hours_to_use=None, time_range_end=None, time_range_start=None, _configuration=None):  # noqa: E501
        """ListResourceReservationPlanAvailableResourcesRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._compute_resource = None
        self._max_hours_to_use = None
        self._min_hours_to_use = None
        self._time_range_end = None
        self._time_range_start = None
        self.discriminator = None

        if compute_resource is not None:
            self.compute_resource = compute_resource
        self.max_hours_to_use = max_hours_to_use
        self.min_hours_to_use = min_hours_to_use
        self.time_range_end = time_range_end
        self.time_range_start = time_range_start

    @property
    def compute_resource(self):
        """Gets the compute_resource of this ListResourceReservationPlanAvailableResourcesRequest.  # noqa: E501


        :return: The compute_resource of this ListResourceReservationPlanAvailableResourcesRequest.  # noqa: E501
        :rtype: ComputeResourceForListResourceReservationPlanAvailableResourcesInput
        """
        return self._compute_resource

    @compute_resource.setter
    def compute_resource(self, compute_resource):
        """Sets the compute_resource of this ListResourceReservationPlanAvailableResourcesRequest.


        :param compute_resource: The compute_resource of this ListResourceReservationPlanAvailableResourcesRequest.  # noqa: E501
        :type: ComputeResourceForListResourceReservationPlanAvailableResourcesInput
        """

        self._compute_resource = compute_resource

    @property
    def max_hours_to_use(self):
        """Gets the max_hours_to_use of this ListResourceReservationPlanAvailableResourcesRequest.  # noqa: E501


        :return: The max_hours_to_use of this ListResourceReservationPlanAvailableResourcesRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_hours_to_use

    @max_hours_to_use.setter
    def max_hours_to_use(self, max_hours_to_use):
        """Sets the max_hours_to_use of this ListResourceReservationPlanAvailableResourcesRequest.


        :param max_hours_to_use: The max_hours_to_use of this ListResourceReservationPlanAvailableResourcesRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and max_hours_to_use is None:
            raise ValueError("Invalid value for `max_hours_to_use`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_hours_to_use is not None and max_hours_to_use > 180):  # noqa: E501
            raise ValueError("Invalid value for `max_hours_to_use`, must be a value less than or equal to `180`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_hours_to_use is not None and max_hours_to_use < 12):  # noqa: E501
            raise ValueError("Invalid value for `max_hours_to_use`, must be a value greater than or equal to `12`")  # noqa: E501

        self._max_hours_to_use = max_hours_to_use

    @property
    def min_hours_to_use(self):
        """Gets the min_hours_to_use of this ListResourceReservationPlanAvailableResourcesRequest.  # noqa: E501


        :return: The min_hours_to_use of this ListResourceReservationPlanAvailableResourcesRequest.  # noqa: E501
        :rtype: int
        """
        return self._min_hours_to_use

    @min_hours_to_use.setter
    def min_hours_to_use(self, min_hours_to_use):
        """Sets the min_hours_to_use of this ListResourceReservationPlanAvailableResourcesRequest.


        :param min_hours_to_use: The min_hours_to_use of this ListResourceReservationPlanAvailableResourcesRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and min_hours_to_use is None:
            raise ValueError("Invalid value for `min_hours_to_use`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                min_hours_to_use is not None and min_hours_to_use > 180):  # noqa: E501
            raise ValueError("Invalid value for `min_hours_to_use`, must be a value less than or equal to `180`")  # noqa: E501
        if (self._configuration.client_side_validation and
                min_hours_to_use is not None and min_hours_to_use < 12):  # noqa: E501
            raise ValueError("Invalid value for `min_hours_to_use`, must be a value greater than or equal to `12`")  # noqa: E501

        self._min_hours_to_use = min_hours_to_use

    @property
    def time_range_end(self):
        """Gets the time_range_end of this ListResourceReservationPlanAvailableResourcesRequest.  # noqa: E501


        :return: The time_range_end of this ListResourceReservationPlanAvailableResourcesRequest.  # noqa: E501
        :rtype: str
        """
        return self._time_range_end

    @time_range_end.setter
    def time_range_end(self, time_range_end):
        """Sets the time_range_end of this ListResourceReservationPlanAvailableResourcesRequest.


        :param time_range_end: The time_range_end of this ListResourceReservationPlanAvailableResourcesRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and time_range_end is None:
            raise ValueError("Invalid value for `time_range_end`, must not be `None`")  # noqa: E501

        self._time_range_end = time_range_end

    @property
    def time_range_start(self):
        """Gets the time_range_start of this ListResourceReservationPlanAvailableResourcesRequest.  # noqa: E501


        :return: The time_range_start of this ListResourceReservationPlanAvailableResourcesRequest.  # noqa: E501
        :rtype: str
        """
        return self._time_range_start

    @time_range_start.setter
    def time_range_start(self, time_range_start):
        """Sets the time_range_start of this ListResourceReservationPlanAvailableResourcesRequest.


        :param time_range_start: The time_range_start of this ListResourceReservationPlanAvailableResourcesRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and time_range_start is None:
            raise ValueError("Invalid value for `time_range_start`, must not be `None`")  # noqa: E501

        self._time_range_start = time_range_start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListResourceReservationPlanAvailableResourcesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListResourceReservationPlanAvailableResourcesRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListResourceReservationPlanAvailableResourcesRequest):
            return True

        return self.to_dict() != other.to_dict()
