# coding: utf-8

"""
    dts

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class PG2RocketMQSettingsForModifyTransmissionTaskInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'etl_settings': 'ETLSettingsForModifyTransmissionTaskInput',
        'error_behavior_settings': 'ErrorBehaviorSettingsForModifyTransmissionTaskInput',
        'full_transmission_settings': 'FullTransmissionSettingsForModifyTransmissionTaskInput',
        'incr_transmission_settings': 'IncrTransmissionSettingsForModifyTransmissionTaskInput',
        'meta_transmission_settings': 'MetaTransmissionSettingsForModifyTransmissionTaskInput',
        'my_sql_position': 'list[MySQLPositionForModifyTransmissionTaskInput]',
        'object_mappings': 'list[ObjectMappingForModifyTransmissionTaskInput]',
        'subscription_settings': 'SubscriptionSettingsForModifyTransmissionTaskInput'
    }

    attribute_map = {
        'etl_settings': 'ETLSettings',
        'error_behavior_settings': 'ErrorBehaviorSettings',
        'full_transmission_settings': 'FullTransmissionSettings',
        'incr_transmission_settings': 'IncrTransmissionSettings',
        'meta_transmission_settings': 'MetaTransmissionSettings',
        'my_sql_position': 'MySQLPosition',
        'object_mappings': 'ObjectMappings',
        'subscription_settings': 'SubscriptionSettings'
    }

    def __init__(self, etl_settings=None, error_behavior_settings=None, full_transmission_settings=None, incr_transmission_settings=None, meta_transmission_settings=None, my_sql_position=None, object_mappings=None, subscription_settings=None, _configuration=None):  # noqa: E501
        """PG2RocketMQSettingsForModifyTransmissionTaskInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._etl_settings = None
        self._error_behavior_settings = None
        self._full_transmission_settings = None
        self._incr_transmission_settings = None
        self._meta_transmission_settings = None
        self._my_sql_position = None
        self._object_mappings = None
        self._subscription_settings = None
        self.discriminator = None

        if etl_settings is not None:
            self.etl_settings = etl_settings
        if error_behavior_settings is not None:
            self.error_behavior_settings = error_behavior_settings
        if full_transmission_settings is not None:
            self.full_transmission_settings = full_transmission_settings
        if incr_transmission_settings is not None:
            self.incr_transmission_settings = incr_transmission_settings
        if meta_transmission_settings is not None:
            self.meta_transmission_settings = meta_transmission_settings
        if my_sql_position is not None:
            self.my_sql_position = my_sql_position
        if object_mappings is not None:
            self.object_mappings = object_mappings
        if subscription_settings is not None:
            self.subscription_settings = subscription_settings

    @property
    def etl_settings(self):
        """Gets the etl_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501


        :return: The etl_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :rtype: ETLSettingsForModifyTransmissionTaskInput
        """
        return self._etl_settings

    @etl_settings.setter
    def etl_settings(self, etl_settings):
        """Sets the etl_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.


        :param etl_settings: The etl_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :type: ETLSettingsForModifyTransmissionTaskInput
        """

        self._etl_settings = etl_settings

    @property
    def error_behavior_settings(self):
        """Gets the error_behavior_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501


        :return: The error_behavior_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :rtype: ErrorBehaviorSettingsForModifyTransmissionTaskInput
        """
        return self._error_behavior_settings

    @error_behavior_settings.setter
    def error_behavior_settings(self, error_behavior_settings):
        """Sets the error_behavior_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.


        :param error_behavior_settings: The error_behavior_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :type: ErrorBehaviorSettingsForModifyTransmissionTaskInput
        """

        self._error_behavior_settings = error_behavior_settings

    @property
    def full_transmission_settings(self):
        """Gets the full_transmission_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501


        :return: The full_transmission_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :rtype: FullTransmissionSettingsForModifyTransmissionTaskInput
        """
        return self._full_transmission_settings

    @full_transmission_settings.setter
    def full_transmission_settings(self, full_transmission_settings):
        """Sets the full_transmission_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.


        :param full_transmission_settings: The full_transmission_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :type: FullTransmissionSettingsForModifyTransmissionTaskInput
        """

        self._full_transmission_settings = full_transmission_settings

    @property
    def incr_transmission_settings(self):
        """Gets the incr_transmission_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501


        :return: The incr_transmission_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :rtype: IncrTransmissionSettingsForModifyTransmissionTaskInput
        """
        return self._incr_transmission_settings

    @incr_transmission_settings.setter
    def incr_transmission_settings(self, incr_transmission_settings):
        """Sets the incr_transmission_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.


        :param incr_transmission_settings: The incr_transmission_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :type: IncrTransmissionSettingsForModifyTransmissionTaskInput
        """

        self._incr_transmission_settings = incr_transmission_settings

    @property
    def meta_transmission_settings(self):
        """Gets the meta_transmission_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501


        :return: The meta_transmission_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :rtype: MetaTransmissionSettingsForModifyTransmissionTaskInput
        """
        return self._meta_transmission_settings

    @meta_transmission_settings.setter
    def meta_transmission_settings(self, meta_transmission_settings):
        """Sets the meta_transmission_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.


        :param meta_transmission_settings: The meta_transmission_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :type: MetaTransmissionSettingsForModifyTransmissionTaskInput
        """

        self._meta_transmission_settings = meta_transmission_settings

    @property
    def my_sql_position(self):
        """Gets the my_sql_position of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501


        :return: The my_sql_position of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :rtype: list[MySQLPositionForModifyTransmissionTaskInput]
        """
        return self._my_sql_position

    @my_sql_position.setter
    def my_sql_position(self, my_sql_position):
        """Sets the my_sql_position of this PG2RocketMQSettingsForModifyTransmissionTaskInput.


        :param my_sql_position: The my_sql_position of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :type: list[MySQLPositionForModifyTransmissionTaskInput]
        """

        self._my_sql_position = my_sql_position

    @property
    def object_mappings(self):
        """Gets the object_mappings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501


        :return: The object_mappings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :rtype: list[ObjectMappingForModifyTransmissionTaskInput]
        """
        return self._object_mappings

    @object_mappings.setter
    def object_mappings(self, object_mappings):
        """Sets the object_mappings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.


        :param object_mappings: The object_mappings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :type: list[ObjectMappingForModifyTransmissionTaskInput]
        """

        self._object_mappings = object_mappings

    @property
    def subscription_settings(self):
        """Gets the subscription_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501


        :return: The subscription_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :rtype: SubscriptionSettingsForModifyTransmissionTaskInput
        """
        return self._subscription_settings

    @subscription_settings.setter
    def subscription_settings(self, subscription_settings):
        """Sets the subscription_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.


        :param subscription_settings: The subscription_settings of this PG2RocketMQSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :type: SubscriptionSettingsForModifyTransmissionTaskInput
        """

        self._subscription_settings = subscription_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PG2RocketMQSettingsForModifyTransmissionTaskInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PG2RocketMQSettingsForModifyTransmissionTaskInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PG2RocketMQSettingsForModifyTransmissionTaskInput):
            return True

        return self.to_dict() != other.to_dict()
