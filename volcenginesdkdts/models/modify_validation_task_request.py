# coding: utf-8

"""
    dts

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ModifyValidationTaskRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dest_config': 'DestConfigForModifyValidationTaskInput',
        'solution_settings': 'SolutionSettingsForModifyValidationTaskInput',
        'src_config': 'SrcConfigForModifyValidationTaskInput',
        'task_id': 'str',
        'traffic_spec': 'str'
    }

    attribute_map = {
        'dest_config': 'DestConfig',
        'solution_settings': 'SolutionSettings',
        'src_config': 'SrcConfig',
        'task_id': 'TaskId',
        'traffic_spec': 'TrafficSpec'
    }

    def __init__(self, dest_config=None, solution_settings=None, src_config=None, task_id=None, traffic_spec=None, _configuration=None):  # noqa: E501
        """ModifyValidationTaskRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dest_config = None
        self._solution_settings = None
        self._src_config = None
        self._task_id = None
        self._traffic_spec = None
        self.discriminator = None

        if dest_config is not None:
            self.dest_config = dest_config
        if solution_settings is not None:
            self.solution_settings = solution_settings
        if src_config is not None:
            self.src_config = src_config
        self.task_id = task_id
        if traffic_spec is not None:
            self.traffic_spec = traffic_spec

    @property
    def dest_config(self):
        """Gets the dest_config of this ModifyValidationTaskRequest.  # noqa: E501


        :return: The dest_config of this ModifyValidationTaskRequest.  # noqa: E501
        :rtype: DestConfigForModifyValidationTaskInput
        """
        return self._dest_config

    @dest_config.setter
    def dest_config(self, dest_config):
        """Sets the dest_config of this ModifyValidationTaskRequest.


        :param dest_config: The dest_config of this ModifyValidationTaskRequest.  # noqa: E501
        :type: DestConfigForModifyValidationTaskInput
        """

        self._dest_config = dest_config

    @property
    def solution_settings(self):
        """Gets the solution_settings of this ModifyValidationTaskRequest.  # noqa: E501


        :return: The solution_settings of this ModifyValidationTaskRequest.  # noqa: E501
        :rtype: SolutionSettingsForModifyValidationTaskInput
        """
        return self._solution_settings

    @solution_settings.setter
    def solution_settings(self, solution_settings):
        """Sets the solution_settings of this ModifyValidationTaskRequest.


        :param solution_settings: The solution_settings of this ModifyValidationTaskRequest.  # noqa: E501
        :type: SolutionSettingsForModifyValidationTaskInput
        """

        self._solution_settings = solution_settings

    @property
    def src_config(self):
        """Gets the src_config of this ModifyValidationTaskRequest.  # noqa: E501


        :return: The src_config of this ModifyValidationTaskRequest.  # noqa: E501
        :rtype: SrcConfigForModifyValidationTaskInput
        """
        return self._src_config

    @src_config.setter
    def src_config(self, src_config):
        """Sets the src_config of this ModifyValidationTaskRequest.


        :param src_config: The src_config of this ModifyValidationTaskRequest.  # noqa: E501
        :type: SrcConfigForModifyValidationTaskInput
        """

        self._src_config = src_config

    @property
    def task_id(self):
        """Gets the task_id of this ModifyValidationTaskRequest.  # noqa: E501


        :return: The task_id of this ModifyValidationTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this ModifyValidationTaskRequest.


        :param task_id: The task_id of this ModifyValidationTaskRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")  # noqa: E501

        self._task_id = task_id

    @property
    def traffic_spec(self):
        """Gets the traffic_spec of this ModifyValidationTaskRequest.  # noqa: E501


        :return: The traffic_spec of this ModifyValidationTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._traffic_spec

    @traffic_spec.setter
    def traffic_spec(self, traffic_spec):
        """Sets the traffic_spec of this ModifyValidationTaskRequest.


        :param traffic_spec: The traffic_spec of this ModifyValidationTaskRequest.  # noqa: E501
        :type: str
        """

        self._traffic_spec = traffic_spec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModifyValidationTaskRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModifyValidationTaskRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModifyValidationTaskRequest):
            return True

        return self.to_dict() != other.to_dict()
