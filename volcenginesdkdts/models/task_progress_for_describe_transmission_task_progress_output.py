# coding: utf-8

"""
    dts

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class TaskProgressForDescribeTransmissionTaskProgressOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_progress': 'list[AccountProgressForDescribeTransmissionTaskProgressOutput]',
        'full_progress': 'list[FullProgressForDescribeTransmissionTaskProgressOutput]',
        'incr_progress': 'list[IncrProgressForDescribeTransmissionTaskProgressOutput]',
        'meta_progress': 'list[MetaProgressForDescribeTransmissionTaskProgressOutput]',
        'progress_type': 'str',
        'total': 'int'
    }

    attribute_map = {
        'account_progress': 'AccountProgress',
        'full_progress': 'FullProgress',
        'incr_progress': 'IncrProgress',
        'meta_progress': 'MetaProgress',
        'progress_type': 'ProgressType',
        'total': 'Total'
    }

    def __init__(self, account_progress=None, full_progress=None, incr_progress=None, meta_progress=None, progress_type=None, total=None, _configuration=None):  # noqa: E501
        """TaskProgressForDescribeTransmissionTaskProgressOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_progress = None
        self._full_progress = None
        self._incr_progress = None
        self._meta_progress = None
        self._progress_type = None
        self._total = None
        self.discriminator = None

        if account_progress is not None:
            self.account_progress = account_progress
        if full_progress is not None:
            self.full_progress = full_progress
        if incr_progress is not None:
            self.incr_progress = incr_progress
        if meta_progress is not None:
            self.meta_progress = meta_progress
        if progress_type is not None:
            self.progress_type = progress_type
        if total is not None:
            self.total = total

    @property
    def account_progress(self):
        """Gets the account_progress of this TaskProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501


        :return: The account_progress of this TaskProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :rtype: list[AccountProgressForDescribeTransmissionTaskProgressOutput]
        """
        return self._account_progress

    @account_progress.setter
    def account_progress(self, account_progress):
        """Sets the account_progress of this TaskProgressForDescribeTransmissionTaskProgressOutput.


        :param account_progress: The account_progress of this TaskProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :type: list[AccountProgressForDescribeTransmissionTaskProgressOutput]
        """

        self._account_progress = account_progress

    @property
    def full_progress(self):
        """Gets the full_progress of this TaskProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501


        :return: The full_progress of this TaskProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :rtype: list[FullProgressForDescribeTransmissionTaskProgressOutput]
        """
        return self._full_progress

    @full_progress.setter
    def full_progress(self, full_progress):
        """Sets the full_progress of this TaskProgressForDescribeTransmissionTaskProgressOutput.


        :param full_progress: The full_progress of this TaskProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :type: list[FullProgressForDescribeTransmissionTaskProgressOutput]
        """

        self._full_progress = full_progress

    @property
    def incr_progress(self):
        """Gets the incr_progress of this TaskProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501


        :return: The incr_progress of this TaskProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :rtype: list[IncrProgressForDescribeTransmissionTaskProgressOutput]
        """
        return self._incr_progress

    @incr_progress.setter
    def incr_progress(self, incr_progress):
        """Sets the incr_progress of this TaskProgressForDescribeTransmissionTaskProgressOutput.


        :param incr_progress: The incr_progress of this TaskProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :type: list[IncrProgressForDescribeTransmissionTaskProgressOutput]
        """

        self._incr_progress = incr_progress

    @property
    def meta_progress(self):
        """Gets the meta_progress of this TaskProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501


        :return: The meta_progress of this TaskProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :rtype: list[MetaProgressForDescribeTransmissionTaskProgressOutput]
        """
        return self._meta_progress

    @meta_progress.setter
    def meta_progress(self, meta_progress):
        """Sets the meta_progress of this TaskProgressForDescribeTransmissionTaskProgressOutput.


        :param meta_progress: The meta_progress of this TaskProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :type: list[MetaProgressForDescribeTransmissionTaskProgressOutput]
        """

        self._meta_progress = meta_progress

    @property
    def progress_type(self):
        """Gets the progress_type of this TaskProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501


        :return: The progress_type of this TaskProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :rtype: str
        """
        return self._progress_type

    @progress_type.setter
    def progress_type(self, progress_type):
        """Sets the progress_type of this TaskProgressForDescribeTransmissionTaskProgressOutput.


        :param progress_type: The progress_type of this TaskProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :type: str
        """

        self._progress_type = progress_type

    @property
    def total(self):
        """Gets the total of this TaskProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501


        :return: The total of this TaskProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this TaskProgressForDescribeTransmissionTaskProgressOutput.


        :param total: The total of this TaskProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :type: int
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskProgressForDescribeTransmissionTaskProgressOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskProgressForDescribeTransmissionTaskProgressOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskProgressForDescribeTransmissionTaskProgressOutput):
            return True

        return self.to_dict() != other.to_dict()
