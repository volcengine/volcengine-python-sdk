# coding: utf-8

"""
    dts

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class SolutionSettingsForCreateTransmissionTaskInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_start': 'bool',
        'mongo2_mongo_settings': 'Mongo2MongoSettingsForCreateTransmissionTaskInput',
        'my_sql2_es_settings': 'MySQL2ESSettingsForCreateTransmissionTaskInput',
        'my_sql2_kafka_settings': 'MySQL2KafkaSettingsForCreateTransmissionTaskInput',
        'my_sql2_my_sql_settings': 'MySQL2MySQLSettingsForCreateTransmissionTaskInput',
        'my_sql2_rocket_mq_settings': 'MySQL2RocketMQSettingsForCreateTransmissionTaskInput',
        'pg2_kafka_settings': 'PG2KafkaSettingsForCreateTransmissionTaskInput',
        'pg2_pg_settings': 'PG2PGSettingsForCreateTransmissionTaskInput',
        'pg2_rocket_mq_settings': 'PG2RocketMQSettingsForCreateTransmissionTaskInput',
        'redis2_redis_settings': 'Redis2RedisSettingsForCreateTransmissionTaskInput',
        'solution_type': 'str'
    }

    attribute_map = {
        'auto_start': 'AutoStart',
        'mongo2_mongo_settings': 'Mongo2MongoSettings',
        'my_sql2_es_settings': 'MySQL2ESSettings',
        'my_sql2_kafka_settings': 'MySQL2KafkaSettings',
        'my_sql2_my_sql_settings': 'MySQL2MySQLSettings',
        'my_sql2_rocket_mq_settings': 'MySQL2RocketMQSettings',
        'pg2_kafka_settings': 'PG2KafkaSettings',
        'pg2_pg_settings': 'PG2PGSettings',
        'pg2_rocket_mq_settings': 'PG2RocketMQSettings',
        'redis2_redis_settings': 'Redis2RedisSettings',
        'solution_type': 'SolutionType'
    }

    def __init__(self, auto_start=None, mongo2_mongo_settings=None, my_sql2_es_settings=None, my_sql2_kafka_settings=None, my_sql2_my_sql_settings=None, my_sql2_rocket_mq_settings=None, pg2_kafka_settings=None, pg2_pg_settings=None, pg2_rocket_mq_settings=None, redis2_redis_settings=None, solution_type=None, _configuration=None):  # noqa: E501
        """SolutionSettingsForCreateTransmissionTaskInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auto_start = None
        self._mongo2_mongo_settings = None
        self._my_sql2_es_settings = None
        self._my_sql2_kafka_settings = None
        self._my_sql2_my_sql_settings = None
        self._my_sql2_rocket_mq_settings = None
        self._pg2_kafka_settings = None
        self._pg2_pg_settings = None
        self._pg2_rocket_mq_settings = None
        self._redis2_redis_settings = None
        self._solution_type = None
        self.discriminator = None

        if auto_start is not None:
            self.auto_start = auto_start
        if mongo2_mongo_settings is not None:
            self.mongo2_mongo_settings = mongo2_mongo_settings
        if my_sql2_es_settings is not None:
            self.my_sql2_es_settings = my_sql2_es_settings
        if my_sql2_kafka_settings is not None:
            self.my_sql2_kafka_settings = my_sql2_kafka_settings
        if my_sql2_my_sql_settings is not None:
            self.my_sql2_my_sql_settings = my_sql2_my_sql_settings
        if my_sql2_rocket_mq_settings is not None:
            self.my_sql2_rocket_mq_settings = my_sql2_rocket_mq_settings
        if pg2_kafka_settings is not None:
            self.pg2_kafka_settings = pg2_kafka_settings
        if pg2_pg_settings is not None:
            self.pg2_pg_settings = pg2_pg_settings
        if pg2_rocket_mq_settings is not None:
            self.pg2_rocket_mq_settings = pg2_rocket_mq_settings
        if redis2_redis_settings is not None:
            self.redis2_redis_settings = redis2_redis_settings
        if solution_type is not None:
            self.solution_type = solution_type

    @property
    def auto_start(self):
        """Gets the auto_start of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501


        :return: The auto_start of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :rtype: bool
        """
        return self._auto_start

    @auto_start.setter
    def auto_start(self, auto_start):
        """Sets the auto_start of this SolutionSettingsForCreateTransmissionTaskInput.


        :param auto_start: The auto_start of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :type: bool
        """

        self._auto_start = auto_start

    @property
    def mongo2_mongo_settings(self):
        """Gets the mongo2_mongo_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501


        :return: The mongo2_mongo_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :rtype: Mongo2MongoSettingsForCreateTransmissionTaskInput
        """
        return self._mongo2_mongo_settings

    @mongo2_mongo_settings.setter
    def mongo2_mongo_settings(self, mongo2_mongo_settings):
        """Sets the mongo2_mongo_settings of this SolutionSettingsForCreateTransmissionTaskInput.


        :param mongo2_mongo_settings: The mongo2_mongo_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :type: Mongo2MongoSettingsForCreateTransmissionTaskInput
        """

        self._mongo2_mongo_settings = mongo2_mongo_settings

    @property
    def my_sql2_es_settings(self):
        """Gets the my_sql2_es_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501


        :return: The my_sql2_es_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :rtype: MySQL2ESSettingsForCreateTransmissionTaskInput
        """
        return self._my_sql2_es_settings

    @my_sql2_es_settings.setter
    def my_sql2_es_settings(self, my_sql2_es_settings):
        """Sets the my_sql2_es_settings of this SolutionSettingsForCreateTransmissionTaskInput.


        :param my_sql2_es_settings: The my_sql2_es_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :type: MySQL2ESSettingsForCreateTransmissionTaskInput
        """

        self._my_sql2_es_settings = my_sql2_es_settings

    @property
    def my_sql2_kafka_settings(self):
        """Gets the my_sql2_kafka_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501


        :return: The my_sql2_kafka_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :rtype: MySQL2KafkaSettingsForCreateTransmissionTaskInput
        """
        return self._my_sql2_kafka_settings

    @my_sql2_kafka_settings.setter
    def my_sql2_kafka_settings(self, my_sql2_kafka_settings):
        """Sets the my_sql2_kafka_settings of this SolutionSettingsForCreateTransmissionTaskInput.


        :param my_sql2_kafka_settings: The my_sql2_kafka_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :type: MySQL2KafkaSettingsForCreateTransmissionTaskInput
        """

        self._my_sql2_kafka_settings = my_sql2_kafka_settings

    @property
    def my_sql2_my_sql_settings(self):
        """Gets the my_sql2_my_sql_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501


        :return: The my_sql2_my_sql_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :rtype: MySQL2MySQLSettingsForCreateTransmissionTaskInput
        """
        return self._my_sql2_my_sql_settings

    @my_sql2_my_sql_settings.setter
    def my_sql2_my_sql_settings(self, my_sql2_my_sql_settings):
        """Sets the my_sql2_my_sql_settings of this SolutionSettingsForCreateTransmissionTaskInput.


        :param my_sql2_my_sql_settings: The my_sql2_my_sql_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :type: MySQL2MySQLSettingsForCreateTransmissionTaskInput
        """

        self._my_sql2_my_sql_settings = my_sql2_my_sql_settings

    @property
    def my_sql2_rocket_mq_settings(self):
        """Gets the my_sql2_rocket_mq_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501


        :return: The my_sql2_rocket_mq_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :rtype: MySQL2RocketMQSettingsForCreateTransmissionTaskInput
        """
        return self._my_sql2_rocket_mq_settings

    @my_sql2_rocket_mq_settings.setter
    def my_sql2_rocket_mq_settings(self, my_sql2_rocket_mq_settings):
        """Sets the my_sql2_rocket_mq_settings of this SolutionSettingsForCreateTransmissionTaskInput.


        :param my_sql2_rocket_mq_settings: The my_sql2_rocket_mq_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :type: MySQL2RocketMQSettingsForCreateTransmissionTaskInput
        """

        self._my_sql2_rocket_mq_settings = my_sql2_rocket_mq_settings

    @property
    def pg2_kafka_settings(self):
        """Gets the pg2_kafka_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501


        :return: The pg2_kafka_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :rtype: PG2KafkaSettingsForCreateTransmissionTaskInput
        """
        return self._pg2_kafka_settings

    @pg2_kafka_settings.setter
    def pg2_kafka_settings(self, pg2_kafka_settings):
        """Sets the pg2_kafka_settings of this SolutionSettingsForCreateTransmissionTaskInput.


        :param pg2_kafka_settings: The pg2_kafka_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :type: PG2KafkaSettingsForCreateTransmissionTaskInput
        """

        self._pg2_kafka_settings = pg2_kafka_settings

    @property
    def pg2_pg_settings(self):
        """Gets the pg2_pg_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501


        :return: The pg2_pg_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :rtype: PG2PGSettingsForCreateTransmissionTaskInput
        """
        return self._pg2_pg_settings

    @pg2_pg_settings.setter
    def pg2_pg_settings(self, pg2_pg_settings):
        """Sets the pg2_pg_settings of this SolutionSettingsForCreateTransmissionTaskInput.


        :param pg2_pg_settings: The pg2_pg_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :type: PG2PGSettingsForCreateTransmissionTaskInput
        """

        self._pg2_pg_settings = pg2_pg_settings

    @property
    def pg2_rocket_mq_settings(self):
        """Gets the pg2_rocket_mq_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501


        :return: The pg2_rocket_mq_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :rtype: PG2RocketMQSettingsForCreateTransmissionTaskInput
        """
        return self._pg2_rocket_mq_settings

    @pg2_rocket_mq_settings.setter
    def pg2_rocket_mq_settings(self, pg2_rocket_mq_settings):
        """Sets the pg2_rocket_mq_settings of this SolutionSettingsForCreateTransmissionTaskInput.


        :param pg2_rocket_mq_settings: The pg2_rocket_mq_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :type: PG2RocketMQSettingsForCreateTransmissionTaskInput
        """

        self._pg2_rocket_mq_settings = pg2_rocket_mq_settings

    @property
    def redis2_redis_settings(self):
        """Gets the redis2_redis_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501


        :return: The redis2_redis_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :rtype: Redis2RedisSettingsForCreateTransmissionTaskInput
        """
        return self._redis2_redis_settings

    @redis2_redis_settings.setter
    def redis2_redis_settings(self, redis2_redis_settings):
        """Sets the redis2_redis_settings of this SolutionSettingsForCreateTransmissionTaskInput.


        :param redis2_redis_settings: The redis2_redis_settings of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :type: Redis2RedisSettingsForCreateTransmissionTaskInput
        """

        self._redis2_redis_settings = redis2_redis_settings

    @property
    def solution_type(self):
        """Gets the solution_type of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501


        :return: The solution_type of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :rtype: str
        """
        return self._solution_type

    @solution_type.setter
    def solution_type(self, solution_type):
        """Sets the solution_type of this SolutionSettingsForCreateTransmissionTaskInput.


        :param solution_type: The solution_type of this SolutionSettingsForCreateTransmissionTaskInput.  # noqa: E501
        :type: str
        """

        self._solution_type = solution_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SolutionSettingsForCreateTransmissionTaskInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SolutionSettingsForCreateTransmissionTaskInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SolutionSettingsForCreateTransmissionTaskInput):
            return True

        return self.to_dict() != other.to_dict()
