# coding: utf-8

"""
    dts

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ESExtraArgsForModifyTransmissionTaskInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analyzer': 'str',
        'idx_name_rule': 'str',
        'insert_mode': 'str',
        'replica_num': 'int',
        'retry_times': 'int',
        'shard_num': 'int',
        'tz': 'str'
    }

    attribute_map = {
        'analyzer': 'Analyzer',
        'idx_name_rule': 'IdxNameRule',
        'insert_mode': 'InsertMode',
        'replica_num': 'ReplicaNum',
        'retry_times': 'RetryTimes',
        'shard_num': 'ShardNum',
        'tz': 'TZ'
    }

    def __init__(self, analyzer=None, idx_name_rule=None, insert_mode=None, replica_num=None, retry_times=None, shard_num=None, tz=None, _configuration=None):  # noqa: E501
        """ESExtraArgsForModifyTransmissionTaskInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._analyzer = None
        self._idx_name_rule = None
        self._insert_mode = None
        self._replica_num = None
        self._retry_times = None
        self._shard_num = None
        self._tz = None
        self.discriminator = None

        if analyzer is not None:
            self.analyzer = analyzer
        if idx_name_rule is not None:
            self.idx_name_rule = idx_name_rule
        if insert_mode is not None:
            self.insert_mode = insert_mode
        if replica_num is not None:
            self.replica_num = replica_num
        if retry_times is not None:
            self.retry_times = retry_times
        if shard_num is not None:
            self.shard_num = shard_num
        if tz is not None:
            self.tz = tz

    @property
    def analyzer(self):
        """Gets the analyzer of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501


        :return: The analyzer of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501
        :rtype: str
        """
        return self._analyzer

    @analyzer.setter
    def analyzer(self, analyzer):
        """Sets the analyzer of this ESExtraArgsForModifyTransmissionTaskInput.


        :param analyzer: The analyzer of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501
        :type: str
        """

        self._analyzer = analyzer

    @property
    def idx_name_rule(self):
        """Gets the idx_name_rule of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501


        :return: The idx_name_rule of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501
        :rtype: str
        """
        return self._idx_name_rule

    @idx_name_rule.setter
    def idx_name_rule(self, idx_name_rule):
        """Sets the idx_name_rule of this ESExtraArgsForModifyTransmissionTaskInput.


        :param idx_name_rule: The idx_name_rule of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501
        :type: str
        """

        self._idx_name_rule = idx_name_rule

    @property
    def insert_mode(self):
        """Gets the insert_mode of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501


        :return: The insert_mode of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501
        :rtype: str
        """
        return self._insert_mode

    @insert_mode.setter
    def insert_mode(self, insert_mode):
        """Sets the insert_mode of this ESExtraArgsForModifyTransmissionTaskInput.


        :param insert_mode: The insert_mode of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501
        :type: str
        """

        self._insert_mode = insert_mode

    @property
    def replica_num(self):
        """Gets the replica_num of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501


        :return: The replica_num of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501
        :rtype: int
        """
        return self._replica_num

    @replica_num.setter
    def replica_num(self, replica_num):
        """Sets the replica_num of this ESExtraArgsForModifyTransmissionTaskInput.


        :param replica_num: The replica_num of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501
        :type: int
        """

        self._replica_num = replica_num

    @property
    def retry_times(self):
        """Gets the retry_times of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501


        :return: The retry_times of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501
        :rtype: int
        """
        return self._retry_times

    @retry_times.setter
    def retry_times(self, retry_times):
        """Sets the retry_times of this ESExtraArgsForModifyTransmissionTaskInput.


        :param retry_times: The retry_times of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501
        :type: int
        """

        self._retry_times = retry_times

    @property
    def shard_num(self):
        """Gets the shard_num of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501


        :return: The shard_num of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501
        :rtype: int
        """
        return self._shard_num

    @shard_num.setter
    def shard_num(self, shard_num):
        """Sets the shard_num of this ESExtraArgsForModifyTransmissionTaskInput.


        :param shard_num: The shard_num of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501
        :type: int
        """

        self._shard_num = shard_num

    @property
    def tz(self):
        """Gets the tz of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501


        :return: The tz of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501
        :rtype: str
        """
        return self._tz

    @tz.setter
    def tz(self, tz):
        """Sets the tz of this ESExtraArgsForModifyTransmissionTaskInput.


        :param tz: The tz of this ESExtraArgsForModifyTransmissionTaskInput.  # noqa: E501
        :type: str
        """

        self._tz = tz

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ESExtraArgsForModifyTransmissionTaskInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ESExtraArgsForModifyTransmissionTaskInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ESExtraArgsForModifyTransmissionTaskInput):
            return True

        return self.to_dict() != other.to_dict()
