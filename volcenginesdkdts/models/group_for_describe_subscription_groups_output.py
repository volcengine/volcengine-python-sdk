# coding: utf-8

"""
    dts

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class GroupForDescribeSubscriptionGroupsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_time': 'int',
        'delay_seconds': 'int',
        'description': 'str',
        'group_name': 'str',
        'log_end_offset': 'int',
        'offset': 'int',
        'partition_id': 'int',
        'update_time': 'int',
        'username': 'str'
    }

    attribute_map = {
        'create_time': 'CreateTime',
        'delay_seconds': 'DelaySeconds',
        'description': 'Description',
        'group_name': 'GroupName',
        'log_end_offset': 'LogEndOffset',
        'offset': 'Offset',
        'partition_id': 'PartitionId',
        'update_time': 'UpdateTime',
        'username': 'Username'
    }

    def __init__(self, create_time=None, delay_seconds=None, description=None, group_name=None, log_end_offset=None, offset=None, partition_id=None, update_time=None, username=None, _configuration=None):  # noqa: E501
        """GroupForDescribeSubscriptionGroupsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._create_time = None
        self._delay_seconds = None
        self._description = None
        self._group_name = None
        self._log_end_offset = None
        self._offset = None
        self._partition_id = None
        self._update_time = None
        self._username = None
        self.discriminator = None

        if create_time is not None:
            self.create_time = create_time
        if delay_seconds is not None:
            self.delay_seconds = delay_seconds
        if description is not None:
            self.description = description
        if group_name is not None:
            self.group_name = group_name
        if log_end_offset is not None:
            self.log_end_offset = log_end_offset
        if offset is not None:
            self.offset = offset
        if partition_id is not None:
            self.partition_id = partition_id
        if update_time is not None:
            self.update_time = update_time
        if username is not None:
            self.username = username

    @property
    def create_time(self):
        """Gets the create_time of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501


        :return: The create_time of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GroupForDescribeSubscriptionGroupsOutput.


        :param create_time: The create_time of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def delay_seconds(self):
        """Gets the delay_seconds of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501


        :return: The delay_seconds of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501
        :rtype: int
        """
        return self._delay_seconds

    @delay_seconds.setter
    def delay_seconds(self, delay_seconds):
        """Sets the delay_seconds of this GroupForDescribeSubscriptionGroupsOutput.


        :param delay_seconds: The delay_seconds of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501
        :type: int
        """

        self._delay_seconds = delay_seconds

    @property
    def description(self):
        """Gets the description of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501


        :return: The description of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GroupForDescribeSubscriptionGroupsOutput.


        :param description: The description of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def group_name(self):
        """Gets the group_name of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501


        :return: The group_name of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this GroupForDescribeSubscriptionGroupsOutput.


        :param group_name: The group_name of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def log_end_offset(self):
        """Gets the log_end_offset of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501


        :return: The log_end_offset of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501
        :rtype: int
        """
        return self._log_end_offset

    @log_end_offset.setter
    def log_end_offset(self, log_end_offset):
        """Sets the log_end_offset of this GroupForDescribeSubscriptionGroupsOutput.


        :param log_end_offset: The log_end_offset of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501
        :type: int
        """

        self._log_end_offset = log_end_offset

    @property
    def offset(self):
        """Gets the offset of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501


        :return: The offset of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this GroupForDescribeSubscriptionGroupsOutput.


        :param offset: The offset of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def partition_id(self):
        """Gets the partition_id of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501


        :return: The partition_id of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501
        :rtype: int
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """Sets the partition_id of this GroupForDescribeSubscriptionGroupsOutput.


        :param partition_id: The partition_id of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501
        :type: int
        """

        self._partition_id = partition_id

    @property
    def update_time(self):
        """Gets the update_time of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501


        :return: The update_time of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501
        :rtype: int
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GroupForDescribeSubscriptionGroupsOutput.


        :param update_time: The update_time of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501
        :type: int
        """

        self._update_time = update_time

    @property
    def username(self):
        """Gets the username of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501


        :return: The username of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this GroupForDescribeSubscriptionGroupsOutput.


        :param username: The username of this GroupForDescribeSubscriptionGroupsOutput.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupForDescribeSubscriptionGroupsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupForDescribeSubscriptionGroupsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupForDescribeSubscriptionGroupsOutput):
            return True

        return self.to_dict() != other.to_dict()
