# coding: utf-8

"""
    dts

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateTransmissionTaskRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charge_config': 'ChargeConfigForCreateTransmissionTaskInput',
        'create_backward_sync_task': 'bool',
        'dest_config': 'DestConfigForCreateTransmissionTaskInput',
        'project_name': 'str',
        'solution_settings': 'SolutionSettingsForCreateTransmissionTaskInput',
        'src_config': 'SrcConfigForCreateTransmissionTaskInput',
        'tags': 'list[TagForCreateTransmissionTaskInput]',
        'task_name': 'str',
        'task_type': 'str',
        'traffic_spec': 'str'
    }

    attribute_map = {
        'charge_config': 'ChargeConfig',
        'create_backward_sync_task': 'CreateBackwardSyncTask',
        'dest_config': 'DestConfig',
        'project_name': 'ProjectName',
        'solution_settings': 'SolutionSettings',
        'src_config': 'SrcConfig',
        'tags': 'Tags',
        'task_name': 'TaskName',
        'task_type': 'TaskType',
        'traffic_spec': 'TrafficSpec'
    }

    def __init__(self, charge_config=None, create_backward_sync_task=None, dest_config=None, project_name=None, solution_settings=None, src_config=None, tags=None, task_name=None, task_type=None, traffic_spec=None, _configuration=None):  # noqa: E501
        """CreateTransmissionTaskRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._charge_config = None
        self._create_backward_sync_task = None
        self._dest_config = None
        self._project_name = None
        self._solution_settings = None
        self._src_config = None
        self._tags = None
        self._task_name = None
        self._task_type = None
        self._traffic_spec = None
        self.discriminator = None

        if charge_config is not None:
            self.charge_config = charge_config
        if create_backward_sync_task is not None:
            self.create_backward_sync_task = create_backward_sync_task
        if dest_config is not None:
            self.dest_config = dest_config
        if project_name is not None:
            self.project_name = project_name
        if solution_settings is not None:
            self.solution_settings = solution_settings
        if src_config is not None:
            self.src_config = src_config
        if tags is not None:
            self.tags = tags
        self.task_name = task_name
        self.task_type = task_type
        if traffic_spec is not None:
            self.traffic_spec = traffic_spec

    @property
    def charge_config(self):
        """Gets the charge_config of this CreateTransmissionTaskRequest.  # noqa: E501


        :return: The charge_config of this CreateTransmissionTaskRequest.  # noqa: E501
        :rtype: ChargeConfigForCreateTransmissionTaskInput
        """
        return self._charge_config

    @charge_config.setter
    def charge_config(self, charge_config):
        """Sets the charge_config of this CreateTransmissionTaskRequest.


        :param charge_config: The charge_config of this CreateTransmissionTaskRequest.  # noqa: E501
        :type: ChargeConfigForCreateTransmissionTaskInput
        """

        self._charge_config = charge_config

    @property
    def create_backward_sync_task(self):
        """Gets the create_backward_sync_task of this CreateTransmissionTaskRequest.  # noqa: E501


        :return: The create_backward_sync_task of this CreateTransmissionTaskRequest.  # noqa: E501
        :rtype: bool
        """
        return self._create_backward_sync_task

    @create_backward_sync_task.setter
    def create_backward_sync_task(self, create_backward_sync_task):
        """Sets the create_backward_sync_task of this CreateTransmissionTaskRequest.


        :param create_backward_sync_task: The create_backward_sync_task of this CreateTransmissionTaskRequest.  # noqa: E501
        :type: bool
        """

        self._create_backward_sync_task = create_backward_sync_task

    @property
    def dest_config(self):
        """Gets the dest_config of this CreateTransmissionTaskRequest.  # noqa: E501


        :return: The dest_config of this CreateTransmissionTaskRequest.  # noqa: E501
        :rtype: DestConfigForCreateTransmissionTaskInput
        """
        return self._dest_config

    @dest_config.setter
    def dest_config(self, dest_config):
        """Sets the dest_config of this CreateTransmissionTaskRequest.


        :param dest_config: The dest_config of this CreateTransmissionTaskRequest.  # noqa: E501
        :type: DestConfigForCreateTransmissionTaskInput
        """

        self._dest_config = dest_config

    @property
    def project_name(self):
        """Gets the project_name of this CreateTransmissionTaskRequest.  # noqa: E501


        :return: The project_name of this CreateTransmissionTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this CreateTransmissionTaskRequest.


        :param project_name: The project_name of this CreateTransmissionTaskRequest.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def solution_settings(self):
        """Gets the solution_settings of this CreateTransmissionTaskRequest.  # noqa: E501


        :return: The solution_settings of this CreateTransmissionTaskRequest.  # noqa: E501
        :rtype: SolutionSettingsForCreateTransmissionTaskInput
        """
        return self._solution_settings

    @solution_settings.setter
    def solution_settings(self, solution_settings):
        """Sets the solution_settings of this CreateTransmissionTaskRequest.


        :param solution_settings: The solution_settings of this CreateTransmissionTaskRequest.  # noqa: E501
        :type: SolutionSettingsForCreateTransmissionTaskInput
        """

        self._solution_settings = solution_settings

    @property
    def src_config(self):
        """Gets the src_config of this CreateTransmissionTaskRequest.  # noqa: E501


        :return: The src_config of this CreateTransmissionTaskRequest.  # noqa: E501
        :rtype: SrcConfigForCreateTransmissionTaskInput
        """
        return self._src_config

    @src_config.setter
    def src_config(self, src_config):
        """Sets the src_config of this CreateTransmissionTaskRequest.


        :param src_config: The src_config of this CreateTransmissionTaskRequest.  # noqa: E501
        :type: SrcConfigForCreateTransmissionTaskInput
        """

        self._src_config = src_config

    @property
    def tags(self):
        """Gets the tags of this CreateTransmissionTaskRequest.  # noqa: E501


        :return: The tags of this CreateTransmissionTaskRequest.  # noqa: E501
        :rtype: list[TagForCreateTransmissionTaskInput]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateTransmissionTaskRequest.


        :param tags: The tags of this CreateTransmissionTaskRequest.  # noqa: E501
        :type: list[TagForCreateTransmissionTaskInput]
        """

        self._tags = tags

    @property
    def task_name(self):
        """Gets the task_name of this CreateTransmissionTaskRequest.  # noqa: E501


        :return: The task_name of this CreateTransmissionTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this CreateTransmissionTaskRequest.


        :param task_name: The task_name of this CreateTransmissionTaskRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and task_name is None:
            raise ValueError("Invalid value for `task_name`, must not be `None`")  # noqa: E501

        self._task_name = task_name

    @property
    def task_type(self):
        """Gets the task_type of this CreateTransmissionTaskRequest.  # noqa: E501


        :return: The task_type of this CreateTransmissionTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this CreateTransmissionTaskRequest.


        :param task_type: The task_type of this CreateTransmissionTaskRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and task_type is None:
            raise ValueError("Invalid value for `task_type`, must not be `None`")  # noqa: E501

        self._task_type = task_type

    @property
    def traffic_spec(self):
        """Gets the traffic_spec of this CreateTransmissionTaskRequest.  # noqa: E501


        :return: The traffic_spec of this CreateTransmissionTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._traffic_spec

    @traffic_spec.setter
    def traffic_spec(self, traffic_spec):
        """Sets the traffic_spec of this CreateTransmissionTaskRequest.


        :param traffic_spec: The traffic_spec of this CreateTransmissionTaskRequest.  # noqa: E501
        :type: str
        """

        self._traffic_spec = traffic_spec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateTransmissionTaskRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTransmissionTaskRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateTransmissionTaskRequest):
            return True

        return self.to_dict() != other.to_dict()
