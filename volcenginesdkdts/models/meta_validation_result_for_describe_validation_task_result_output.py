# coding: utf-8

"""
    dts

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class MetaValidationResultForDescribeValidationTaskResultOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'database': 'DatabaseForDescribeValidationTaskResultOutput',
        'dest_obj_count': 'int',
        'diff_obj_count': 'int',
        'error_num': 'int',
        'finish_time': 'int',
        'object': 'ObjectForDescribeValidationTaskResultOutput',
        'src_obj_count': 'int',
        'start_time': 'int',
        'warn_num': 'int'
    }

    attribute_map = {
        'database': 'Database',
        'dest_obj_count': 'DestObjCount',
        'diff_obj_count': 'DiffObjCount',
        'error_num': 'ErrorNum',
        'finish_time': 'FinishTime',
        'object': 'Object',
        'src_obj_count': 'SrcObjCount',
        'start_time': 'StartTime',
        'warn_num': 'WarnNum'
    }

    def __init__(self, database=None, dest_obj_count=None, diff_obj_count=None, error_num=None, finish_time=None, object=None, src_obj_count=None, start_time=None, warn_num=None, _configuration=None):  # noqa: E501
        """MetaValidationResultForDescribeValidationTaskResultOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._database = None
        self._dest_obj_count = None
        self._diff_obj_count = None
        self._error_num = None
        self._finish_time = None
        self._object = None
        self._src_obj_count = None
        self._start_time = None
        self._warn_num = None
        self.discriminator = None

        if database is not None:
            self.database = database
        if dest_obj_count is not None:
            self.dest_obj_count = dest_obj_count
        if diff_obj_count is not None:
            self.diff_obj_count = diff_obj_count
        if error_num is not None:
            self.error_num = error_num
        if finish_time is not None:
            self.finish_time = finish_time
        if object is not None:
            self.object = object
        if src_obj_count is not None:
            self.src_obj_count = src_obj_count
        if start_time is not None:
            self.start_time = start_time
        if warn_num is not None:
            self.warn_num = warn_num

    @property
    def database(self):
        """Gets the database of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501


        :return: The database of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :rtype: DatabaseForDescribeValidationTaskResultOutput
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this MetaValidationResultForDescribeValidationTaskResultOutput.


        :param database: The database of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :type: DatabaseForDescribeValidationTaskResultOutput
        """

        self._database = database

    @property
    def dest_obj_count(self):
        """Gets the dest_obj_count of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501


        :return: The dest_obj_count of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :rtype: int
        """
        return self._dest_obj_count

    @dest_obj_count.setter
    def dest_obj_count(self, dest_obj_count):
        """Sets the dest_obj_count of this MetaValidationResultForDescribeValidationTaskResultOutput.


        :param dest_obj_count: The dest_obj_count of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :type: int
        """

        self._dest_obj_count = dest_obj_count

    @property
    def diff_obj_count(self):
        """Gets the diff_obj_count of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501


        :return: The diff_obj_count of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :rtype: int
        """
        return self._diff_obj_count

    @diff_obj_count.setter
    def diff_obj_count(self, diff_obj_count):
        """Sets the diff_obj_count of this MetaValidationResultForDescribeValidationTaskResultOutput.


        :param diff_obj_count: The diff_obj_count of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :type: int
        """

        self._diff_obj_count = diff_obj_count

    @property
    def error_num(self):
        """Gets the error_num of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501


        :return: The error_num of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :rtype: int
        """
        return self._error_num

    @error_num.setter
    def error_num(self, error_num):
        """Sets the error_num of this MetaValidationResultForDescribeValidationTaskResultOutput.


        :param error_num: The error_num of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :type: int
        """

        self._error_num = error_num

    @property
    def finish_time(self):
        """Gets the finish_time of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501


        :return: The finish_time of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :rtype: int
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """Sets the finish_time of this MetaValidationResultForDescribeValidationTaskResultOutput.


        :param finish_time: The finish_time of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :type: int
        """

        self._finish_time = finish_time

    @property
    def object(self):
        """Gets the object of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501


        :return: The object of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :rtype: ObjectForDescribeValidationTaskResultOutput
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this MetaValidationResultForDescribeValidationTaskResultOutput.


        :param object: The object of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :type: ObjectForDescribeValidationTaskResultOutput
        """

        self._object = object

    @property
    def src_obj_count(self):
        """Gets the src_obj_count of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501


        :return: The src_obj_count of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :rtype: int
        """
        return self._src_obj_count

    @src_obj_count.setter
    def src_obj_count(self, src_obj_count):
        """Sets the src_obj_count of this MetaValidationResultForDescribeValidationTaskResultOutput.


        :param src_obj_count: The src_obj_count of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :type: int
        """

        self._src_obj_count = src_obj_count

    @property
    def start_time(self):
        """Gets the start_time of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501


        :return: The start_time of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this MetaValidationResultForDescribeValidationTaskResultOutput.


        :param start_time: The start_time of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def warn_num(self):
        """Gets the warn_num of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501


        :return: The warn_num of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :rtype: int
        """
        return self._warn_num

    @warn_num.setter
    def warn_num(self, warn_num):
        """Sets the warn_num of this MetaValidationResultForDescribeValidationTaskResultOutput.


        :param warn_num: The warn_num of this MetaValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :type: int
        """

        self._warn_num = warn_num

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetaValidationResultForDescribeValidationTaskResultOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetaValidationResultForDescribeValidationTaskResultOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MetaValidationResultForDescribeValidationTaskResultOutput):
            return True

        return self.to_dict() != other.to_dict()
