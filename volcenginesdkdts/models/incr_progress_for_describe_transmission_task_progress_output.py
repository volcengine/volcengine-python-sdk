# coding: utf-8

"""
    dts

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class IncrProgressForDescribeTransmissionTaskProgressOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'database': 'DatabaseForDescribeTransmissionTaskProgressOutput',
        'latency_seconds': 'int',
        'object': 'ObjectForDescribeTransmissionTaskProgressOutput',
        'shard_id': 'str',
        'state': 'str',
        'transfer_bytes': 'int',
        'transfer_rows': 'int'
    }

    attribute_map = {
        'database': 'Database',
        'latency_seconds': 'LatencySeconds',
        'object': 'Object',
        'shard_id': 'ShardID',
        'state': 'State',
        'transfer_bytes': 'TransferBytes',
        'transfer_rows': 'TransferRows'
    }

    def __init__(self, database=None, latency_seconds=None, object=None, shard_id=None, state=None, transfer_bytes=None, transfer_rows=None, _configuration=None):  # noqa: E501
        """IncrProgressForDescribeTransmissionTaskProgressOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._database = None
        self._latency_seconds = None
        self._object = None
        self._shard_id = None
        self._state = None
        self._transfer_bytes = None
        self._transfer_rows = None
        self.discriminator = None

        if database is not None:
            self.database = database
        if latency_seconds is not None:
            self.latency_seconds = latency_seconds
        if object is not None:
            self.object = object
        if shard_id is not None:
            self.shard_id = shard_id
        if state is not None:
            self.state = state
        if transfer_bytes is not None:
            self.transfer_bytes = transfer_bytes
        if transfer_rows is not None:
            self.transfer_rows = transfer_rows

    @property
    def database(self):
        """Gets the database of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501


        :return: The database of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :rtype: DatabaseForDescribeTransmissionTaskProgressOutput
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this IncrProgressForDescribeTransmissionTaskProgressOutput.


        :param database: The database of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :type: DatabaseForDescribeTransmissionTaskProgressOutput
        """

        self._database = database

    @property
    def latency_seconds(self):
        """Gets the latency_seconds of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501


        :return: The latency_seconds of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :rtype: int
        """
        return self._latency_seconds

    @latency_seconds.setter
    def latency_seconds(self, latency_seconds):
        """Sets the latency_seconds of this IncrProgressForDescribeTransmissionTaskProgressOutput.


        :param latency_seconds: The latency_seconds of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :type: int
        """

        self._latency_seconds = latency_seconds

    @property
    def object(self):
        """Gets the object of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501


        :return: The object of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :rtype: ObjectForDescribeTransmissionTaskProgressOutput
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this IncrProgressForDescribeTransmissionTaskProgressOutput.


        :param object: The object of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :type: ObjectForDescribeTransmissionTaskProgressOutput
        """

        self._object = object

    @property
    def shard_id(self):
        """Gets the shard_id of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501


        :return: The shard_id of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :rtype: str
        """
        return self._shard_id

    @shard_id.setter
    def shard_id(self, shard_id):
        """Sets the shard_id of this IncrProgressForDescribeTransmissionTaskProgressOutput.


        :param shard_id: The shard_id of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :type: str
        """

        self._shard_id = shard_id

    @property
    def state(self):
        """Gets the state of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501


        :return: The state of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this IncrProgressForDescribeTransmissionTaskProgressOutput.


        :param state: The state of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def transfer_bytes(self):
        """Gets the transfer_bytes of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501


        :return: The transfer_bytes of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :rtype: int
        """
        return self._transfer_bytes

    @transfer_bytes.setter
    def transfer_bytes(self, transfer_bytes):
        """Sets the transfer_bytes of this IncrProgressForDescribeTransmissionTaskProgressOutput.


        :param transfer_bytes: The transfer_bytes of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :type: int
        """

        self._transfer_bytes = transfer_bytes

    @property
    def transfer_rows(self):
        """Gets the transfer_rows of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501


        :return: The transfer_rows of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :rtype: int
        """
        return self._transfer_rows

    @transfer_rows.setter
    def transfer_rows(self, transfer_rows):
        """Sets the transfer_rows of this IncrProgressForDescribeTransmissionTaskProgressOutput.


        :param transfer_rows: The transfer_rows of this IncrProgressForDescribeTransmissionTaskProgressOutput.  # noqa: E501
        :type: int
        """

        self._transfer_rows = transfer_rows

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncrProgressForDescribeTransmissionTaskProgressOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncrProgressForDescribeTransmissionTaskProgressOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IncrProgressForDescribeTransmissionTaskProgressOutput):
            return True

        return self.to_dict() != other.to_dict()
