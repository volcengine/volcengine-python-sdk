# coding: utf-8

"""
    dts

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ListDataSourceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'categories': 'str',
        'endpoint_types': 'list[str]',
        'name_prefix': 'str',
        'order_by': 'str',
        'page_num': 'int',
        'page_size': 'int'
    }

    attribute_map = {
        'categories': 'Categories',
        'endpoint_types': 'EndpointTypes',
        'name_prefix': 'NamePrefix',
        'order_by': 'OrderBy',
        'page_num': 'PageNum',
        'page_size': 'PageSize'
    }

    def __init__(self, categories=None, endpoint_types=None, name_prefix=None, order_by=None, page_num=None, page_size=None, _configuration=None):  # noqa: E501
        """ListDataSourceRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._categories = None
        self._endpoint_types = None
        self._name_prefix = None
        self._order_by = None
        self._page_num = None
        self._page_size = None
        self.discriminator = None

        if categories is not None:
            self.categories = categories
        if endpoint_types is not None:
            self.endpoint_types = endpoint_types
        if name_prefix is not None:
            self.name_prefix = name_prefix
        if order_by is not None:
            self.order_by = order_by
        self.page_num = page_num
        self.page_size = page_size

    @property
    def categories(self):
        """Gets the categories of this ListDataSourceRequest.  # noqa: E501


        :return: The categories of this ListDataSourceRequest.  # noqa: E501
        :rtype: str
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ListDataSourceRequest.


        :param categories: The categories of this ListDataSourceRequest.  # noqa: E501
        :type: str
        """

        self._categories = categories

    @property
    def endpoint_types(self):
        """Gets the endpoint_types of this ListDataSourceRequest.  # noqa: E501


        :return: The endpoint_types of this ListDataSourceRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._endpoint_types

    @endpoint_types.setter
    def endpoint_types(self, endpoint_types):
        """Sets the endpoint_types of this ListDataSourceRequest.


        :param endpoint_types: The endpoint_types of this ListDataSourceRequest.  # noqa: E501
        :type: list[str]
        """

        self._endpoint_types = endpoint_types

    @property
    def name_prefix(self):
        """Gets the name_prefix of this ListDataSourceRequest.  # noqa: E501


        :return: The name_prefix of this ListDataSourceRequest.  # noqa: E501
        :rtype: str
        """
        return self._name_prefix

    @name_prefix.setter
    def name_prefix(self, name_prefix):
        """Sets the name_prefix of this ListDataSourceRequest.


        :param name_prefix: The name_prefix of this ListDataSourceRequest.  # noqa: E501
        :type: str
        """

        self._name_prefix = name_prefix

    @property
    def order_by(self):
        """Gets the order_by of this ListDataSourceRequest.  # noqa: E501


        :return: The order_by of this ListDataSourceRequest.  # noqa: E501
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this ListDataSourceRequest.


        :param order_by: The order_by of this ListDataSourceRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["OrderByCreateTimeAsc", "OrderByCreateTimeDesc", "OrderByModifyTimeAsc", "OrderByModifyTimeDesc"]  # noqa: E501
        if (self._configuration.client_side_validation and
                order_by not in allowed_values):
            raise ValueError(
                "Invalid value for `order_by` ({0}), must be one of {1}"  # noqa: E501
                .format(order_by, allowed_values)
            )

        self._order_by = order_by

    @property
    def page_num(self):
        """Gets the page_num of this ListDataSourceRequest.  # noqa: E501


        :return: The page_num of this ListDataSourceRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_num

    @page_num.setter
    def page_num(self, page_num):
        """Sets the page_num of this ListDataSourceRequest.


        :param page_num: The page_num of this ListDataSourceRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and page_num is None:
            raise ValueError("Invalid value for `page_num`, must not be `None`")  # noqa: E501

        self._page_num = page_num

    @property
    def page_size(self):
        """Gets the page_size of this ListDataSourceRequest.  # noqa: E501


        :return: The page_size of this ListDataSourceRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ListDataSourceRequest.


        :param page_size: The page_size of this ListDataSourceRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")  # noqa: E501

        self._page_size = page_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListDataSourceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListDataSourceRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListDataSourceRequest):
            return True

        return self.to_dict() != other.to_dict()
