# coding: utf-8

"""
    dts

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class SubscriptionSettingsForModifyTransmissionTaskInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'partition_policy': 'str',
        'protocol': 'str',
        'vpcid': 'str',
        'vpc_subnet_id': 'str'
    }

    attribute_map = {
        'partition_policy': 'PartitionPolicy',
        'protocol': 'Protocol',
        'vpcid': 'VPCId',
        'vpc_subnet_id': 'VPCSubnetId'
    }

    def __init__(self, partition_policy=None, protocol=None, vpcid=None, vpc_subnet_id=None, _configuration=None):  # noqa: E501
        """SubscriptionSettingsForModifyTransmissionTaskInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._partition_policy = None
        self._protocol = None
        self._vpcid = None
        self._vpc_subnet_id = None
        self.discriminator = None

        if partition_policy is not None:
            self.partition_policy = partition_policy
        if protocol is not None:
            self.protocol = protocol
        if vpcid is not None:
            self.vpcid = vpcid
        if vpc_subnet_id is not None:
            self.vpc_subnet_id = vpc_subnet_id

    @property
    def partition_policy(self):
        """Gets the partition_policy of this SubscriptionSettingsForModifyTransmissionTaskInput.  # noqa: E501


        :return: The partition_policy of this SubscriptionSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :rtype: str
        """
        return self._partition_policy

    @partition_policy.setter
    def partition_policy(self, partition_policy):
        """Sets the partition_policy of this SubscriptionSettingsForModifyTransmissionTaskInput.


        :param partition_policy: The partition_policy of this SubscriptionSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :type: str
        """

        self._partition_policy = partition_policy

    @property
    def protocol(self):
        """Gets the protocol of this SubscriptionSettingsForModifyTransmissionTaskInput.  # noqa: E501


        :return: The protocol of this SubscriptionSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this SubscriptionSettingsForModifyTransmissionTaskInput.


        :param protocol: The protocol of this SubscriptionSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def vpcid(self):
        """Gets the vpcid of this SubscriptionSettingsForModifyTransmissionTaskInput.  # noqa: E501


        :return: The vpcid of this SubscriptionSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :rtype: str
        """
        return self._vpcid

    @vpcid.setter
    def vpcid(self, vpcid):
        """Sets the vpcid of this SubscriptionSettingsForModifyTransmissionTaskInput.


        :param vpcid: The vpcid of this SubscriptionSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :type: str
        """

        self._vpcid = vpcid

    @property
    def vpc_subnet_id(self):
        """Gets the vpc_subnet_id of this SubscriptionSettingsForModifyTransmissionTaskInput.  # noqa: E501


        :return: The vpc_subnet_id of this SubscriptionSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :rtype: str
        """
        return self._vpc_subnet_id

    @vpc_subnet_id.setter
    def vpc_subnet_id(self, vpc_subnet_id):
        """Sets the vpc_subnet_id of this SubscriptionSettingsForModifyTransmissionTaskInput.


        :param vpc_subnet_id: The vpc_subnet_id of this SubscriptionSettingsForModifyTransmissionTaskInput.  # noqa: E501
        :type: str
        """

        self._vpc_subnet_id = vpc_subnet_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionSettingsForModifyTransmissionTaskInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionSettingsForModifyTransmissionTaskInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubscriptionSettingsForModifyTransmissionTaskInput):
            return True

        return self.to_dict() != other.to_dict()
