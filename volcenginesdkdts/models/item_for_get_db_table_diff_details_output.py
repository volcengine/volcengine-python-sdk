# coding: utf-8

"""
    dts

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ItemForGetDBTableDiffDetailsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column': 'list[ColumnForGetDBTableDiffDetailsOutput]',
        'dest_event_time': 'int',
        'dest_gtid': 'str',
        'pk': 'list[PkForGetDBTableDiffDetailsOutput]',
        'src_event_time': 'int',
        'src_gtid': 'str'
    }

    attribute_map = {
        'column': 'Column',
        'dest_event_time': 'DestEventTime',
        'dest_gtid': 'DestGTID',
        'pk': 'Pk',
        'src_event_time': 'SrcEventTime',
        'src_gtid': 'SrcGTID'
    }

    def __init__(self, column=None, dest_event_time=None, dest_gtid=None, pk=None, src_event_time=None, src_gtid=None, _configuration=None):  # noqa: E501
        """ItemForGetDBTableDiffDetailsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._column = None
        self._dest_event_time = None
        self._dest_gtid = None
        self._pk = None
        self._src_event_time = None
        self._src_gtid = None
        self.discriminator = None

        if column is not None:
            self.column = column
        if dest_event_time is not None:
            self.dest_event_time = dest_event_time
        if dest_gtid is not None:
            self.dest_gtid = dest_gtid
        if pk is not None:
            self.pk = pk
        if src_event_time is not None:
            self.src_event_time = src_event_time
        if src_gtid is not None:
            self.src_gtid = src_gtid

    @property
    def column(self):
        """Gets the column of this ItemForGetDBTableDiffDetailsOutput.  # noqa: E501


        :return: The column of this ItemForGetDBTableDiffDetailsOutput.  # noqa: E501
        :rtype: list[ColumnForGetDBTableDiffDetailsOutput]
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this ItemForGetDBTableDiffDetailsOutput.


        :param column: The column of this ItemForGetDBTableDiffDetailsOutput.  # noqa: E501
        :type: list[ColumnForGetDBTableDiffDetailsOutput]
        """

        self._column = column

    @property
    def dest_event_time(self):
        """Gets the dest_event_time of this ItemForGetDBTableDiffDetailsOutput.  # noqa: E501


        :return: The dest_event_time of this ItemForGetDBTableDiffDetailsOutput.  # noqa: E501
        :rtype: int
        """
        return self._dest_event_time

    @dest_event_time.setter
    def dest_event_time(self, dest_event_time):
        """Sets the dest_event_time of this ItemForGetDBTableDiffDetailsOutput.


        :param dest_event_time: The dest_event_time of this ItemForGetDBTableDiffDetailsOutput.  # noqa: E501
        :type: int
        """

        self._dest_event_time = dest_event_time

    @property
    def dest_gtid(self):
        """Gets the dest_gtid of this ItemForGetDBTableDiffDetailsOutput.  # noqa: E501


        :return: The dest_gtid of this ItemForGetDBTableDiffDetailsOutput.  # noqa: E501
        :rtype: str
        """
        return self._dest_gtid

    @dest_gtid.setter
    def dest_gtid(self, dest_gtid):
        """Sets the dest_gtid of this ItemForGetDBTableDiffDetailsOutput.


        :param dest_gtid: The dest_gtid of this ItemForGetDBTableDiffDetailsOutput.  # noqa: E501
        :type: str
        """

        self._dest_gtid = dest_gtid

    @property
    def pk(self):
        """Gets the pk of this ItemForGetDBTableDiffDetailsOutput.  # noqa: E501


        :return: The pk of this ItemForGetDBTableDiffDetailsOutput.  # noqa: E501
        :rtype: list[PkForGetDBTableDiffDetailsOutput]
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this ItemForGetDBTableDiffDetailsOutput.


        :param pk: The pk of this ItemForGetDBTableDiffDetailsOutput.  # noqa: E501
        :type: list[PkForGetDBTableDiffDetailsOutput]
        """

        self._pk = pk

    @property
    def src_event_time(self):
        """Gets the src_event_time of this ItemForGetDBTableDiffDetailsOutput.  # noqa: E501


        :return: The src_event_time of this ItemForGetDBTableDiffDetailsOutput.  # noqa: E501
        :rtype: int
        """
        return self._src_event_time

    @src_event_time.setter
    def src_event_time(self, src_event_time):
        """Sets the src_event_time of this ItemForGetDBTableDiffDetailsOutput.


        :param src_event_time: The src_event_time of this ItemForGetDBTableDiffDetailsOutput.  # noqa: E501
        :type: int
        """

        self._src_event_time = src_event_time

    @property
    def src_gtid(self):
        """Gets the src_gtid of this ItemForGetDBTableDiffDetailsOutput.  # noqa: E501


        :return: The src_gtid of this ItemForGetDBTableDiffDetailsOutput.  # noqa: E501
        :rtype: str
        """
        return self._src_gtid

    @src_gtid.setter
    def src_gtid(self, src_gtid):
        """Sets the src_gtid of this ItemForGetDBTableDiffDetailsOutput.


        :param src_gtid: The src_gtid of this ItemForGetDBTableDiffDetailsOutput.  # noqa: E501
        :type: str
        """

        self._src_gtid = src_gtid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemForGetDBTableDiffDetailsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemForGetDBTableDiffDetailsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemForGetDBTableDiffDetailsOutput):
            return True

        return self.to_dict() != other.to_dict()
