# coding: utf-8

"""
    dts

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DescribeTransmissionTaskProgressRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'latency_desc': 'bool',
        'name': 'str',
        'object_type': 'str',
        'page_number': 'int',
        'page_size': 'int',
        'progress_type': 'str',
        'task_id': 'str',
        'transfer_estimate_rows_desc': 'bool',
        'transmission_state': 'str'
    }

    attribute_map = {
        'latency_desc': 'LatencyDesc',
        'name': 'Name',
        'object_type': 'ObjectType',
        'page_number': 'PageNumber',
        'page_size': 'PageSize',
        'progress_type': 'ProgressType',
        'task_id': 'TaskId',
        'transfer_estimate_rows_desc': 'TransferEstimateRowsDesc',
        'transmission_state': 'TransmissionState'
    }

    def __init__(self, latency_desc=None, name=None, object_type=None, page_number=None, page_size=None, progress_type=None, task_id=None, transfer_estimate_rows_desc=None, transmission_state=None, _configuration=None):  # noqa: E501
        """DescribeTransmissionTaskProgressRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._latency_desc = None
        self._name = None
        self._object_type = None
        self._page_number = None
        self._page_size = None
        self._progress_type = None
        self._task_id = None
        self._transfer_estimate_rows_desc = None
        self._transmission_state = None
        self.discriminator = None

        if latency_desc is not None:
            self.latency_desc = latency_desc
        if name is not None:
            self.name = name
        if object_type is not None:
            self.object_type = object_type
        self.page_number = page_number
        self.page_size = page_size
        self.progress_type = progress_type
        self.task_id = task_id
        if transfer_estimate_rows_desc is not None:
            self.transfer_estimate_rows_desc = transfer_estimate_rows_desc
        if transmission_state is not None:
            self.transmission_state = transmission_state

    @property
    def latency_desc(self):
        """Gets the latency_desc of this DescribeTransmissionTaskProgressRequest.  # noqa: E501


        :return: The latency_desc of this DescribeTransmissionTaskProgressRequest.  # noqa: E501
        :rtype: bool
        """
        return self._latency_desc

    @latency_desc.setter
    def latency_desc(self, latency_desc):
        """Sets the latency_desc of this DescribeTransmissionTaskProgressRequest.


        :param latency_desc: The latency_desc of this DescribeTransmissionTaskProgressRequest.  # noqa: E501
        :type: bool
        """

        self._latency_desc = latency_desc

    @property
    def name(self):
        """Gets the name of this DescribeTransmissionTaskProgressRequest.  # noqa: E501


        :return: The name of this DescribeTransmissionTaskProgressRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DescribeTransmissionTaskProgressRequest.


        :param name: The name of this DescribeTransmissionTaskProgressRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def object_type(self):
        """Gets the object_type of this DescribeTransmissionTaskProgressRequest.  # noqa: E501


        :return: The object_type of this DescribeTransmissionTaskProgressRequest.  # noqa: E501
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this DescribeTransmissionTaskProgressRequest.


        :param object_type: The object_type of this DescribeTransmissionTaskProgressRequest.  # noqa: E501
        :type: str
        """

        self._object_type = object_type

    @property
    def page_number(self):
        """Gets the page_number of this DescribeTransmissionTaskProgressRequest.  # noqa: E501


        :return: The page_number of this DescribeTransmissionTaskProgressRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this DescribeTransmissionTaskProgressRequest.


        :param page_number: The page_number of this DescribeTransmissionTaskProgressRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and page_number is None:
            raise ValueError("Invalid value for `page_number`, must not be `None`")  # noqa: E501

        self._page_number = page_number

    @property
    def page_size(self):
        """Gets the page_size of this DescribeTransmissionTaskProgressRequest.  # noqa: E501


        :return: The page_size of this DescribeTransmissionTaskProgressRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this DescribeTransmissionTaskProgressRequest.


        :param page_size: The page_size of this DescribeTransmissionTaskProgressRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")  # noqa: E501

        self._page_size = page_size

    @property
    def progress_type(self):
        """Gets the progress_type of this DescribeTransmissionTaskProgressRequest.  # noqa: E501


        :return: The progress_type of this DescribeTransmissionTaskProgressRequest.  # noqa: E501
        :rtype: str
        """
        return self._progress_type

    @progress_type.setter
    def progress_type(self, progress_type):
        """Sets the progress_type of this DescribeTransmissionTaskProgressRequest.


        :param progress_type: The progress_type of this DescribeTransmissionTaskProgressRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and progress_type is None:
            raise ValueError("Invalid value for `progress_type`, must not be `None`")  # noqa: E501

        self._progress_type = progress_type

    @property
    def task_id(self):
        """Gets the task_id of this DescribeTransmissionTaskProgressRequest.  # noqa: E501


        :return: The task_id of this DescribeTransmissionTaskProgressRequest.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this DescribeTransmissionTaskProgressRequest.


        :param task_id: The task_id of this DescribeTransmissionTaskProgressRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")  # noqa: E501

        self._task_id = task_id

    @property
    def transfer_estimate_rows_desc(self):
        """Gets the transfer_estimate_rows_desc of this DescribeTransmissionTaskProgressRequest.  # noqa: E501


        :return: The transfer_estimate_rows_desc of this DescribeTransmissionTaskProgressRequest.  # noqa: E501
        :rtype: bool
        """
        return self._transfer_estimate_rows_desc

    @transfer_estimate_rows_desc.setter
    def transfer_estimate_rows_desc(self, transfer_estimate_rows_desc):
        """Sets the transfer_estimate_rows_desc of this DescribeTransmissionTaskProgressRequest.


        :param transfer_estimate_rows_desc: The transfer_estimate_rows_desc of this DescribeTransmissionTaskProgressRequest.  # noqa: E501
        :type: bool
        """

        self._transfer_estimate_rows_desc = transfer_estimate_rows_desc

    @property
    def transmission_state(self):
        """Gets the transmission_state of this DescribeTransmissionTaskProgressRequest.  # noqa: E501


        :return: The transmission_state of this DescribeTransmissionTaskProgressRequest.  # noqa: E501
        :rtype: str
        """
        return self._transmission_state

    @transmission_state.setter
    def transmission_state(self, transmission_state):
        """Sets the transmission_state of this DescribeTransmissionTaskProgressRequest.


        :param transmission_state: The transmission_state of this DescribeTransmissionTaskProgressRequest.  # noqa: E501
        :type: str
        """

        self._transmission_state = transmission_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DescribeTransmissionTaskProgressRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DescribeTransmissionTaskProgressRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DescribeTransmissionTaskProgressRequest):
            return True

        return self.to_dict() != other.to_dict()
