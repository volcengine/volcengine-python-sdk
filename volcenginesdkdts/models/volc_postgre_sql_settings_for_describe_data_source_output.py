# coding: utf-8

"""
    dts

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class VolcPostgreSQLSettingsForDescribeDataSourceOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'db_instance_id': 'str',
        'db_name': 'str',
        'password': 'str',
        'region_settings': 'RegionSettingsForDescribeDataSourceOutput',
        'username': 'str'
    }

    attribute_map = {
        'db_instance_id': 'DBInstanceId',
        'db_name': 'DBName',
        'password': 'Password',
        'region_settings': 'RegionSettings',
        'username': 'Username'
    }

    def __init__(self, db_instance_id=None, db_name=None, password=None, region_settings=None, username=None, _configuration=None):  # noqa: E501
        """VolcPostgreSQLSettingsForDescribeDataSourceOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._db_instance_id = None
        self._db_name = None
        self._password = None
        self._region_settings = None
        self._username = None
        self.discriminator = None

        if db_instance_id is not None:
            self.db_instance_id = db_instance_id
        if db_name is not None:
            self.db_name = db_name
        if password is not None:
            self.password = password
        if region_settings is not None:
            self.region_settings = region_settings
        if username is not None:
            self.username = username

    @property
    def db_instance_id(self):
        """Gets the db_instance_id of this VolcPostgreSQLSettingsForDescribeDataSourceOutput.  # noqa: E501


        :return: The db_instance_id of this VolcPostgreSQLSettingsForDescribeDataSourceOutput.  # noqa: E501
        :rtype: str
        """
        return self._db_instance_id

    @db_instance_id.setter
    def db_instance_id(self, db_instance_id):
        """Sets the db_instance_id of this VolcPostgreSQLSettingsForDescribeDataSourceOutput.


        :param db_instance_id: The db_instance_id of this VolcPostgreSQLSettingsForDescribeDataSourceOutput.  # noqa: E501
        :type: str
        """

        self._db_instance_id = db_instance_id

    @property
    def db_name(self):
        """Gets the db_name of this VolcPostgreSQLSettingsForDescribeDataSourceOutput.  # noqa: E501


        :return: The db_name of this VolcPostgreSQLSettingsForDescribeDataSourceOutput.  # noqa: E501
        :rtype: str
        """
        return self._db_name

    @db_name.setter
    def db_name(self, db_name):
        """Sets the db_name of this VolcPostgreSQLSettingsForDescribeDataSourceOutput.


        :param db_name: The db_name of this VolcPostgreSQLSettingsForDescribeDataSourceOutput.  # noqa: E501
        :type: str
        """

        self._db_name = db_name

    @property
    def password(self):
        """Gets the password of this VolcPostgreSQLSettingsForDescribeDataSourceOutput.  # noqa: E501


        :return: The password of this VolcPostgreSQLSettingsForDescribeDataSourceOutput.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this VolcPostgreSQLSettingsForDescribeDataSourceOutput.


        :param password: The password of this VolcPostgreSQLSettingsForDescribeDataSourceOutput.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def region_settings(self):
        """Gets the region_settings of this VolcPostgreSQLSettingsForDescribeDataSourceOutput.  # noqa: E501


        :return: The region_settings of this VolcPostgreSQLSettingsForDescribeDataSourceOutput.  # noqa: E501
        :rtype: RegionSettingsForDescribeDataSourceOutput
        """
        return self._region_settings

    @region_settings.setter
    def region_settings(self, region_settings):
        """Sets the region_settings of this VolcPostgreSQLSettingsForDescribeDataSourceOutput.


        :param region_settings: The region_settings of this VolcPostgreSQLSettingsForDescribeDataSourceOutput.  # noqa: E501
        :type: RegionSettingsForDescribeDataSourceOutput
        """

        self._region_settings = region_settings

    @property
    def username(self):
        """Gets the username of this VolcPostgreSQLSettingsForDescribeDataSourceOutput.  # noqa: E501


        :return: The username of this VolcPostgreSQLSettingsForDescribeDataSourceOutput.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this VolcPostgreSQLSettingsForDescribeDataSourceOutput.


        :param username: The username of this VolcPostgreSQLSettingsForDescribeDataSourceOutput.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VolcPostgreSQLSettingsForDescribeDataSourceOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolcPostgreSQLSettingsForDescribeDataSourceOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VolcPostgreSQLSettingsForDescribeDataSourceOutput):
            return True

        return self.to_dict() != other.to_dict()
