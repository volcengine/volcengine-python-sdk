# coding: utf-8

"""
    dts

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DescribeTransmissionTasksRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charge_type': 'str',
        'end_time': 'int',
        'ids': 'list[str]',
        'name': 'str',
        'page_number': 'int',
        'page_size': 'int',
        'project_name': 'str',
        'start_time': 'int',
        'task_status': 'str',
        'task_type': 'str'
    }

    attribute_map = {
        'charge_type': 'ChargeType',
        'end_time': 'EndTime',
        'ids': 'Ids',
        'name': 'Name',
        'page_number': 'PageNumber',
        'page_size': 'PageSize',
        'project_name': 'ProjectName',
        'start_time': 'StartTime',
        'task_status': 'TaskStatus',
        'task_type': 'TaskType'
    }

    def __init__(self, charge_type=None, end_time=None, ids=None, name=None, page_number=None, page_size=None, project_name=None, start_time=None, task_status=None, task_type=None, _configuration=None):  # noqa: E501
        """DescribeTransmissionTasksRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._charge_type = None
        self._end_time = None
        self._ids = None
        self._name = None
        self._page_number = None
        self._page_size = None
        self._project_name = None
        self._start_time = None
        self._task_status = None
        self._task_type = None
        self.discriminator = None

        if charge_type is not None:
            self.charge_type = charge_type
        if end_time is not None:
            self.end_time = end_time
        if ids is not None:
            self.ids = ids
        if name is not None:
            self.name = name
        self.page_number = page_number
        self.page_size = page_size
        if project_name is not None:
            self.project_name = project_name
        if start_time is not None:
            self.start_time = start_time
        if task_status is not None:
            self.task_status = task_status
        self.task_type = task_type

    @property
    def charge_type(self):
        """Gets the charge_type of this DescribeTransmissionTasksRequest.  # noqa: E501


        :return: The charge_type of this DescribeTransmissionTasksRequest.  # noqa: E501
        :rtype: str
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """Sets the charge_type of this DescribeTransmissionTasksRequest.


        :param charge_type: The charge_type of this DescribeTransmissionTasksRequest.  # noqa: E501
        :type: str
        """

        self._charge_type = charge_type

    @property
    def end_time(self):
        """Gets the end_time of this DescribeTransmissionTasksRequest.  # noqa: E501


        :return: The end_time of this DescribeTransmissionTasksRequest.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this DescribeTransmissionTasksRequest.


        :param end_time: The end_time of this DescribeTransmissionTasksRequest.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def ids(self):
        """Gets the ids of this DescribeTransmissionTasksRequest.  # noqa: E501


        :return: The ids of this DescribeTransmissionTasksRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this DescribeTransmissionTasksRequest.


        :param ids: The ids of this DescribeTransmissionTasksRequest.  # noqa: E501
        :type: list[str]
        """

        self._ids = ids

    @property
    def name(self):
        """Gets the name of this DescribeTransmissionTasksRequest.  # noqa: E501


        :return: The name of this DescribeTransmissionTasksRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DescribeTransmissionTasksRequest.


        :param name: The name of this DescribeTransmissionTasksRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def page_number(self):
        """Gets the page_number of this DescribeTransmissionTasksRequest.  # noqa: E501


        :return: The page_number of this DescribeTransmissionTasksRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this DescribeTransmissionTasksRequest.


        :param page_number: The page_number of this DescribeTransmissionTasksRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and page_number is None:
            raise ValueError("Invalid value for `page_number`, must not be `None`")  # noqa: E501

        self._page_number = page_number

    @property
    def page_size(self):
        """Gets the page_size of this DescribeTransmissionTasksRequest.  # noqa: E501


        :return: The page_size of this DescribeTransmissionTasksRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this DescribeTransmissionTasksRequest.


        :param page_size: The page_size of this DescribeTransmissionTasksRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")  # noqa: E501

        self._page_size = page_size

    @property
    def project_name(self):
        """Gets the project_name of this DescribeTransmissionTasksRequest.  # noqa: E501


        :return: The project_name of this DescribeTransmissionTasksRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this DescribeTransmissionTasksRequest.


        :param project_name: The project_name of this DescribeTransmissionTasksRequest.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def start_time(self):
        """Gets the start_time of this DescribeTransmissionTasksRequest.  # noqa: E501


        :return: The start_time of this DescribeTransmissionTasksRequest.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this DescribeTransmissionTasksRequest.


        :param start_time: The start_time of this DescribeTransmissionTasksRequest.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def task_status(self):
        """Gets the task_status of this DescribeTransmissionTasksRequest.  # noqa: E501


        :return: The task_status of this DescribeTransmissionTasksRequest.  # noqa: E501
        :rtype: str
        """
        return self._task_status

    @task_status.setter
    def task_status(self, task_status):
        """Sets the task_status of this DescribeTransmissionTasksRequest.


        :param task_status: The task_status of this DescribeTransmissionTasksRequest.  # noqa: E501
        :type: str
        """

        self._task_status = task_status

    @property
    def task_type(self):
        """Gets the task_type of this DescribeTransmissionTasksRequest.  # noqa: E501


        :return: The task_type of this DescribeTransmissionTasksRequest.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this DescribeTransmissionTasksRequest.


        :param task_type: The task_type of this DescribeTransmissionTasksRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and task_type is None:
            raise ValueError("Invalid value for `task_type`, must not be `None`")  # noqa: E501

        self._task_type = task_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DescribeTransmissionTasksRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DescribeTransmissionTasksRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DescribeTransmissionTasksRequest):
            return True

        return self.to_dict() != other.to_dict()
