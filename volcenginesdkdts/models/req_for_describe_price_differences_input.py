# coding: utf-8

"""
    dts

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ReqForDescribePriceDifferencesInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_ids': 'list[str]',
        'to_pre_paid': 'ToPrePaidForDescribePriceDifferencesInput'
    }

    attribute_map = {
        'task_ids': 'TaskIDs',
        'to_pre_paid': 'ToPrePaid'
    }

    def __init__(self, task_ids=None, to_pre_paid=None, _configuration=None):  # noqa: E501
        """ReqForDescribePriceDifferencesInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._task_ids = None
        self._to_pre_paid = None
        self.discriminator = None

        if task_ids is not None:
            self.task_ids = task_ids
        if to_pre_paid is not None:
            self.to_pre_paid = to_pre_paid

    @property
    def task_ids(self):
        """Gets the task_ids of this ReqForDescribePriceDifferencesInput.  # noqa: E501


        :return: The task_ids of this ReqForDescribePriceDifferencesInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._task_ids

    @task_ids.setter
    def task_ids(self, task_ids):
        """Sets the task_ids of this ReqForDescribePriceDifferencesInput.


        :param task_ids: The task_ids of this ReqForDescribePriceDifferencesInput.  # noqa: E501
        :type: list[str]
        """

        self._task_ids = task_ids

    @property
    def to_pre_paid(self):
        """Gets the to_pre_paid of this ReqForDescribePriceDifferencesInput.  # noqa: E501


        :return: The to_pre_paid of this ReqForDescribePriceDifferencesInput.  # noqa: E501
        :rtype: ToPrePaidForDescribePriceDifferencesInput
        """
        return self._to_pre_paid

    @to_pre_paid.setter
    def to_pre_paid(self, to_pre_paid):
        """Sets the to_pre_paid of this ReqForDescribePriceDifferencesInput.


        :param to_pre_paid: The to_pre_paid of this ReqForDescribePriceDifferencesInput.  # noqa: E501
        :type: ToPrePaidForDescribePriceDifferencesInput
        """

        self._to_pre_paid = to_pre_paid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReqForDescribePriceDifferencesInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReqForDescribePriceDifferencesInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReqForDescribePriceDifferencesInput):
            return True

        return self.to_dict() != other.to_dict()
