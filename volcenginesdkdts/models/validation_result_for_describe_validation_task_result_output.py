# coding: utf-8

"""
    dts

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ValidationResultForDescribeValidationTaskResultOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_state': 'str',
        'full_validation_result': 'list[FullValidationResultForDescribeValidationTaskResultOutput]',
        'incr_validation_result': 'list[IncrValidationResultForDescribeValidationTaskResultOutput]',
        'meta_validation_result': 'list[MetaValidationResultForDescribeValidationTaskResultOutput]',
        'pk_validation_result': 'list[PkValidationResultForDescribeValidationTaskResultOutput]',
        'row_count_validation_result': 'list[RowCountValidationResultForDescribeValidationTaskResultOutput]',
        'task_sub_type': 'str',
        'total': 'int',
        'total_diff_num': 'int'
    }

    attribute_map = {
        'file_state': 'FileState',
        'full_validation_result': 'FullValidationResult',
        'incr_validation_result': 'IncrValidationResult',
        'meta_validation_result': 'MetaValidationResult',
        'pk_validation_result': 'PkValidationResult',
        'row_count_validation_result': 'RowCountValidationResult',
        'task_sub_type': 'TaskSubType',
        'total': 'Total',
        'total_diff_num': 'TotalDiffNum'
    }

    def __init__(self, file_state=None, full_validation_result=None, incr_validation_result=None, meta_validation_result=None, pk_validation_result=None, row_count_validation_result=None, task_sub_type=None, total=None, total_diff_num=None, _configuration=None):  # noqa: E501
        """ValidationResultForDescribeValidationTaskResultOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._file_state = None
        self._full_validation_result = None
        self._incr_validation_result = None
        self._meta_validation_result = None
        self._pk_validation_result = None
        self._row_count_validation_result = None
        self._task_sub_type = None
        self._total = None
        self._total_diff_num = None
        self.discriminator = None

        if file_state is not None:
            self.file_state = file_state
        if full_validation_result is not None:
            self.full_validation_result = full_validation_result
        if incr_validation_result is not None:
            self.incr_validation_result = incr_validation_result
        if meta_validation_result is not None:
            self.meta_validation_result = meta_validation_result
        if pk_validation_result is not None:
            self.pk_validation_result = pk_validation_result
        if row_count_validation_result is not None:
            self.row_count_validation_result = row_count_validation_result
        if task_sub_type is not None:
            self.task_sub_type = task_sub_type
        if total is not None:
            self.total = total
        if total_diff_num is not None:
            self.total_diff_num = total_diff_num

    @property
    def file_state(self):
        """Gets the file_state of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501


        :return: The file_state of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :rtype: str
        """
        return self._file_state

    @file_state.setter
    def file_state(self, file_state):
        """Sets the file_state of this ValidationResultForDescribeValidationTaskResultOutput.


        :param file_state: The file_state of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :type: str
        """

        self._file_state = file_state

    @property
    def full_validation_result(self):
        """Gets the full_validation_result of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501


        :return: The full_validation_result of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :rtype: list[FullValidationResultForDescribeValidationTaskResultOutput]
        """
        return self._full_validation_result

    @full_validation_result.setter
    def full_validation_result(self, full_validation_result):
        """Sets the full_validation_result of this ValidationResultForDescribeValidationTaskResultOutput.


        :param full_validation_result: The full_validation_result of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :type: list[FullValidationResultForDescribeValidationTaskResultOutput]
        """

        self._full_validation_result = full_validation_result

    @property
    def incr_validation_result(self):
        """Gets the incr_validation_result of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501


        :return: The incr_validation_result of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :rtype: list[IncrValidationResultForDescribeValidationTaskResultOutput]
        """
        return self._incr_validation_result

    @incr_validation_result.setter
    def incr_validation_result(self, incr_validation_result):
        """Sets the incr_validation_result of this ValidationResultForDescribeValidationTaskResultOutput.


        :param incr_validation_result: The incr_validation_result of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :type: list[IncrValidationResultForDescribeValidationTaskResultOutput]
        """

        self._incr_validation_result = incr_validation_result

    @property
    def meta_validation_result(self):
        """Gets the meta_validation_result of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501


        :return: The meta_validation_result of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :rtype: list[MetaValidationResultForDescribeValidationTaskResultOutput]
        """
        return self._meta_validation_result

    @meta_validation_result.setter
    def meta_validation_result(self, meta_validation_result):
        """Sets the meta_validation_result of this ValidationResultForDescribeValidationTaskResultOutput.


        :param meta_validation_result: The meta_validation_result of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :type: list[MetaValidationResultForDescribeValidationTaskResultOutput]
        """

        self._meta_validation_result = meta_validation_result

    @property
    def pk_validation_result(self):
        """Gets the pk_validation_result of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501


        :return: The pk_validation_result of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :rtype: list[PkValidationResultForDescribeValidationTaskResultOutput]
        """
        return self._pk_validation_result

    @pk_validation_result.setter
    def pk_validation_result(self, pk_validation_result):
        """Sets the pk_validation_result of this ValidationResultForDescribeValidationTaskResultOutput.


        :param pk_validation_result: The pk_validation_result of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :type: list[PkValidationResultForDescribeValidationTaskResultOutput]
        """

        self._pk_validation_result = pk_validation_result

    @property
    def row_count_validation_result(self):
        """Gets the row_count_validation_result of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501


        :return: The row_count_validation_result of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :rtype: list[RowCountValidationResultForDescribeValidationTaskResultOutput]
        """
        return self._row_count_validation_result

    @row_count_validation_result.setter
    def row_count_validation_result(self, row_count_validation_result):
        """Sets the row_count_validation_result of this ValidationResultForDescribeValidationTaskResultOutput.


        :param row_count_validation_result: The row_count_validation_result of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :type: list[RowCountValidationResultForDescribeValidationTaskResultOutput]
        """

        self._row_count_validation_result = row_count_validation_result

    @property
    def task_sub_type(self):
        """Gets the task_sub_type of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501


        :return: The task_sub_type of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :rtype: str
        """
        return self._task_sub_type

    @task_sub_type.setter
    def task_sub_type(self, task_sub_type):
        """Sets the task_sub_type of this ValidationResultForDescribeValidationTaskResultOutput.


        :param task_sub_type: The task_sub_type of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :type: str
        """

        self._task_sub_type = task_sub_type

    @property
    def total(self):
        """Gets the total of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501


        :return: The total of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ValidationResultForDescribeValidationTaskResultOutput.


        :param total: The total of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def total_diff_num(self):
        """Gets the total_diff_num of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501


        :return: The total_diff_num of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :rtype: int
        """
        return self._total_diff_num

    @total_diff_num.setter
    def total_diff_num(self, total_diff_num):
        """Sets the total_diff_num of this ValidationResultForDescribeValidationTaskResultOutput.


        :param total_diff_num: The total_diff_num of this ValidationResultForDescribeValidationTaskResultOutput.  # noqa: E501
        :type: int
        """

        self._total_diff_num = total_diff_num

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValidationResultForDescribeValidationTaskResultOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidationResultForDescribeValidationTaskResultOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ValidationResultForDescribeValidationTaskResultOutput):
            return True

        return self.to_dict() != other.to_dict()
