# coding: utf-8

"""
    dts

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ModifyInstanceOrderRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'convert_post_paid_to_pre_paid': 'ConvertPostPaidToPrePaidForModifyInstanceOrderInput',
        'modify_instance_spec': 'ModifyInstanceSpecForModifyInstanceOrderInput',
        'one_step': 'bool',
        'task_id': 'str'
    }

    attribute_map = {
        'convert_post_paid_to_pre_paid': 'ConvertPostPaidToPrePaid',
        'modify_instance_spec': 'ModifyInstanceSpec',
        'one_step': 'OneStep',
        'task_id': 'TaskId'
    }

    def __init__(self, convert_post_paid_to_pre_paid=None, modify_instance_spec=None, one_step=None, task_id=None, _configuration=None):  # noqa: E501
        """ModifyInstanceOrderRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._convert_post_paid_to_pre_paid = None
        self._modify_instance_spec = None
        self._one_step = None
        self._task_id = None
        self.discriminator = None

        if convert_post_paid_to_pre_paid is not None:
            self.convert_post_paid_to_pre_paid = convert_post_paid_to_pre_paid
        if modify_instance_spec is not None:
            self.modify_instance_spec = modify_instance_spec
        self.one_step = one_step
        self.task_id = task_id

    @property
    def convert_post_paid_to_pre_paid(self):
        """Gets the convert_post_paid_to_pre_paid of this ModifyInstanceOrderRequest.  # noqa: E501


        :return: The convert_post_paid_to_pre_paid of this ModifyInstanceOrderRequest.  # noqa: E501
        :rtype: ConvertPostPaidToPrePaidForModifyInstanceOrderInput
        """
        return self._convert_post_paid_to_pre_paid

    @convert_post_paid_to_pre_paid.setter
    def convert_post_paid_to_pre_paid(self, convert_post_paid_to_pre_paid):
        """Sets the convert_post_paid_to_pre_paid of this ModifyInstanceOrderRequest.


        :param convert_post_paid_to_pre_paid: The convert_post_paid_to_pre_paid of this ModifyInstanceOrderRequest.  # noqa: E501
        :type: ConvertPostPaidToPrePaidForModifyInstanceOrderInput
        """

        self._convert_post_paid_to_pre_paid = convert_post_paid_to_pre_paid

    @property
    def modify_instance_spec(self):
        """Gets the modify_instance_spec of this ModifyInstanceOrderRequest.  # noqa: E501


        :return: The modify_instance_spec of this ModifyInstanceOrderRequest.  # noqa: E501
        :rtype: ModifyInstanceSpecForModifyInstanceOrderInput
        """
        return self._modify_instance_spec

    @modify_instance_spec.setter
    def modify_instance_spec(self, modify_instance_spec):
        """Sets the modify_instance_spec of this ModifyInstanceOrderRequest.


        :param modify_instance_spec: The modify_instance_spec of this ModifyInstanceOrderRequest.  # noqa: E501
        :type: ModifyInstanceSpecForModifyInstanceOrderInput
        """

        self._modify_instance_spec = modify_instance_spec

    @property
    def one_step(self):
        """Gets the one_step of this ModifyInstanceOrderRequest.  # noqa: E501


        :return: The one_step of this ModifyInstanceOrderRequest.  # noqa: E501
        :rtype: bool
        """
        return self._one_step

    @one_step.setter
    def one_step(self, one_step):
        """Sets the one_step of this ModifyInstanceOrderRequest.


        :param one_step: The one_step of this ModifyInstanceOrderRequest.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and one_step is None:
            raise ValueError("Invalid value for `one_step`, must not be `None`")  # noqa: E501

        self._one_step = one_step

    @property
    def task_id(self):
        """Gets the task_id of this ModifyInstanceOrderRequest.  # noqa: E501


        :return: The task_id of this ModifyInstanceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this ModifyInstanceOrderRequest.


        :param task_id: The task_id of this ModifyInstanceOrderRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")  # noqa: E501

        self._task_id = task_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModifyInstanceOrderRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModifyInstanceOrderRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModifyInstanceOrderRequest):
            return True

        return self.to_dict() != other.to_dict()
