# coding: utf-8

"""
    vke

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ConfigForListRemedyConfigsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'ActionForListRemedyConfigsOutput',
        'auto_restore_schedule': 'bool',
        'drain': 'DrainForListRemedyConfigsOutput',
        'intervene_cordon': 'InterveneCordonForListRemedyConfigsOutput',
        'intervene_drain': 'InterveneDrainForListRemedyConfigsOutput'
    }

    attribute_map = {
        'action': 'Action',
        'auto_restore_schedule': 'AutoRestoreSchedule',
        'drain': 'Drain',
        'intervene_cordon': 'InterveneCordon',
        'intervene_drain': 'InterveneDrain'
    }

    def __init__(self, action=None, auto_restore_schedule=None, drain=None, intervene_cordon=None, intervene_drain=None, _configuration=None):  # noqa: E501
        """ConfigForListRemedyConfigsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._action = None
        self._auto_restore_schedule = None
        self._drain = None
        self._intervene_cordon = None
        self._intervene_drain = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if auto_restore_schedule is not None:
            self.auto_restore_schedule = auto_restore_schedule
        if drain is not None:
            self.drain = drain
        if intervene_cordon is not None:
            self.intervene_cordon = intervene_cordon
        if intervene_drain is not None:
            self.intervene_drain = intervene_drain

    @property
    def action(self):
        """Gets the action of this ConfigForListRemedyConfigsOutput.  # noqa: E501


        :return: The action of this ConfigForListRemedyConfigsOutput.  # noqa: E501
        :rtype: ActionForListRemedyConfigsOutput
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ConfigForListRemedyConfigsOutput.


        :param action: The action of this ConfigForListRemedyConfigsOutput.  # noqa: E501
        :type: ActionForListRemedyConfigsOutput
        """

        self._action = action

    @property
    def auto_restore_schedule(self):
        """Gets the auto_restore_schedule of this ConfigForListRemedyConfigsOutput.  # noqa: E501


        :return: The auto_restore_schedule of this ConfigForListRemedyConfigsOutput.  # noqa: E501
        :rtype: bool
        """
        return self._auto_restore_schedule

    @auto_restore_schedule.setter
    def auto_restore_schedule(self, auto_restore_schedule):
        """Sets the auto_restore_schedule of this ConfigForListRemedyConfigsOutput.


        :param auto_restore_schedule: The auto_restore_schedule of this ConfigForListRemedyConfigsOutput.  # noqa: E501
        :type: bool
        """

        self._auto_restore_schedule = auto_restore_schedule

    @property
    def drain(self):
        """Gets the drain of this ConfigForListRemedyConfigsOutput.  # noqa: E501


        :return: The drain of this ConfigForListRemedyConfigsOutput.  # noqa: E501
        :rtype: DrainForListRemedyConfigsOutput
        """
        return self._drain

    @drain.setter
    def drain(self, drain):
        """Sets the drain of this ConfigForListRemedyConfigsOutput.


        :param drain: The drain of this ConfigForListRemedyConfigsOutput.  # noqa: E501
        :type: DrainForListRemedyConfigsOutput
        """

        self._drain = drain

    @property
    def intervene_cordon(self):
        """Gets the intervene_cordon of this ConfigForListRemedyConfigsOutput.  # noqa: E501


        :return: The intervene_cordon of this ConfigForListRemedyConfigsOutput.  # noqa: E501
        :rtype: InterveneCordonForListRemedyConfigsOutput
        """
        return self._intervene_cordon

    @intervene_cordon.setter
    def intervene_cordon(self, intervene_cordon):
        """Sets the intervene_cordon of this ConfigForListRemedyConfigsOutput.


        :param intervene_cordon: The intervene_cordon of this ConfigForListRemedyConfigsOutput.  # noqa: E501
        :type: InterveneCordonForListRemedyConfigsOutput
        """

        self._intervene_cordon = intervene_cordon

    @property
    def intervene_drain(self):
        """Gets the intervene_drain of this ConfigForListRemedyConfigsOutput.  # noqa: E501


        :return: The intervene_drain of this ConfigForListRemedyConfigsOutput.  # noqa: E501
        :rtype: InterveneDrainForListRemedyConfigsOutput
        """
        return self._intervene_drain

    @intervene_drain.setter
    def intervene_drain(self, intervene_drain):
        """Sets the intervene_drain of this ConfigForListRemedyConfigsOutput.


        :param intervene_drain: The intervene_drain of this ConfigForListRemedyConfigsOutput.  # noqa: E501
        :type: InterveneDrainForListRemedyConfigsOutput
        """

        self._intervene_drain = intervene_drain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigForListRemedyConfigsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigForListRemedyConfigsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigForListRemedyConfigsOutput):
            return True

        return self.to_dict() != other.to_dict()
