# coding: utf-8

"""
    vke

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class RuleForListRemedyConfigsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fault_type': 'str',
        'incident_types': 'list[str]',
        'remedy_strategy': 'RemedyStrategyForListRemedyConfigsOutput'
    }

    attribute_map = {
        'fault_type': 'FaultType',
        'incident_types': 'IncidentTypes',
        'remedy_strategy': 'RemedyStrategy'
    }

    def __init__(self, fault_type=None, incident_types=None, remedy_strategy=None, _configuration=None):  # noqa: E501
        """RuleForListRemedyConfigsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._fault_type = None
        self._incident_types = None
        self._remedy_strategy = None
        self.discriminator = None

        if fault_type is not None:
            self.fault_type = fault_type
        if incident_types is not None:
            self.incident_types = incident_types
        if remedy_strategy is not None:
            self.remedy_strategy = remedy_strategy

    @property
    def fault_type(self):
        """Gets the fault_type of this RuleForListRemedyConfigsOutput.  # noqa: E501


        :return: The fault_type of this RuleForListRemedyConfigsOutput.  # noqa: E501
        :rtype: str
        """
        return self._fault_type

    @fault_type.setter
    def fault_type(self, fault_type):
        """Sets the fault_type of this RuleForListRemedyConfigsOutput.


        :param fault_type: The fault_type of this RuleForListRemedyConfigsOutput.  # noqa: E501
        :type: str
        """

        self._fault_type = fault_type

    @property
    def incident_types(self):
        """Gets the incident_types of this RuleForListRemedyConfigsOutput.  # noqa: E501


        :return: The incident_types of this RuleForListRemedyConfigsOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._incident_types

    @incident_types.setter
    def incident_types(self, incident_types):
        """Sets the incident_types of this RuleForListRemedyConfigsOutput.


        :param incident_types: The incident_types of this RuleForListRemedyConfigsOutput.  # noqa: E501
        :type: list[str]
        """

        self._incident_types = incident_types

    @property
    def remedy_strategy(self):
        """Gets the remedy_strategy of this RuleForListRemedyConfigsOutput.  # noqa: E501


        :return: The remedy_strategy of this RuleForListRemedyConfigsOutput.  # noqa: E501
        :rtype: RemedyStrategyForListRemedyConfigsOutput
        """
        return self._remedy_strategy

    @remedy_strategy.setter
    def remedy_strategy(self, remedy_strategy):
        """Sets the remedy_strategy of this RuleForListRemedyConfigsOutput.


        :param remedy_strategy: The remedy_strategy of this RuleForListRemedyConfigsOutput.  # noqa: E501
        :type: RemedyStrategyForListRemedyConfigsOutput
        """

        self._remedy_strategy = remedy_strategy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuleForListRemedyConfigsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleForListRemedyConfigsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RuleForListRemedyConfigsOutput):
            return True

        return self.to_dict() != other.to_dict()
