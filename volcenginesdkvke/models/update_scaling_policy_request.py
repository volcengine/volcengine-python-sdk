# coding: utf-8

"""
    vke

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class UpdateScalingPolicyRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adjustment_value': 'int',
        'client_token': 'str',
        'cluster_id': 'str',
        'enabled': 'bool',
        'id': 'str',
        'node_pool_id': 'str',
        'scheduled_instance_policy': 'ScheduledInstancePolicyForUpdateScalingPolicyInput',
        'scheduled_policy': 'ScheduledPolicyForUpdateScalingPolicyInput'
    }

    attribute_map = {
        'adjustment_value': 'AdjustmentValue',
        'client_token': 'ClientToken',
        'cluster_id': 'ClusterId',
        'enabled': 'Enabled',
        'id': 'Id',
        'node_pool_id': 'NodePoolId',
        'scheduled_instance_policy': 'ScheduledInstancePolicy',
        'scheduled_policy': 'ScheduledPolicy'
    }

    def __init__(self, adjustment_value=None, client_token=None, cluster_id=None, enabled=None, id=None, node_pool_id=None, scheduled_instance_policy=None, scheduled_policy=None, _configuration=None):  # noqa: E501
        """UpdateScalingPolicyRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._adjustment_value = None
        self._client_token = None
        self._cluster_id = None
        self._enabled = None
        self._id = None
        self._node_pool_id = None
        self._scheduled_instance_policy = None
        self._scheduled_policy = None
        self.discriminator = None

        if adjustment_value is not None:
            self.adjustment_value = adjustment_value
        if client_token is not None:
            self.client_token = client_token
        self.cluster_id = cluster_id
        if enabled is not None:
            self.enabled = enabled
        self.id = id
        self.node_pool_id = node_pool_id
        if scheduled_instance_policy is not None:
            self.scheduled_instance_policy = scheduled_instance_policy
        if scheduled_policy is not None:
            self.scheduled_policy = scheduled_policy

    @property
    def adjustment_value(self):
        """Gets the adjustment_value of this UpdateScalingPolicyRequest.  # noqa: E501


        :return: The adjustment_value of this UpdateScalingPolicyRequest.  # noqa: E501
        :rtype: int
        """
        return self._adjustment_value

    @adjustment_value.setter
    def adjustment_value(self, adjustment_value):
        """Sets the adjustment_value of this UpdateScalingPolicyRequest.


        :param adjustment_value: The adjustment_value of this UpdateScalingPolicyRequest.  # noqa: E501
        :type: int
        """

        self._adjustment_value = adjustment_value

    @property
    def client_token(self):
        """Gets the client_token of this UpdateScalingPolicyRequest.  # noqa: E501


        :return: The client_token of this UpdateScalingPolicyRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this UpdateScalingPolicyRequest.


        :param client_token: The client_token of this UpdateScalingPolicyRequest.  # noqa: E501
        :type: str
        """

        self._client_token = client_token

    @property
    def cluster_id(self):
        """Gets the cluster_id of this UpdateScalingPolicyRequest.  # noqa: E501


        :return: The cluster_id of this UpdateScalingPolicyRequest.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this UpdateScalingPolicyRequest.


        :param cluster_id: The cluster_id of this UpdateScalingPolicyRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and cluster_id is None:
            raise ValueError("Invalid value for `cluster_id`, must not be `None`")  # noqa: E501

        self._cluster_id = cluster_id

    @property
    def enabled(self):
        """Gets the enabled of this UpdateScalingPolicyRequest.  # noqa: E501


        :return: The enabled of this UpdateScalingPolicyRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdateScalingPolicyRequest.


        :param enabled: The enabled of this UpdateScalingPolicyRequest.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this UpdateScalingPolicyRequest.  # noqa: E501


        :return: The id of this UpdateScalingPolicyRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateScalingPolicyRequest.


        :param id: The id of this UpdateScalingPolicyRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def node_pool_id(self):
        """Gets the node_pool_id of this UpdateScalingPolicyRequest.  # noqa: E501


        :return: The node_pool_id of this UpdateScalingPolicyRequest.  # noqa: E501
        :rtype: str
        """
        return self._node_pool_id

    @node_pool_id.setter
    def node_pool_id(self, node_pool_id):
        """Sets the node_pool_id of this UpdateScalingPolicyRequest.


        :param node_pool_id: The node_pool_id of this UpdateScalingPolicyRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and node_pool_id is None:
            raise ValueError("Invalid value for `node_pool_id`, must not be `None`")  # noqa: E501

        self._node_pool_id = node_pool_id

    @property
    def scheduled_instance_policy(self):
        """Gets the scheduled_instance_policy of this UpdateScalingPolicyRequest.  # noqa: E501


        :return: The scheduled_instance_policy of this UpdateScalingPolicyRequest.  # noqa: E501
        :rtype: ScheduledInstancePolicyForUpdateScalingPolicyInput
        """
        return self._scheduled_instance_policy

    @scheduled_instance_policy.setter
    def scheduled_instance_policy(self, scheduled_instance_policy):
        """Sets the scheduled_instance_policy of this UpdateScalingPolicyRequest.


        :param scheduled_instance_policy: The scheduled_instance_policy of this UpdateScalingPolicyRequest.  # noqa: E501
        :type: ScheduledInstancePolicyForUpdateScalingPolicyInput
        """

        self._scheduled_instance_policy = scheduled_instance_policy

    @property
    def scheduled_policy(self):
        """Gets the scheduled_policy of this UpdateScalingPolicyRequest.  # noqa: E501


        :return: The scheduled_policy of this UpdateScalingPolicyRequest.  # noqa: E501
        :rtype: ScheduledPolicyForUpdateScalingPolicyInput
        """
        return self._scheduled_policy

    @scheduled_policy.setter
    def scheduled_policy(self, scheduled_policy):
        """Sets the scheduled_policy of this UpdateScalingPolicyRequest.


        :param scheduled_policy: The scheduled_policy of this UpdateScalingPolicyRequest.  # noqa: E501
        :type: ScheduledPolicyForUpdateScalingPolicyInput
        """

        self._scheduled_policy = scheduled_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateScalingPolicyRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateScalingPolicyRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateScalingPolicyRequest):
            return True

        return self.to_dict() != other.to_dict()
