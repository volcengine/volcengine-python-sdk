# coding: utf-8

"""
    vke

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class FilterForListRemedyConfigsInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_ids': 'list[str]',
        'ids': 'list[str]',
        'name': 'str',
        'resource_ids': 'list[str]',
        'resource_type': 'str'
    }

    attribute_map = {
        'cluster_ids': 'ClusterIds',
        'ids': 'Ids',
        'name': 'Name',
        'resource_ids': 'ResourceIds',
        'resource_type': 'ResourceType'
    }

    def __init__(self, cluster_ids=None, ids=None, name=None, resource_ids=None, resource_type=None, _configuration=None):  # noqa: E501
        """FilterForListRemedyConfigsInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cluster_ids = None
        self._ids = None
        self._name = None
        self._resource_ids = None
        self._resource_type = None
        self.discriminator = None

        if cluster_ids is not None:
            self.cluster_ids = cluster_ids
        if ids is not None:
            self.ids = ids
        if name is not None:
            self.name = name
        if resource_ids is not None:
            self.resource_ids = resource_ids
        if resource_type is not None:
            self.resource_type = resource_type

    @property
    def cluster_ids(self):
        """Gets the cluster_ids of this FilterForListRemedyConfigsInput.  # noqa: E501


        :return: The cluster_ids of this FilterForListRemedyConfigsInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._cluster_ids

    @cluster_ids.setter
    def cluster_ids(self, cluster_ids):
        """Sets the cluster_ids of this FilterForListRemedyConfigsInput.


        :param cluster_ids: The cluster_ids of this FilterForListRemedyConfigsInput.  # noqa: E501
        :type: list[str]
        """

        self._cluster_ids = cluster_ids

    @property
    def ids(self):
        """Gets the ids of this FilterForListRemedyConfigsInput.  # noqa: E501


        :return: The ids of this FilterForListRemedyConfigsInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this FilterForListRemedyConfigsInput.


        :param ids: The ids of this FilterForListRemedyConfigsInput.  # noqa: E501
        :type: list[str]
        """

        self._ids = ids

    @property
    def name(self):
        """Gets the name of this FilterForListRemedyConfigsInput.  # noqa: E501


        :return: The name of this FilterForListRemedyConfigsInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FilterForListRemedyConfigsInput.


        :param name: The name of this FilterForListRemedyConfigsInput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def resource_ids(self):
        """Gets the resource_ids of this FilterForListRemedyConfigsInput.  # noqa: E501


        :return: The resource_ids of this FilterForListRemedyConfigsInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._resource_ids

    @resource_ids.setter
    def resource_ids(self, resource_ids):
        """Sets the resource_ids of this FilterForListRemedyConfigsInput.


        :param resource_ids: The resource_ids of this FilterForListRemedyConfigsInput.  # noqa: E501
        :type: list[str]
        """

        self._resource_ids = resource_ids

    @property
    def resource_type(self):
        """Gets the resource_type of this FilterForListRemedyConfigsInput.  # noqa: E501


        :return: The resource_type of this FilterForListRemedyConfigsInput.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this FilterForListRemedyConfigsInput.


        :param resource_type: The resource_type of this FilterForListRemedyConfigsInput.  # noqa: E501
        :type: str
        """
        allowed_values = ["VkeNodePool"]  # noqa: E501
        if (self._configuration.client_side_validation and
                resource_type not in allowed_values):
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilterForListRemedyConfigsInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterForListRemedyConfigsInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FilterForListRemedyConfigsInput):
            return True

        return self.to_dict() != other.to_dict()
