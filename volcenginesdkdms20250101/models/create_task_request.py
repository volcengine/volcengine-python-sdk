# coding: utf-8

"""
    dms20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateTaskRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_group_id': 'str',
        'destination_id': 'str',
        'source_id': 'str',
        'task_config': 'TaskConfigForCreateTaskInput',
        'task_name': 'str',
        'task_type': 'str'
    }

    attribute_map = {
        'agent_group_id': 'AgentGroupId',
        'destination_id': 'DestinationId',
        'source_id': 'SourceId',
        'task_config': 'TaskConfig',
        'task_name': 'TaskName',
        'task_type': 'TaskType'
    }

    def __init__(self, agent_group_id=None, destination_id=None, source_id=None, task_config=None, task_name=None, task_type=None, _configuration=None):  # noqa: E501
        """CreateTaskRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._agent_group_id = None
        self._destination_id = None
        self._source_id = None
        self._task_config = None
        self._task_name = None
        self._task_type = None
        self.discriminator = None

        if agent_group_id is not None:
            self.agent_group_id = agent_group_id
        self.destination_id = destination_id
        self.source_id = source_id
        if task_config is not None:
            self.task_config = task_config
        self.task_name = task_name
        self.task_type = task_type

    @property
    def agent_group_id(self):
        """Gets the agent_group_id of this CreateTaskRequest.  # noqa: E501


        :return: The agent_group_id of this CreateTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._agent_group_id

    @agent_group_id.setter
    def agent_group_id(self, agent_group_id):
        """Sets the agent_group_id of this CreateTaskRequest.


        :param agent_group_id: The agent_group_id of this CreateTaskRequest.  # noqa: E501
        :type: str
        """

        self._agent_group_id = agent_group_id

    @property
    def destination_id(self):
        """Gets the destination_id of this CreateTaskRequest.  # noqa: E501


        :return: The destination_id of this CreateTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._destination_id

    @destination_id.setter
    def destination_id(self, destination_id):
        """Sets the destination_id of this CreateTaskRequest.


        :param destination_id: The destination_id of this CreateTaskRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and destination_id is None:
            raise ValueError("Invalid value for `destination_id`, must not be `None`")  # noqa: E501

        self._destination_id = destination_id

    @property
    def source_id(self):
        """Gets the source_id of this CreateTaskRequest.  # noqa: E501


        :return: The source_id of this CreateTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this CreateTaskRequest.


        :param source_id: The source_id of this CreateTaskRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")  # noqa: E501

        self._source_id = source_id

    @property
    def task_config(self):
        """Gets the task_config of this CreateTaskRequest.  # noqa: E501


        :return: The task_config of this CreateTaskRequest.  # noqa: E501
        :rtype: TaskConfigForCreateTaskInput
        """
        return self._task_config

    @task_config.setter
    def task_config(self, task_config):
        """Sets the task_config of this CreateTaskRequest.


        :param task_config: The task_config of this CreateTaskRequest.  # noqa: E501
        :type: TaskConfigForCreateTaskInput
        """

        self._task_config = task_config

    @property
    def task_name(self):
        """Gets the task_name of this CreateTaskRequest.  # noqa: E501


        :return: The task_name of this CreateTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this CreateTaskRequest.


        :param task_name: The task_name of this CreateTaskRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and task_name is None:
            raise ValueError("Invalid value for `task_name`, must not be `None`")  # noqa: E501

        self._task_name = task_name

    @property
    def task_type(self):
        """Gets the task_type of this CreateTaskRequest.  # noqa: E501


        :return: The task_type of this CreateTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this CreateTaskRequest.


        :param task_type: The task_type of this CreateTaskRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and task_type is None:
            raise ValueError("Invalid value for `task_type`, must not be `None`")  # noqa: E501
        allowed_values = ["HalfManaged"]  # noqa: E501
        if (self._configuration.client_side_validation and
                task_type not in allowed_values):
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"  # noqa: E501
                .format(task_type, allowed_values)
            )

        self._task_type = task_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateTaskRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTaskRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateTaskRequest):
            return True

        return self.to_dict() != other.to_dict()
