# coding: utf-8

"""
    dms20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateAgentGroupRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_group_name': 'str',
        'deploy_area': 'str',
        'deploy_type': 'str',
        'network_type': 'str'
    }

    attribute_map = {
        'agent_group_name': 'AgentGroupName',
        'deploy_area': 'DeployArea',
        'deploy_type': 'DeployType',
        'network_type': 'NetworkType'
    }

    def __init__(self, agent_group_name=None, deploy_area=None, deploy_type=None, network_type=None, _configuration=None):  # noqa: E501
        """CreateAgentGroupRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._agent_group_name = None
        self._deploy_area = None
        self._deploy_type = None
        self._network_type = None
        self.discriminator = None

        self.agent_group_name = agent_group_name
        self.deploy_area = deploy_area
        self.deploy_type = deploy_type
        self.network_type = network_type

    @property
    def agent_group_name(self):
        """Gets the agent_group_name of this CreateAgentGroupRequest.  # noqa: E501


        :return: The agent_group_name of this CreateAgentGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._agent_group_name

    @agent_group_name.setter
    def agent_group_name(self, agent_group_name):
        """Sets the agent_group_name of this CreateAgentGroupRequest.


        :param agent_group_name: The agent_group_name of this CreateAgentGroupRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and agent_group_name is None:
            raise ValueError("Invalid value for `agent_group_name`, must not be `None`")  # noqa: E501

        self._agent_group_name = agent_group_name

    @property
    def deploy_area(self):
        """Gets the deploy_area of this CreateAgentGroupRequest.  # noqa: E501


        :return: The deploy_area of this CreateAgentGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._deploy_area

    @deploy_area.setter
    def deploy_area(self, deploy_area):
        """Sets the deploy_area of this CreateAgentGroupRequest.


        :param deploy_area: The deploy_area of this CreateAgentGroupRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and deploy_area is None:
            raise ValueError("Invalid value for `deploy_area`, must not be `None`")  # noqa: E501
        allowed_values = ["CloudOverlay", "Premises"]  # noqa: E501
        if (self._configuration.client_side_validation and
                deploy_area not in allowed_values):
            raise ValueError(
                "Invalid value for `deploy_area` ({0}), must be one of {1}"  # noqa: E501
                .format(deploy_area, allowed_values)
            )

        self._deploy_area = deploy_area

    @property
    def deploy_type(self):
        """Gets the deploy_type of this CreateAgentGroupRequest.  # noqa: E501


        :return: The deploy_type of this CreateAgentGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._deploy_type

    @deploy_type.setter
    def deploy_type(self, deploy_type):
        """Sets the deploy_type of this CreateAgentGroupRequest.


        :param deploy_type: The deploy_type of this CreateAgentGroupRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and deploy_type is None:
            raise ValueError("Invalid value for `deploy_type`, must not be `None`")  # noqa: E501
        allowed_values = ["HalfManaged"]  # noqa: E501
        if (self._configuration.client_side_validation and
                deploy_type not in allowed_values):
            raise ValueError(
                "Invalid value for `deploy_type` ({0}), must be one of {1}"  # noqa: E501
                .format(deploy_type, allowed_values)
            )

        self._deploy_type = deploy_type

    @property
    def network_type(self):
        """Gets the network_type of this CreateAgentGroupRequest.  # noqa: E501


        :return: The network_type of this CreateAgentGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type):
        """Sets the network_type of this CreateAgentGroupRequest.


        :param network_type: The network_type of this CreateAgentGroupRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and network_type is None:
            raise ValueError("Invalid value for `network_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Public", "Vpc"]  # noqa: E501
        if (self._configuration.client_side_validation and
                network_type not in allowed_values):
            raise ValueError(
                "Invalid value for `network_type` ({0}), must be one of {1}"  # noqa: E501
                .format(network_type, allowed_values)
            )

        self._network_type = network_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateAgentGroupRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAgentGroupRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateAgentGroupRequest):
            return True

        return self.to_dict() != other.to_dict()
