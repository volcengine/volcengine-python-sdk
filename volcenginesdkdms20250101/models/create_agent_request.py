# coding: utf-8

"""
    dms20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateAgentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_group_id': 'str',
        'alias': 'str',
        'running_mode': 'str'
    }

    attribute_map = {
        'agent_group_id': 'AgentGroupId',
        'alias': 'Alias',
        'running_mode': 'RunningMode'
    }

    def __init__(self, agent_group_id=None, alias=None, running_mode=None, _configuration=None):  # noqa: E501
        """CreateAgentRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._agent_group_id = None
        self._alias = None
        self._running_mode = None
        self.discriminator = None

        self.agent_group_id = agent_group_id
        self.alias = alias
        self.running_mode = running_mode

    @property
    def agent_group_id(self):
        """Gets the agent_group_id of this CreateAgentRequest.  # noqa: E501


        :return: The agent_group_id of this CreateAgentRequest.  # noqa: E501
        :rtype: str
        """
        return self._agent_group_id

    @agent_group_id.setter
    def agent_group_id(self, agent_group_id):
        """Sets the agent_group_id of this CreateAgentRequest.


        :param agent_group_id: The agent_group_id of this CreateAgentRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and agent_group_id is None:
            raise ValueError("Invalid value for `agent_group_id`, must not be `None`")  # noqa: E501

        self._agent_group_id = agent_group_id

    @property
    def alias(self):
        """Gets the alias of this CreateAgentRequest.  # noqa: E501


        :return: The alias of this CreateAgentRequest.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this CreateAgentRequest.


        :param alias: The alias of this CreateAgentRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and alias is None:
            raise ValueError("Invalid value for `alias`, must not be `None`")  # noqa: E501

        self._alias = alias

    @property
    def running_mode(self):
        """Gets the running_mode of this CreateAgentRequest.  # noqa: E501


        :return: The running_mode of this CreateAgentRequest.  # noqa: E501
        :rtype: str
        """
        return self._running_mode

    @running_mode.setter
    def running_mode(self, running_mode):
        """Sets the running_mode of this CreateAgentRequest.


        :param running_mode: The running_mode of this CreateAgentRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and running_mode is None:
            raise ValueError("Invalid value for `running_mode`, must not be `None`")  # noqa: E501
        allowed_values = ["Process"]  # noqa: E501
        if (self._configuration.client_side_validation and
                running_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `running_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(running_mode, allowed_values)
            )

        self._running_mode = running_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateAgentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAgentRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateAgentRequest):
            return True

        return self.to_dict() != other.to_dict()
