# coding: utf-8

"""
    dms20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ItemListForListAgentGroupsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'agent_group_name': 'str',
        'create_at': 'str',
        'deploy_area': 'str',
        'deploy_type': 'str',
        'id': 'str',
        'update_at': 'str'
    }

    attribute_map = {
        'account_id': 'AccountId',
        'agent_group_name': 'AgentGroupName',
        'create_at': 'CreateAt',
        'deploy_area': 'DeployArea',
        'deploy_type': 'DeployType',
        'id': 'Id',
        'update_at': 'UpdateAt'
    }

    def __init__(self, account_id=None, agent_group_name=None, create_at=None, deploy_area=None, deploy_type=None, id=None, update_at=None, _configuration=None):  # noqa: E501
        """ItemListForListAgentGroupsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._agent_group_name = None
        self._create_at = None
        self._deploy_area = None
        self._deploy_type = None
        self._id = None
        self._update_at = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if agent_group_name is not None:
            self.agent_group_name = agent_group_name
        if create_at is not None:
            self.create_at = create_at
        if deploy_area is not None:
            self.deploy_area = deploy_area
        if deploy_type is not None:
            self.deploy_type = deploy_type
        if id is not None:
            self.id = id
        if update_at is not None:
            self.update_at = update_at

    @property
    def account_id(self):
        """Gets the account_id of this ItemListForListAgentGroupsOutput.  # noqa: E501


        :return: The account_id of this ItemListForListAgentGroupsOutput.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ItemListForListAgentGroupsOutput.


        :param account_id: The account_id of this ItemListForListAgentGroupsOutput.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def agent_group_name(self):
        """Gets the agent_group_name of this ItemListForListAgentGroupsOutput.  # noqa: E501


        :return: The agent_group_name of this ItemListForListAgentGroupsOutput.  # noqa: E501
        :rtype: str
        """
        return self._agent_group_name

    @agent_group_name.setter
    def agent_group_name(self, agent_group_name):
        """Sets the agent_group_name of this ItemListForListAgentGroupsOutput.


        :param agent_group_name: The agent_group_name of this ItemListForListAgentGroupsOutput.  # noqa: E501
        :type: str
        """

        self._agent_group_name = agent_group_name

    @property
    def create_at(self):
        """Gets the create_at of this ItemListForListAgentGroupsOutput.  # noqa: E501


        :return: The create_at of this ItemListForListAgentGroupsOutput.  # noqa: E501
        :rtype: str
        """
        return self._create_at

    @create_at.setter
    def create_at(self, create_at):
        """Sets the create_at of this ItemListForListAgentGroupsOutput.


        :param create_at: The create_at of this ItemListForListAgentGroupsOutput.  # noqa: E501
        :type: str
        """

        self._create_at = create_at

    @property
    def deploy_area(self):
        """Gets the deploy_area of this ItemListForListAgentGroupsOutput.  # noqa: E501


        :return: The deploy_area of this ItemListForListAgentGroupsOutput.  # noqa: E501
        :rtype: str
        """
        return self._deploy_area

    @deploy_area.setter
    def deploy_area(self, deploy_area):
        """Sets the deploy_area of this ItemListForListAgentGroupsOutput.


        :param deploy_area: The deploy_area of this ItemListForListAgentGroupsOutput.  # noqa: E501
        :type: str
        """

        self._deploy_area = deploy_area

    @property
    def deploy_type(self):
        """Gets the deploy_type of this ItemListForListAgentGroupsOutput.  # noqa: E501


        :return: The deploy_type of this ItemListForListAgentGroupsOutput.  # noqa: E501
        :rtype: str
        """
        return self._deploy_type

    @deploy_type.setter
    def deploy_type(self, deploy_type):
        """Sets the deploy_type of this ItemListForListAgentGroupsOutput.


        :param deploy_type: The deploy_type of this ItemListForListAgentGroupsOutput.  # noqa: E501
        :type: str
        """

        self._deploy_type = deploy_type

    @property
    def id(self):
        """Gets the id of this ItemListForListAgentGroupsOutput.  # noqa: E501


        :return: The id of this ItemListForListAgentGroupsOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItemListForListAgentGroupsOutput.


        :param id: The id of this ItemListForListAgentGroupsOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def update_at(self):
        """Gets the update_at of this ItemListForListAgentGroupsOutput.  # noqa: E501


        :return: The update_at of this ItemListForListAgentGroupsOutput.  # noqa: E501
        :rtype: str
        """
        return self._update_at

    @update_at.setter
    def update_at(self, update_at):
        """Sets the update_at of this ItemListForListAgentGroupsOutput.


        :param update_at: The update_at of this ItemListForListAgentGroupsOutput.  # noqa: E501
        :type: str
        """

        self._update_at = update_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemListForListAgentGroupsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemListForListAgentGroupsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemListForListAgentGroupsOutput):
            return True

        return self.to_dict() != other.to_dict()
