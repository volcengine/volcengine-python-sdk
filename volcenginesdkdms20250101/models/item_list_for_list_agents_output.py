# coding: utf-8

"""
    dms20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ItemListForListAgentsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'agent_group_id': 'str',
        'alias': 'str',
        'create_at': 'str',
        'id': 'str',
        'network_type': 'str',
        'running_mode': 'str',
        'status': 'bool',
        'update_at': 'str'
    }

    attribute_map = {
        'account_id': 'AccountId',
        'agent_group_id': 'AgentGroupId',
        'alias': 'Alias',
        'create_at': 'CreateAt',
        'id': 'Id',
        'network_type': 'NetworkType',
        'running_mode': 'RunningMode',
        'status': 'Status',
        'update_at': 'UpdateAt'
    }

    def __init__(self, account_id=None, agent_group_id=None, alias=None, create_at=None, id=None, network_type=None, running_mode=None, status=None, update_at=None, _configuration=None):  # noqa: E501
        """ItemListForListAgentsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._agent_group_id = None
        self._alias = None
        self._create_at = None
        self._id = None
        self._network_type = None
        self._running_mode = None
        self._status = None
        self._update_at = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if agent_group_id is not None:
            self.agent_group_id = agent_group_id
        if alias is not None:
            self.alias = alias
        if create_at is not None:
            self.create_at = create_at
        if id is not None:
            self.id = id
        if network_type is not None:
            self.network_type = network_type
        if running_mode is not None:
            self.running_mode = running_mode
        if status is not None:
            self.status = status
        if update_at is not None:
            self.update_at = update_at

    @property
    def account_id(self):
        """Gets the account_id of this ItemListForListAgentsOutput.  # noqa: E501


        :return: The account_id of this ItemListForListAgentsOutput.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ItemListForListAgentsOutput.


        :param account_id: The account_id of this ItemListForListAgentsOutput.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def agent_group_id(self):
        """Gets the agent_group_id of this ItemListForListAgentsOutput.  # noqa: E501


        :return: The agent_group_id of this ItemListForListAgentsOutput.  # noqa: E501
        :rtype: str
        """
        return self._agent_group_id

    @agent_group_id.setter
    def agent_group_id(self, agent_group_id):
        """Sets the agent_group_id of this ItemListForListAgentsOutput.


        :param agent_group_id: The agent_group_id of this ItemListForListAgentsOutput.  # noqa: E501
        :type: str
        """

        self._agent_group_id = agent_group_id

    @property
    def alias(self):
        """Gets the alias of this ItemListForListAgentsOutput.  # noqa: E501


        :return: The alias of this ItemListForListAgentsOutput.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ItemListForListAgentsOutput.


        :param alias: The alias of this ItemListForListAgentsOutput.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def create_at(self):
        """Gets the create_at of this ItemListForListAgentsOutput.  # noqa: E501


        :return: The create_at of this ItemListForListAgentsOutput.  # noqa: E501
        :rtype: str
        """
        return self._create_at

    @create_at.setter
    def create_at(self, create_at):
        """Sets the create_at of this ItemListForListAgentsOutput.


        :param create_at: The create_at of this ItemListForListAgentsOutput.  # noqa: E501
        :type: str
        """

        self._create_at = create_at

    @property
    def id(self):
        """Gets the id of this ItemListForListAgentsOutput.  # noqa: E501


        :return: The id of this ItemListForListAgentsOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItemListForListAgentsOutput.


        :param id: The id of this ItemListForListAgentsOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def network_type(self):
        """Gets the network_type of this ItemListForListAgentsOutput.  # noqa: E501


        :return: The network_type of this ItemListForListAgentsOutput.  # noqa: E501
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type):
        """Sets the network_type of this ItemListForListAgentsOutput.


        :param network_type: The network_type of this ItemListForListAgentsOutput.  # noqa: E501
        :type: str
        """

        self._network_type = network_type

    @property
    def running_mode(self):
        """Gets the running_mode of this ItemListForListAgentsOutput.  # noqa: E501


        :return: The running_mode of this ItemListForListAgentsOutput.  # noqa: E501
        :rtype: str
        """
        return self._running_mode

    @running_mode.setter
    def running_mode(self, running_mode):
        """Sets the running_mode of this ItemListForListAgentsOutput.


        :param running_mode: The running_mode of this ItemListForListAgentsOutput.  # noqa: E501
        :type: str
        """

        self._running_mode = running_mode

    @property
    def status(self):
        """Gets the status of this ItemListForListAgentsOutput.  # noqa: E501


        :return: The status of this ItemListForListAgentsOutput.  # noqa: E501
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ItemListForListAgentsOutput.


        :param status: The status of this ItemListForListAgentsOutput.  # noqa: E501
        :type: bool
        """

        self._status = status

    @property
    def update_at(self):
        """Gets the update_at of this ItemListForListAgentsOutput.  # noqa: E501


        :return: The update_at of this ItemListForListAgentsOutput.  # noqa: E501
        :rtype: str
        """
        return self._update_at

    @update_at.setter
    def update_at(self, update_at):
        """Sets the update_at of this ItemListForListAgentsOutput.


        :param update_at: The update_at of this ItemListForListAgentsOutput.  # noqa: E501
        :type: str
        """

        self._update_at = update_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemListForListAgentsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemListForListAgentsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemListForListAgentsOutput):
            return True

        return self.to_dict() != other.to_dict()
