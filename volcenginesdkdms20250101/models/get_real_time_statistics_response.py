# coding: utf-8

"""
    dms20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class GetRealTimeStatisticsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bandwidth': 'str',
        'failed_bytes': 'str',
        'failed_count': 'str',
        'nonexistent_bytes': 'str',
        'nonexistent_count': 'str',
        'remaining_bytes': 'str',
        'remaining_count': 'str',
        'remaining_seconds': 'str',
        'skipped_bytes': 'str',
        'skipped_count': 'str',
        'succeed_bytes': 'str',
        'succeed_count': 'str',
        'total_bytes': 'str',
        'total_count': 'str',
        'total_seconds': 'str'
    }

    attribute_map = {
        'bandwidth': 'Bandwidth',
        'failed_bytes': 'FailedBytes',
        'failed_count': 'FailedCount',
        'nonexistent_bytes': 'NonexistentBytes',
        'nonexistent_count': 'NonexistentCount',
        'remaining_bytes': 'RemainingBytes',
        'remaining_count': 'RemainingCount',
        'remaining_seconds': 'RemainingSeconds',
        'skipped_bytes': 'SkippedBytes',
        'skipped_count': 'SkippedCount',
        'succeed_bytes': 'SucceedBytes',
        'succeed_count': 'SucceedCount',
        'total_bytes': 'TotalBytes',
        'total_count': 'TotalCount',
        'total_seconds': 'TotalSeconds'
    }

    def __init__(self, bandwidth=None, failed_bytes=None, failed_count=None, nonexistent_bytes=None, nonexistent_count=None, remaining_bytes=None, remaining_count=None, remaining_seconds=None, skipped_bytes=None, skipped_count=None, succeed_bytes=None, succeed_count=None, total_bytes=None, total_count=None, total_seconds=None, _configuration=None):  # noqa: E501
        """GetRealTimeStatisticsResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bandwidth = None
        self._failed_bytes = None
        self._failed_count = None
        self._nonexistent_bytes = None
        self._nonexistent_count = None
        self._remaining_bytes = None
        self._remaining_count = None
        self._remaining_seconds = None
        self._skipped_bytes = None
        self._skipped_count = None
        self._succeed_bytes = None
        self._succeed_count = None
        self._total_bytes = None
        self._total_count = None
        self._total_seconds = None
        self.discriminator = None

        if bandwidth is not None:
            self.bandwidth = bandwidth
        if failed_bytes is not None:
            self.failed_bytes = failed_bytes
        if failed_count is not None:
            self.failed_count = failed_count
        if nonexistent_bytes is not None:
            self.nonexistent_bytes = nonexistent_bytes
        if nonexistent_count is not None:
            self.nonexistent_count = nonexistent_count
        if remaining_bytes is not None:
            self.remaining_bytes = remaining_bytes
        if remaining_count is not None:
            self.remaining_count = remaining_count
        if remaining_seconds is not None:
            self.remaining_seconds = remaining_seconds
        if skipped_bytes is not None:
            self.skipped_bytes = skipped_bytes
        if skipped_count is not None:
            self.skipped_count = skipped_count
        if succeed_bytes is not None:
            self.succeed_bytes = succeed_bytes
        if succeed_count is not None:
            self.succeed_count = succeed_count
        if total_bytes is not None:
            self.total_bytes = total_bytes
        if total_count is not None:
            self.total_count = total_count
        if total_seconds is not None:
            self.total_seconds = total_seconds

    @property
    def bandwidth(self):
        """Gets the bandwidth of this GetRealTimeStatisticsResponse.  # noqa: E501


        :return: The bandwidth of this GetRealTimeStatisticsResponse.  # noqa: E501
        :rtype: str
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth):
        """Sets the bandwidth of this GetRealTimeStatisticsResponse.


        :param bandwidth: The bandwidth of this GetRealTimeStatisticsResponse.  # noqa: E501
        :type: str
        """

        self._bandwidth = bandwidth

    @property
    def failed_bytes(self):
        """Gets the failed_bytes of this GetRealTimeStatisticsResponse.  # noqa: E501


        :return: The failed_bytes of this GetRealTimeStatisticsResponse.  # noqa: E501
        :rtype: str
        """
        return self._failed_bytes

    @failed_bytes.setter
    def failed_bytes(self, failed_bytes):
        """Sets the failed_bytes of this GetRealTimeStatisticsResponse.


        :param failed_bytes: The failed_bytes of this GetRealTimeStatisticsResponse.  # noqa: E501
        :type: str
        """

        self._failed_bytes = failed_bytes

    @property
    def failed_count(self):
        """Gets the failed_count of this GetRealTimeStatisticsResponse.  # noqa: E501


        :return: The failed_count of this GetRealTimeStatisticsResponse.  # noqa: E501
        :rtype: str
        """
        return self._failed_count

    @failed_count.setter
    def failed_count(self, failed_count):
        """Sets the failed_count of this GetRealTimeStatisticsResponse.


        :param failed_count: The failed_count of this GetRealTimeStatisticsResponse.  # noqa: E501
        :type: str
        """

        self._failed_count = failed_count

    @property
    def nonexistent_bytes(self):
        """Gets the nonexistent_bytes of this GetRealTimeStatisticsResponse.  # noqa: E501


        :return: The nonexistent_bytes of this GetRealTimeStatisticsResponse.  # noqa: E501
        :rtype: str
        """
        return self._nonexistent_bytes

    @nonexistent_bytes.setter
    def nonexistent_bytes(self, nonexistent_bytes):
        """Sets the nonexistent_bytes of this GetRealTimeStatisticsResponse.


        :param nonexistent_bytes: The nonexistent_bytes of this GetRealTimeStatisticsResponse.  # noqa: E501
        :type: str
        """

        self._nonexistent_bytes = nonexistent_bytes

    @property
    def nonexistent_count(self):
        """Gets the nonexistent_count of this GetRealTimeStatisticsResponse.  # noqa: E501


        :return: The nonexistent_count of this GetRealTimeStatisticsResponse.  # noqa: E501
        :rtype: str
        """
        return self._nonexistent_count

    @nonexistent_count.setter
    def nonexistent_count(self, nonexistent_count):
        """Sets the nonexistent_count of this GetRealTimeStatisticsResponse.


        :param nonexistent_count: The nonexistent_count of this GetRealTimeStatisticsResponse.  # noqa: E501
        :type: str
        """

        self._nonexistent_count = nonexistent_count

    @property
    def remaining_bytes(self):
        """Gets the remaining_bytes of this GetRealTimeStatisticsResponse.  # noqa: E501


        :return: The remaining_bytes of this GetRealTimeStatisticsResponse.  # noqa: E501
        :rtype: str
        """
        return self._remaining_bytes

    @remaining_bytes.setter
    def remaining_bytes(self, remaining_bytes):
        """Sets the remaining_bytes of this GetRealTimeStatisticsResponse.


        :param remaining_bytes: The remaining_bytes of this GetRealTimeStatisticsResponse.  # noqa: E501
        :type: str
        """

        self._remaining_bytes = remaining_bytes

    @property
    def remaining_count(self):
        """Gets the remaining_count of this GetRealTimeStatisticsResponse.  # noqa: E501


        :return: The remaining_count of this GetRealTimeStatisticsResponse.  # noqa: E501
        :rtype: str
        """
        return self._remaining_count

    @remaining_count.setter
    def remaining_count(self, remaining_count):
        """Sets the remaining_count of this GetRealTimeStatisticsResponse.


        :param remaining_count: The remaining_count of this GetRealTimeStatisticsResponse.  # noqa: E501
        :type: str
        """

        self._remaining_count = remaining_count

    @property
    def remaining_seconds(self):
        """Gets the remaining_seconds of this GetRealTimeStatisticsResponse.  # noqa: E501


        :return: The remaining_seconds of this GetRealTimeStatisticsResponse.  # noqa: E501
        :rtype: str
        """
        return self._remaining_seconds

    @remaining_seconds.setter
    def remaining_seconds(self, remaining_seconds):
        """Sets the remaining_seconds of this GetRealTimeStatisticsResponse.


        :param remaining_seconds: The remaining_seconds of this GetRealTimeStatisticsResponse.  # noqa: E501
        :type: str
        """

        self._remaining_seconds = remaining_seconds

    @property
    def skipped_bytes(self):
        """Gets the skipped_bytes of this GetRealTimeStatisticsResponse.  # noqa: E501


        :return: The skipped_bytes of this GetRealTimeStatisticsResponse.  # noqa: E501
        :rtype: str
        """
        return self._skipped_bytes

    @skipped_bytes.setter
    def skipped_bytes(self, skipped_bytes):
        """Sets the skipped_bytes of this GetRealTimeStatisticsResponse.


        :param skipped_bytes: The skipped_bytes of this GetRealTimeStatisticsResponse.  # noqa: E501
        :type: str
        """

        self._skipped_bytes = skipped_bytes

    @property
    def skipped_count(self):
        """Gets the skipped_count of this GetRealTimeStatisticsResponse.  # noqa: E501


        :return: The skipped_count of this GetRealTimeStatisticsResponse.  # noqa: E501
        :rtype: str
        """
        return self._skipped_count

    @skipped_count.setter
    def skipped_count(self, skipped_count):
        """Sets the skipped_count of this GetRealTimeStatisticsResponse.


        :param skipped_count: The skipped_count of this GetRealTimeStatisticsResponse.  # noqa: E501
        :type: str
        """

        self._skipped_count = skipped_count

    @property
    def succeed_bytes(self):
        """Gets the succeed_bytes of this GetRealTimeStatisticsResponse.  # noqa: E501


        :return: The succeed_bytes of this GetRealTimeStatisticsResponse.  # noqa: E501
        :rtype: str
        """
        return self._succeed_bytes

    @succeed_bytes.setter
    def succeed_bytes(self, succeed_bytes):
        """Sets the succeed_bytes of this GetRealTimeStatisticsResponse.


        :param succeed_bytes: The succeed_bytes of this GetRealTimeStatisticsResponse.  # noqa: E501
        :type: str
        """

        self._succeed_bytes = succeed_bytes

    @property
    def succeed_count(self):
        """Gets the succeed_count of this GetRealTimeStatisticsResponse.  # noqa: E501


        :return: The succeed_count of this GetRealTimeStatisticsResponse.  # noqa: E501
        :rtype: str
        """
        return self._succeed_count

    @succeed_count.setter
    def succeed_count(self, succeed_count):
        """Sets the succeed_count of this GetRealTimeStatisticsResponse.


        :param succeed_count: The succeed_count of this GetRealTimeStatisticsResponse.  # noqa: E501
        :type: str
        """

        self._succeed_count = succeed_count

    @property
    def total_bytes(self):
        """Gets the total_bytes of this GetRealTimeStatisticsResponse.  # noqa: E501


        :return: The total_bytes of this GetRealTimeStatisticsResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_bytes

    @total_bytes.setter
    def total_bytes(self, total_bytes):
        """Sets the total_bytes of this GetRealTimeStatisticsResponse.


        :param total_bytes: The total_bytes of this GetRealTimeStatisticsResponse.  # noqa: E501
        :type: str
        """

        self._total_bytes = total_bytes

    @property
    def total_count(self):
        """Gets the total_count of this GetRealTimeStatisticsResponse.  # noqa: E501


        :return: The total_count of this GetRealTimeStatisticsResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this GetRealTimeStatisticsResponse.


        :param total_count: The total_count of this GetRealTimeStatisticsResponse.  # noqa: E501
        :type: str
        """

        self._total_count = total_count

    @property
    def total_seconds(self):
        """Gets the total_seconds of this GetRealTimeStatisticsResponse.  # noqa: E501


        :return: The total_seconds of this GetRealTimeStatisticsResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_seconds

    @total_seconds.setter
    def total_seconds(self, total_seconds):
        """Sets the total_seconds of this GetRealTimeStatisticsResponse.


        :param total_seconds: The total_seconds of this GetRealTimeStatisticsResponse.  # noqa: E501
        :type: str
        """

        self._total_seconds = total_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetRealTimeStatisticsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetRealTimeStatisticsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetRealTimeStatisticsResponse):
            return True

        return self.to_dict() != other.to_dict()
