# coding: utf-8

"""
    dms20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class TaskConfigForListTasksOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'list_config': 'ListConfigForListTasksOutput',
        'overwrite_policy': 'str',
        'storage_class_directive': 'str',
        'symlink_policy': 'str'
    }

    attribute_map = {
        'list_config': 'ListConfig',
        'overwrite_policy': 'OverwritePolicy',
        'storage_class_directive': 'StorageClassDirective',
        'symlink_policy': 'SymlinkPolicy'
    }

    def __init__(self, list_config=None, overwrite_policy=None, storage_class_directive=None, symlink_policy=None, _configuration=None):  # noqa: E501
        """TaskConfigForListTasksOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._list_config = None
        self._overwrite_policy = None
        self._storage_class_directive = None
        self._symlink_policy = None
        self.discriminator = None

        if list_config is not None:
            self.list_config = list_config
        if overwrite_policy is not None:
            self.overwrite_policy = overwrite_policy
        if storage_class_directive is not None:
            self.storage_class_directive = storage_class_directive
        if symlink_policy is not None:
            self.symlink_policy = symlink_policy

    @property
    def list_config(self):
        """Gets the list_config of this TaskConfigForListTasksOutput.  # noqa: E501


        :return: The list_config of this TaskConfigForListTasksOutput.  # noqa: E501
        :rtype: ListConfigForListTasksOutput
        """
        return self._list_config

    @list_config.setter
    def list_config(self, list_config):
        """Sets the list_config of this TaskConfigForListTasksOutput.


        :param list_config: The list_config of this TaskConfigForListTasksOutput.  # noqa: E501
        :type: ListConfigForListTasksOutput
        """

        self._list_config = list_config

    @property
    def overwrite_policy(self):
        """Gets the overwrite_policy of this TaskConfigForListTasksOutput.  # noqa: E501


        :return: The overwrite_policy of this TaskConfigForListTasksOutput.  # noqa: E501
        :rtype: str
        """
        return self._overwrite_policy

    @overwrite_policy.setter
    def overwrite_policy(self, overwrite_policy):
        """Sets the overwrite_policy of this TaskConfigForListTasksOutput.


        :param overwrite_policy: The overwrite_policy of this TaskConfigForListTasksOutput.  # noqa: E501
        :type: str
        """

        self._overwrite_policy = overwrite_policy

    @property
    def storage_class_directive(self):
        """Gets the storage_class_directive of this TaskConfigForListTasksOutput.  # noqa: E501


        :return: The storage_class_directive of this TaskConfigForListTasksOutput.  # noqa: E501
        :rtype: str
        """
        return self._storage_class_directive

    @storage_class_directive.setter
    def storage_class_directive(self, storage_class_directive):
        """Sets the storage_class_directive of this TaskConfigForListTasksOutput.


        :param storage_class_directive: The storage_class_directive of this TaskConfigForListTasksOutput.  # noqa: E501
        :type: str
        """

        self._storage_class_directive = storage_class_directive

    @property
    def symlink_policy(self):
        """Gets the symlink_policy of this TaskConfigForListTasksOutput.  # noqa: E501


        :return: The symlink_policy of this TaskConfigForListTasksOutput.  # noqa: E501
        :rtype: str
        """
        return self._symlink_policy

    @symlink_policy.setter
    def symlink_policy(self, symlink_policy):
        """Sets the symlink_policy of this TaskConfigForListTasksOutput.


        :param symlink_policy: The symlink_policy of this TaskConfigForListTasksOutput.  # noqa: E501
        :type: str
        """

        self._symlink_policy = symlink_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskConfigForListTasksOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskConfigForListTasksOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskConfigForListTasksOutput):
            return True

        return self.to_dict() != other.to_dict()
