# coding: utf-8

"""
    dms20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class GetTaskResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'agent_group_id': 'str',
        'create_at': 'str',
        'destination_id': 'str',
        'id': 'str',
        'source_id': 'str',
        'task_config': 'TaskConfigForGetTaskOutput',
        'task_context': 'TaskContextForGetTaskOutput',
        'task_name': 'str',
        'task_status': 'str',
        'task_type': 'str',
        'update_at': 'str'
    }

    attribute_map = {
        'account_id': 'AccountId',
        'agent_group_id': 'AgentGroupId',
        'create_at': 'CreateAt',
        'destination_id': 'DestinationId',
        'id': 'Id',
        'source_id': 'SourceId',
        'task_config': 'TaskConfig',
        'task_context': 'TaskContext',
        'task_name': 'TaskName',
        'task_status': 'TaskStatus',
        'task_type': 'TaskType',
        'update_at': 'UpdateAt'
    }

    def __init__(self, account_id=None, agent_group_id=None, create_at=None, destination_id=None, id=None, source_id=None, task_config=None, task_context=None, task_name=None, task_status=None, task_type=None, update_at=None, _configuration=None):  # noqa: E501
        """GetTaskResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._agent_group_id = None
        self._create_at = None
        self._destination_id = None
        self._id = None
        self._source_id = None
        self._task_config = None
        self._task_context = None
        self._task_name = None
        self._task_status = None
        self._task_type = None
        self._update_at = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if agent_group_id is not None:
            self.agent_group_id = agent_group_id
        if create_at is not None:
            self.create_at = create_at
        if destination_id is not None:
            self.destination_id = destination_id
        if id is not None:
            self.id = id
        if source_id is not None:
            self.source_id = source_id
        if task_config is not None:
            self.task_config = task_config
        if task_context is not None:
            self.task_context = task_context
        if task_name is not None:
            self.task_name = task_name
        if task_status is not None:
            self.task_status = task_status
        if task_type is not None:
            self.task_type = task_type
        if update_at is not None:
            self.update_at = update_at

    @property
    def account_id(self):
        """Gets the account_id of this GetTaskResponse.  # noqa: E501


        :return: The account_id of this GetTaskResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetTaskResponse.


        :param account_id: The account_id of this GetTaskResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def agent_group_id(self):
        """Gets the agent_group_id of this GetTaskResponse.  # noqa: E501


        :return: The agent_group_id of this GetTaskResponse.  # noqa: E501
        :rtype: str
        """
        return self._agent_group_id

    @agent_group_id.setter
    def agent_group_id(self, agent_group_id):
        """Sets the agent_group_id of this GetTaskResponse.


        :param agent_group_id: The agent_group_id of this GetTaskResponse.  # noqa: E501
        :type: str
        """

        self._agent_group_id = agent_group_id

    @property
    def create_at(self):
        """Gets the create_at of this GetTaskResponse.  # noqa: E501


        :return: The create_at of this GetTaskResponse.  # noqa: E501
        :rtype: str
        """
        return self._create_at

    @create_at.setter
    def create_at(self, create_at):
        """Sets the create_at of this GetTaskResponse.


        :param create_at: The create_at of this GetTaskResponse.  # noqa: E501
        :type: str
        """

        self._create_at = create_at

    @property
    def destination_id(self):
        """Gets the destination_id of this GetTaskResponse.  # noqa: E501


        :return: The destination_id of this GetTaskResponse.  # noqa: E501
        :rtype: str
        """
        return self._destination_id

    @destination_id.setter
    def destination_id(self, destination_id):
        """Sets the destination_id of this GetTaskResponse.


        :param destination_id: The destination_id of this GetTaskResponse.  # noqa: E501
        :type: str
        """

        self._destination_id = destination_id

    @property
    def id(self):
        """Gets the id of this GetTaskResponse.  # noqa: E501


        :return: The id of this GetTaskResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetTaskResponse.


        :param id: The id of this GetTaskResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def source_id(self):
        """Gets the source_id of this GetTaskResponse.  # noqa: E501


        :return: The source_id of this GetTaskResponse.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this GetTaskResponse.


        :param source_id: The source_id of this GetTaskResponse.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def task_config(self):
        """Gets the task_config of this GetTaskResponse.  # noqa: E501


        :return: The task_config of this GetTaskResponse.  # noqa: E501
        :rtype: TaskConfigForGetTaskOutput
        """
        return self._task_config

    @task_config.setter
    def task_config(self, task_config):
        """Sets the task_config of this GetTaskResponse.


        :param task_config: The task_config of this GetTaskResponse.  # noqa: E501
        :type: TaskConfigForGetTaskOutput
        """

        self._task_config = task_config

    @property
    def task_context(self):
        """Gets the task_context of this GetTaskResponse.  # noqa: E501


        :return: The task_context of this GetTaskResponse.  # noqa: E501
        :rtype: TaskContextForGetTaskOutput
        """
        return self._task_context

    @task_context.setter
    def task_context(self, task_context):
        """Sets the task_context of this GetTaskResponse.


        :param task_context: The task_context of this GetTaskResponse.  # noqa: E501
        :type: TaskContextForGetTaskOutput
        """

        self._task_context = task_context

    @property
    def task_name(self):
        """Gets the task_name of this GetTaskResponse.  # noqa: E501


        :return: The task_name of this GetTaskResponse.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this GetTaskResponse.


        :param task_name: The task_name of this GetTaskResponse.  # noqa: E501
        :type: str
        """

        self._task_name = task_name

    @property
    def task_status(self):
        """Gets the task_status of this GetTaskResponse.  # noqa: E501


        :return: The task_status of this GetTaskResponse.  # noqa: E501
        :rtype: str
        """
        return self._task_status

    @task_status.setter
    def task_status(self, task_status):
        """Sets the task_status of this GetTaskResponse.


        :param task_status: The task_status of this GetTaskResponse.  # noqa: E501
        :type: str
        """

        self._task_status = task_status

    @property
    def task_type(self):
        """Gets the task_type of this GetTaskResponse.  # noqa: E501


        :return: The task_type of this GetTaskResponse.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this GetTaskResponse.


        :param task_type: The task_type of this GetTaskResponse.  # noqa: E501
        :type: str
        """

        self._task_type = task_type

    @property
    def update_at(self):
        """Gets the update_at of this GetTaskResponse.  # noqa: E501


        :return: The update_at of this GetTaskResponse.  # noqa: E501
        :rtype: str
        """
        return self._update_at

    @update_at.setter
    def update_at(self, update_at):
        """Sets the update_at of this GetTaskResponse.


        :param update_at: The update_at of this GetTaskResponse.  # noqa: E501
        :type: str
        """

        self._update_at = update_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetTaskResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetTaskResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetTaskResponse):
            return True

        return self.to_dict() != other.to_dict()
