# coding: utf-8

"""
    dms20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ItemListForListAddressesOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'address_access_config': 'AddressAccessConfigForListAddressesOutput',
        'address_name': 'str',
        'address_type': 'str',
        'create_at': 'str',
        'id': 'str',
        'protocol_type': 'str',
        'update_at': 'str'
    }

    attribute_map = {
        'account_id': 'AccountId',
        'address_access_config': 'AddressAccessConfig',
        'address_name': 'AddressName',
        'address_type': 'AddressType',
        'create_at': 'CreateAt',
        'id': 'Id',
        'protocol_type': 'ProtocolType',
        'update_at': 'UpdateAt'
    }

    def __init__(self, account_id=None, address_access_config=None, address_name=None, address_type=None, create_at=None, id=None, protocol_type=None, update_at=None, _configuration=None):  # noqa: E501
        """ItemListForListAddressesOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._address_access_config = None
        self._address_name = None
        self._address_type = None
        self._create_at = None
        self._id = None
        self._protocol_type = None
        self._update_at = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if address_access_config is not None:
            self.address_access_config = address_access_config
        if address_name is not None:
            self.address_name = address_name
        if address_type is not None:
            self.address_type = address_type
        if create_at is not None:
            self.create_at = create_at
        if id is not None:
            self.id = id
        if protocol_type is not None:
            self.protocol_type = protocol_type
        if update_at is not None:
            self.update_at = update_at

    @property
    def account_id(self):
        """Gets the account_id of this ItemListForListAddressesOutput.  # noqa: E501


        :return: The account_id of this ItemListForListAddressesOutput.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ItemListForListAddressesOutput.


        :param account_id: The account_id of this ItemListForListAddressesOutput.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def address_access_config(self):
        """Gets the address_access_config of this ItemListForListAddressesOutput.  # noqa: E501


        :return: The address_access_config of this ItemListForListAddressesOutput.  # noqa: E501
        :rtype: AddressAccessConfigForListAddressesOutput
        """
        return self._address_access_config

    @address_access_config.setter
    def address_access_config(self, address_access_config):
        """Sets the address_access_config of this ItemListForListAddressesOutput.


        :param address_access_config: The address_access_config of this ItemListForListAddressesOutput.  # noqa: E501
        :type: AddressAccessConfigForListAddressesOutput
        """

        self._address_access_config = address_access_config

    @property
    def address_name(self):
        """Gets the address_name of this ItemListForListAddressesOutput.  # noqa: E501


        :return: The address_name of this ItemListForListAddressesOutput.  # noqa: E501
        :rtype: str
        """
        return self._address_name

    @address_name.setter
    def address_name(self, address_name):
        """Sets the address_name of this ItemListForListAddressesOutput.


        :param address_name: The address_name of this ItemListForListAddressesOutput.  # noqa: E501
        :type: str
        """

        self._address_name = address_name

    @property
    def address_type(self):
        """Gets the address_type of this ItemListForListAddressesOutput.  # noqa: E501


        :return: The address_type of this ItemListForListAddressesOutput.  # noqa: E501
        :rtype: str
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """Sets the address_type of this ItemListForListAddressesOutput.


        :param address_type: The address_type of this ItemListForListAddressesOutput.  # noqa: E501
        :type: str
        """

        self._address_type = address_type

    @property
    def create_at(self):
        """Gets the create_at of this ItemListForListAddressesOutput.  # noqa: E501


        :return: The create_at of this ItemListForListAddressesOutput.  # noqa: E501
        :rtype: str
        """
        return self._create_at

    @create_at.setter
    def create_at(self, create_at):
        """Sets the create_at of this ItemListForListAddressesOutput.


        :param create_at: The create_at of this ItemListForListAddressesOutput.  # noqa: E501
        :type: str
        """

        self._create_at = create_at

    @property
    def id(self):
        """Gets the id of this ItemListForListAddressesOutput.  # noqa: E501


        :return: The id of this ItemListForListAddressesOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItemListForListAddressesOutput.


        :param id: The id of this ItemListForListAddressesOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def protocol_type(self):
        """Gets the protocol_type of this ItemListForListAddressesOutput.  # noqa: E501


        :return: The protocol_type of this ItemListForListAddressesOutput.  # noqa: E501
        :rtype: str
        """
        return self._protocol_type

    @protocol_type.setter
    def protocol_type(self, protocol_type):
        """Sets the protocol_type of this ItemListForListAddressesOutput.


        :param protocol_type: The protocol_type of this ItemListForListAddressesOutput.  # noqa: E501
        :type: str
        """

        self._protocol_type = protocol_type

    @property
    def update_at(self):
        """Gets the update_at of this ItemListForListAddressesOutput.  # noqa: E501


        :return: The update_at of this ItemListForListAddressesOutput.  # noqa: E501
        :rtype: str
        """
        return self._update_at

    @update_at.setter
    def update_at(self, update_at):
        """Sets the update_at of this ItemListForListAddressesOutput.


        :param update_at: The update_at of this ItemListForListAddressesOutput.  # noqa: E501
        :type: str
        """

        self._update_at = update_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemListForListAddressesOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemListForListAddressesOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemListForListAddressesOutput):
            return True

        return self.to_dict() != other.to_dict()
