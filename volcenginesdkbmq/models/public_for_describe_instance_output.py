# coding: utf-8

"""
    bmq

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class PublicForDescribeInstanceOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'eip_id': 'str',
        'plain': 'str',
        'plain_port': 'int',
        'sasl': 'str',
        'sasl_port': 'int',
        'ssl': 'str',
        'ssl_port': 'int',
        'status': 'str',
        'vpc_ids': 'list[str]'
    }

    attribute_map = {
        'address': 'Address',
        'eip_id': 'EipId',
        'plain': 'Plain',
        'plain_port': 'PlainPort',
        'sasl': 'Sasl',
        'sasl_port': 'SaslPort',
        'ssl': 'Ssl',
        'ssl_port': 'SslPort',
        'status': 'Status',
        'vpc_ids': 'VpcIds'
    }

    def __init__(self, address=None, eip_id=None, plain=None, plain_port=None, sasl=None, sasl_port=None, ssl=None, ssl_port=None, status=None, vpc_ids=None, _configuration=None):  # noqa: E501
        """PublicForDescribeInstanceOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address = None
        self._eip_id = None
        self._plain = None
        self._plain_port = None
        self._sasl = None
        self._sasl_port = None
        self._ssl = None
        self._ssl_port = None
        self._status = None
        self._vpc_ids = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if eip_id is not None:
            self.eip_id = eip_id
        if plain is not None:
            self.plain = plain
        if plain_port is not None:
            self.plain_port = plain_port
        if sasl is not None:
            self.sasl = sasl
        if sasl_port is not None:
            self.sasl_port = sasl_port
        if ssl is not None:
            self.ssl = ssl
        if ssl_port is not None:
            self.ssl_port = ssl_port
        if status is not None:
            self.status = status
        if vpc_ids is not None:
            self.vpc_ids = vpc_ids

    @property
    def address(self):
        """Gets the address of this PublicForDescribeInstanceOutput.  # noqa: E501


        :return: The address of this PublicForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PublicForDescribeInstanceOutput.


        :param address: The address of this PublicForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def eip_id(self):
        """Gets the eip_id of this PublicForDescribeInstanceOutput.  # noqa: E501


        :return: The eip_id of this PublicForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._eip_id

    @eip_id.setter
    def eip_id(self, eip_id):
        """Sets the eip_id of this PublicForDescribeInstanceOutput.


        :param eip_id: The eip_id of this PublicForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._eip_id = eip_id

    @property
    def plain(self):
        """Gets the plain of this PublicForDescribeInstanceOutput.  # noqa: E501


        :return: The plain of this PublicForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._plain

    @plain.setter
    def plain(self, plain):
        """Sets the plain of this PublicForDescribeInstanceOutput.


        :param plain: The plain of this PublicForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._plain = plain

    @property
    def plain_port(self):
        """Gets the plain_port of this PublicForDescribeInstanceOutput.  # noqa: E501


        :return: The plain_port of this PublicForDescribeInstanceOutput.  # noqa: E501
        :rtype: int
        """
        return self._plain_port

    @plain_port.setter
    def plain_port(self, plain_port):
        """Sets the plain_port of this PublicForDescribeInstanceOutput.


        :param plain_port: The plain_port of this PublicForDescribeInstanceOutput.  # noqa: E501
        :type: int
        """

        self._plain_port = plain_port

    @property
    def sasl(self):
        """Gets the sasl of this PublicForDescribeInstanceOutput.  # noqa: E501


        :return: The sasl of this PublicForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._sasl

    @sasl.setter
    def sasl(self, sasl):
        """Sets the sasl of this PublicForDescribeInstanceOutput.


        :param sasl: The sasl of this PublicForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._sasl = sasl

    @property
    def sasl_port(self):
        """Gets the sasl_port of this PublicForDescribeInstanceOutput.  # noqa: E501


        :return: The sasl_port of this PublicForDescribeInstanceOutput.  # noqa: E501
        :rtype: int
        """
        return self._sasl_port

    @sasl_port.setter
    def sasl_port(self, sasl_port):
        """Sets the sasl_port of this PublicForDescribeInstanceOutput.


        :param sasl_port: The sasl_port of this PublicForDescribeInstanceOutput.  # noqa: E501
        :type: int
        """

        self._sasl_port = sasl_port

    @property
    def ssl(self):
        """Gets the ssl of this PublicForDescribeInstanceOutput.  # noqa: E501


        :return: The ssl of this PublicForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """Sets the ssl of this PublicForDescribeInstanceOutput.


        :param ssl: The ssl of this PublicForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._ssl = ssl

    @property
    def ssl_port(self):
        """Gets the ssl_port of this PublicForDescribeInstanceOutput.  # noqa: E501


        :return: The ssl_port of this PublicForDescribeInstanceOutput.  # noqa: E501
        :rtype: int
        """
        return self._ssl_port

    @ssl_port.setter
    def ssl_port(self, ssl_port):
        """Sets the ssl_port of this PublicForDescribeInstanceOutput.


        :param ssl_port: The ssl_port of this PublicForDescribeInstanceOutput.  # noqa: E501
        :type: int
        """

        self._ssl_port = ssl_port

    @property
    def status(self):
        """Gets the status of this PublicForDescribeInstanceOutput.  # noqa: E501


        :return: The status of this PublicForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PublicForDescribeInstanceOutput.


        :param status: The status of this PublicForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def vpc_ids(self):
        """Gets the vpc_ids of this PublicForDescribeInstanceOutput.  # noqa: E501


        :return: The vpc_ids of this PublicForDescribeInstanceOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._vpc_ids

    @vpc_ids.setter
    def vpc_ids(self, vpc_ids):
        """Sets the vpc_ids of this PublicForDescribeInstanceOutput.


        :param vpc_ids: The vpc_ids of this PublicForDescribeInstanceOutput.  # noqa: E501
        :type: list[str]
        """

        self._vpc_ids = vpc_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicForDescribeInstanceOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicForDescribeInstanceOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicForDescribeInstanceOutput):
            return True

        return self.to_dict() != other.to_dict()
