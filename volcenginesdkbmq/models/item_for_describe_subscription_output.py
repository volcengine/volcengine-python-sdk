# coding: utf-8

"""
    bmq

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ItemForDescribeSubscriptionOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_offset': 'int',
        'group_name': 'str',
        'lag': 'int',
        'latest_offset': 'int',
        'partition_id': 'int',
        'topic_name': 'str'
    }

    attribute_map = {
        'current_offset': 'CurrentOffset',
        'group_name': 'GroupName',
        'lag': 'Lag',
        'latest_offset': 'LatestOffset',
        'partition_id': 'PartitionId',
        'topic_name': 'TopicName'
    }

    def __init__(self, current_offset=None, group_name=None, lag=None, latest_offset=None, partition_id=None, topic_name=None, _configuration=None):  # noqa: E501
        """ItemForDescribeSubscriptionOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._current_offset = None
        self._group_name = None
        self._lag = None
        self._latest_offset = None
        self._partition_id = None
        self._topic_name = None
        self.discriminator = None

        if current_offset is not None:
            self.current_offset = current_offset
        if group_name is not None:
            self.group_name = group_name
        if lag is not None:
            self.lag = lag
        if latest_offset is not None:
            self.latest_offset = latest_offset
        if partition_id is not None:
            self.partition_id = partition_id
        if topic_name is not None:
            self.topic_name = topic_name

    @property
    def current_offset(self):
        """Gets the current_offset of this ItemForDescribeSubscriptionOutput.  # noqa: E501


        :return: The current_offset of this ItemForDescribeSubscriptionOutput.  # noqa: E501
        :rtype: int
        """
        return self._current_offset

    @current_offset.setter
    def current_offset(self, current_offset):
        """Sets the current_offset of this ItemForDescribeSubscriptionOutput.


        :param current_offset: The current_offset of this ItemForDescribeSubscriptionOutput.  # noqa: E501
        :type: int
        """

        self._current_offset = current_offset

    @property
    def group_name(self):
        """Gets the group_name of this ItemForDescribeSubscriptionOutput.  # noqa: E501


        :return: The group_name of this ItemForDescribeSubscriptionOutput.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this ItemForDescribeSubscriptionOutput.


        :param group_name: The group_name of this ItemForDescribeSubscriptionOutput.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def lag(self):
        """Gets the lag of this ItemForDescribeSubscriptionOutput.  # noqa: E501


        :return: The lag of this ItemForDescribeSubscriptionOutput.  # noqa: E501
        :rtype: int
        """
        return self._lag

    @lag.setter
    def lag(self, lag):
        """Sets the lag of this ItemForDescribeSubscriptionOutput.


        :param lag: The lag of this ItemForDescribeSubscriptionOutput.  # noqa: E501
        :type: int
        """

        self._lag = lag

    @property
    def latest_offset(self):
        """Gets the latest_offset of this ItemForDescribeSubscriptionOutput.  # noqa: E501


        :return: The latest_offset of this ItemForDescribeSubscriptionOutput.  # noqa: E501
        :rtype: int
        """
        return self._latest_offset

    @latest_offset.setter
    def latest_offset(self, latest_offset):
        """Sets the latest_offset of this ItemForDescribeSubscriptionOutput.


        :param latest_offset: The latest_offset of this ItemForDescribeSubscriptionOutput.  # noqa: E501
        :type: int
        """

        self._latest_offset = latest_offset

    @property
    def partition_id(self):
        """Gets the partition_id of this ItemForDescribeSubscriptionOutput.  # noqa: E501


        :return: The partition_id of this ItemForDescribeSubscriptionOutput.  # noqa: E501
        :rtype: int
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """Sets the partition_id of this ItemForDescribeSubscriptionOutput.


        :param partition_id: The partition_id of this ItemForDescribeSubscriptionOutput.  # noqa: E501
        :type: int
        """

        self._partition_id = partition_id

    @property
    def topic_name(self):
        """Gets the topic_name of this ItemForDescribeSubscriptionOutput.  # noqa: E501


        :return: The topic_name of this ItemForDescribeSubscriptionOutput.  # noqa: E501
        :rtype: str
        """
        return self._topic_name

    @topic_name.setter
    def topic_name(self, topic_name):
        """Sets the topic_name of this ItemForDescribeSubscriptionOutput.


        :param topic_name: The topic_name of this ItemForDescribeSubscriptionOutput.  # noqa: E501
        :type: str
        """

        self._topic_name = topic_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemForDescribeSubscriptionOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemForDescribeSubscriptionOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemForDescribeSubscriptionOutput):
            return True

        return self.to_dict() != other.to_dict()
