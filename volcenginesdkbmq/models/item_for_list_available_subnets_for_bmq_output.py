# coding: utf-8

"""
    bmq

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ItemForListAvailableSubnetsForBMQOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available_ip_address_count': 'int',
        'cidr_block': 'str',
        'region_id': 'str',
        'status': 'str',
        'subnet_id': 'str',
        'subnet_name': 'str',
        'vpc_id': 'str',
        'zone_id': 'str'
    }

    attribute_map = {
        'available_ip_address_count': 'AvailableIpAddressCount',
        'cidr_block': 'CidrBlock',
        'region_id': 'RegionId',
        'status': 'Status',
        'subnet_id': 'SubnetId',
        'subnet_name': 'SubnetName',
        'vpc_id': 'VpcId',
        'zone_id': 'ZoneId'
    }

    def __init__(self, available_ip_address_count=None, cidr_block=None, region_id=None, status=None, subnet_id=None, subnet_name=None, vpc_id=None, zone_id=None, _configuration=None):  # noqa: E501
        """ItemForListAvailableSubnetsForBMQOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._available_ip_address_count = None
        self._cidr_block = None
        self._region_id = None
        self._status = None
        self._subnet_id = None
        self._subnet_name = None
        self._vpc_id = None
        self._zone_id = None
        self.discriminator = None

        if available_ip_address_count is not None:
            self.available_ip_address_count = available_ip_address_count
        if cidr_block is not None:
            self.cidr_block = cidr_block
        if region_id is not None:
            self.region_id = region_id
        if status is not None:
            self.status = status
        if subnet_id is not None:
            self.subnet_id = subnet_id
        if subnet_name is not None:
            self.subnet_name = subnet_name
        if vpc_id is not None:
            self.vpc_id = vpc_id
        if zone_id is not None:
            self.zone_id = zone_id

    @property
    def available_ip_address_count(self):
        """Gets the available_ip_address_count of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501


        :return: The available_ip_address_count of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501
        :rtype: int
        """
        return self._available_ip_address_count

    @available_ip_address_count.setter
    def available_ip_address_count(self, available_ip_address_count):
        """Sets the available_ip_address_count of this ItemForListAvailableSubnetsForBMQOutput.


        :param available_ip_address_count: The available_ip_address_count of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501
        :type: int
        """

        self._available_ip_address_count = available_ip_address_count

    @property
    def cidr_block(self):
        """Gets the cidr_block of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501


        :return: The cidr_block of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501
        :rtype: str
        """
        return self._cidr_block

    @cidr_block.setter
    def cidr_block(self, cidr_block):
        """Sets the cidr_block of this ItemForListAvailableSubnetsForBMQOutput.


        :param cidr_block: The cidr_block of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501
        :type: str
        """

        self._cidr_block = cidr_block

    @property
    def region_id(self):
        """Gets the region_id of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501


        :return: The region_id of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this ItemForListAvailableSubnetsForBMQOutput.


        :param region_id: The region_id of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501
        :type: str
        """

        self._region_id = region_id

    @property
    def status(self):
        """Gets the status of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501


        :return: The status of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ItemForListAvailableSubnetsForBMQOutput.


        :param status: The status of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def subnet_id(self):
        """Gets the subnet_id of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501


        :return: The subnet_id of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this ItemForListAvailableSubnetsForBMQOutput.


        :param subnet_id: The subnet_id of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501
        :type: str
        """

        self._subnet_id = subnet_id

    @property
    def subnet_name(self):
        """Gets the subnet_name of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501


        :return: The subnet_name of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501
        :rtype: str
        """
        return self._subnet_name

    @subnet_name.setter
    def subnet_name(self, subnet_name):
        """Sets the subnet_name of this ItemForListAvailableSubnetsForBMQOutput.


        :param subnet_name: The subnet_name of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501
        :type: str
        """

        self._subnet_name = subnet_name

    @property
    def vpc_id(self):
        """Gets the vpc_id of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501


        :return: The vpc_id of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this ItemForListAvailableSubnetsForBMQOutput.


        :param vpc_id: The vpc_id of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501
        :type: str
        """

        self._vpc_id = vpc_id

    @property
    def zone_id(self):
        """Gets the zone_id of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501


        :return: The zone_id of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501
        :rtype: str
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this ItemForListAvailableSubnetsForBMQOutput.


        :param zone_id: The zone_id of this ItemForListAvailableSubnetsForBMQOutput.  # noqa: E501
        :type: str
        """

        self._zone_id = zone_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemForListAvailableSubnetsForBMQOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemForListAvailableSubnetsForBMQOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemForListAvailableSubnetsForBMQOutput):
            return True

        return self.to_dict() != other.to_dict()
