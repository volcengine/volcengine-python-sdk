# coding: utf-8

"""
    bmq

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ItemForDescribeTopicsInGroupOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_time': 'str',
        'description': 'str',
        'lag': 'int',
        'partitions': 'int',
        'retention': 'int',
        'status': 'str',
        'topic_id': 'str',
        'topic_name': 'str'
    }

    attribute_map = {
        'create_time': 'CreateTime',
        'description': 'Description',
        'lag': 'Lag',
        'partitions': 'Partitions',
        'retention': 'Retention',
        'status': 'Status',
        'topic_id': 'TopicId',
        'topic_name': 'TopicName'
    }

    def __init__(self, create_time=None, description=None, lag=None, partitions=None, retention=None, status=None, topic_id=None, topic_name=None, _configuration=None):  # noqa: E501
        """ItemForDescribeTopicsInGroupOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._create_time = None
        self._description = None
        self._lag = None
        self._partitions = None
        self._retention = None
        self._status = None
        self._topic_id = None
        self._topic_name = None
        self.discriminator = None

        if create_time is not None:
            self.create_time = create_time
        if description is not None:
            self.description = description
        if lag is not None:
            self.lag = lag
        if partitions is not None:
            self.partitions = partitions
        if retention is not None:
            self.retention = retention
        if status is not None:
            self.status = status
        if topic_id is not None:
            self.topic_id = topic_id
        if topic_name is not None:
            self.topic_name = topic_name

    @property
    def create_time(self):
        """Gets the create_time of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501


        :return: The create_time of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ItemForDescribeTopicsInGroupOutput.


        :param create_time: The create_time of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501


        :return: The description of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ItemForDescribeTopicsInGroupOutput.


        :param description: The description of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def lag(self):
        """Gets the lag of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501


        :return: The lag of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501
        :rtype: int
        """
        return self._lag

    @lag.setter
    def lag(self, lag):
        """Sets the lag of this ItemForDescribeTopicsInGroupOutput.


        :param lag: The lag of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501
        :type: int
        """

        self._lag = lag

    @property
    def partitions(self):
        """Gets the partitions of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501


        :return: The partitions of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501
        :rtype: int
        """
        return self._partitions

    @partitions.setter
    def partitions(self, partitions):
        """Sets the partitions of this ItemForDescribeTopicsInGroupOutput.


        :param partitions: The partitions of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501
        :type: int
        """

        self._partitions = partitions

    @property
    def retention(self):
        """Gets the retention of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501


        :return: The retention of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501
        :rtype: int
        """
        return self._retention

    @retention.setter
    def retention(self, retention):
        """Sets the retention of this ItemForDescribeTopicsInGroupOutput.


        :param retention: The retention of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501
        :type: int
        """

        self._retention = retention

    @property
    def status(self):
        """Gets the status of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501


        :return: The status of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ItemForDescribeTopicsInGroupOutput.


        :param status: The status of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def topic_id(self):
        """Gets the topic_id of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501


        :return: The topic_id of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501
        :rtype: str
        """
        return self._topic_id

    @topic_id.setter
    def topic_id(self, topic_id):
        """Sets the topic_id of this ItemForDescribeTopicsInGroupOutput.


        :param topic_id: The topic_id of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501
        :type: str
        """

        self._topic_id = topic_id

    @property
    def topic_name(self):
        """Gets the topic_name of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501


        :return: The topic_name of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501
        :rtype: str
        """
        return self._topic_name

    @topic_name.setter
    def topic_name(self, topic_name):
        """Sets the topic_name of this ItemForDescribeTopicsInGroupOutput.


        :param topic_name: The topic_name of this ItemForDescribeTopicsInGroupOutput.  # noqa: E501
        :type: str
        """

        self._topic_name = topic_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemForDescribeTopicsInGroupOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemForDescribeTopicsInGroupOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemForDescribeTopicsInGroupOutput):
            return True

        return self.to_dict() != other.to_dict()
