# coding: utf-8

"""
    bmq

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ModifyOverlayAccessRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_vpcs': 'list[str]',
        'del_vpcs': 'list[str]',
        'instance_id': 'str',
        'protocols': 'list[str]'
    }

    attribute_map = {
        'add_vpcs': 'AddVpcs',
        'del_vpcs': 'DelVpcs',
        'instance_id': 'InstanceId',
        'protocols': 'Protocols'
    }

    def __init__(self, add_vpcs=None, del_vpcs=None, instance_id=None, protocols=None, _configuration=None):  # noqa: E501
        """ModifyOverlayAccessRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._add_vpcs = None
        self._del_vpcs = None
        self._instance_id = None
        self._protocols = None
        self.discriminator = None

        if add_vpcs is not None:
            self.add_vpcs = add_vpcs
        if del_vpcs is not None:
            self.del_vpcs = del_vpcs
        self.instance_id = instance_id
        if protocols is not None:
            self.protocols = protocols

    @property
    def add_vpcs(self):
        """Gets the add_vpcs of this ModifyOverlayAccessRequest.  # noqa: E501


        :return: The add_vpcs of this ModifyOverlayAccessRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_vpcs

    @add_vpcs.setter
    def add_vpcs(self, add_vpcs):
        """Sets the add_vpcs of this ModifyOverlayAccessRequest.


        :param add_vpcs: The add_vpcs of this ModifyOverlayAccessRequest.  # noqa: E501
        :type: list[str]
        """

        self._add_vpcs = add_vpcs

    @property
    def del_vpcs(self):
        """Gets the del_vpcs of this ModifyOverlayAccessRequest.  # noqa: E501


        :return: The del_vpcs of this ModifyOverlayAccessRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._del_vpcs

    @del_vpcs.setter
    def del_vpcs(self, del_vpcs):
        """Sets the del_vpcs of this ModifyOverlayAccessRequest.


        :param del_vpcs: The del_vpcs of this ModifyOverlayAccessRequest.  # noqa: E501
        :type: list[str]
        """

        self._del_vpcs = del_vpcs

    @property
    def instance_id(self):
        """Gets the instance_id of this ModifyOverlayAccessRequest.  # noqa: E501


        :return: The instance_id of this ModifyOverlayAccessRequest.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this ModifyOverlayAccessRequest.


        :param instance_id: The instance_id of this ModifyOverlayAccessRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def protocols(self):
        """Gets the protocols of this ModifyOverlayAccessRequest.  # noqa: E501


        :return: The protocols of this ModifyOverlayAccessRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this ModifyOverlayAccessRequest.


        :param protocols: The protocols of this ModifyOverlayAccessRequest.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["PLAINTEXT", "SASL_PLAINTEXT", "SSL", "WS", "WSS", "TCP", "SSL_TCP", "HTTP", "HTTPS"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(protocols).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `protocols` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(protocols) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._protocols = protocols

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModifyOverlayAccessRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModifyOverlayAccessRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModifyOverlayAccessRequest):
            return True

        return self.to_dict() != other.to_dict()
