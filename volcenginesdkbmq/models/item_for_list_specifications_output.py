# coding: utf-8

"""
    bmq

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ItemForListSpecificationsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_limit': 'int',
        'name': 'str',
        'partition_limit': 'int',
        'ranking': 'float',
        'read_bandwidth': 'int',
        'required_enis': 'int',
        'topic_limit': 'int',
        'write_bandwidth': 'int'
    }

    attribute_map = {
        'group_limit': 'GroupLimit',
        'name': 'Name',
        'partition_limit': 'PartitionLimit',
        'ranking': 'Ranking',
        'read_bandwidth': 'ReadBandwidth',
        'required_enis': 'RequiredEnis',
        'topic_limit': 'TopicLimit',
        'write_bandwidth': 'WriteBandwidth'
    }

    def __init__(self, group_limit=None, name=None, partition_limit=None, ranking=None, read_bandwidth=None, required_enis=None, topic_limit=None, write_bandwidth=None, _configuration=None):  # noqa: E501
        """ItemForListSpecificationsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._group_limit = None
        self._name = None
        self._partition_limit = None
        self._ranking = None
        self._read_bandwidth = None
        self._required_enis = None
        self._topic_limit = None
        self._write_bandwidth = None
        self.discriminator = None

        if group_limit is not None:
            self.group_limit = group_limit
        if name is not None:
            self.name = name
        if partition_limit is not None:
            self.partition_limit = partition_limit
        if ranking is not None:
            self.ranking = ranking
        if read_bandwidth is not None:
            self.read_bandwidth = read_bandwidth
        if required_enis is not None:
            self.required_enis = required_enis
        if topic_limit is not None:
            self.topic_limit = topic_limit
        if write_bandwidth is not None:
            self.write_bandwidth = write_bandwidth

    @property
    def group_limit(self):
        """Gets the group_limit of this ItemForListSpecificationsOutput.  # noqa: E501


        :return: The group_limit of this ItemForListSpecificationsOutput.  # noqa: E501
        :rtype: int
        """
        return self._group_limit

    @group_limit.setter
    def group_limit(self, group_limit):
        """Sets the group_limit of this ItemForListSpecificationsOutput.


        :param group_limit: The group_limit of this ItemForListSpecificationsOutput.  # noqa: E501
        :type: int
        """

        self._group_limit = group_limit

    @property
    def name(self):
        """Gets the name of this ItemForListSpecificationsOutput.  # noqa: E501


        :return: The name of this ItemForListSpecificationsOutput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ItemForListSpecificationsOutput.


        :param name: The name of this ItemForListSpecificationsOutput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def partition_limit(self):
        """Gets the partition_limit of this ItemForListSpecificationsOutput.  # noqa: E501


        :return: The partition_limit of this ItemForListSpecificationsOutput.  # noqa: E501
        :rtype: int
        """
        return self._partition_limit

    @partition_limit.setter
    def partition_limit(self, partition_limit):
        """Sets the partition_limit of this ItemForListSpecificationsOutput.


        :param partition_limit: The partition_limit of this ItemForListSpecificationsOutput.  # noqa: E501
        :type: int
        """

        self._partition_limit = partition_limit

    @property
    def ranking(self):
        """Gets the ranking of this ItemForListSpecificationsOutput.  # noqa: E501


        :return: The ranking of this ItemForListSpecificationsOutput.  # noqa: E501
        :rtype: float
        """
        return self._ranking

    @ranking.setter
    def ranking(self, ranking):
        """Sets the ranking of this ItemForListSpecificationsOutput.


        :param ranking: The ranking of this ItemForListSpecificationsOutput.  # noqa: E501
        :type: float
        """

        self._ranking = ranking

    @property
    def read_bandwidth(self):
        """Gets the read_bandwidth of this ItemForListSpecificationsOutput.  # noqa: E501


        :return: The read_bandwidth of this ItemForListSpecificationsOutput.  # noqa: E501
        :rtype: int
        """
        return self._read_bandwidth

    @read_bandwidth.setter
    def read_bandwidth(self, read_bandwidth):
        """Sets the read_bandwidth of this ItemForListSpecificationsOutput.


        :param read_bandwidth: The read_bandwidth of this ItemForListSpecificationsOutput.  # noqa: E501
        :type: int
        """

        self._read_bandwidth = read_bandwidth

    @property
    def required_enis(self):
        """Gets the required_enis of this ItemForListSpecificationsOutput.  # noqa: E501


        :return: The required_enis of this ItemForListSpecificationsOutput.  # noqa: E501
        :rtype: int
        """
        return self._required_enis

    @required_enis.setter
    def required_enis(self, required_enis):
        """Sets the required_enis of this ItemForListSpecificationsOutput.


        :param required_enis: The required_enis of this ItemForListSpecificationsOutput.  # noqa: E501
        :type: int
        """

        self._required_enis = required_enis

    @property
    def topic_limit(self):
        """Gets the topic_limit of this ItemForListSpecificationsOutput.  # noqa: E501


        :return: The topic_limit of this ItemForListSpecificationsOutput.  # noqa: E501
        :rtype: int
        """
        return self._topic_limit

    @topic_limit.setter
    def topic_limit(self, topic_limit):
        """Sets the topic_limit of this ItemForListSpecificationsOutput.


        :param topic_limit: The topic_limit of this ItemForListSpecificationsOutput.  # noqa: E501
        :type: int
        """

        self._topic_limit = topic_limit

    @property
    def write_bandwidth(self):
        """Gets the write_bandwidth of this ItemForListSpecificationsOutput.  # noqa: E501


        :return: The write_bandwidth of this ItemForListSpecificationsOutput.  # noqa: E501
        :rtype: int
        """
        return self._write_bandwidth

    @write_bandwidth.setter
    def write_bandwidth(self, write_bandwidth):
        """Sets the write_bandwidth of this ItemForListSpecificationsOutput.


        :param write_bandwidth: The write_bandwidth of this ItemForListSpecificationsOutput.  # noqa: E501
        :type: int
        """

        self._write_bandwidth = write_bandwidth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemForListSpecificationsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemForListSpecificationsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemForListSpecificationsOutput):
            return True

        return self.to_dict() != other.to_dict()
