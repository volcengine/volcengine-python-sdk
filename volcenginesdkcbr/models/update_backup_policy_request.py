# coding: utf-8

"""
    cbr

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class UpdateBackupPolicyRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backup_type': 'str',
        'crontab': 'str',
        'enable_policy': 'bool',
        'name': 'str',
        'policy_id': 'str',
        'retention_day': 'int'
    }

    attribute_map = {
        'backup_type': 'BackupType',
        'crontab': 'Crontab',
        'enable_policy': 'EnablePolicy',
        'name': 'Name',
        'policy_id': 'PolicyId',
        'retention_day': 'RetentionDay'
    }

    def __init__(self, backup_type=None, crontab=None, enable_policy=None, name=None, policy_id=None, retention_day=None, _configuration=None):  # noqa: E501
        """UpdateBackupPolicyRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._backup_type = None
        self._crontab = None
        self._enable_policy = None
        self._name = None
        self._policy_id = None
        self._retention_day = None
        self.discriminator = None

        if backup_type is not None:
            self.backup_type = backup_type
        if crontab is not None:
            self.crontab = crontab
        if enable_policy is not None:
            self.enable_policy = enable_policy
        if name is not None:
            self.name = name
        self.policy_id = policy_id
        if retention_day is not None:
            self.retention_day = retention_day

    @property
    def backup_type(self):
        """Gets the backup_type of this UpdateBackupPolicyRequest.  # noqa: E501


        :return: The backup_type of this UpdateBackupPolicyRequest.  # noqa: E501
        :rtype: str
        """
        return self._backup_type

    @backup_type.setter
    def backup_type(self, backup_type):
        """Sets the backup_type of this UpdateBackupPolicyRequest.


        :param backup_type: The backup_type of this UpdateBackupPolicyRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["FULL", "INCREMENTAL"]  # noqa: E501
        if (self._configuration.client_side_validation and
                backup_type not in allowed_values):
            raise ValueError(
                "Invalid value for `backup_type` ({0}), must be one of {1}"  # noqa: E501
                .format(backup_type, allowed_values)
            )

        self._backup_type = backup_type

    @property
    def crontab(self):
        """Gets the crontab of this UpdateBackupPolicyRequest.  # noqa: E501


        :return: The crontab of this UpdateBackupPolicyRequest.  # noqa: E501
        :rtype: str
        """
        return self._crontab

    @crontab.setter
    def crontab(self, crontab):
        """Sets the crontab of this UpdateBackupPolicyRequest.


        :param crontab: The crontab of this UpdateBackupPolicyRequest.  # noqa: E501
        :type: str
        """

        self._crontab = crontab

    @property
    def enable_policy(self):
        """Gets the enable_policy of this UpdateBackupPolicyRequest.  # noqa: E501


        :return: The enable_policy of this UpdateBackupPolicyRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_policy

    @enable_policy.setter
    def enable_policy(self, enable_policy):
        """Sets the enable_policy of this UpdateBackupPolicyRequest.


        :param enable_policy: The enable_policy of this UpdateBackupPolicyRequest.  # noqa: E501
        :type: bool
        """

        self._enable_policy = enable_policy

    @property
    def name(self):
        """Gets the name of this UpdateBackupPolicyRequest.  # noqa: E501


        :return: The name of this UpdateBackupPolicyRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateBackupPolicyRequest.


        :param name: The name of this UpdateBackupPolicyRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def policy_id(self):
        """Gets the policy_id of this UpdateBackupPolicyRequest.  # noqa: E501


        :return: The policy_id of this UpdateBackupPolicyRequest.  # noqa: E501
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this UpdateBackupPolicyRequest.


        :param policy_id: The policy_id of this UpdateBackupPolicyRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and policy_id is None:
            raise ValueError("Invalid value for `policy_id`, must not be `None`")  # noqa: E501

        self._policy_id = policy_id

    @property
    def retention_day(self):
        """Gets the retention_day of this UpdateBackupPolicyRequest.  # noqa: E501


        :return: The retention_day of this UpdateBackupPolicyRequest.  # noqa: E501
        :rtype: int
        """
        return self._retention_day

    @retention_day.setter
    def retention_day(self, retention_day):
        """Sets the retention_day of this UpdateBackupPolicyRequest.


        :param retention_day: The retention_day of this UpdateBackupPolicyRequest.  # noqa: E501
        :type: int
        """

        self._retention_day = retention_day

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateBackupPolicyRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateBackupPolicyRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateBackupPolicyRequest):
            return True

        return self.to_dict() != other.to_dict()
