# coding: utf-8

"""
    cbr

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ResourceForDescribeBackupResourcesOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'created_at': 'str',
        'instance_id': 'str',
        'instance_name': 'str',
        'meta_information': 'MetaInformationForDescribeBackupResourcesOutput',
        'plans': 'list[PlanForDescribeBackupResourcesOutput]',
        'recovery_point_number': 'int',
        'resource_id': 'str',
        'resource_type': 'str',
        'status': 'str',
        'updated_at': 'str',
        'used_capacity_in_bytes': 'int'
    }

    attribute_map = {
        'account_id': 'AccountId',
        'created_at': 'CreatedAt',
        'instance_id': 'InstanceId',
        'instance_name': 'InstanceName',
        'meta_information': 'MetaInformation',
        'plans': 'Plans',
        'recovery_point_number': 'RecoveryPointNumber',
        'resource_id': 'ResourceId',
        'resource_type': 'ResourceType',
        'status': 'Status',
        'updated_at': 'UpdatedAt',
        'used_capacity_in_bytes': 'UsedCapacityInBytes'
    }

    def __init__(self, account_id=None, created_at=None, instance_id=None, instance_name=None, meta_information=None, plans=None, recovery_point_number=None, resource_id=None, resource_type=None, status=None, updated_at=None, used_capacity_in_bytes=None, _configuration=None):  # noqa: E501
        """ResourceForDescribeBackupResourcesOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._created_at = None
        self._instance_id = None
        self._instance_name = None
        self._meta_information = None
        self._plans = None
        self._recovery_point_number = None
        self._resource_id = None
        self._resource_type = None
        self._status = None
        self._updated_at = None
        self._used_capacity_in_bytes = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if created_at is not None:
            self.created_at = created_at
        if instance_id is not None:
            self.instance_id = instance_id
        if instance_name is not None:
            self.instance_name = instance_name
        if meta_information is not None:
            self.meta_information = meta_information
        if plans is not None:
            self.plans = plans
        if recovery_point_number is not None:
            self.recovery_point_number = recovery_point_number
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_type is not None:
            self.resource_type = resource_type
        if status is not None:
            self.status = status
        if updated_at is not None:
            self.updated_at = updated_at
        if used_capacity_in_bytes is not None:
            self.used_capacity_in_bytes = used_capacity_in_bytes

    @property
    def account_id(self):
        """Gets the account_id of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501


        :return: The account_id of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ResourceForDescribeBackupResourcesOutput.


        :param account_id: The account_id of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def created_at(self):
        """Gets the created_at of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501


        :return: The created_at of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ResourceForDescribeBackupResourcesOutput.


        :param created_at: The created_at of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def instance_id(self):
        """Gets the instance_id of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501


        :return: The instance_id of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this ResourceForDescribeBackupResourcesOutput.


        :param instance_id: The instance_id of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def instance_name(self):
        """Gets the instance_name of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501


        :return: The instance_name of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this ResourceForDescribeBackupResourcesOutput.


        :param instance_name: The instance_name of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :type: str
        """

        self._instance_name = instance_name

    @property
    def meta_information(self):
        """Gets the meta_information of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501


        :return: The meta_information of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :rtype: MetaInformationForDescribeBackupResourcesOutput
        """
        return self._meta_information

    @meta_information.setter
    def meta_information(self, meta_information):
        """Sets the meta_information of this ResourceForDescribeBackupResourcesOutput.


        :param meta_information: The meta_information of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :type: MetaInformationForDescribeBackupResourcesOutput
        """

        self._meta_information = meta_information

    @property
    def plans(self):
        """Gets the plans of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501


        :return: The plans of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :rtype: list[PlanForDescribeBackupResourcesOutput]
        """
        return self._plans

    @plans.setter
    def plans(self, plans):
        """Sets the plans of this ResourceForDescribeBackupResourcesOutput.


        :param plans: The plans of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :type: list[PlanForDescribeBackupResourcesOutput]
        """

        self._plans = plans

    @property
    def recovery_point_number(self):
        """Gets the recovery_point_number of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501


        :return: The recovery_point_number of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :rtype: int
        """
        return self._recovery_point_number

    @recovery_point_number.setter
    def recovery_point_number(self, recovery_point_number):
        """Sets the recovery_point_number of this ResourceForDescribeBackupResourcesOutput.


        :param recovery_point_number: The recovery_point_number of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :type: int
        """

        self._recovery_point_number = recovery_point_number

    @property
    def resource_id(self):
        """Gets the resource_id of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501


        :return: The resource_id of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ResourceForDescribeBackupResourcesOutput.


        :param resource_id: The resource_id of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501


        :return: The resource_type of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResourceForDescribeBackupResourcesOutput.


        :param resource_type: The resource_type of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def status(self):
        """Gets the status of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501


        :return: The status of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResourceForDescribeBackupResourcesOutput.


        :param status: The status of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501


        :return: The updated_at of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ResourceForDescribeBackupResourcesOutput.


        :param updated_at: The updated_at of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def used_capacity_in_bytes(self):
        """Gets the used_capacity_in_bytes of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501


        :return: The used_capacity_in_bytes of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :rtype: int
        """
        return self._used_capacity_in_bytes

    @used_capacity_in_bytes.setter
    def used_capacity_in_bytes(self, used_capacity_in_bytes):
        """Sets the used_capacity_in_bytes of this ResourceForDescribeBackupResourcesOutput.


        :param used_capacity_in_bytes: The used_capacity_in_bytes of this ResourceForDescribeBackupResourcesOutput.  # noqa: E501
        :type: int
        """

        self._used_capacity_in_bytes = used_capacity_in_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceForDescribeBackupResourcesOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceForDescribeBackupResourcesOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourceForDescribeBackupResourcesOutput):
            return True

        return self.to_dict() != other.to_dict()
