# coding: utf-8

"""
    cbr

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class VaultListForDescribeVaultsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_at': 'str',
        'endpoint': 'str',
        'project_name': 'str',
        'region': 'str',
        'tags': 'list[TagForDescribeVaultsOutput]',
        'vault_id': 'str',
        'vault_name': 'str'
    }

    attribute_map = {
        'create_at': 'CreateAt',
        'endpoint': 'Endpoint',
        'project_name': 'ProjectName',
        'region': 'Region',
        'tags': 'Tags',
        'vault_id': 'VaultId',
        'vault_name': 'VaultName'
    }

    def __init__(self, create_at=None, endpoint=None, project_name=None, region=None, tags=None, vault_id=None, vault_name=None, _configuration=None):  # noqa: E501
        """VaultListForDescribeVaultsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._create_at = None
        self._endpoint = None
        self._project_name = None
        self._region = None
        self._tags = None
        self._vault_id = None
        self._vault_name = None
        self.discriminator = None

        if create_at is not None:
            self.create_at = create_at
        if endpoint is not None:
            self.endpoint = endpoint
        if project_name is not None:
            self.project_name = project_name
        if region is not None:
            self.region = region
        if tags is not None:
            self.tags = tags
        if vault_id is not None:
            self.vault_id = vault_id
        if vault_name is not None:
            self.vault_name = vault_name

    @property
    def create_at(self):
        """Gets the create_at of this VaultListForDescribeVaultsOutput.  # noqa: E501


        :return: The create_at of this VaultListForDescribeVaultsOutput.  # noqa: E501
        :rtype: str
        """
        return self._create_at

    @create_at.setter
    def create_at(self, create_at):
        """Sets the create_at of this VaultListForDescribeVaultsOutput.


        :param create_at: The create_at of this VaultListForDescribeVaultsOutput.  # noqa: E501
        :type: str
        """

        self._create_at = create_at

    @property
    def endpoint(self):
        """Gets the endpoint of this VaultListForDescribeVaultsOutput.  # noqa: E501


        :return: The endpoint of this VaultListForDescribeVaultsOutput.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this VaultListForDescribeVaultsOutput.


        :param endpoint: The endpoint of this VaultListForDescribeVaultsOutput.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def project_name(self):
        """Gets the project_name of this VaultListForDescribeVaultsOutput.  # noqa: E501


        :return: The project_name of this VaultListForDescribeVaultsOutput.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this VaultListForDescribeVaultsOutput.


        :param project_name: The project_name of this VaultListForDescribeVaultsOutput.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def region(self):
        """Gets the region of this VaultListForDescribeVaultsOutput.  # noqa: E501


        :return: The region of this VaultListForDescribeVaultsOutput.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this VaultListForDescribeVaultsOutput.


        :param region: The region of this VaultListForDescribeVaultsOutput.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def tags(self):
        """Gets the tags of this VaultListForDescribeVaultsOutput.  # noqa: E501


        :return: The tags of this VaultListForDescribeVaultsOutput.  # noqa: E501
        :rtype: list[TagForDescribeVaultsOutput]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VaultListForDescribeVaultsOutput.


        :param tags: The tags of this VaultListForDescribeVaultsOutput.  # noqa: E501
        :type: list[TagForDescribeVaultsOutput]
        """

        self._tags = tags

    @property
    def vault_id(self):
        """Gets the vault_id of this VaultListForDescribeVaultsOutput.  # noqa: E501


        :return: The vault_id of this VaultListForDescribeVaultsOutput.  # noqa: E501
        :rtype: str
        """
        return self._vault_id

    @vault_id.setter
    def vault_id(self, vault_id):
        """Sets the vault_id of this VaultListForDescribeVaultsOutput.


        :param vault_id: The vault_id of this VaultListForDescribeVaultsOutput.  # noqa: E501
        :type: str
        """

        self._vault_id = vault_id

    @property
    def vault_name(self):
        """Gets the vault_name of this VaultListForDescribeVaultsOutput.  # noqa: E501


        :return: The vault_name of this VaultListForDescribeVaultsOutput.  # noqa: E501
        :rtype: str
        """
        return self._vault_name

    @vault_name.setter
    def vault_name(self, vault_name):
        """Sets the vault_name of this VaultListForDescribeVaultsOutput.


        :param vault_name: The vault_name of this VaultListForDescribeVaultsOutput.  # noqa: E501
        :type: str
        """

        self._vault_name = vault_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VaultListForDescribeVaultsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VaultListForDescribeVaultsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VaultListForDescribeVaultsOutput):
            return True

        return self.to_dict() != other.to_dict()
