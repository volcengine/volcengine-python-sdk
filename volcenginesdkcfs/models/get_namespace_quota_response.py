# coding: utf-8

"""
    cfs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class GetNamespaceQuotaResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'file_system_id': 'str',
        'file_system_name': 'str',
        'namespace_count': 'int',
        'namespace_count_per_file_system': 'int',
        'namespace_quota': 'int',
        'namespace_quota_per_file_system': 'int',
        'quota_enough': 'bool'
    }

    attribute_map = {
        'account_id': 'AccountId',
        'file_system_id': 'FileSystemId',
        'file_system_name': 'FileSystemName',
        'namespace_count': 'NamespaceCount',
        'namespace_count_per_file_system': 'NamespaceCountPerFileSystem',
        'namespace_quota': 'NamespaceQuota',
        'namespace_quota_per_file_system': 'NamespaceQuotaPerFileSystem',
        'quota_enough': 'QuotaEnough'
    }

    def __init__(self, account_id=None, file_system_id=None, file_system_name=None, namespace_count=None, namespace_count_per_file_system=None, namespace_quota=None, namespace_quota_per_file_system=None, quota_enough=None, _configuration=None):  # noqa: E501
        """GetNamespaceQuotaResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._file_system_id = None
        self._file_system_name = None
        self._namespace_count = None
        self._namespace_count_per_file_system = None
        self._namespace_quota = None
        self._namespace_quota_per_file_system = None
        self._quota_enough = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if file_system_id is not None:
            self.file_system_id = file_system_id
        if file_system_name is not None:
            self.file_system_name = file_system_name
        if namespace_count is not None:
            self.namespace_count = namespace_count
        if namespace_count_per_file_system is not None:
            self.namespace_count_per_file_system = namespace_count_per_file_system
        if namespace_quota is not None:
            self.namespace_quota = namespace_quota
        if namespace_quota_per_file_system is not None:
            self.namespace_quota_per_file_system = namespace_quota_per_file_system
        if quota_enough is not None:
            self.quota_enough = quota_enough

    @property
    def account_id(self):
        """Gets the account_id of this GetNamespaceQuotaResponse.  # noqa: E501


        :return: The account_id of this GetNamespaceQuotaResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetNamespaceQuotaResponse.


        :param account_id: The account_id of this GetNamespaceQuotaResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def file_system_id(self):
        """Gets the file_system_id of this GetNamespaceQuotaResponse.  # noqa: E501


        :return: The file_system_id of this GetNamespaceQuotaResponse.  # noqa: E501
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this GetNamespaceQuotaResponse.


        :param file_system_id: The file_system_id of this GetNamespaceQuotaResponse.  # noqa: E501
        :type: str
        """

        self._file_system_id = file_system_id

    @property
    def file_system_name(self):
        """Gets the file_system_name of this GetNamespaceQuotaResponse.  # noqa: E501


        :return: The file_system_name of this GetNamespaceQuotaResponse.  # noqa: E501
        :rtype: str
        """
        return self._file_system_name

    @file_system_name.setter
    def file_system_name(self, file_system_name):
        """Sets the file_system_name of this GetNamespaceQuotaResponse.


        :param file_system_name: The file_system_name of this GetNamespaceQuotaResponse.  # noqa: E501
        :type: str
        """

        self._file_system_name = file_system_name

    @property
    def namespace_count(self):
        """Gets the namespace_count of this GetNamespaceQuotaResponse.  # noqa: E501


        :return: The namespace_count of this GetNamespaceQuotaResponse.  # noqa: E501
        :rtype: int
        """
        return self._namespace_count

    @namespace_count.setter
    def namespace_count(self, namespace_count):
        """Sets the namespace_count of this GetNamespaceQuotaResponse.


        :param namespace_count: The namespace_count of this GetNamespaceQuotaResponse.  # noqa: E501
        :type: int
        """

        self._namespace_count = namespace_count

    @property
    def namespace_count_per_file_system(self):
        """Gets the namespace_count_per_file_system of this GetNamespaceQuotaResponse.  # noqa: E501


        :return: The namespace_count_per_file_system of this GetNamespaceQuotaResponse.  # noqa: E501
        :rtype: int
        """
        return self._namespace_count_per_file_system

    @namespace_count_per_file_system.setter
    def namespace_count_per_file_system(self, namespace_count_per_file_system):
        """Sets the namespace_count_per_file_system of this GetNamespaceQuotaResponse.


        :param namespace_count_per_file_system: The namespace_count_per_file_system of this GetNamespaceQuotaResponse.  # noqa: E501
        :type: int
        """

        self._namespace_count_per_file_system = namespace_count_per_file_system

    @property
    def namespace_quota(self):
        """Gets the namespace_quota of this GetNamespaceQuotaResponse.  # noqa: E501


        :return: The namespace_quota of this GetNamespaceQuotaResponse.  # noqa: E501
        :rtype: int
        """
        return self._namespace_quota

    @namespace_quota.setter
    def namespace_quota(self, namespace_quota):
        """Sets the namespace_quota of this GetNamespaceQuotaResponse.


        :param namespace_quota: The namespace_quota of this GetNamespaceQuotaResponse.  # noqa: E501
        :type: int
        """

        self._namespace_quota = namespace_quota

    @property
    def namespace_quota_per_file_system(self):
        """Gets the namespace_quota_per_file_system of this GetNamespaceQuotaResponse.  # noqa: E501


        :return: The namespace_quota_per_file_system of this GetNamespaceQuotaResponse.  # noqa: E501
        :rtype: int
        """
        return self._namespace_quota_per_file_system

    @namespace_quota_per_file_system.setter
    def namespace_quota_per_file_system(self, namespace_quota_per_file_system):
        """Sets the namespace_quota_per_file_system of this GetNamespaceQuotaResponse.


        :param namespace_quota_per_file_system: The namespace_quota_per_file_system of this GetNamespaceQuotaResponse.  # noqa: E501
        :type: int
        """

        self._namespace_quota_per_file_system = namespace_quota_per_file_system

    @property
    def quota_enough(self):
        """Gets the quota_enough of this GetNamespaceQuotaResponse.  # noqa: E501


        :return: The quota_enough of this GetNamespaceQuotaResponse.  # noqa: E501
        :rtype: bool
        """
        return self._quota_enough

    @quota_enough.setter
    def quota_enough(self, quota_enough):
        """Sets the quota_enough of this GetNamespaceQuotaResponse.


        :param quota_enough: The quota_enough of this GetNamespaceQuotaResponse.  # noqa: E501
        :type: bool
        """

        self._quota_enough = quota_enough

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetNamespaceQuotaResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetNamespaceQuotaResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetNamespaceQuotaResponse):
            return True

        return self.to_dict() != other.to_dict()
