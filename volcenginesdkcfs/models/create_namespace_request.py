# coding: utf-8

"""
    cfs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateNamespaceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'file_system_id': 'str',
        'file_system_name': 'str',
        'mount_path': 'str',
        'namespace_type': 'str',
        'tos_bucket': 'str',
        'tos_credential_type': 'str',
        'tos_prefix': 'str',
        'tos_region': 'str',
        'tos_role_credential': 'list[TosRoleCredentialForCreateNamespaceInput]',
        'tos_static_credential': 'TosStaticCredentialForCreateNamespaceInput'
    }

    attribute_map = {
        'description': 'Description',
        'file_system_id': 'FileSystemId',
        'file_system_name': 'FileSystemName',
        'mount_path': 'MountPath',
        'namespace_type': 'NamespaceType',
        'tos_bucket': 'TosBucket',
        'tos_credential_type': 'TosCredentialType',
        'tos_prefix': 'TosPrefix',
        'tos_region': 'TosRegion',
        'tos_role_credential': 'TosRoleCredential',
        'tos_static_credential': 'TosStaticCredential'
    }

    def __init__(self, description=None, file_system_id=None, file_system_name=None, mount_path=None, namespace_type=None, tos_bucket=None, tos_credential_type=None, tos_prefix=None, tos_region=None, tos_role_credential=None, tos_static_credential=None, _configuration=None):  # noqa: E501
        """CreateNamespaceRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._file_system_id = None
        self._file_system_name = None
        self._mount_path = None
        self._namespace_type = None
        self._tos_bucket = None
        self._tos_credential_type = None
        self._tos_prefix = None
        self._tos_region = None
        self._tos_role_credential = None
        self._tos_static_credential = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if file_system_id is not None:
            self.file_system_id = file_system_id
        if file_system_name is not None:
            self.file_system_name = file_system_name
        if mount_path is not None:
            self.mount_path = mount_path
        self.namespace_type = namespace_type
        if tos_bucket is not None:
            self.tos_bucket = tos_bucket
        if tos_credential_type is not None:
            self.tos_credential_type = tos_credential_type
        if tos_prefix is not None:
            self.tos_prefix = tos_prefix
        if tos_region is not None:
            self.tos_region = tos_region
        if tos_role_credential is not None:
            self.tos_role_credential = tos_role_credential
        if tos_static_credential is not None:
            self.tos_static_credential = tos_static_credential

    @property
    def description(self):
        """Gets the description of this CreateNamespaceRequest.  # noqa: E501


        :return: The description of this CreateNamespaceRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateNamespaceRequest.


        :param description: The description of this CreateNamespaceRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def file_system_id(self):
        """Gets the file_system_id of this CreateNamespaceRequest.  # noqa: E501


        :return: The file_system_id of this CreateNamespaceRequest.  # noqa: E501
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this CreateNamespaceRequest.


        :param file_system_id: The file_system_id of this CreateNamespaceRequest.  # noqa: E501
        :type: str
        """

        self._file_system_id = file_system_id

    @property
    def file_system_name(self):
        """Gets the file_system_name of this CreateNamespaceRequest.  # noqa: E501


        :return: The file_system_name of this CreateNamespaceRequest.  # noqa: E501
        :rtype: str
        """
        return self._file_system_name

    @file_system_name.setter
    def file_system_name(self, file_system_name):
        """Sets the file_system_name of this CreateNamespaceRequest.


        :param file_system_name: The file_system_name of this CreateNamespaceRequest.  # noqa: E501
        :type: str
        """

        self._file_system_name = file_system_name

    @property
    def mount_path(self):
        """Gets the mount_path of this CreateNamespaceRequest.  # noqa: E501


        :return: The mount_path of this CreateNamespaceRequest.  # noqa: E501
        :rtype: str
        """
        return self._mount_path

    @mount_path.setter
    def mount_path(self, mount_path):
        """Sets the mount_path of this CreateNamespaceRequest.


        :param mount_path: The mount_path of this CreateNamespaceRequest.  # noqa: E501
        :type: str
        """

        self._mount_path = mount_path

    @property
    def namespace_type(self):
        """Gets the namespace_type of this CreateNamespaceRequest.  # noqa: E501


        :return: The namespace_type of this CreateNamespaceRequest.  # noqa: E501
        :rtype: str
        """
        return self._namespace_type

    @namespace_type.setter
    def namespace_type(self, namespace_type):
        """Sets the namespace_type of this CreateNamespaceRequest.


        :param namespace_type: The namespace_type of this CreateNamespaceRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and namespace_type is None:
            raise ValueError("Invalid value for `namespace_type`, must not be `None`")  # noqa: E501
        allowed_values = ["TOS_LOCAL", "TOS_MANAGED", "ACC_TOS", "LOCAL", "ACC_HDFS", "BOUNDARY", "UNKNOWN"]  # noqa: E501
        if (self._configuration.client_side_validation and
                namespace_type not in allowed_values):
            raise ValueError(
                "Invalid value for `namespace_type` ({0}), must be one of {1}"  # noqa: E501
                .format(namespace_type, allowed_values)
            )

        self._namespace_type = namespace_type

    @property
    def tos_bucket(self):
        """Gets the tos_bucket of this CreateNamespaceRequest.  # noqa: E501


        :return: The tos_bucket of this CreateNamespaceRequest.  # noqa: E501
        :rtype: str
        """
        return self._tos_bucket

    @tos_bucket.setter
    def tos_bucket(self, tos_bucket):
        """Sets the tos_bucket of this CreateNamespaceRequest.


        :param tos_bucket: The tos_bucket of this CreateNamespaceRequest.  # noqa: E501
        :type: str
        """

        self._tos_bucket = tos_bucket

    @property
    def tos_credential_type(self):
        """Gets the tos_credential_type of this CreateNamespaceRequest.  # noqa: E501


        :return: The tos_credential_type of this CreateNamespaceRequest.  # noqa: E501
        :rtype: str
        """
        return self._tos_credential_type

    @tos_credential_type.setter
    def tos_credential_type(self, tos_credential_type):
        """Sets the tos_credential_type of this CreateNamespaceRequest.


        :param tos_credential_type: The tos_credential_type of this CreateNamespaceRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Static", "ServiceRole", "Role"]  # noqa: E501
        if (self._configuration.client_side_validation and
                tos_credential_type not in allowed_values):
            raise ValueError(
                "Invalid value for `tos_credential_type` ({0}), must be one of {1}"  # noqa: E501
                .format(tos_credential_type, allowed_values)
            )

        self._tos_credential_type = tos_credential_type

    @property
    def tos_prefix(self):
        """Gets the tos_prefix of this CreateNamespaceRequest.  # noqa: E501


        :return: The tos_prefix of this CreateNamespaceRequest.  # noqa: E501
        :rtype: str
        """
        return self._tos_prefix

    @tos_prefix.setter
    def tos_prefix(self, tos_prefix):
        """Sets the tos_prefix of this CreateNamespaceRequest.


        :param tos_prefix: The tos_prefix of this CreateNamespaceRequest.  # noqa: E501
        :type: str
        """

        self._tos_prefix = tos_prefix

    @property
    def tos_region(self):
        """Gets the tos_region of this CreateNamespaceRequest.  # noqa: E501


        :return: The tos_region of this CreateNamespaceRequest.  # noqa: E501
        :rtype: str
        """
        return self._tos_region

    @tos_region.setter
    def tos_region(self, tos_region):
        """Sets the tos_region of this CreateNamespaceRequest.


        :param tos_region: The tos_region of this CreateNamespaceRequest.  # noqa: E501
        :type: str
        """

        self._tos_region = tos_region

    @property
    def tos_role_credential(self):
        """Gets the tos_role_credential of this CreateNamespaceRequest.  # noqa: E501


        :return: The tos_role_credential of this CreateNamespaceRequest.  # noqa: E501
        :rtype: list[TosRoleCredentialForCreateNamespaceInput]
        """
        return self._tos_role_credential

    @tos_role_credential.setter
    def tos_role_credential(self, tos_role_credential):
        """Sets the tos_role_credential of this CreateNamespaceRequest.


        :param tos_role_credential: The tos_role_credential of this CreateNamespaceRequest.  # noqa: E501
        :type: list[TosRoleCredentialForCreateNamespaceInput]
        """

        self._tos_role_credential = tos_role_credential

    @property
    def tos_static_credential(self):
        """Gets the tos_static_credential of this CreateNamespaceRequest.  # noqa: E501


        :return: The tos_static_credential of this CreateNamespaceRequest.  # noqa: E501
        :rtype: TosStaticCredentialForCreateNamespaceInput
        """
        return self._tos_static_credential

    @tos_static_credential.setter
    def tos_static_credential(self, tos_static_credential):
        """Sets the tos_static_credential of this CreateNamespaceRequest.


        :param tos_static_credential: The tos_static_credential of this CreateNamespaceRequest.  # noqa: E501
        :type: TosStaticCredentialForCreateNamespaceInput
        """

        self._tos_static_credential = tos_static_credential

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateNamespaceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateNamespaceRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateNamespaceRequest):
            return True

        return self.to_dict() != other.to_dict()
