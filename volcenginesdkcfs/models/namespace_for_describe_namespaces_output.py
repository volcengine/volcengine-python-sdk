# coding: utf-8

"""
    cfs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class NamespaceForDescribeNamespacesOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_time': 'str',
        'description': 'str',
        'file_system_id': 'str',
        'file_system_name': 'str',
        'is_my_bucket': 'bool',
        'namespace_id': 'str',
        'namespace_type': 'str',
        'service_managed': 'bool',
        'status': 'str',
        'tos_bucket': 'str',
        'tos_prefix': 'str',
        'updated_time': 'str'
    }

    attribute_map = {
        'created_time': 'CreatedTime',
        'description': 'Description',
        'file_system_id': 'FileSystemId',
        'file_system_name': 'FileSystemName',
        'is_my_bucket': 'IsMyBucket',
        'namespace_id': 'NamespaceId',
        'namespace_type': 'NamespaceType',
        'service_managed': 'ServiceManaged',
        'status': 'Status',
        'tos_bucket': 'TosBucket',
        'tos_prefix': 'TosPrefix',
        'updated_time': 'UpdatedTime'
    }

    def __init__(self, created_time=None, description=None, file_system_id=None, file_system_name=None, is_my_bucket=None, namespace_id=None, namespace_type=None, service_managed=None, status=None, tos_bucket=None, tos_prefix=None, updated_time=None, _configuration=None):  # noqa: E501
        """NamespaceForDescribeNamespacesOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created_time = None
        self._description = None
        self._file_system_id = None
        self._file_system_name = None
        self._is_my_bucket = None
        self._namespace_id = None
        self._namespace_type = None
        self._service_managed = None
        self._status = None
        self._tos_bucket = None
        self._tos_prefix = None
        self._updated_time = None
        self.discriminator = None

        if created_time is not None:
            self.created_time = created_time
        if description is not None:
            self.description = description
        if file_system_id is not None:
            self.file_system_id = file_system_id
        if file_system_name is not None:
            self.file_system_name = file_system_name
        if is_my_bucket is not None:
            self.is_my_bucket = is_my_bucket
        if namespace_id is not None:
            self.namespace_id = namespace_id
        if namespace_type is not None:
            self.namespace_type = namespace_type
        if service_managed is not None:
            self.service_managed = service_managed
        if status is not None:
            self.status = status
        if tos_bucket is not None:
            self.tos_bucket = tos_bucket
        if tos_prefix is not None:
            self.tos_prefix = tos_prefix
        if updated_time is not None:
            self.updated_time = updated_time

    @property
    def created_time(self):
        """Gets the created_time of this NamespaceForDescribeNamespacesOutput.  # noqa: E501


        :return: The created_time of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this NamespaceForDescribeNamespacesOutput.


        :param created_time: The created_time of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :type: str
        """

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this NamespaceForDescribeNamespacesOutput.  # noqa: E501


        :return: The description of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NamespaceForDescribeNamespacesOutput.


        :param description: The description of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def file_system_id(self):
        """Gets the file_system_id of this NamespaceForDescribeNamespacesOutput.  # noqa: E501


        :return: The file_system_id of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this NamespaceForDescribeNamespacesOutput.


        :param file_system_id: The file_system_id of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :type: str
        """

        self._file_system_id = file_system_id

    @property
    def file_system_name(self):
        """Gets the file_system_name of this NamespaceForDescribeNamespacesOutput.  # noqa: E501


        :return: The file_system_name of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :rtype: str
        """
        return self._file_system_name

    @file_system_name.setter
    def file_system_name(self, file_system_name):
        """Sets the file_system_name of this NamespaceForDescribeNamespacesOutput.


        :param file_system_name: The file_system_name of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :type: str
        """

        self._file_system_name = file_system_name

    @property
    def is_my_bucket(self):
        """Gets the is_my_bucket of this NamespaceForDescribeNamespacesOutput.  # noqa: E501


        :return: The is_my_bucket of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :rtype: bool
        """
        return self._is_my_bucket

    @is_my_bucket.setter
    def is_my_bucket(self, is_my_bucket):
        """Sets the is_my_bucket of this NamespaceForDescribeNamespacesOutput.


        :param is_my_bucket: The is_my_bucket of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :type: bool
        """

        self._is_my_bucket = is_my_bucket

    @property
    def namespace_id(self):
        """Gets the namespace_id of this NamespaceForDescribeNamespacesOutput.  # noqa: E501


        :return: The namespace_id of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :rtype: str
        """
        return self._namespace_id

    @namespace_id.setter
    def namespace_id(self, namespace_id):
        """Sets the namespace_id of this NamespaceForDescribeNamespacesOutput.


        :param namespace_id: The namespace_id of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :type: str
        """

        self._namespace_id = namespace_id

    @property
    def namespace_type(self):
        """Gets the namespace_type of this NamespaceForDescribeNamespacesOutput.  # noqa: E501


        :return: The namespace_type of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :rtype: str
        """
        return self._namespace_type

    @namespace_type.setter
    def namespace_type(self, namespace_type):
        """Sets the namespace_type of this NamespaceForDescribeNamespacesOutput.


        :param namespace_type: The namespace_type of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :type: str
        """

        self._namespace_type = namespace_type

    @property
    def service_managed(self):
        """Gets the service_managed of this NamespaceForDescribeNamespacesOutput.  # noqa: E501


        :return: The service_managed of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :rtype: bool
        """
        return self._service_managed

    @service_managed.setter
    def service_managed(self, service_managed):
        """Sets the service_managed of this NamespaceForDescribeNamespacesOutput.


        :param service_managed: The service_managed of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :type: bool
        """

        self._service_managed = service_managed

    @property
    def status(self):
        """Gets the status of this NamespaceForDescribeNamespacesOutput.  # noqa: E501


        :return: The status of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NamespaceForDescribeNamespacesOutput.


        :param status: The status of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def tos_bucket(self):
        """Gets the tos_bucket of this NamespaceForDescribeNamespacesOutput.  # noqa: E501


        :return: The tos_bucket of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :rtype: str
        """
        return self._tos_bucket

    @tos_bucket.setter
    def tos_bucket(self, tos_bucket):
        """Sets the tos_bucket of this NamespaceForDescribeNamespacesOutput.


        :param tos_bucket: The tos_bucket of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :type: str
        """

        self._tos_bucket = tos_bucket

    @property
    def tos_prefix(self):
        """Gets the tos_prefix of this NamespaceForDescribeNamespacesOutput.  # noqa: E501


        :return: The tos_prefix of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :rtype: str
        """
        return self._tos_prefix

    @tos_prefix.setter
    def tos_prefix(self, tos_prefix):
        """Sets the tos_prefix of this NamespaceForDescribeNamespacesOutput.


        :param tos_prefix: The tos_prefix of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :type: str
        """

        self._tos_prefix = tos_prefix

    @property
    def updated_time(self):
        """Gets the updated_time of this NamespaceForDescribeNamespacesOutput.  # noqa: E501


        :return: The updated_time of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :rtype: str
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this NamespaceForDescribeNamespacesOutput.


        :param updated_time: The updated_time of this NamespaceForDescribeNamespacesOutput.  # noqa: E501
        :type: str
        """

        self._updated_time = updated_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NamespaceForDescribeNamespacesOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NamespaceForDescribeNamespacesOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NamespaceForDescribeNamespacesOutput):
            return True

        return self.to_dict() != other.to_dict()
