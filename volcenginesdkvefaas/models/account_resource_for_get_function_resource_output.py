# coding: utf-8

"""
    vefaas

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class AccountResourceForGetFunctionResourceOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aailable': 'int',
        'account_id': 'str',
        'allocated': 'int',
        'gpu_memory_aailable': 'int',
        'gpu_memory_allocated': 'int',
        'gpu_memory_total': 'int',
        'total': 'int'
    }

    attribute_map = {
        'aailable': 'Aailable',
        'account_id': 'AccountId',
        'allocated': 'Allocated',
        'gpu_memory_aailable': 'GpuMemoryAailable',
        'gpu_memory_allocated': 'GpuMemoryAllocated',
        'gpu_memory_total': 'GpuMemoryTotal',
        'total': 'Total'
    }

    def __init__(self, aailable=None, account_id=None, allocated=None, gpu_memory_aailable=None, gpu_memory_allocated=None, gpu_memory_total=None, total=None, _configuration=None):  # noqa: E501
        """AccountResourceForGetFunctionResourceOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._aailable = None
        self._account_id = None
        self._allocated = None
        self._gpu_memory_aailable = None
        self._gpu_memory_allocated = None
        self._gpu_memory_total = None
        self._total = None
        self.discriminator = None

        if aailable is not None:
            self.aailable = aailable
        if account_id is not None:
            self.account_id = account_id
        if allocated is not None:
            self.allocated = allocated
        if gpu_memory_aailable is not None:
            self.gpu_memory_aailable = gpu_memory_aailable
        if gpu_memory_allocated is not None:
            self.gpu_memory_allocated = gpu_memory_allocated
        if gpu_memory_total is not None:
            self.gpu_memory_total = gpu_memory_total
        if total is not None:
            self.total = total

    @property
    def aailable(self):
        """Gets the aailable of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501


        :return: The aailable of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501
        :rtype: int
        """
        return self._aailable

    @aailable.setter
    def aailable(self, aailable):
        """Sets the aailable of this AccountResourceForGetFunctionResourceOutput.


        :param aailable: The aailable of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501
        :type: int
        """

        self._aailable = aailable

    @property
    def account_id(self):
        """Gets the account_id of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501


        :return: The account_id of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountResourceForGetFunctionResourceOutput.


        :param account_id: The account_id of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def allocated(self):
        """Gets the allocated of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501


        :return: The allocated of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501
        :rtype: int
        """
        return self._allocated

    @allocated.setter
    def allocated(self, allocated):
        """Sets the allocated of this AccountResourceForGetFunctionResourceOutput.


        :param allocated: The allocated of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501
        :type: int
        """

        self._allocated = allocated

    @property
    def gpu_memory_aailable(self):
        """Gets the gpu_memory_aailable of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501


        :return: The gpu_memory_aailable of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501
        :rtype: int
        """
        return self._gpu_memory_aailable

    @gpu_memory_aailable.setter
    def gpu_memory_aailable(self, gpu_memory_aailable):
        """Sets the gpu_memory_aailable of this AccountResourceForGetFunctionResourceOutput.


        :param gpu_memory_aailable: The gpu_memory_aailable of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501
        :type: int
        """

        self._gpu_memory_aailable = gpu_memory_aailable

    @property
    def gpu_memory_allocated(self):
        """Gets the gpu_memory_allocated of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501


        :return: The gpu_memory_allocated of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501
        :rtype: int
        """
        return self._gpu_memory_allocated

    @gpu_memory_allocated.setter
    def gpu_memory_allocated(self, gpu_memory_allocated):
        """Sets the gpu_memory_allocated of this AccountResourceForGetFunctionResourceOutput.


        :param gpu_memory_allocated: The gpu_memory_allocated of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501
        :type: int
        """

        self._gpu_memory_allocated = gpu_memory_allocated

    @property
    def gpu_memory_total(self):
        """Gets the gpu_memory_total of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501


        :return: The gpu_memory_total of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501
        :rtype: int
        """
        return self._gpu_memory_total

    @gpu_memory_total.setter
    def gpu_memory_total(self, gpu_memory_total):
        """Sets the gpu_memory_total of this AccountResourceForGetFunctionResourceOutput.


        :param gpu_memory_total: The gpu_memory_total of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501
        :type: int
        """

        self._gpu_memory_total = gpu_memory_total

    @property
    def total(self):
        """Gets the total of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501


        :return: The total of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this AccountResourceForGetFunctionResourceOutput.


        :param total: The total of this AccountResourceForGetFunctionResourceOutput.  # noqa: E501
        :type: int
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountResourceForGetFunctionResourceOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountResourceForGetFunctionResourceOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountResourceForGetFunctionResourceOutput):
            return True

        return self.to_dict() != other.to_dict()
