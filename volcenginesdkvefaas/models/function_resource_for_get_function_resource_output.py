# coding: utf-8

"""
    vefaas

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class FunctionResourceForGetFunctionResourceOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gpu_memory_mb': 'int',
        'id': 'str',
        'last_update_time': 'str',
        'max_gpu_resource': 'int',
        'max_instance': 'int',
        'max_resource': 'int',
        'memory_mb': 'int',
        'min_instance': 'int',
        'name': 'str',
        'reserved_dp_enabled': 'bool',
        'reserved_frozen_instance': 'int',
        'status': 'str'
    }

    attribute_map = {
        'gpu_memory_mb': 'GPUMemoryMB',
        'id': 'Id',
        'last_update_time': 'LastUpdateTime',
        'max_gpu_resource': 'MaxGPUResource',
        'max_instance': 'MaxInstance',
        'max_resource': 'MaxResource',
        'memory_mb': 'MemoryMB',
        'min_instance': 'MinInstance',
        'name': 'Name',
        'reserved_dp_enabled': 'ReservedDPEnabled',
        'reserved_frozen_instance': 'ReservedFrozenInstance',
        'status': 'Status'
    }

    def __init__(self, gpu_memory_mb=None, id=None, last_update_time=None, max_gpu_resource=None, max_instance=None, max_resource=None, memory_mb=None, min_instance=None, name=None, reserved_dp_enabled=None, reserved_frozen_instance=None, status=None, _configuration=None):  # noqa: E501
        """FunctionResourceForGetFunctionResourceOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._gpu_memory_mb = None
        self._id = None
        self._last_update_time = None
        self._max_gpu_resource = None
        self._max_instance = None
        self._max_resource = None
        self._memory_mb = None
        self._min_instance = None
        self._name = None
        self._reserved_dp_enabled = None
        self._reserved_frozen_instance = None
        self._status = None
        self.discriminator = None

        if gpu_memory_mb is not None:
            self.gpu_memory_mb = gpu_memory_mb
        if id is not None:
            self.id = id
        if last_update_time is not None:
            self.last_update_time = last_update_time
        if max_gpu_resource is not None:
            self.max_gpu_resource = max_gpu_resource
        if max_instance is not None:
            self.max_instance = max_instance
        if max_resource is not None:
            self.max_resource = max_resource
        if memory_mb is not None:
            self.memory_mb = memory_mb
        if min_instance is not None:
            self.min_instance = min_instance
        if name is not None:
            self.name = name
        if reserved_dp_enabled is not None:
            self.reserved_dp_enabled = reserved_dp_enabled
        if reserved_frozen_instance is not None:
            self.reserved_frozen_instance = reserved_frozen_instance
        if status is not None:
            self.status = status

    @property
    def gpu_memory_mb(self):
        """Gets the gpu_memory_mb of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501


        :return: The gpu_memory_mb of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :rtype: int
        """
        return self._gpu_memory_mb

    @gpu_memory_mb.setter
    def gpu_memory_mb(self, gpu_memory_mb):
        """Sets the gpu_memory_mb of this FunctionResourceForGetFunctionResourceOutput.


        :param gpu_memory_mb: The gpu_memory_mb of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :type: int
        """

        self._gpu_memory_mb = gpu_memory_mb

    @property
    def id(self):
        """Gets the id of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501


        :return: The id of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FunctionResourceForGetFunctionResourceOutput.


        :param id: The id of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_update_time(self):
        """Gets the last_update_time of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501


        :return: The last_update_time of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :rtype: str
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this FunctionResourceForGetFunctionResourceOutput.


        :param last_update_time: The last_update_time of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :type: str
        """

        self._last_update_time = last_update_time

    @property
    def max_gpu_resource(self):
        """Gets the max_gpu_resource of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501


        :return: The max_gpu_resource of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :rtype: int
        """
        return self._max_gpu_resource

    @max_gpu_resource.setter
    def max_gpu_resource(self, max_gpu_resource):
        """Sets the max_gpu_resource of this FunctionResourceForGetFunctionResourceOutput.


        :param max_gpu_resource: The max_gpu_resource of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :type: int
        """

        self._max_gpu_resource = max_gpu_resource

    @property
    def max_instance(self):
        """Gets the max_instance of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501


        :return: The max_instance of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :rtype: int
        """
        return self._max_instance

    @max_instance.setter
    def max_instance(self, max_instance):
        """Sets the max_instance of this FunctionResourceForGetFunctionResourceOutput.


        :param max_instance: The max_instance of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :type: int
        """

        self._max_instance = max_instance

    @property
    def max_resource(self):
        """Gets the max_resource of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501


        :return: The max_resource of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :rtype: int
        """
        return self._max_resource

    @max_resource.setter
    def max_resource(self, max_resource):
        """Sets the max_resource of this FunctionResourceForGetFunctionResourceOutput.


        :param max_resource: The max_resource of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :type: int
        """

        self._max_resource = max_resource

    @property
    def memory_mb(self):
        """Gets the memory_mb of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501


        :return: The memory_mb of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :rtype: int
        """
        return self._memory_mb

    @memory_mb.setter
    def memory_mb(self, memory_mb):
        """Sets the memory_mb of this FunctionResourceForGetFunctionResourceOutput.


        :param memory_mb: The memory_mb of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :type: int
        """

        self._memory_mb = memory_mb

    @property
    def min_instance(self):
        """Gets the min_instance of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501


        :return: The min_instance of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :rtype: int
        """
        return self._min_instance

    @min_instance.setter
    def min_instance(self, min_instance):
        """Sets the min_instance of this FunctionResourceForGetFunctionResourceOutput.


        :param min_instance: The min_instance of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :type: int
        """

        self._min_instance = min_instance

    @property
    def name(self):
        """Gets the name of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501


        :return: The name of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FunctionResourceForGetFunctionResourceOutput.


        :param name: The name of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def reserved_dp_enabled(self):
        """Gets the reserved_dp_enabled of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501


        :return: The reserved_dp_enabled of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :rtype: bool
        """
        return self._reserved_dp_enabled

    @reserved_dp_enabled.setter
    def reserved_dp_enabled(self, reserved_dp_enabled):
        """Sets the reserved_dp_enabled of this FunctionResourceForGetFunctionResourceOutput.


        :param reserved_dp_enabled: The reserved_dp_enabled of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :type: bool
        """

        self._reserved_dp_enabled = reserved_dp_enabled

    @property
    def reserved_frozen_instance(self):
        """Gets the reserved_frozen_instance of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501


        :return: The reserved_frozen_instance of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :rtype: int
        """
        return self._reserved_frozen_instance

    @reserved_frozen_instance.setter
    def reserved_frozen_instance(self, reserved_frozen_instance):
        """Sets the reserved_frozen_instance of this FunctionResourceForGetFunctionResourceOutput.


        :param reserved_frozen_instance: The reserved_frozen_instance of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :type: int
        """

        self._reserved_frozen_instance = reserved_frozen_instance

    @property
    def status(self):
        """Gets the status of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501


        :return: The status of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FunctionResourceForGetFunctionResourceOutput.


        :param status: The status of this FunctionResourceForGetFunctionResourceOutput.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FunctionResourceForGetFunctionResourceOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FunctionResourceForGetFunctionResourceOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FunctionResourceForGetFunctionResourceOutput):
            return True

        return self.to_dict() != other.to_dict()
