# coding: utf-8

"""
    vefaas

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DescribeSandboxResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'availability_zone': 'str',
        'cpu_milli': 'int',
        'created_at': 'str',
        'envs': 'list[EnvForDescribeSandboxOutput]',
        'error_code': 'str',
        'error_message': 'str',
        'expire_at': 'str',
        'function_id': 'str',
        'id': 'str',
        'image_info': 'ImageInfoForDescribeSandboxOutput',
        'instance_tos_mount_config': 'InstanceTosMountConfigForDescribeSandboxOutput',
        'instance_type': 'str',
        'max_concurrency': 'int',
        'memory_mb': 'int',
        'pending': 'bool',
        'request_timeout': 'int',
        'revision_number': 'int',
        'status': 'str'
    }

    attribute_map = {
        'availability_zone': 'AvailabilityZone',
        'cpu_milli': 'CpuMilli',
        'created_at': 'CreatedAt',
        'envs': 'Envs',
        'error_code': 'ErrorCode',
        'error_message': 'ErrorMessage',
        'expire_at': 'ExpireAt',
        'function_id': 'FunctionId',
        'id': 'Id',
        'image_info': 'ImageInfo',
        'instance_tos_mount_config': 'InstanceTosMountConfig',
        'instance_type': 'InstanceType',
        'max_concurrency': 'MaxConcurrency',
        'memory_mb': 'MemoryMB',
        'pending': 'Pending',
        'request_timeout': 'RequestTimeout',
        'revision_number': 'RevisionNumber',
        'status': 'Status'
    }

    def __init__(self, availability_zone=None, cpu_milli=None, created_at=None, envs=None, error_code=None, error_message=None, expire_at=None, function_id=None, id=None, image_info=None, instance_tos_mount_config=None, instance_type=None, max_concurrency=None, memory_mb=None, pending=None, request_timeout=None, revision_number=None, status=None, _configuration=None):  # noqa: E501
        """DescribeSandboxResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._availability_zone = None
        self._cpu_milli = None
        self._created_at = None
        self._envs = None
        self._error_code = None
        self._error_message = None
        self._expire_at = None
        self._function_id = None
        self._id = None
        self._image_info = None
        self._instance_tos_mount_config = None
        self._instance_type = None
        self._max_concurrency = None
        self._memory_mb = None
        self._pending = None
        self._request_timeout = None
        self._revision_number = None
        self._status = None
        self.discriminator = None

        if availability_zone is not None:
            self.availability_zone = availability_zone
        if cpu_milli is not None:
            self.cpu_milli = cpu_milli
        if created_at is not None:
            self.created_at = created_at
        if envs is not None:
            self.envs = envs
        if error_code is not None:
            self.error_code = error_code
        if error_message is not None:
            self.error_message = error_message
        if expire_at is not None:
            self.expire_at = expire_at
        if function_id is not None:
            self.function_id = function_id
        if id is not None:
            self.id = id
        if image_info is not None:
            self.image_info = image_info
        if instance_tos_mount_config is not None:
            self.instance_tos_mount_config = instance_tos_mount_config
        if instance_type is not None:
            self.instance_type = instance_type
        if max_concurrency is not None:
            self.max_concurrency = max_concurrency
        if memory_mb is not None:
            self.memory_mb = memory_mb
        if pending is not None:
            self.pending = pending
        if request_timeout is not None:
            self.request_timeout = request_timeout
        if revision_number is not None:
            self.revision_number = revision_number
        if status is not None:
            self.status = status

    @property
    def availability_zone(self):
        """Gets the availability_zone of this DescribeSandboxResponse.  # noqa: E501


        :return: The availability_zone of this DescribeSandboxResponse.  # noqa: E501
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this DescribeSandboxResponse.


        :param availability_zone: The availability_zone of this DescribeSandboxResponse.  # noqa: E501
        :type: str
        """

        self._availability_zone = availability_zone

    @property
    def cpu_milli(self):
        """Gets the cpu_milli of this DescribeSandboxResponse.  # noqa: E501


        :return: The cpu_milli of this DescribeSandboxResponse.  # noqa: E501
        :rtype: int
        """
        return self._cpu_milli

    @cpu_milli.setter
    def cpu_milli(self, cpu_milli):
        """Sets the cpu_milli of this DescribeSandboxResponse.


        :param cpu_milli: The cpu_milli of this DescribeSandboxResponse.  # noqa: E501
        :type: int
        """

        self._cpu_milli = cpu_milli

    @property
    def created_at(self):
        """Gets the created_at of this DescribeSandboxResponse.  # noqa: E501


        :return: The created_at of this DescribeSandboxResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DescribeSandboxResponse.


        :param created_at: The created_at of this DescribeSandboxResponse.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def envs(self):
        """Gets the envs of this DescribeSandboxResponse.  # noqa: E501


        :return: The envs of this DescribeSandboxResponse.  # noqa: E501
        :rtype: list[EnvForDescribeSandboxOutput]
        """
        return self._envs

    @envs.setter
    def envs(self, envs):
        """Sets the envs of this DescribeSandboxResponse.


        :param envs: The envs of this DescribeSandboxResponse.  # noqa: E501
        :type: list[EnvForDescribeSandboxOutput]
        """

        self._envs = envs

    @property
    def error_code(self):
        """Gets the error_code of this DescribeSandboxResponse.  # noqa: E501


        :return: The error_code of this DescribeSandboxResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this DescribeSandboxResponse.


        :param error_code: The error_code of this DescribeSandboxResponse.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this DescribeSandboxResponse.  # noqa: E501


        :return: The error_message of this DescribeSandboxResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this DescribeSandboxResponse.


        :param error_message: The error_message of this DescribeSandboxResponse.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def expire_at(self):
        """Gets the expire_at of this DescribeSandboxResponse.  # noqa: E501


        :return: The expire_at of this DescribeSandboxResponse.  # noqa: E501
        :rtype: str
        """
        return self._expire_at

    @expire_at.setter
    def expire_at(self, expire_at):
        """Sets the expire_at of this DescribeSandboxResponse.


        :param expire_at: The expire_at of this DescribeSandboxResponse.  # noqa: E501
        :type: str
        """

        self._expire_at = expire_at

    @property
    def function_id(self):
        """Gets the function_id of this DescribeSandboxResponse.  # noqa: E501


        :return: The function_id of this DescribeSandboxResponse.  # noqa: E501
        :rtype: str
        """
        return self._function_id

    @function_id.setter
    def function_id(self, function_id):
        """Sets the function_id of this DescribeSandboxResponse.


        :param function_id: The function_id of this DescribeSandboxResponse.  # noqa: E501
        :type: str
        """

        self._function_id = function_id

    @property
    def id(self):
        """Gets the id of this DescribeSandboxResponse.  # noqa: E501


        :return: The id of this DescribeSandboxResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DescribeSandboxResponse.


        :param id: The id of this DescribeSandboxResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def image_info(self):
        """Gets the image_info of this DescribeSandboxResponse.  # noqa: E501


        :return: The image_info of this DescribeSandboxResponse.  # noqa: E501
        :rtype: ImageInfoForDescribeSandboxOutput
        """
        return self._image_info

    @image_info.setter
    def image_info(self, image_info):
        """Sets the image_info of this DescribeSandboxResponse.


        :param image_info: The image_info of this DescribeSandboxResponse.  # noqa: E501
        :type: ImageInfoForDescribeSandboxOutput
        """

        self._image_info = image_info

    @property
    def instance_tos_mount_config(self):
        """Gets the instance_tos_mount_config of this DescribeSandboxResponse.  # noqa: E501


        :return: The instance_tos_mount_config of this DescribeSandboxResponse.  # noqa: E501
        :rtype: InstanceTosMountConfigForDescribeSandboxOutput
        """
        return self._instance_tos_mount_config

    @instance_tos_mount_config.setter
    def instance_tos_mount_config(self, instance_tos_mount_config):
        """Sets the instance_tos_mount_config of this DescribeSandboxResponse.


        :param instance_tos_mount_config: The instance_tos_mount_config of this DescribeSandboxResponse.  # noqa: E501
        :type: InstanceTosMountConfigForDescribeSandboxOutput
        """

        self._instance_tos_mount_config = instance_tos_mount_config

    @property
    def instance_type(self):
        """Gets the instance_type of this DescribeSandboxResponse.  # noqa: E501


        :return: The instance_type of this DescribeSandboxResponse.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this DescribeSandboxResponse.


        :param instance_type: The instance_type of this DescribeSandboxResponse.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    @property
    def max_concurrency(self):
        """Gets the max_concurrency of this DescribeSandboxResponse.  # noqa: E501


        :return: The max_concurrency of this DescribeSandboxResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_concurrency

    @max_concurrency.setter
    def max_concurrency(self, max_concurrency):
        """Sets the max_concurrency of this DescribeSandboxResponse.


        :param max_concurrency: The max_concurrency of this DescribeSandboxResponse.  # noqa: E501
        :type: int
        """

        self._max_concurrency = max_concurrency

    @property
    def memory_mb(self):
        """Gets the memory_mb of this DescribeSandboxResponse.  # noqa: E501


        :return: The memory_mb of this DescribeSandboxResponse.  # noqa: E501
        :rtype: int
        """
        return self._memory_mb

    @memory_mb.setter
    def memory_mb(self, memory_mb):
        """Sets the memory_mb of this DescribeSandboxResponse.


        :param memory_mb: The memory_mb of this DescribeSandboxResponse.  # noqa: E501
        :type: int
        """

        self._memory_mb = memory_mb

    @property
    def pending(self):
        """Gets the pending of this DescribeSandboxResponse.  # noqa: E501


        :return: The pending of this DescribeSandboxResponse.  # noqa: E501
        :rtype: bool
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this DescribeSandboxResponse.


        :param pending: The pending of this DescribeSandboxResponse.  # noqa: E501
        :type: bool
        """

        self._pending = pending

    @property
    def request_timeout(self):
        """Gets the request_timeout of this DescribeSandboxResponse.  # noqa: E501


        :return: The request_timeout of this DescribeSandboxResponse.  # noqa: E501
        :rtype: int
        """
        return self._request_timeout

    @request_timeout.setter
    def request_timeout(self, request_timeout):
        """Sets the request_timeout of this DescribeSandboxResponse.


        :param request_timeout: The request_timeout of this DescribeSandboxResponse.  # noqa: E501
        :type: int
        """

        self._request_timeout = request_timeout

    @property
    def revision_number(self):
        """Gets the revision_number of this DescribeSandboxResponse.  # noqa: E501


        :return: The revision_number of this DescribeSandboxResponse.  # noqa: E501
        :rtype: int
        """
        return self._revision_number

    @revision_number.setter
    def revision_number(self, revision_number):
        """Sets the revision_number of this DescribeSandboxResponse.


        :param revision_number: The revision_number of this DescribeSandboxResponse.  # noqa: E501
        :type: int
        """

        self._revision_number = revision_number

    @property
    def status(self):
        """Gets the status of this DescribeSandboxResponse.  # noqa: E501


        :return: The status of this DescribeSandboxResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DescribeSandboxResponse.


        :param status: The status of this DescribeSandboxResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DescribeSandboxResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DescribeSandboxResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DescribeSandboxResponse):
            return True

        return self.to_dict() != other.to_dict()
