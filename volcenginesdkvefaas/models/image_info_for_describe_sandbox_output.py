# coding: utf-8

"""
    vefaas

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ImageInfoForDescribeSandboxOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'command': 'str',
        'id': 'str',
        'image': 'str',
        'port': 'int'
    }

    attribute_map = {
        'command': 'Command',
        'id': 'Id',
        'image': 'Image',
        'port': 'Port'
    }

    def __init__(self, command=None, id=None, image=None, port=None, _configuration=None):  # noqa: E501
        """ImageInfoForDescribeSandboxOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._command = None
        self._id = None
        self._image = None
        self._port = None
        self.discriminator = None

        if command is not None:
            self.command = command
        if id is not None:
            self.id = id
        if image is not None:
            self.image = image
        if port is not None:
            self.port = port

    @property
    def command(self):
        """Gets the command of this ImageInfoForDescribeSandboxOutput.  # noqa: E501


        :return: The command of this ImageInfoForDescribeSandboxOutput.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this ImageInfoForDescribeSandboxOutput.


        :param command: The command of this ImageInfoForDescribeSandboxOutput.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def id(self):
        """Gets the id of this ImageInfoForDescribeSandboxOutput.  # noqa: E501


        :return: The id of this ImageInfoForDescribeSandboxOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImageInfoForDescribeSandboxOutput.


        :param id: The id of this ImageInfoForDescribeSandboxOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this ImageInfoForDescribeSandboxOutput.  # noqa: E501


        :return: The image of this ImageInfoForDescribeSandboxOutput.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ImageInfoForDescribeSandboxOutput.


        :param image: The image of this ImageInfoForDescribeSandboxOutput.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def port(self):
        """Gets the port of this ImageInfoForDescribeSandboxOutput.  # noqa: E501


        :return: The port of this ImageInfoForDescribeSandboxOutput.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ImageInfoForDescribeSandboxOutput.


        :param port: The port of this ImageInfoForDescribeSandboxOutput.  # noqa: E501
        :type: int
        """

        self._port = port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageInfoForDescribeSandboxOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageInfoForDescribeSandboxOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageInfoForDescribeSandboxOutput):
            return True

        return self.to_dict() != other.to_dict()
