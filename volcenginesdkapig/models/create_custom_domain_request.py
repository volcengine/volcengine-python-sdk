# coding: utf-8

"""
    apig

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateCustomDomainRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificate_id': 'str',
        'comments': 'str',
        'domain': 'str',
        'protocol': 'list[str]',
        'ssl_redirect': 'bool',
        'service_id': 'str'
    }

    attribute_map = {
        'certificate_id': 'CertificateId',
        'comments': 'Comments',
        'domain': 'Domain',
        'protocol': 'Protocol',
        'ssl_redirect': 'SSLRedirect',
        'service_id': 'ServiceId'
    }

    def __init__(self, certificate_id=None, comments=None, domain=None, protocol=None, ssl_redirect=None, service_id=None, _configuration=None):  # noqa: E501
        """CreateCustomDomainRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._certificate_id = None
        self._comments = None
        self._domain = None
        self._protocol = None
        self._ssl_redirect = None
        self._service_id = None
        self.discriminator = None

        if certificate_id is not None:
            self.certificate_id = certificate_id
        if comments is not None:
            self.comments = comments
        self.domain = domain
        if protocol is not None:
            self.protocol = protocol
        if ssl_redirect is not None:
            self.ssl_redirect = ssl_redirect
        self.service_id = service_id

    @property
    def certificate_id(self):
        """Gets the certificate_id of this CreateCustomDomainRequest.  # noqa: E501


        :return: The certificate_id of this CreateCustomDomainRequest.  # noqa: E501
        :rtype: str
        """
        return self._certificate_id

    @certificate_id.setter
    def certificate_id(self, certificate_id):
        """Sets the certificate_id of this CreateCustomDomainRequest.


        :param certificate_id: The certificate_id of this CreateCustomDomainRequest.  # noqa: E501
        :type: str
        """

        self._certificate_id = certificate_id

    @property
    def comments(self):
        """Gets the comments of this CreateCustomDomainRequest.  # noqa: E501


        :return: The comments of this CreateCustomDomainRequest.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this CreateCustomDomainRequest.


        :param comments: The comments of this CreateCustomDomainRequest.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def domain(self):
        """Gets the domain of this CreateCustomDomainRequest.  # noqa: E501


        :return: The domain of this CreateCustomDomainRequest.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CreateCustomDomainRequest.


        :param domain: The domain of this CreateCustomDomainRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def protocol(self):
        """Gets the protocol of this CreateCustomDomainRequest.  # noqa: E501


        :return: The protocol of this CreateCustomDomainRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this CreateCustomDomainRequest.


        :param protocol: The protocol of this CreateCustomDomainRequest.  # noqa: E501
        :type: list[str]
        """

        self._protocol = protocol

    @property
    def ssl_redirect(self):
        """Gets the ssl_redirect of this CreateCustomDomainRequest.  # noqa: E501


        :return: The ssl_redirect of this CreateCustomDomainRequest.  # noqa: E501
        :rtype: bool
        """
        return self._ssl_redirect

    @ssl_redirect.setter
    def ssl_redirect(self, ssl_redirect):
        """Sets the ssl_redirect of this CreateCustomDomainRequest.


        :param ssl_redirect: The ssl_redirect of this CreateCustomDomainRequest.  # noqa: E501
        :type: bool
        """

        self._ssl_redirect = ssl_redirect

    @property
    def service_id(self):
        """Gets the service_id of this CreateCustomDomainRequest.  # noqa: E501


        :return: The service_id of this CreateCustomDomainRequest.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this CreateCustomDomainRequest.


        :param service_id: The service_id of this CreateCustomDomainRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")  # noqa: E501

        self._service_id = service_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateCustomDomainRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCustomDomainRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateCustomDomainRequest):
            return True

        return self.to_dict() != other.to_dict()
