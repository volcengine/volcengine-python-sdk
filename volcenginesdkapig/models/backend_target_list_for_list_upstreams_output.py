# coding: utf-8

"""
    apig

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class BackendTargetListForListUpstreamsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'health_status': 'str',
        'ip': 'str',
        'port': 'int'
    }

    attribute_map = {
        'health_status': 'HealthStatus',
        'ip': 'IP',
        'port': 'Port'
    }

    def __init__(self, health_status=None, ip=None, port=None, _configuration=None):  # noqa: E501
        """BackendTargetListForListUpstreamsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._health_status = None
        self._ip = None
        self._port = None
        self.discriminator = None

        if health_status is not None:
            self.health_status = health_status
        if ip is not None:
            self.ip = ip
        if port is not None:
            self.port = port

    @property
    def health_status(self):
        """Gets the health_status of this BackendTargetListForListUpstreamsOutput.  # noqa: E501


        :return: The health_status of this BackendTargetListForListUpstreamsOutput.  # noqa: E501
        :rtype: str
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this BackendTargetListForListUpstreamsOutput.


        :param health_status: The health_status of this BackendTargetListForListUpstreamsOutput.  # noqa: E501
        :type: str
        """

        self._health_status = health_status

    @property
    def ip(self):
        """Gets the ip of this BackendTargetListForListUpstreamsOutput.  # noqa: E501


        :return: The ip of this BackendTargetListForListUpstreamsOutput.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this BackendTargetListForListUpstreamsOutput.


        :param ip: The ip of this BackendTargetListForListUpstreamsOutput.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def port(self):
        """Gets the port of this BackendTargetListForListUpstreamsOutput.  # noqa: E501


        :return: The port of this BackendTargetListForListUpstreamsOutput.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this BackendTargetListForListUpstreamsOutput.


        :param port: The port of this BackendTargetListForListUpstreamsOutput.  # noqa: E501
        :type: int
        """

        self._port = port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BackendTargetListForListUpstreamsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackendTargetListForListUpstreamsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BackendTargetListForListUpstreamsOutput):
            return True

        return self.to_dict() != other.to_dict()
