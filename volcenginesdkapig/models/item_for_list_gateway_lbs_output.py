# coding: utf-8

"""
    apig

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ItemForListGatewayLBsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip_list': 'list[IPListForListGatewayLBsOutput]',
        'imported_clb_spec': 'ImportedCLBSpecForListGatewayLBsOutput',
        'load_balancer_id': 'str',
        'message': 'str',
        'ports': 'list[PortForListGatewayLBsOutput]',
        'source_type': 'str',
        'status': 'str',
        'type': 'str'
    }

    attribute_map = {
        'ip_list': 'IPList',
        'imported_clb_spec': 'ImportedCLBSpec',
        'load_balancer_id': 'LoadBalancerId',
        'message': 'Message',
        'ports': 'Ports',
        'source_type': 'SourceType',
        'status': 'Status',
        'type': 'Type'
    }

    def __init__(self, ip_list=None, imported_clb_spec=None, load_balancer_id=None, message=None, ports=None, source_type=None, status=None, type=None, _configuration=None):  # noqa: E501
        """ItemForListGatewayLBsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ip_list = None
        self._imported_clb_spec = None
        self._load_balancer_id = None
        self._message = None
        self._ports = None
        self._source_type = None
        self._status = None
        self._type = None
        self.discriminator = None

        if ip_list is not None:
            self.ip_list = ip_list
        if imported_clb_spec is not None:
            self.imported_clb_spec = imported_clb_spec
        if load_balancer_id is not None:
            self.load_balancer_id = load_balancer_id
        if message is not None:
            self.message = message
        if ports is not None:
            self.ports = ports
        if source_type is not None:
            self.source_type = source_type
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type

    @property
    def ip_list(self):
        """Gets the ip_list of this ItemForListGatewayLBsOutput.  # noqa: E501


        :return: The ip_list of this ItemForListGatewayLBsOutput.  # noqa: E501
        :rtype: list[IPListForListGatewayLBsOutput]
        """
        return self._ip_list

    @ip_list.setter
    def ip_list(self, ip_list):
        """Sets the ip_list of this ItemForListGatewayLBsOutput.


        :param ip_list: The ip_list of this ItemForListGatewayLBsOutput.  # noqa: E501
        :type: list[IPListForListGatewayLBsOutput]
        """

        self._ip_list = ip_list

    @property
    def imported_clb_spec(self):
        """Gets the imported_clb_spec of this ItemForListGatewayLBsOutput.  # noqa: E501


        :return: The imported_clb_spec of this ItemForListGatewayLBsOutput.  # noqa: E501
        :rtype: ImportedCLBSpecForListGatewayLBsOutput
        """
        return self._imported_clb_spec

    @imported_clb_spec.setter
    def imported_clb_spec(self, imported_clb_spec):
        """Sets the imported_clb_spec of this ItemForListGatewayLBsOutput.


        :param imported_clb_spec: The imported_clb_spec of this ItemForListGatewayLBsOutput.  # noqa: E501
        :type: ImportedCLBSpecForListGatewayLBsOutput
        """

        self._imported_clb_spec = imported_clb_spec

    @property
    def load_balancer_id(self):
        """Gets the load_balancer_id of this ItemForListGatewayLBsOutput.  # noqa: E501


        :return: The load_balancer_id of this ItemForListGatewayLBsOutput.  # noqa: E501
        :rtype: str
        """
        return self._load_balancer_id

    @load_balancer_id.setter
    def load_balancer_id(self, load_balancer_id):
        """Sets the load_balancer_id of this ItemForListGatewayLBsOutput.


        :param load_balancer_id: The load_balancer_id of this ItemForListGatewayLBsOutput.  # noqa: E501
        :type: str
        """

        self._load_balancer_id = load_balancer_id

    @property
    def message(self):
        """Gets the message of this ItemForListGatewayLBsOutput.  # noqa: E501


        :return: The message of this ItemForListGatewayLBsOutput.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ItemForListGatewayLBsOutput.


        :param message: The message of this ItemForListGatewayLBsOutput.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def ports(self):
        """Gets the ports of this ItemForListGatewayLBsOutput.  # noqa: E501


        :return: The ports of this ItemForListGatewayLBsOutput.  # noqa: E501
        :rtype: list[PortForListGatewayLBsOutput]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this ItemForListGatewayLBsOutput.


        :param ports: The ports of this ItemForListGatewayLBsOutput.  # noqa: E501
        :type: list[PortForListGatewayLBsOutput]
        """

        self._ports = ports

    @property
    def source_type(self):
        """Gets the source_type of this ItemForListGatewayLBsOutput.  # noqa: E501


        :return: The source_type of this ItemForListGatewayLBsOutput.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this ItemForListGatewayLBsOutput.


        :param source_type: The source_type of this ItemForListGatewayLBsOutput.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    @property
    def status(self):
        """Gets the status of this ItemForListGatewayLBsOutput.  # noqa: E501


        :return: The status of this ItemForListGatewayLBsOutput.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ItemForListGatewayLBsOutput.


        :param status: The status of this ItemForListGatewayLBsOutput.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this ItemForListGatewayLBsOutput.  # noqa: E501


        :return: The type of this ItemForListGatewayLBsOutput.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ItemForListGatewayLBsOutput.


        :param type: The type of this ItemForListGatewayLBsOutput.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemForListGatewayLBsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemForListGatewayLBsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemForListGatewayLBsOutput):
            return True

        return self.to_dict() != other.to_dict()
