# coding: utf-8

"""
    graph

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class TabletServerInfoForListTabletServerOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addr': 'str',
        'idc': 'str',
        'schedule_state': 'str',
        'state': 'str',
        'tablet_manager_addr': 'str'
    }

    attribute_map = {
        'addr': 'Addr',
        'idc': 'Idc',
        'schedule_state': 'ScheduleState',
        'state': 'State',
        'tablet_manager_addr': 'TabletManagerAddr'
    }

    def __init__(self, addr=None, idc=None, schedule_state=None, state=None, tablet_manager_addr=None, _configuration=None):  # noqa: E501
        """TabletServerInfoForListTabletServerOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._addr = None
        self._idc = None
        self._schedule_state = None
        self._state = None
        self._tablet_manager_addr = None
        self.discriminator = None

        if addr is not None:
            self.addr = addr
        if idc is not None:
            self.idc = idc
        if schedule_state is not None:
            self.schedule_state = schedule_state
        if state is not None:
            self.state = state
        if tablet_manager_addr is not None:
            self.tablet_manager_addr = tablet_manager_addr

    @property
    def addr(self):
        """Gets the addr of this TabletServerInfoForListTabletServerOutput.  # noqa: E501


        :return: The addr of this TabletServerInfoForListTabletServerOutput.  # noqa: E501
        :rtype: str
        """
        return self._addr

    @addr.setter
    def addr(self, addr):
        """Sets the addr of this TabletServerInfoForListTabletServerOutput.


        :param addr: The addr of this TabletServerInfoForListTabletServerOutput.  # noqa: E501
        :type: str
        """

        self._addr = addr

    @property
    def idc(self):
        """Gets the idc of this TabletServerInfoForListTabletServerOutput.  # noqa: E501


        :return: The idc of this TabletServerInfoForListTabletServerOutput.  # noqa: E501
        :rtype: str
        """
        return self._idc

    @idc.setter
    def idc(self, idc):
        """Sets the idc of this TabletServerInfoForListTabletServerOutput.


        :param idc: The idc of this TabletServerInfoForListTabletServerOutput.  # noqa: E501
        :type: str
        """

        self._idc = idc

    @property
    def schedule_state(self):
        """Gets the schedule_state of this TabletServerInfoForListTabletServerOutput.  # noqa: E501


        :return: The schedule_state of this TabletServerInfoForListTabletServerOutput.  # noqa: E501
        :rtype: str
        """
        return self._schedule_state

    @schedule_state.setter
    def schedule_state(self, schedule_state):
        """Sets the schedule_state of this TabletServerInfoForListTabletServerOutput.


        :param schedule_state: The schedule_state of this TabletServerInfoForListTabletServerOutput.  # noqa: E501
        :type: str
        """

        self._schedule_state = schedule_state

    @property
    def state(self):
        """Gets the state of this TabletServerInfoForListTabletServerOutput.  # noqa: E501


        :return: The state of this TabletServerInfoForListTabletServerOutput.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TabletServerInfoForListTabletServerOutput.


        :param state: The state of this TabletServerInfoForListTabletServerOutput.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def tablet_manager_addr(self):
        """Gets the tablet_manager_addr of this TabletServerInfoForListTabletServerOutput.  # noqa: E501


        :return: The tablet_manager_addr of this TabletServerInfoForListTabletServerOutput.  # noqa: E501
        :rtype: str
        """
        return self._tablet_manager_addr

    @tablet_manager_addr.setter
    def tablet_manager_addr(self, tablet_manager_addr):
        """Sets the tablet_manager_addr of this TabletServerInfoForListTabletServerOutput.


        :param tablet_manager_addr: The tablet_manager_addr of this TabletServerInfoForListTabletServerOutput.  # noqa: E501
        :type: str
        """

        self._tablet_manager_addr = tablet_manager_addr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TabletServerInfoForListTabletServerOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TabletServerInfoForListTabletServerOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TabletServerInfoForListTabletServerOutput):
            return True

        return self.to_dict() != other.to_dict()
