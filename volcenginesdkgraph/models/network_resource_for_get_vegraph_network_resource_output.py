# coding: utf-8

"""
    graph

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class NetworkResourceForGetVegraphNetworkResourceOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_type': 'str',
        'az': 'str',
        'id': 'int',
        'instance_id': 'str',
        'ip_version_type': 'str',
        'lbid': 'str',
        'region': 'str',
        'resource_name': 'str',
        'subnet_id': 'str',
        'vip_v4': 'str',
        'vip_v6': 'str',
        'network_type': 'str'
    }

    attribute_map = {
        'address_type': 'AddressType',
        'az': 'Az',
        'id': 'Id',
        'instance_id': 'InstanceId',
        'ip_version_type': 'IpVersionType',
        'lbid': 'LBId',
        'region': 'Region',
        'resource_name': 'ResourceName',
        'subnet_id': 'SubnetId',
        'vip_v4': 'VipV4',
        'vip_v6': 'VipV6',
        'network_type': 'networkType'
    }

    def __init__(self, address_type=None, az=None, id=None, instance_id=None, ip_version_type=None, lbid=None, region=None, resource_name=None, subnet_id=None, vip_v4=None, vip_v6=None, network_type=None, _configuration=None):  # noqa: E501
        """NetworkResourceForGetVegraphNetworkResourceOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address_type = None
        self._az = None
        self._id = None
        self._instance_id = None
        self._ip_version_type = None
        self._lbid = None
        self._region = None
        self._resource_name = None
        self._subnet_id = None
        self._vip_v4 = None
        self._vip_v6 = None
        self._network_type = None
        self.discriminator = None

        if address_type is not None:
            self.address_type = address_type
        if az is not None:
            self.az = az
        if id is not None:
            self.id = id
        if instance_id is not None:
            self.instance_id = instance_id
        if ip_version_type is not None:
            self.ip_version_type = ip_version_type
        if lbid is not None:
            self.lbid = lbid
        if region is not None:
            self.region = region
        if resource_name is not None:
            self.resource_name = resource_name
        if subnet_id is not None:
            self.subnet_id = subnet_id
        if vip_v4 is not None:
            self.vip_v4 = vip_v4
        if vip_v6 is not None:
            self.vip_v6 = vip_v6
        if network_type is not None:
            self.network_type = network_type

    @property
    def address_type(self):
        """Gets the address_type of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501


        :return: The address_type of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :rtype: str
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """Sets the address_type of this NetworkResourceForGetVegraphNetworkResourceOutput.


        :param address_type: The address_type of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :type: str
        """

        self._address_type = address_type

    @property
    def az(self):
        """Gets the az of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501


        :return: The az of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :rtype: str
        """
        return self._az

    @az.setter
    def az(self, az):
        """Sets the az of this NetworkResourceForGetVegraphNetworkResourceOutput.


        :param az: The az of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :type: str
        """

        self._az = az

    @property
    def id(self):
        """Gets the id of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501


        :return: The id of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NetworkResourceForGetVegraphNetworkResourceOutput.


        :param id: The id of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def instance_id(self):
        """Gets the instance_id of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501


        :return: The instance_id of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this NetworkResourceForGetVegraphNetworkResourceOutput.


        :param instance_id: The instance_id of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def ip_version_type(self):
        """Gets the ip_version_type of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501


        :return: The ip_version_type of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :rtype: str
        """
        return self._ip_version_type

    @ip_version_type.setter
    def ip_version_type(self, ip_version_type):
        """Sets the ip_version_type of this NetworkResourceForGetVegraphNetworkResourceOutput.


        :param ip_version_type: The ip_version_type of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :type: str
        """

        self._ip_version_type = ip_version_type

    @property
    def lbid(self):
        """Gets the lbid of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501


        :return: The lbid of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :rtype: str
        """
        return self._lbid

    @lbid.setter
    def lbid(self, lbid):
        """Sets the lbid of this NetworkResourceForGetVegraphNetworkResourceOutput.


        :param lbid: The lbid of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :type: str
        """

        self._lbid = lbid

    @property
    def region(self):
        """Gets the region of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501


        :return: The region of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this NetworkResourceForGetVegraphNetworkResourceOutput.


        :param region: The region of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def resource_name(self):
        """Gets the resource_name of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501


        :return: The resource_name of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this NetworkResourceForGetVegraphNetworkResourceOutput.


        :param resource_name: The resource_name of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def subnet_id(self):
        """Gets the subnet_id of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501


        :return: The subnet_id of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this NetworkResourceForGetVegraphNetworkResourceOutput.


        :param subnet_id: The subnet_id of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :type: str
        """

        self._subnet_id = subnet_id

    @property
    def vip_v4(self):
        """Gets the vip_v4 of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501


        :return: The vip_v4 of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :rtype: str
        """
        return self._vip_v4

    @vip_v4.setter
    def vip_v4(self, vip_v4):
        """Sets the vip_v4 of this NetworkResourceForGetVegraphNetworkResourceOutput.


        :param vip_v4: The vip_v4 of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :type: str
        """

        self._vip_v4 = vip_v4

    @property
    def vip_v6(self):
        """Gets the vip_v6 of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501


        :return: The vip_v6 of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :rtype: str
        """
        return self._vip_v6

    @vip_v6.setter
    def vip_v6(self, vip_v6):
        """Sets the vip_v6 of this NetworkResourceForGetVegraphNetworkResourceOutput.


        :param vip_v6: The vip_v6 of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :type: str
        """

        self._vip_v6 = vip_v6

    @property
    def network_type(self):
        """Gets the network_type of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501


        :return: The network_type of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type):
        """Sets the network_type of this NetworkResourceForGetVegraphNetworkResourceOutput.


        :param network_type: The network_type of this NetworkResourceForGetVegraphNetworkResourceOutput.  # noqa: E501
        :type: str
        """

        self._network_type = network_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkResourceForGetVegraphNetworkResourceOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkResourceForGetVegraphNetworkResourceOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkResourceForGetVegraphNetworkResourceOutput):
            return True

        return self.to_dict() != other.to_dict()
