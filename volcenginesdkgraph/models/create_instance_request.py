# coding: utf-8

"""
    graph

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateInstanceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_token': 'str',
        'deletion_protection': 'str',
        'info': 'InfoForCreateInstanceInput',
        'instance_tags': 'list[InstanceTagForCreateInstanceInput]',
        'network_descriptions': 'list[NetworkDescriptionForCreateInstanceInput]',
        'one_step': 'bool',
        'version_set_id': 'int'
    }

    attribute_map = {
        'client_token': 'ClientToken',
        'deletion_protection': 'DeletionProtection',
        'info': 'Info',
        'instance_tags': 'InstanceTags',
        'network_descriptions': 'NetworkDescriptions',
        'one_step': 'OneStep',
        'version_set_id': 'VersionSetId'
    }

    def __init__(self, client_token=None, deletion_protection=None, info=None, instance_tags=None, network_descriptions=None, one_step=None, version_set_id=None, _configuration=None):  # noqa: E501
        """CreateInstanceRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._client_token = None
        self._deletion_protection = None
        self._info = None
        self._instance_tags = None
        self._network_descriptions = None
        self._one_step = None
        self._version_set_id = None
        self.discriminator = None

        if client_token is not None:
            self.client_token = client_token
        if deletion_protection is not None:
            self.deletion_protection = deletion_protection
        if info is not None:
            self.info = info
        if instance_tags is not None:
            self.instance_tags = instance_tags
        if network_descriptions is not None:
            self.network_descriptions = network_descriptions
        if one_step is not None:
            self.one_step = one_step
        if version_set_id is not None:
            self.version_set_id = version_set_id

    @property
    def client_token(self):
        """Gets the client_token of this CreateInstanceRequest.  # noqa: E501


        :return: The client_token of this CreateInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateInstanceRequest.


        :param client_token: The client_token of this CreateInstanceRequest.  # noqa: E501
        :type: str
        """

        self._client_token = client_token

    @property
    def deletion_protection(self):
        """Gets the deletion_protection of this CreateInstanceRequest.  # noqa: E501


        :return: The deletion_protection of this CreateInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._deletion_protection

    @deletion_protection.setter
    def deletion_protection(self, deletion_protection):
        """Sets the deletion_protection of this CreateInstanceRequest.


        :param deletion_protection: The deletion_protection of this CreateInstanceRequest.  # noqa: E501
        :type: str
        """

        self._deletion_protection = deletion_protection

    @property
    def info(self):
        """Gets the info of this CreateInstanceRequest.  # noqa: E501


        :return: The info of this CreateInstanceRequest.  # noqa: E501
        :rtype: InfoForCreateInstanceInput
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this CreateInstanceRequest.


        :param info: The info of this CreateInstanceRequest.  # noqa: E501
        :type: InfoForCreateInstanceInput
        """

        self._info = info

    @property
    def instance_tags(self):
        """Gets the instance_tags of this CreateInstanceRequest.  # noqa: E501


        :return: The instance_tags of this CreateInstanceRequest.  # noqa: E501
        :rtype: list[InstanceTagForCreateInstanceInput]
        """
        return self._instance_tags

    @instance_tags.setter
    def instance_tags(self, instance_tags):
        """Sets the instance_tags of this CreateInstanceRequest.


        :param instance_tags: The instance_tags of this CreateInstanceRequest.  # noqa: E501
        :type: list[InstanceTagForCreateInstanceInput]
        """

        self._instance_tags = instance_tags

    @property
    def network_descriptions(self):
        """Gets the network_descriptions of this CreateInstanceRequest.  # noqa: E501


        :return: The network_descriptions of this CreateInstanceRequest.  # noqa: E501
        :rtype: list[NetworkDescriptionForCreateInstanceInput]
        """
        return self._network_descriptions

    @network_descriptions.setter
    def network_descriptions(self, network_descriptions):
        """Sets the network_descriptions of this CreateInstanceRequest.


        :param network_descriptions: The network_descriptions of this CreateInstanceRequest.  # noqa: E501
        :type: list[NetworkDescriptionForCreateInstanceInput]
        """

        self._network_descriptions = network_descriptions

    @property
    def one_step(self):
        """Gets the one_step of this CreateInstanceRequest.  # noqa: E501


        :return: The one_step of this CreateInstanceRequest.  # noqa: E501
        :rtype: bool
        """
        return self._one_step

    @one_step.setter
    def one_step(self, one_step):
        """Sets the one_step of this CreateInstanceRequest.


        :param one_step: The one_step of this CreateInstanceRequest.  # noqa: E501
        :type: bool
        """

        self._one_step = one_step

    @property
    def version_set_id(self):
        """Gets the version_set_id of this CreateInstanceRequest.  # noqa: E501


        :return: The version_set_id of this CreateInstanceRequest.  # noqa: E501
        :rtype: int
        """
        return self._version_set_id

    @version_set_id.setter
    def version_set_id(self, version_set_id):
        """Sets the version_set_id of this CreateInstanceRequest.


        :param version_set_id: The version_set_id of this CreateInstanceRequest.  # noqa: E501
        :type: int
        """

        self._version_set_id = version_set_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateInstanceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateInstanceRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateInstanceRequest):
            return True

        return self.to_dict() != other.to_dict()
