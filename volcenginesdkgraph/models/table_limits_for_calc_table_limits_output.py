# coding: utf-8

"""
    graph

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class TableLimitsForCalcTableLimitsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'iops_limit': 'IopsLimitForCalcTableLimitsOutput',
        'raw_vdc_replica_num_range': 'str',
        'read_bandwidth_limit_in_bytes': 'ReadBandwidthLimitInBytesForCalcTableLimitsOutput',
        'storage_capacity_limit_in_bytes': 'StorageCapacityLimitInBytesForCalcTableLimitsOutput',
        'tablet_num_range': 'TabletNumRangeForCalcTableLimitsOutput',
        'vdcs': 'list[str]',
        'write_bandwidth_limit_in_bytes': 'WriteBandwidthLimitInBytesForCalcTableLimitsOutput'
    }

    attribute_map = {
        'iops_limit': 'iops_limit',
        'raw_vdc_replica_num_range': 'raw_vdc_replica_num_range',
        'read_bandwidth_limit_in_bytes': 'read_bandwidth_limit_in_bytes',
        'storage_capacity_limit_in_bytes': 'storage_capacity_limit_in_bytes',
        'tablet_num_range': 'tablet_num_range',
        'vdcs': 'vdcs',
        'write_bandwidth_limit_in_bytes': 'write_bandwidth_limit_in_bytes'
    }

    def __init__(self, iops_limit=None, raw_vdc_replica_num_range=None, read_bandwidth_limit_in_bytes=None, storage_capacity_limit_in_bytes=None, tablet_num_range=None, vdcs=None, write_bandwidth_limit_in_bytes=None, _configuration=None):  # noqa: E501
        """TableLimitsForCalcTableLimitsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._iops_limit = None
        self._raw_vdc_replica_num_range = None
        self._read_bandwidth_limit_in_bytes = None
        self._storage_capacity_limit_in_bytes = None
        self._tablet_num_range = None
        self._vdcs = None
        self._write_bandwidth_limit_in_bytes = None
        self.discriminator = None

        if iops_limit is not None:
            self.iops_limit = iops_limit
        if raw_vdc_replica_num_range is not None:
            self.raw_vdc_replica_num_range = raw_vdc_replica_num_range
        if read_bandwidth_limit_in_bytes is not None:
            self.read_bandwidth_limit_in_bytes = read_bandwidth_limit_in_bytes
        if storage_capacity_limit_in_bytes is not None:
            self.storage_capacity_limit_in_bytes = storage_capacity_limit_in_bytes
        if tablet_num_range is not None:
            self.tablet_num_range = tablet_num_range
        if vdcs is not None:
            self.vdcs = vdcs
        if write_bandwidth_limit_in_bytes is not None:
            self.write_bandwidth_limit_in_bytes = write_bandwidth_limit_in_bytes

    @property
    def iops_limit(self):
        """Gets the iops_limit of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501


        :return: The iops_limit of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501
        :rtype: IopsLimitForCalcTableLimitsOutput
        """
        return self._iops_limit

    @iops_limit.setter
    def iops_limit(self, iops_limit):
        """Sets the iops_limit of this TableLimitsForCalcTableLimitsOutput.


        :param iops_limit: The iops_limit of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501
        :type: IopsLimitForCalcTableLimitsOutput
        """

        self._iops_limit = iops_limit

    @property
    def raw_vdc_replica_num_range(self):
        """Gets the raw_vdc_replica_num_range of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501


        :return: The raw_vdc_replica_num_range of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501
        :rtype: str
        """
        return self._raw_vdc_replica_num_range

    @raw_vdc_replica_num_range.setter
    def raw_vdc_replica_num_range(self, raw_vdc_replica_num_range):
        """Sets the raw_vdc_replica_num_range of this TableLimitsForCalcTableLimitsOutput.


        :param raw_vdc_replica_num_range: The raw_vdc_replica_num_range of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501
        :type: str
        """

        self._raw_vdc_replica_num_range = raw_vdc_replica_num_range

    @property
    def read_bandwidth_limit_in_bytes(self):
        """Gets the read_bandwidth_limit_in_bytes of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501


        :return: The read_bandwidth_limit_in_bytes of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501
        :rtype: ReadBandwidthLimitInBytesForCalcTableLimitsOutput
        """
        return self._read_bandwidth_limit_in_bytes

    @read_bandwidth_limit_in_bytes.setter
    def read_bandwidth_limit_in_bytes(self, read_bandwidth_limit_in_bytes):
        """Sets the read_bandwidth_limit_in_bytes of this TableLimitsForCalcTableLimitsOutput.


        :param read_bandwidth_limit_in_bytes: The read_bandwidth_limit_in_bytes of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501
        :type: ReadBandwidthLimitInBytesForCalcTableLimitsOutput
        """

        self._read_bandwidth_limit_in_bytes = read_bandwidth_limit_in_bytes

    @property
    def storage_capacity_limit_in_bytes(self):
        """Gets the storage_capacity_limit_in_bytes of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501


        :return: The storage_capacity_limit_in_bytes of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501
        :rtype: StorageCapacityLimitInBytesForCalcTableLimitsOutput
        """
        return self._storage_capacity_limit_in_bytes

    @storage_capacity_limit_in_bytes.setter
    def storage_capacity_limit_in_bytes(self, storage_capacity_limit_in_bytes):
        """Sets the storage_capacity_limit_in_bytes of this TableLimitsForCalcTableLimitsOutput.


        :param storage_capacity_limit_in_bytes: The storage_capacity_limit_in_bytes of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501
        :type: StorageCapacityLimitInBytesForCalcTableLimitsOutput
        """

        self._storage_capacity_limit_in_bytes = storage_capacity_limit_in_bytes

    @property
    def tablet_num_range(self):
        """Gets the tablet_num_range of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501


        :return: The tablet_num_range of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501
        :rtype: TabletNumRangeForCalcTableLimitsOutput
        """
        return self._tablet_num_range

    @tablet_num_range.setter
    def tablet_num_range(self, tablet_num_range):
        """Sets the tablet_num_range of this TableLimitsForCalcTableLimitsOutput.


        :param tablet_num_range: The tablet_num_range of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501
        :type: TabletNumRangeForCalcTableLimitsOutput
        """

        self._tablet_num_range = tablet_num_range

    @property
    def vdcs(self):
        """Gets the vdcs of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501


        :return: The vdcs of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._vdcs

    @vdcs.setter
    def vdcs(self, vdcs):
        """Sets the vdcs of this TableLimitsForCalcTableLimitsOutput.


        :param vdcs: The vdcs of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501
        :type: list[str]
        """

        self._vdcs = vdcs

    @property
    def write_bandwidth_limit_in_bytes(self):
        """Gets the write_bandwidth_limit_in_bytes of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501


        :return: The write_bandwidth_limit_in_bytes of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501
        :rtype: WriteBandwidthLimitInBytesForCalcTableLimitsOutput
        """
        return self._write_bandwidth_limit_in_bytes

    @write_bandwidth_limit_in_bytes.setter
    def write_bandwidth_limit_in_bytes(self, write_bandwidth_limit_in_bytes):
        """Sets the write_bandwidth_limit_in_bytes of this TableLimitsForCalcTableLimitsOutput.


        :param write_bandwidth_limit_in_bytes: The write_bandwidth_limit_in_bytes of this TableLimitsForCalcTableLimitsOutput.  # noqa: E501
        :type: WriteBandwidthLimitInBytesForCalcTableLimitsOutput
        """

        self._write_bandwidth_limit_in_bytes = write_bandwidth_limit_in_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableLimitsForCalcTableLimitsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableLimitsForCalcTableLimitsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TableLimitsForCalcTableLimitsOutput):
            return True

        return self.to_dict() != other.to_dict()
