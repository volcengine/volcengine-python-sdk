# coding: utf-8

"""
    graph

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class TableConfigForGetTableConfigOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable_rotate': 'bool',
        'enable_transaction': 'bool',
        'rotate_size': 'int'
    }

    attribute_map = {
        'enable_rotate': 'enable_rotate',
        'enable_transaction': 'enable_transaction',
        'rotate_size': 'rotate_size'
    }

    def __init__(self, enable_rotate=None, enable_transaction=None, rotate_size=None, _configuration=None):  # noqa: E501
        """TableConfigForGetTableConfigOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enable_rotate = None
        self._enable_transaction = None
        self._rotate_size = None
        self.discriminator = None

        if enable_rotate is not None:
            self.enable_rotate = enable_rotate
        if enable_transaction is not None:
            self.enable_transaction = enable_transaction
        if rotate_size is not None:
            self.rotate_size = rotate_size

    @property
    def enable_rotate(self):
        """Gets the enable_rotate of this TableConfigForGetTableConfigOutput.  # noqa: E501


        :return: The enable_rotate of this TableConfigForGetTableConfigOutput.  # noqa: E501
        :rtype: bool
        """
        return self._enable_rotate

    @enable_rotate.setter
    def enable_rotate(self, enable_rotate):
        """Sets the enable_rotate of this TableConfigForGetTableConfigOutput.


        :param enable_rotate: The enable_rotate of this TableConfigForGetTableConfigOutput.  # noqa: E501
        :type: bool
        """

        self._enable_rotate = enable_rotate

    @property
    def enable_transaction(self):
        """Gets the enable_transaction of this TableConfigForGetTableConfigOutput.  # noqa: E501


        :return: The enable_transaction of this TableConfigForGetTableConfigOutput.  # noqa: E501
        :rtype: bool
        """
        return self._enable_transaction

    @enable_transaction.setter
    def enable_transaction(self, enable_transaction):
        """Sets the enable_transaction of this TableConfigForGetTableConfigOutput.


        :param enable_transaction: The enable_transaction of this TableConfigForGetTableConfigOutput.  # noqa: E501
        :type: bool
        """

        self._enable_transaction = enable_transaction

    @property
    def rotate_size(self):
        """Gets the rotate_size of this TableConfigForGetTableConfigOutput.  # noqa: E501


        :return: The rotate_size of this TableConfigForGetTableConfigOutput.  # noqa: E501
        :rtype: int
        """
        return self._rotate_size

    @rotate_size.setter
    def rotate_size(self, rotate_size):
        """Sets the rotate_size of this TableConfigForGetTableConfigOutput.


        :param rotate_size: The rotate_size of this TableConfigForGetTableConfigOutput.  # noqa: E501
        :type: int
        """

        self._rotate_size = rotate_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableConfigForGetTableConfigOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableConfigForGetTableConfigOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TableConfigForGetTableConfigOutput):
            return True

        return self.to_dict() != other.to_dict()
