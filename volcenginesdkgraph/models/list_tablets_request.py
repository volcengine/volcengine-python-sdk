# coding: utf-8

"""
    graph

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ListTabletsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instance_id': 'str',
        'region': 'str',
        'request_tablet_server_addr': 'str',
        'return_partition_route_info': 'bool',
        'return_tablet_route_info': 'bool',
        'table_names': 'list[str]'
    }

    attribute_map = {
        'instance_id': 'InstanceId',
        'region': 'Region',
        'request_tablet_server_addr': 'RequestTabletServerAddr',
        'return_partition_route_info': 'ReturnPartitionRouteInfo',
        'return_tablet_route_info': 'ReturnTabletRouteInfo',
        'table_names': 'TableNames'
    }

    def __init__(self, instance_id=None, region=None, request_tablet_server_addr=None, return_partition_route_info=None, return_tablet_route_info=None, table_names=None, _configuration=None):  # noqa: E501
        """ListTabletsRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._instance_id = None
        self._region = None
        self._request_tablet_server_addr = None
        self._return_partition_route_info = None
        self._return_tablet_route_info = None
        self._table_names = None
        self.discriminator = None

        self.instance_id = instance_id
        if region is not None:
            self.region = region
        if request_tablet_server_addr is not None:
            self.request_tablet_server_addr = request_tablet_server_addr
        if return_partition_route_info is not None:
            self.return_partition_route_info = return_partition_route_info
        if return_tablet_route_info is not None:
            self.return_tablet_route_info = return_tablet_route_info
        if table_names is not None:
            self.table_names = table_names

    @property
    def instance_id(self):
        """Gets the instance_id of this ListTabletsRequest.  # noqa: E501


        :return: The instance_id of this ListTabletsRequest.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this ListTabletsRequest.


        :param instance_id: The instance_id of this ListTabletsRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def region(self):
        """Gets the region of this ListTabletsRequest.  # noqa: E501


        :return: The region of this ListTabletsRequest.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ListTabletsRequest.


        :param region: The region of this ListTabletsRequest.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def request_tablet_server_addr(self):
        """Gets the request_tablet_server_addr of this ListTabletsRequest.  # noqa: E501


        :return: The request_tablet_server_addr of this ListTabletsRequest.  # noqa: E501
        :rtype: str
        """
        return self._request_tablet_server_addr

    @request_tablet_server_addr.setter
    def request_tablet_server_addr(self, request_tablet_server_addr):
        """Sets the request_tablet_server_addr of this ListTabletsRequest.


        :param request_tablet_server_addr: The request_tablet_server_addr of this ListTabletsRequest.  # noqa: E501
        :type: str
        """

        self._request_tablet_server_addr = request_tablet_server_addr

    @property
    def return_partition_route_info(self):
        """Gets the return_partition_route_info of this ListTabletsRequest.  # noqa: E501


        :return: The return_partition_route_info of this ListTabletsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._return_partition_route_info

    @return_partition_route_info.setter
    def return_partition_route_info(self, return_partition_route_info):
        """Sets the return_partition_route_info of this ListTabletsRequest.


        :param return_partition_route_info: The return_partition_route_info of this ListTabletsRequest.  # noqa: E501
        :type: bool
        """

        self._return_partition_route_info = return_partition_route_info

    @property
    def return_tablet_route_info(self):
        """Gets the return_tablet_route_info of this ListTabletsRequest.  # noqa: E501


        :return: The return_tablet_route_info of this ListTabletsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._return_tablet_route_info

    @return_tablet_route_info.setter
    def return_tablet_route_info(self, return_tablet_route_info):
        """Sets the return_tablet_route_info of this ListTabletsRequest.


        :param return_tablet_route_info: The return_tablet_route_info of this ListTabletsRequest.  # noqa: E501
        :type: bool
        """

        self._return_tablet_route_info = return_tablet_route_info

    @property
    def table_names(self):
        """Gets the table_names of this ListTabletsRequest.  # noqa: E501


        :return: The table_names of this ListTabletsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._table_names

    @table_names.setter
    def table_names(self, table_names):
        """Sets the table_names of this ListTabletsRequest.


        :param table_names: The table_names of this ListTabletsRequest.  # noqa: E501
        :type: list[str]
        """

        self._table_names = table_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListTabletsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListTabletsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListTabletsRequest):
            return True

        return self.to_dict() != other.to_dict()
