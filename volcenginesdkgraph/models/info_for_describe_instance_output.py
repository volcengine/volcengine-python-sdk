# coding: utf-8

"""
    graph

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class InfoForDescribeInstanceOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'availability_zone_id': 'str',
        'availability_zones': 'list[AvailabilityZoneForDescribeInstanceOutput]',
        'bg3_link': 'str',
        'bg3_links': 'list[Bg3LinkForDescribeInstanceOutput]',
        'create_time': 'str',
        'creator': 'str',
        'deletion_protection': 'str',
        'disk_space': 'int',
        'disk_used': 'int',
        'expire_time': 'str',
        'graph_version': 'str',
        'id': 'str',
        'image_info': 'ImageInfoForDescribeInstanceOutput',
        'ins_spec': 'InsSpecForDescribeInstanceOutput',
        'k8s_domain': 'str',
        'maintenance_time': 'str',
        'mode': 'str',
        'name': 'str',
        'node_num': 'int',
        'project_name': 'str',
        'region_id': 'str',
        'status': 'str',
        'storage_info': 'StorageInfoForDescribeInstanceOutput',
        'subnet_id': 'str',
        'subnet_name': 'str',
        'tags': 'list[TagForDescribeInstanceOutput]',
        'trade_no': 'str',
        'vpc_id': 'str',
        'vpc_name': 'str'
    }

    attribute_map = {
        'availability_zone_id': 'AvailabilityZoneId',
        'availability_zones': 'AvailabilityZones',
        'bg3_link': 'Bg3Link',
        'bg3_links': 'Bg3Links',
        'create_time': 'CreateTime',
        'creator': 'Creator',
        'deletion_protection': 'DeletionProtection',
        'disk_space': 'DiskSpace',
        'disk_used': 'DiskUsed',
        'expire_time': 'ExpireTime',
        'graph_version': 'GraphVersion',
        'id': 'Id',
        'image_info': 'ImageInfo',
        'ins_spec': 'InsSpec',
        'k8s_domain': 'K8sDomain',
        'maintenance_time': 'MaintenanceTime',
        'mode': 'Mode',
        'name': 'Name',
        'node_num': 'NodeNum',
        'project_name': 'ProjectName',
        'region_id': 'RegionId',
        'status': 'Status',
        'storage_info': 'StorageInfo',
        'subnet_id': 'SubnetID',
        'subnet_name': 'SubnetName',
        'tags': 'Tags',
        'trade_no': 'TradeNO',
        'vpc_id': 'VpcId',
        'vpc_name': 'VpcName'
    }

    def __init__(self, availability_zone_id=None, availability_zones=None, bg3_link=None, bg3_links=None, create_time=None, creator=None, deletion_protection=None, disk_space=None, disk_used=None, expire_time=None, graph_version=None, id=None, image_info=None, ins_spec=None, k8s_domain=None, maintenance_time=None, mode=None, name=None, node_num=None, project_name=None, region_id=None, status=None, storage_info=None, subnet_id=None, subnet_name=None, tags=None, trade_no=None, vpc_id=None, vpc_name=None, _configuration=None):  # noqa: E501
        """InfoForDescribeInstanceOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._availability_zone_id = None
        self._availability_zones = None
        self._bg3_link = None
        self._bg3_links = None
        self._create_time = None
        self._creator = None
        self._deletion_protection = None
        self._disk_space = None
        self._disk_used = None
        self._expire_time = None
        self._graph_version = None
        self._id = None
        self._image_info = None
        self._ins_spec = None
        self._k8s_domain = None
        self._maintenance_time = None
        self._mode = None
        self._name = None
        self._node_num = None
        self._project_name = None
        self._region_id = None
        self._status = None
        self._storage_info = None
        self._subnet_id = None
        self._subnet_name = None
        self._tags = None
        self._trade_no = None
        self._vpc_id = None
        self._vpc_name = None
        self.discriminator = None

        if availability_zone_id is not None:
            self.availability_zone_id = availability_zone_id
        if availability_zones is not None:
            self.availability_zones = availability_zones
        if bg3_link is not None:
            self.bg3_link = bg3_link
        if bg3_links is not None:
            self.bg3_links = bg3_links
        if create_time is not None:
            self.create_time = create_time
        if creator is not None:
            self.creator = creator
        if deletion_protection is not None:
            self.deletion_protection = deletion_protection
        if disk_space is not None:
            self.disk_space = disk_space
        if disk_used is not None:
            self.disk_used = disk_used
        if expire_time is not None:
            self.expire_time = expire_time
        if graph_version is not None:
            self.graph_version = graph_version
        if id is not None:
            self.id = id
        if image_info is not None:
            self.image_info = image_info
        if ins_spec is not None:
            self.ins_spec = ins_spec
        if k8s_domain is not None:
            self.k8s_domain = k8s_domain
        if maintenance_time is not None:
            self.maintenance_time = maintenance_time
        if mode is not None:
            self.mode = mode
        if name is not None:
            self.name = name
        if node_num is not None:
            self.node_num = node_num
        if project_name is not None:
            self.project_name = project_name
        if region_id is not None:
            self.region_id = region_id
        if status is not None:
            self.status = status
        if storage_info is not None:
            self.storage_info = storage_info
        if subnet_id is not None:
            self.subnet_id = subnet_id
        if subnet_name is not None:
            self.subnet_name = subnet_name
        if tags is not None:
            self.tags = tags
        if trade_no is not None:
            self.trade_no = trade_no
        if vpc_id is not None:
            self.vpc_id = vpc_id
        if vpc_name is not None:
            self.vpc_name = vpc_name

    @property
    def availability_zone_id(self):
        """Gets the availability_zone_id of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The availability_zone_id of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._availability_zone_id

    @availability_zone_id.setter
    def availability_zone_id(self, availability_zone_id):
        """Sets the availability_zone_id of this InfoForDescribeInstanceOutput.


        :param availability_zone_id: The availability_zone_id of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._availability_zone_id = availability_zone_id

    @property
    def availability_zones(self):
        """Gets the availability_zones of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The availability_zones of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: list[AvailabilityZoneForDescribeInstanceOutput]
        """
        return self._availability_zones

    @availability_zones.setter
    def availability_zones(self, availability_zones):
        """Sets the availability_zones of this InfoForDescribeInstanceOutput.


        :param availability_zones: The availability_zones of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: list[AvailabilityZoneForDescribeInstanceOutput]
        """

        self._availability_zones = availability_zones

    @property
    def bg3_link(self):
        """Gets the bg3_link of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The bg3_link of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._bg3_link

    @bg3_link.setter
    def bg3_link(self, bg3_link):
        """Sets the bg3_link of this InfoForDescribeInstanceOutput.


        :param bg3_link: The bg3_link of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._bg3_link = bg3_link

    @property
    def bg3_links(self):
        """Gets the bg3_links of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The bg3_links of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: list[Bg3LinkForDescribeInstanceOutput]
        """
        return self._bg3_links

    @bg3_links.setter
    def bg3_links(self, bg3_links):
        """Sets the bg3_links of this InfoForDescribeInstanceOutput.


        :param bg3_links: The bg3_links of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: list[Bg3LinkForDescribeInstanceOutput]
        """

        self._bg3_links = bg3_links

    @property
    def create_time(self):
        """Gets the create_time of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The create_time of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this InfoForDescribeInstanceOutput.


        :param create_time: The create_time of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def creator(self):
        """Gets the creator of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The creator of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this InfoForDescribeInstanceOutput.


        :param creator: The creator of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def deletion_protection(self):
        """Gets the deletion_protection of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The deletion_protection of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._deletion_protection

    @deletion_protection.setter
    def deletion_protection(self, deletion_protection):
        """Sets the deletion_protection of this InfoForDescribeInstanceOutput.


        :param deletion_protection: The deletion_protection of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._deletion_protection = deletion_protection

    @property
    def disk_space(self):
        """Gets the disk_space of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The disk_space of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: int
        """
        return self._disk_space

    @disk_space.setter
    def disk_space(self, disk_space):
        """Sets the disk_space of this InfoForDescribeInstanceOutput.


        :param disk_space: The disk_space of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: int
        """

        self._disk_space = disk_space

    @property
    def disk_used(self):
        """Gets the disk_used of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The disk_used of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: int
        """
        return self._disk_used

    @disk_used.setter
    def disk_used(self, disk_used):
        """Sets the disk_used of this InfoForDescribeInstanceOutput.


        :param disk_used: The disk_used of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: int
        """

        self._disk_used = disk_used

    @property
    def expire_time(self):
        """Gets the expire_time of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The expire_time of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this InfoForDescribeInstanceOutput.


        :param expire_time: The expire_time of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._expire_time = expire_time

    @property
    def graph_version(self):
        """Gets the graph_version of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The graph_version of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._graph_version

    @graph_version.setter
    def graph_version(self, graph_version):
        """Sets the graph_version of this InfoForDescribeInstanceOutput.


        :param graph_version: The graph_version of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._graph_version = graph_version

    @property
    def id(self):
        """Gets the id of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The id of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InfoForDescribeInstanceOutput.


        :param id: The id of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def image_info(self):
        """Gets the image_info of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The image_info of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: ImageInfoForDescribeInstanceOutput
        """
        return self._image_info

    @image_info.setter
    def image_info(self, image_info):
        """Sets the image_info of this InfoForDescribeInstanceOutput.


        :param image_info: The image_info of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: ImageInfoForDescribeInstanceOutput
        """

        self._image_info = image_info

    @property
    def ins_spec(self):
        """Gets the ins_spec of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The ins_spec of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: InsSpecForDescribeInstanceOutput
        """
        return self._ins_spec

    @ins_spec.setter
    def ins_spec(self, ins_spec):
        """Sets the ins_spec of this InfoForDescribeInstanceOutput.


        :param ins_spec: The ins_spec of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: InsSpecForDescribeInstanceOutput
        """

        self._ins_spec = ins_spec

    @property
    def k8s_domain(self):
        """Gets the k8s_domain of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The k8s_domain of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._k8s_domain

    @k8s_domain.setter
    def k8s_domain(self, k8s_domain):
        """Sets the k8s_domain of this InfoForDescribeInstanceOutput.


        :param k8s_domain: The k8s_domain of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._k8s_domain = k8s_domain

    @property
    def maintenance_time(self):
        """Gets the maintenance_time of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The maintenance_time of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_time

    @maintenance_time.setter
    def maintenance_time(self, maintenance_time):
        """Sets the maintenance_time of this InfoForDescribeInstanceOutput.


        :param maintenance_time: The maintenance_time of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._maintenance_time = maintenance_time

    @property
    def mode(self):
        """Gets the mode of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The mode of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this InfoForDescribeInstanceOutput.


        :param mode: The mode of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The name of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InfoForDescribeInstanceOutput.


        :param name: The name of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def node_num(self):
        """Gets the node_num of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The node_num of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: int
        """
        return self._node_num

    @node_num.setter
    def node_num(self, node_num):
        """Sets the node_num of this InfoForDescribeInstanceOutput.


        :param node_num: The node_num of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: int
        """

        self._node_num = node_num

    @property
    def project_name(self):
        """Gets the project_name of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The project_name of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this InfoForDescribeInstanceOutput.


        :param project_name: The project_name of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def region_id(self):
        """Gets the region_id of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The region_id of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this InfoForDescribeInstanceOutput.


        :param region_id: The region_id of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._region_id = region_id

    @property
    def status(self):
        """Gets the status of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The status of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InfoForDescribeInstanceOutput.


        :param status: The status of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def storage_info(self):
        """Gets the storage_info of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The storage_info of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: StorageInfoForDescribeInstanceOutput
        """
        return self._storage_info

    @storage_info.setter
    def storage_info(self, storage_info):
        """Sets the storage_info of this InfoForDescribeInstanceOutput.


        :param storage_info: The storage_info of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: StorageInfoForDescribeInstanceOutput
        """

        self._storage_info = storage_info

    @property
    def subnet_id(self):
        """Gets the subnet_id of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The subnet_id of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this InfoForDescribeInstanceOutput.


        :param subnet_id: The subnet_id of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._subnet_id = subnet_id

    @property
    def subnet_name(self):
        """Gets the subnet_name of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The subnet_name of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._subnet_name

    @subnet_name.setter
    def subnet_name(self, subnet_name):
        """Sets the subnet_name of this InfoForDescribeInstanceOutput.


        :param subnet_name: The subnet_name of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._subnet_name = subnet_name

    @property
    def tags(self):
        """Gets the tags of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The tags of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: list[TagForDescribeInstanceOutput]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this InfoForDescribeInstanceOutput.


        :param tags: The tags of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: list[TagForDescribeInstanceOutput]
        """

        self._tags = tags

    @property
    def trade_no(self):
        """Gets the trade_no of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The trade_no of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._trade_no

    @trade_no.setter
    def trade_no(self, trade_no):
        """Sets the trade_no of this InfoForDescribeInstanceOutput.


        :param trade_no: The trade_no of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._trade_no = trade_no

    @property
    def vpc_id(self):
        """Gets the vpc_id of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The vpc_id of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this InfoForDescribeInstanceOutput.


        :param vpc_id: The vpc_id of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._vpc_id = vpc_id

    @property
    def vpc_name(self):
        """Gets the vpc_name of this InfoForDescribeInstanceOutput.  # noqa: E501


        :return: The vpc_name of this InfoForDescribeInstanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._vpc_name

    @vpc_name.setter
    def vpc_name(self, vpc_name):
        """Sets the vpc_name of this InfoForDescribeInstanceOutput.


        :param vpc_name: The vpc_name of this InfoForDescribeInstanceOutput.  # noqa: E501
        :type: str
        """

        self._vpc_name = vpc_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InfoForDescribeInstanceOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InfoForDescribeInstanceOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InfoForDescribeInstanceOutput):
            return True

        return self.to_dict() != other.to_dict()
