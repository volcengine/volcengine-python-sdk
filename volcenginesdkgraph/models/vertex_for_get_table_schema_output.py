# coding: utf-8

"""
    graph

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class VertexForGetTableSchemaOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'columns': 'list[ColumnForGetTableSchemaOutput]',
        'label': 'str',
        'primary_key': 'list[str]',
        'schema_label_type': 'str',
        'secondary_indices': 'list[SecondaryIndexForGetTableSchemaOutput]',
        'uniq_index': 'list[UniqIndexForGetTableSchemaOutput]'
    }

    attribute_map = {
        'columns': 'columns',
        'label': 'label',
        'primary_key': 'primary_key',
        'schema_label_type': 'schema_label_type',
        'secondary_indices': 'secondary_indices',
        'uniq_index': 'uniq_index'
    }

    def __init__(self, columns=None, label=None, primary_key=None, schema_label_type=None, secondary_indices=None, uniq_index=None, _configuration=None):  # noqa: E501
        """VertexForGetTableSchemaOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._columns = None
        self._label = None
        self._primary_key = None
        self._schema_label_type = None
        self._secondary_indices = None
        self._uniq_index = None
        self.discriminator = None

        if columns is not None:
            self.columns = columns
        if label is not None:
            self.label = label
        if primary_key is not None:
            self.primary_key = primary_key
        if schema_label_type is not None:
            self.schema_label_type = schema_label_type
        if secondary_indices is not None:
            self.secondary_indices = secondary_indices
        if uniq_index is not None:
            self.uniq_index = uniq_index

    @property
    def columns(self):
        """Gets the columns of this VertexForGetTableSchemaOutput.  # noqa: E501


        :return: The columns of this VertexForGetTableSchemaOutput.  # noqa: E501
        :rtype: list[ColumnForGetTableSchemaOutput]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this VertexForGetTableSchemaOutput.


        :param columns: The columns of this VertexForGetTableSchemaOutput.  # noqa: E501
        :type: list[ColumnForGetTableSchemaOutput]
        """

        self._columns = columns

    @property
    def label(self):
        """Gets the label of this VertexForGetTableSchemaOutput.  # noqa: E501


        :return: The label of this VertexForGetTableSchemaOutput.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this VertexForGetTableSchemaOutput.


        :param label: The label of this VertexForGetTableSchemaOutput.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def primary_key(self):
        """Gets the primary_key of this VertexForGetTableSchemaOutput.  # noqa: E501


        :return: The primary_key of this VertexForGetTableSchemaOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this VertexForGetTableSchemaOutput.


        :param primary_key: The primary_key of this VertexForGetTableSchemaOutput.  # noqa: E501
        :type: list[str]
        """

        self._primary_key = primary_key

    @property
    def schema_label_type(self):
        """Gets the schema_label_type of this VertexForGetTableSchemaOutput.  # noqa: E501


        :return: The schema_label_type of this VertexForGetTableSchemaOutput.  # noqa: E501
        :rtype: str
        """
        return self._schema_label_type

    @schema_label_type.setter
    def schema_label_type(self, schema_label_type):
        """Sets the schema_label_type of this VertexForGetTableSchemaOutput.


        :param schema_label_type: The schema_label_type of this VertexForGetTableSchemaOutput.  # noqa: E501
        :type: str
        """

        self._schema_label_type = schema_label_type

    @property
    def secondary_indices(self):
        """Gets the secondary_indices of this VertexForGetTableSchemaOutput.  # noqa: E501


        :return: The secondary_indices of this VertexForGetTableSchemaOutput.  # noqa: E501
        :rtype: list[SecondaryIndexForGetTableSchemaOutput]
        """
        return self._secondary_indices

    @secondary_indices.setter
    def secondary_indices(self, secondary_indices):
        """Sets the secondary_indices of this VertexForGetTableSchemaOutput.


        :param secondary_indices: The secondary_indices of this VertexForGetTableSchemaOutput.  # noqa: E501
        :type: list[SecondaryIndexForGetTableSchemaOutput]
        """

        self._secondary_indices = secondary_indices

    @property
    def uniq_index(self):
        """Gets the uniq_index of this VertexForGetTableSchemaOutput.  # noqa: E501


        :return: The uniq_index of this VertexForGetTableSchemaOutput.  # noqa: E501
        :rtype: list[UniqIndexForGetTableSchemaOutput]
        """
        return self._uniq_index

    @uniq_index.setter
    def uniq_index(self, uniq_index):
        """Sets the uniq_index of this VertexForGetTableSchemaOutput.


        :param uniq_index: The uniq_index of this VertexForGetTableSchemaOutput.  # noqa: E501
        :type: list[UniqIndexForGetTableSchemaOutput]
        """

        self._uniq_index = uniq_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VertexForGetTableSchemaOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VertexForGetTableSchemaOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VertexForGetTableSchemaOutput):
            return True

        return self.to_dict() != other.to_dict()
