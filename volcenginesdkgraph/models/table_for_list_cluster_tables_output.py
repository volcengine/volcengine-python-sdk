# coding: utf-8

"""
    graph

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class TableForListClusterTablesOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_readonly': 'bool',
        'partition_num': 'int',
        'table_id': 'int',
        'table_name': 'str',
        'tablet_num': 'int',
        'vdc_replica': 'list[VdcReplicaForListClusterTablesOutput]',
        'writeable_vdc': 'list[str]'
    }

    attribute_map = {
        'is_readonly': 'is_readonly',
        'partition_num': 'partition_num',
        'table_id': 'table_id',
        'table_name': 'table_name',
        'tablet_num': 'tablet_num',
        'vdc_replica': 'vdc_replica',
        'writeable_vdc': 'writeable_vdc'
    }

    def __init__(self, is_readonly=None, partition_num=None, table_id=None, table_name=None, tablet_num=None, vdc_replica=None, writeable_vdc=None, _configuration=None):  # noqa: E501
        """TableForListClusterTablesOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._is_readonly = None
        self._partition_num = None
        self._table_id = None
        self._table_name = None
        self._tablet_num = None
        self._vdc_replica = None
        self._writeable_vdc = None
        self.discriminator = None

        if is_readonly is not None:
            self.is_readonly = is_readonly
        if partition_num is not None:
            self.partition_num = partition_num
        if table_id is not None:
            self.table_id = table_id
        if table_name is not None:
            self.table_name = table_name
        if tablet_num is not None:
            self.tablet_num = tablet_num
        if vdc_replica is not None:
            self.vdc_replica = vdc_replica
        if writeable_vdc is not None:
            self.writeable_vdc = writeable_vdc

    @property
    def is_readonly(self):
        """Gets the is_readonly of this TableForListClusterTablesOutput.  # noqa: E501


        :return: The is_readonly of this TableForListClusterTablesOutput.  # noqa: E501
        :rtype: bool
        """
        return self._is_readonly

    @is_readonly.setter
    def is_readonly(self, is_readonly):
        """Sets the is_readonly of this TableForListClusterTablesOutput.


        :param is_readonly: The is_readonly of this TableForListClusterTablesOutput.  # noqa: E501
        :type: bool
        """

        self._is_readonly = is_readonly

    @property
    def partition_num(self):
        """Gets the partition_num of this TableForListClusterTablesOutput.  # noqa: E501


        :return: The partition_num of this TableForListClusterTablesOutput.  # noqa: E501
        :rtype: int
        """
        return self._partition_num

    @partition_num.setter
    def partition_num(self, partition_num):
        """Sets the partition_num of this TableForListClusterTablesOutput.


        :param partition_num: The partition_num of this TableForListClusterTablesOutput.  # noqa: E501
        :type: int
        """

        self._partition_num = partition_num

    @property
    def table_id(self):
        """Gets the table_id of this TableForListClusterTablesOutput.  # noqa: E501


        :return: The table_id of this TableForListClusterTablesOutput.  # noqa: E501
        :rtype: int
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this TableForListClusterTablesOutput.


        :param table_id: The table_id of this TableForListClusterTablesOutput.  # noqa: E501
        :type: int
        """

        self._table_id = table_id

    @property
    def table_name(self):
        """Gets the table_name of this TableForListClusterTablesOutput.  # noqa: E501


        :return: The table_name of this TableForListClusterTablesOutput.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this TableForListClusterTablesOutput.


        :param table_name: The table_name of this TableForListClusterTablesOutput.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    @property
    def tablet_num(self):
        """Gets the tablet_num of this TableForListClusterTablesOutput.  # noqa: E501


        :return: The tablet_num of this TableForListClusterTablesOutput.  # noqa: E501
        :rtype: int
        """
        return self._tablet_num

    @tablet_num.setter
    def tablet_num(self, tablet_num):
        """Sets the tablet_num of this TableForListClusterTablesOutput.


        :param tablet_num: The tablet_num of this TableForListClusterTablesOutput.  # noqa: E501
        :type: int
        """

        self._tablet_num = tablet_num

    @property
    def vdc_replica(self):
        """Gets the vdc_replica of this TableForListClusterTablesOutput.  # noqa: E501


        :return: The vdc_replica of this TableForListClusterTablesOutput.  # noqa: E501
        :rtype: list[VdcReplicaForListClusterTablesOutput]
        """
        return self._vdc_replica

    @vdc_replica.setter
    def vdc_replica(self, vdc_replica):
        """Sets the vdc_replica of this TableForListClusterTablesOutput.


        :param vdc_replica: The vdc_replica of this TableForListClusterTablesOutput.  # noqa: E501
        :type: list[VdcReplicaForListClusterTablesOutput]
        """

        self._vdc_replica = vdc_replica

    @property
    def writeable_vdc(self):
        """Gets the writeable_vdc of this TableForListClusterTablesOutput.  # noqa: E501


        :return: The writeable_vdc of this TableForListClusterTablesOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._writeable_vdc

    @writeable_vdc.setter
    def writeable_vdc(self, writeable_vdc):
        """Sets the writeable_vdc of this TableForListClusterTablesOutput.


        :param writeable_vdc: The writeable_vdc of this TableForListClusterTablesOutput.  # noqa: E501
        :type: list[str]
        """

        self._writeable_vdc = writeable_vdc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableForListClusterTablesOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableForListClusterTablesOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TableForListClusterTablesOutput):
            return True

        return self.to_dict() != other.to_dict()
