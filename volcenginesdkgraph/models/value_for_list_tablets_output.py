# coding: utf-8

"""
    graph

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ValueForListTabletsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addr': 'str',
        'epoch': 'int',
        'idc': 'str',
        'is_rw': 'bool'
    }

    attribute_map = {
        'addr': 'Addr',
        'epoch': 'Epoch',
        'idc': 'Idc',
        'is_rw': 'IsRw'
    }

    def __init__(self, addr=None, epoch=None, idc=None, is_rw=None, _configuration=None):  # noqa: E501
        """ValueForListTabletsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._addr = None
        self._epoch = None
        self._idc = None
        self._is_rw = None
        self.discriminator = None

        if addr is not None:
            self.addr = addr
        if epoch is not None:
            self.epoch = epoch
        if idc is not None:
            self.idc = idc
        if is_rw is not None:
            self.is_rw = is_rw

    @property
    def addr(self):
        """Gets the addr of this ValueForListTabletsOutput.  # noqa: E501


        :return: The addr of this ValueForListTabletsOutput.  # noqa: E501
        :rtype: str
        """
        return self._addr

    @addr.setter
    def addr(self, addr):
        """Sets the addr of this ValueForListTabletsOutput.


        :param addr: The addr of this ValueForListTabletsOutput.  # noqa: E501
        :type: str
        """

        self._addr = addr

    @property
    def epoch(self):
        """Gets the epoch of this ValueForListTabletsOutput.  # noqa: E501


        :return: The epoch of this ValueForListTabletsOutput.  # noqa: E501
        :rtype: int
        """
        return self._epoch

    @epoch.setter
    def epoch(self, epoch):
        """Sets the epoch of this ValueForListTabletsOutput.


        :param epoch: The epoch of this ValueForListTabletsOutput.  # noqa: E501
        :type: int
        """

        self._epoch = epoch

    @property
    def idc(self):
        """Gets the idc of this ValueForListTabletsOutput.  # noqa: E501


        :return: The idc of this ValueForListTabletsOutput.  # noqa: E501
        :rtype: str
        """
        return self._idc

    @idc.setter
    def idc(self, idc):
        """Sets the idc of this ValueForListTabletsOutput.


        :param idc: The idc of this ValueForListTabletsOutput.  # noqa: E501
        :type: str
        """

        self._idc = idc

    @property
    def is_rw(self):
        """Gets the is_rw of this ValueForListTabletsOutput.  # noqa: E501


        :return: The is_rw of this ValueForListTabletsOutput.  # noqa: E501
        :rtype: bool
        """
        return self._is_rw

    @is_rw.setter
    def is_rw(self, is_rw):
        """Sets the is_rw of this ValueForListTabletsOutput.


        :param is_rw: The is_rw of this ValueForListTabletsOutput.  # noqa: E501
        :type: bool
        """

        self._is_rw = is_rw

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValueForListTabletsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValueForListTabletsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ValueForListTabletsOutput):
            return True

        return self.to_dict() != other.to_dict()
