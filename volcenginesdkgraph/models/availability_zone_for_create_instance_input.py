# coding: utf-8

"""
    graph

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class AvailabilityZoneForCreateInstanceInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'availability_zone_id': 'str',
        'k8s_domain': 'str',
        'node_num': 'int',
        'node_pool_name': 'str',
        'subnet_id': 'str',
        'subnet_name': 'str'
    }

    attribute_map = {
        'availability_zone_id': 'AvailabilityZoneId',
        'k8s_domain': 'K8sDomain',
        'node_num': 'NodeNum',
        'node_pool_name': 'NodePoolName',
        'subnet_id': 'SubnetID',
        'subnet_name': 'SubnetName'
    }

    def __init__(self, availability_zone_id=None, k8s_domain=None, node_num=None, node_pool_name=None, subnet_id=None, subnet_name=None, _configuration=None):  # noqa: E501
        """AvailabilityZoneForCreateInstanceInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._availability_zone_id = None
        self._k8s_domain = None
        self._node_num = None
        self._node_pool_name = None
        self._subnet_id = None
        self._subnet_name = None
        self.discriminator = None

        if availability_zone_id is not None:
            self.availability_zone_id = availability_zone_id
        if k8s_domain is not None:
            self.k8s_domain = k8s_domain
        if node_num is not None:
            self.node_num = node_num
        if node_pool_name is not None:
            self.node_pool_name = node_pool_name
        if subnet_id is not None:
            self.subnet_id = subnet_id
        if subnet_name is not None:
            self.subnet_name = subnet_name

    @property
    def availability_zone_id(self):
        """Gets the availability_zone_id of this AvailabilityZoneForCreateInstanceInput.  # noqa: E501


        :return: The availability_zone_id of this AvailabilityZoneForCreateInstanceInput.  # noqa: E501
        :rtype: str
        """
        return self._availability_zone_id

    @availability_zone_id.setter
    def availability_zone_id(self, availability_zone_id):
        """Sets the availability_zone_id of this AvailabilityZoneForCreateInstanceInput.


        :param availability_zone_id: The availability_zone_id of this AvailabilityZoneForCreateInstanceInput.  # noqa: E501
        :type: str
        """

        self._availability_zone_id = availability_zone_id

    @property
    def k8s_domain(self):
        """Gets the k8s_domain of this AvailabilityZoneForCreateInstanceInput.  # noqa: E501


        :return: The k8s_domain of this AvailabilityZoneForCreateInstanceInput.  # noqa: E501
        :rtype: str
        """
        return self._k8s_domain

    @k8s_domain.setter
    def k8s_domain(self, k8s_domain):
        """Sets the k8s_domain of this AvailabilityZoneForCreateInstanceInput.


        :param k8s_domain: The k8s_domain of this AvailabilityZoneForCreateInstanceInput.  # noqa: E501
        :type: str
        """

        self._k8s_domain = k8s_domain

    @property
    def node_num(self):
        """Gets the node_num of this AvailabilityZoneForCreateInstanceInput.  # noqa: E501


        :return: The node_num of this AvailabilityZoneForCreateInstanceInput.  # noqa: E501
        :rtype: int
        """
        return self._node_num

    @node_num.setter
    def node_num(self, node_num):
        """Sets the node_num of this AvailabilityZoneForCreateInstanceInput.


        :param node_num: The node_num of this AvailabilityZoneForCreateInstanceInput.  # noqa: E501
        :type: int
        """

        self._node_num = node_num

    @property
    def node_pool_name(self):
        """Gets the node_pool_name of this AvailabilityZoneForCreateInstanceInput.  # noqa: E501


        :return: The node_pool_name of this AvailabilityZoneForCreateInstanceInput.  # noqa: E501
        :rtype: str
        """
        return self._node_pool_name

    @node_pool_name.setter
    def node_pool_name(self, node_pool_name):
        """Sets the node_pool_name of this AvailabilityZoneForCreateInstanceInput.


        :param node_pool_name: The node_pool_name of this AvailabilityZoneForCreateInstanceInput.  # noqa: E501
        :type: str
        """

        self._node_pool_name = node_pool_name

    @property
    def subnet_id(self):
        """Gets the subnet_id of this AvailabilityZoneForCreateInstanceInput.  # noqa: E501


        :return: The subnet_id of this AvailabilityZoneForCreateInstanceInput.  # noqa: E501
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this AvailabilityZoneForCreateInstanceInput.


        :param subnet_id: The subnet_id of this AvailabilityZoneForCreateInstanceInput.  # noqa: E501
        :type: str
        """

        self._subnet_id = subnet_id

    @property
    def subnet_name(self):
        """Gets the subnet_name of this AvailabilityZoneForCreateInstanceInput.  # noqa: E501


        :return: The subnet_name of this AvailabilityZoneForCreateInstanceInput.  # noqa: E501
        :rtype: str
        """
        return self._subnet_name

    @subnet_name.setter
    def subnet_name(self, subnet_name):
        """Sets the subnet_name of this AvailabilityZoneForCreateInstanceInput.


        :param subnet_name: The subnet_name of this AvailabilityZoneForCreateInstanceInput.  # noqa: E501
        :type: str
        """

        self._subnet_name = subnet_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AvailabilityZoneForCreateInstanceInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvailabilityZoneForCreateInstanceInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AvailabilityZoneForCreateInstanceInput):
            return True

        return self.to_dict() != other.to_dict()
