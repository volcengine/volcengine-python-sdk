# coding: utf-8

"""
    graph

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class TabletTaskInfoForListTabletTaskOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enqueue_time': 'int',
        'reason': 'str',
        'replicas_to_close': 'list[ReplicasToCloseForListTabletTaskOutput]',
        'replicas_to_delete': 'list[ReplicasToDeleteForListTabletTaskOutput]',
        'replicas_to_failover_by_promote': 'list[ReplicasToFailoverByPromoteForListTabletTaskOutput]',
        'replicas_to_failover_by_reopen': 'list[ReplicasToFailoverByReopenForListTabletTaskOutput]',
        'replicas_to_open_or_add': 'list[ReplicasToOpenOrAddForListTabletTaskOutput]',
        'start_time': 'int',
        'tablet_to_merge': 'TabletToMergeForListTabletTaskOutput',
        'tablet_to_split': 'TabletToSplitForListTabletTaskOutput',
        'tablets_to_delete': 'list[TabletsToDeleteForListTabletTaskOutput]',
        'task_id': 'int',
        'task_type': 'str'
    }

    attribute_map = {
        'enqueue_time': 'EnqueueTime',
        'reason': 'Reason',
        'replicas_to_close': 'ReplicasToClose',
        'replicas_to_delete': 'ReplicasToDelete',
        'replicas_to_failover_by_promote': 'ReplicasToFailoverByPromote',
        'replicas_to_failover_by_reopen': 'ReplicasToFailoverByReopen',
        'replicas_to_open_or_add': 'ReplicasToOpenOrAdd',
        'start_time': 'StartTime',
        'tablet_to_merge': 'TabletToMerge',
        'tablet_to_split': 'TabletToSplit',
        'tablets_to_delete': 'TabletsToDelete',
        'task_id': 'TaskId',
        'task_type': 'TaskType'
    }

    def __init__(self, enqueue_time=None, reason=None, replicas_to_close=None, replicas_to_delete=None, replicas_to_failover_by_promote=None, replicas_to_failover_by_reopen=None, replicas_to_open_or_add=None, start_time=None, tablet_to_merge=None, tablet_to_split=None, tablets_to_delete=None, task_id=None, task_type=None, _configuration=None):  # noqa: E501
        """TabletTaskInfoForListTabletTaskOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enqueue_time = None
        self._reason = None
        self._replicas_to_close = None
        self._replicas_to_delete = None
        self._replicas_to_failover_by_promote = None
        self._replicas_to_failover_by_reopen = None
        self._replicas_to_open_or_add = None
        self._start_time = None
        self._tablet_to_merge = None
        self._tablet_to_split = None
        self._tablets_to_delete = None
        self._task_id = None
        self._task_type = None
        self.discriminator = None

        if enqueue_time is not None:
            self.enqueue_time = enqueue_time
        if reason is not None:
            self.reason = reason
        if replicas_to_close is not None:
            self.replicas_to_close = replicas_to_close
        if replicas_to_delete is not None:
            self.replicas_to_delete = replicas_to_delete
        if replicas_to_failover_by_promote is not None:
            self.replicas_to_failover_by_promote = replicas_to_failover_by_promote
        if replicas_to_failover_by_reopen is not None:
            self.replicas_to_failover_by_reopen = replicas_to_failover_by_reopen
        if replicas_to_open_or_add is not None:
            self.replicas_to_open_or_add = replicas_to_open_or_add
        if start_time is not None:
            self.start_time = start_time
        if tablet_to_merge is not None:
            self.tablet_to_merge = tablet_to_merge
        if tablet_to_split is not None:
            self.tablet_to_split = tablet_to_split
        if tablets_to_delete is not None:
            self.tablets_to_delete = tablets_to_delete
        if task_id is not None:
            self.task_id = task_id
        if task_type is not None:
            self.task_type = task_type

    @property
    def enqueue_time(self):
        """Gets the enqueue_time of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501


        :return: The enqueue_time of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :rtype: int
        """
        return self._enqueue_time

    @enqueue_time.setter
    def enqueue_time(self, enqueue_time):
        """Sets the enqueue_time of this TabletTaskInfoForListTabletTaskOutput.


        :param enqueue_time: The enqueue_time of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :type: int
        """

        self._enqueue_time = enqueue_time

    @property
    def reason(self):
        """Gets the reason of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501


        :return: The reason of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this TabletTaskInfoForListTabletTaskOutput.


        :param reason: The reason of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def replicas_to_close(self):
        """Gets the replicas_to_close of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501


        :return: The replicas_to_close of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :rtype: list[ReplicasToCloseForListTabletTaskOutput]
        """
        return self._replicas_to_close

    @replicas_to_close.setter
    def replicas_to_close(self, replicas_to_close):
        """Sets the replicas_to_close of this TabletTaskInfoForListTabletTaskOutput.


        :param replicas_to_close: The replicas_to_close of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :type: list[ReplicasToCloseForListTabletTaskOutput]
        """

        self._replicas_to_close = replicas_to_close

    @property
    def replicas_to_delete(self):
        """Gets the replicas_to_delete of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501


        :return: The replicas_to_delete of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :rtype: list[ReplicasToDeleteForListTabletTaskOutput]
        """
        return self._replicas_to_delete

    @replicas_to_delete.setter
    def replicas_to_delete(self, replicas_to_delete):
        """Sets the replicas_to_delete of this TabletTaskInfoForListTabletTaskOutput.


        :param replicas_to_delete: The replicas_to_delete of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :type: list[ReplicasToDeleteForListTabletTaskOutput]
        """

        self._replicas_to_delete = replicas_to_delete

    @property
    def replicas_to_failover_by_promote(self):
        """Gets the replicas_to_failover_by_promote of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501


        :return: The replicas_to_failover_by_promote of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :rtype: list[ReplicasToFailoverByPromoteForListTabletTaskOutput]
        """
        return self._replicas_to_failover_by_promote

    @replicas_to_failover_by_promote.setter
    def replicas_to_failover_by_promote(self, replicas_to_failover_by_promote):
        """Sets the replicas_to_failover_by_promote of this TabletTaskInfoForListTabletTaskOutput.


        :param replicas_to_failover_by_promote: The replicas_to_failover_by_promote of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :type: list[ReplicasToFailoverByPromoteForListTabletTaskOutput]
        """

        self._replicas_to_failover_by_promote = replicas_to_failover_by_promote

    @property
    def replicas_to_failover_by_reopen(self):
        """Gets the replicas_to_failover_by_reopen of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501


        :return: The replicas_to_failover_by_reopen of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :rtype: list[ReplicasToFailoverByReopenForListTabletTaskOutput]
        """
        return self._replicas_to_failover_by_reopen

    @replicas_to_failover_by_reopen.setter
    def replicas_to_failover_by_reopen(self, replicas_to_failover_by_reopen):
        """Sets the replicas_to_failover_by_reopen of this TabletTaskInfoForListTabletTaskOutput.


        :param replicas_to_failover_by_reopen: The replicas_to_failover_by_reopen of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :type: list[ReplicasToFailoverByReopenForListTabletTaskOutput]
        """

        self._replicas_to_failover_by_reopen = replicas_to_failover_by_reopen

    @property
    def replicas_to_open_or_add(self):
        """Gets the replicas_to_open_or_add of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501


        :return: The replicas_to_open_or_add of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :rtype: list[ReplicasToOpenOrAddForListTabletTaskOutput]
        """
        return self._replicas_to_open_or_add

    @replicas_to_open_or_add.setter
    def replicas_to_open_or_add(self, replicas_to_open_or_add):
        """Sets the replicas_to_open_or_add of this TabletTaskInfoForListTabletTaskOutput.


        :param replicas_to_open_or_add: The replicas_to_open_or_add of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :type: list[ReplicasToOpenOrAddForListTabletTaskOutput]
        """

        self._replicas_to_open_or_add = replicas_to_open_or_add

    @property
    def start_time(self):
        """Gets the start_time of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501


        :return: The start_time of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TabletTaskInfoForListTabletTaskOutput.


        :param start_time: The start_time of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def tablet_to_merge(self):
        """Gets the tablet_to_merge of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501


        :return: The tablet_to_merge of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :rtype: TabletToMergeForListTabletTaskOutput
        """
        return self._tablet_to_merge

    @tablet_to_merge.setter
    def tablet_to_merge(self, tablet_to_merge):
        """Sets the tablet_to_merge of this TabletTaskInfoForListTabletTaskOutput.


        :param tablet_to_merge: The tablet_to_merge of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :type: TabletToMergeForListTabletTaskOutput
        """

        self._tablet_to_merge = tablet_to_merge

    @property
    def tablet_to_split(self):
        """Gets the tablet_to_split of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501


        :return: The tablet_to_split of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :rtype: TabletToSplitForListTabletTaskOutput
        """
        return self._tablet_to_split

    @tablet_to_split.setter
    def tablet_to_split(self, tablet_to_split):
        """Sets the tablet_to_split of this TabletTaskInfoForListTabletTaskOutput.


        :param tablet_to_split: The tablet_to_split of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :type: TabletToSplitForListTabletTaskOutput
        """

        self._tablet_to_split = tablet_to_split

    @property
    def tablets_to_delete(self):
        """Gets the tablets_to_delete of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501


        :return: The tablets_to_delete of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :rtype: list[TabletsToDeleteForListTabletTaskOutput]
        """
        return self._tablets_to_delete

    @tablets_to_delete.setter
    def tablets_to_delete(self, tablets_to_delete):
        """Sets the tablets_to_delete of this TabletTaskInfoForListTabletTaskOutput.


        :param tablets_to_delete: The tablets_to_delete of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :type: list[TabletsToDeleteForListTabletTaskOutput]
        """

        self._tablets_to_delete = tablets_to_delete

    @property
    def task_id(self):
        """Gets the task_id of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501


        :return: The task_id of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TabletTaskInfoForListTabletTaskOutput.


        :param task_id: The task_id of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :type: int
        """

        self._task_id = task_id

    @property
    def task_type(self):
        """Gets the task_type of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501


        :return: The task_type of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this TabletTaskInfoForListTabletTaskOutput.


        :param task_type: The task_type of this TabletTaskInfoForListTabletTaskOutput.  # noqa: E501
        :type: str
        """

        self._task_type = task_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TabletTaskInfoForListTabletTaskOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TabletTaskInfoForListTabletTaskOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TabletTaskInfoForListTabletTaskOutput):
            return True

        return self.to_dict() != other.to_dict()
