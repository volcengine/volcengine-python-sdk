# coding: utf-8

"""
    vod20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class VideoOptionForGetExecutionOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aspect_ratio': 'str',
        'duration': 'int',
        'fixed_camera': 'bool',
        'fps': 'int',
        'model': 'str',
        'resolution': 'str',
        'seed': 'str',
        'watermark': 'bool'
    }

    attribute_map = {
        'aspect_ratio': 'AspectRatio',
        'duration': 'Duration',
        'fixed_camera': 'FixedCamera',
        'fps': 'Fps',
        'model': 'Model',
        'resolution': 'Resolution',
        'seed': 'Seed',
        'watermark': 'Watermark'
    }

    def __init__(self, aspect_ratio=None, duration=None, fixed_camera=None, fps=None, model=None, resolution=None, seed=None, watermark=None, _configuration=None):  # noqa: E501
        """VideoOptionForGetExecutionOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._aspect_ratio = None
        self._duration = None
        self._fixed_camera = None
        self._fps = None
        self._model = None
        self._resolution = None
        self._seed = None
        self._watermark = None
        self.discriminator = None

        if aspect_ratio is not None:
            self.aspect_ratio = aspect_ratio
        if duration is not None:
            self.duration = duration
        if fixed_camera is not None:
            self.fixed_camera = fixed_camera
        if fps is not None:
            self.fps = fps
        if model is not None:
            self.model = model
        if resolution is not None:
            self.resolution = resolution
        if seed is not None:
            self.seed = seed
        if watermark is not None:
            self.watermark = watermark

    @property
    def aspect_ratio(self):
        """Gets the aspect_ratio of this VideoOptionForGetExecutionOutput.  # noqa: E501


        :return: The aspect_ratio of this VideoOptionForGetExecutionOutput.  # noqa: E501
        :rtype: str
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio):
        """Sets the aspect_ratio of this VideoOptionForGetExecutionOutput.


        :param aspect_ratio: The aspect_ratio of this VideoOptionForGetExecutionOutput.  # noqa: E501
        :type: str
        """

        self._aspect_ratio = aspect_ratio

    @property
    def duration(self):
        """Gets the duration of this VideoOptionForGetExecutionOutput.  # noqa: E501


        :return: The duration of this VideoOptionForGetExecutionOutput.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this VideoOptionForGetExecutionOutput.


        :param duration: The duration of this VideoOptionForGetExecutionOutput.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def fixed_camera(self):
        """Gets the fixed_camera of this VideoOptionForGetExecutionOutput.  # noqa: E501


        :return: The fixed_camera of this VideoOptionForGetExecutionOutput.  # noqa: E501
        :rtype: bool
        """
        return self._fixed_camera

    @fixed_camera.setter
    def fixed_camera(self, fixed_camera):
        """Sets the fixed_camera of this VideoOptionForGetExecutionOutput.


        :param fixed_camera: The fixed_camera of this VideoOptionForGetExecutionOutput.  # noqa: E501
        :type: bool
        """

        self._fixed_camera = fixed_camera

    @property
    def fps(self):
        """Gets the fps of this VideoOptionForGetExecutionOutput.  # noqa: E501


        :return: The fps of this VideoOptionForGetExecutionOutput.  # noqa: E501
        :rtype: int
        """
        return self._fps

    @fps.setter
    def fps(self, fps):
        """Sets the fps of this VideoOptionForGetExecutionOutput.


        :param fps: The fps of this VideoOptionForGetExecutionOutput.  # noqa: E501
        :type: int
        """

        self._fps = fps

    @property
    def model(self):
        """Gets the model of this VideoOptionForGetExecutionOutput.  # noqa: E501


        :return: The model of this VideoOptionForGetExecutionOutput.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this VideoOptionForGetExecutionOutput.


        :param model: The model of this VideoOptionForGetExecutionOutput.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def resolution(self):
        """Gets the resolution of this VideoOptionForGetExecutionOutput.  # noqa: E501


        :return: The resolution of this VideoOptionForGetExecutionOutput.  # noqa: E501
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this VideoOptionForGetExecutionOutput.


        :param resolution: The resolution of this VideoOptionForGetExecutionOutput.  # noqa: E501
        :type: str
        """

        self._resolution = resolution

    @property
    def seed(self):
        """Gets the seed of this VideoOptionForGetExecutionOutput.  # noqa: E501


        :return: The seed of this VideoOptionForGetExecutionOutput.  # noqa: E501
        :rtype: str
        """
        return self._seed

    @seed.setter
    def seed(self, seed):
        """Sets the seed of this VideoOptionForGetExecutionOutput.


        :param seed: The seed of this VideoOptionForGetExecutionOutput.  # noqa: E501
        :type: str
        """

        self._seed = seed

    @property
    def watermark(self):
        """Gets the watermark of this VideoOptionForGetExecutionOutput.  # noqa: E501


        :return: The watermark of this VideoOptionForGetExecutionOutput.  # noqa: E501
        :rtype: bool
        """
        return self._watermark

    @watermark.setter
    def watermark(self, watermark):
        """Sets the watermark of this VideoOptionForGetExecutionOutput.


        :param watermark: The watermark of this VideoOptionForGetExecutionOutput.  # noqa: E501
        :type: bool
        """

        self._watermark = watermark

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VideoOptionForGetExecutionOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoOptionForGetExecutionOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VideoOptionForGetExecutionOutput):
            return True

        return self.to_dict() != other.to_dict()
