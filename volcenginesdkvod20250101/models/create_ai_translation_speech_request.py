# coding: utf-8

"""
    vod20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateAITranslationSpeechRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audio_file_name': 'str',
        'source_language': 'str',
        'space_name': 'str',
        'speech_name': 'str',
        'target_language': 'str'
    }

    attribute_map = {
        'audio_file_name': 'AudioFileName',
        'source_language': 'SourceLanguage',
        'space_name': 'SpaceName',
        'speech_name': 'SpeechName',
        'target_language': 'TargetLanguage'
    }

    def __init__(self, audio_file_name=None, source_language=None, space_name=None, speech_name=None, target_language=None, _configuration=None):  # noqa: E501
        """CreateAITranslationSpeechRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._audio_file_name = None
        self._source_language = None
        self._space_name = None
        self._speech_name = None
        self._target_language = None
        self.discriminator = None

        self.audio_file_name = audio_file_name
        self.source_language = source_language
        self.space_name = space_name
        self.speech_name = speech_name
        self.target_language = target_language

    @property
    def audio_file_name(self):
        """Gets the audio_file_name of this CreateAITranslationSpeechRequest.  # noqa: E501


        :return: The audio_file_name of this CreateAITranslationSpeechRequest.  # noqa: E501
        :rtype: str
        """
        return self._audio_file_name

    @audio_file_name.setter
    def audio_file_name(self, audio_file_name):
        """Sets the audio_file_name of this CreateAITranslationSpeechRequest.


        :param audio_file_name: The audio_file_name of this CreateAITranslationSpeechRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and audio_file_name is None:
            raise ValueError("Invalid value for `audio_file_name`, must not be `None`")  # noqa: E501

        self._audio_file_name = audio_file_name

    @property
    def source_language(self):
        """Gets the source_language of this CreateAITranslationSpeechRequest.  # noqa: E501


        :return: The source_language of this CreateAITranslationSpeechRequest.  # noqa: E501
        :rtype: str
        """
        return self._source_language

    @source_language.setter
    def source_language(self, source_language):
        """Sets the source_language of this CreateAITranslationSpeechRequest.


        :param source_language: The source_language of this CreateAITranslationSpeechRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and source_language is None:
            raise ValueError("Invalid value for `source_language`, must not be `None`")  # noqa: E501

        self._source_language = source_language

    @property
    def space_name(self):
        """Gets the space_name of this CreateAITranslationSpeechRequest.  # noqa: E501


        :return: The space_name of this CreateAITranslationSpeechRequest.  # noqa: E501
        :rtype: str
        """
        return self._space_name

    @space_name.setter
    def space_name(self, space_name):
        """Sets the space_name of this CreateAITranslationSpeechRequest.


        :param space_name: The space_name of this CreateAITranslationSpeechRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and space_name is None:
            raise ValueError("Invalid value for `space_name`, must not be `None`")  # noqa: E501

        self._space_name = space_name

    @property
    def speech_name(self):
        """Gets the speech_name of this CreateAITranslationSpeechRequest.  # noqa: E501


        :return: The speech_name of this CreateAITranslationSpeechRequest.  # noqa: E501
        :rtype: str
        """
        return self._speech_name

    @speech_name.setter
    def speech_name(self, speech_name):
        """Sets the speech_name of this CreateAITranslationSpeechRequest.


        :param speech_name: The speech_name of this CreateAITranslationSpeechRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and speech_name is None:
            raise ValueError("Invalid value for `speech_name`, must not be `None`")  # noqa: E501

        self._speech_name = speech_name

    @property
    def target_language(self):
        """Gets the target_language of this CreateAITranslationSpeechRequest.  # noqa: E501


        :return: The target_language of this CreateAITranslationSpeechRequest.  # noqa: E501
        :rtype: str
        """
        return self._target_language

    @target_language.setter
    def target_language(self, target_language):
        """Sets the target_language of this CreateAITranslationSpeechRequest.


        :param target_language: The target_language of this CreateAITranslationSpeechRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and target_language is None:
            raise ValueError("Invalid value for `target_language`, must not be `None`")  # noqa: E501

        self._target_language = target_language

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateAITranslationSpeechRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAITranslationSpeechRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateAITranslationSpeechRequest):
            return True

        return self.to_dict() != other.to_dict()
