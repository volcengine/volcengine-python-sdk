# coding: utf-8

"""
    vod20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ListAITranslationSpeechResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'preset_speeches': 'list[PresetSpeechForListAITranslationSpeechOutput]',
        'user_speeches': 'list[UserSpeechForListAITranslationSpeechOutput]'
    }

    attribute_map = {
        'preset_speeches': 'PresetSpeeches',
        'user_speeches': 'UserSpeeches'
    }

    def __init__(self, preset_speeches=None, user_speeches=None, _configuration=None):  # noqa: E501
        """ListAITranslationSpeechResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._preset_speeches = None
        self._user_speeches = None
        self.discriminator = None

        if preset_speeches is not None:
            self.preset_speeches = preset_speeches
        if user_speeches is not None:
            self.user_speeches = user_speeches

    @property
    def preset_speeches(self):
        """Gets the preset_speeches of this ListAITranslationSpeechResponse.  # noqa: E501


        :return: The preset_speeches of this ListAITranslationSpeechResponse.  # noqa: E501
        :rtype: list[PresetSpeechForListAITranslationSpeechOutput]
        """
        return self._preset_speeches

    @preset_speeches.setter
    def preset_speeches(self, preset_speeches):
        """Sets the preset_speeches of this ListAITranslationSpeechResponse.


        :param preset_speeches: The preset_speeches of this ListAITranslationSpeechResponse.  # noqa: E501
        :type: list[PresetSpeechForListAITranslationSpeechOutput]
        """

        self._preset_speeches = preset_speeches

    @property
    def user_speeches(self):
        """Gets the user_speeches of this ListAITranslationSpeechResponse.  # noqa: E501


        :return: The user_speeches of this ListAITranslationSpeechResponse.  # noqa: E501
        :rtype: list[UserSpeechForListAITranslationSpeechOutput]
        """
        return self._user_speeches

    @user_speeches.setter
    def user_speeches(self, user_speeches):
        """Sets the user_speeches of this ListAITranslationSpeechResponse.


        :param user_speeches: The user_speeches of this ListAITranslationSpeechResponse.  # noqa: E501
        :type: list[UserSpeechForListAITranslationSpeechOutput]
        """

        self._user_speeches = user_speeches

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListAITranslationSpeechResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListAITranslationSpeechResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListAITranslationSpeechResponse):
            return True

        return self.to_dict() != other.to_dict()
