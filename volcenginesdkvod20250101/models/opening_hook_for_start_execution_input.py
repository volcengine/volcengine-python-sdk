# coding: utf-8

"""
    vod20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class OpeningHookForStartExecutionInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_duration': 'float',
        'min_clip_duration': 'float',
        'min_duration': 'float',
        'min_score': 'float',
        'with_opening_hook': 'bool'
    }

    attribute_map = {
        'max_duration': 'MaxDuration',
        'min_clip_duration': 'MinClipDuration',
        'min_duration': 'MinDuration',
        'min_score': 'MinScore',
        'with_opening_hook': 'WithOpeningHook'
    }

    def __init__(self, max_duration=None, min_clip_duration=None, min_duration=None, min_score=None, with_opening_hook=None, _configuration=None):  # noqa: E501
        """OpeningHookForStartExecutionInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._max_duration = None
        self._min_clip_duration = None
        self._min_duration = None
        self._min_score = None
        self._with_opening_hook = None
        self.discriminator = None

        if max_duration is not None:
            self.max_duration = max_duration
        if min_clip_duration is not None:
            self.min_clip_duration = min_clip_duration
        if min_duration is not None:
            self.min_duration = min_duration
        if min_score is not None:
            self.min_score = min_score
        if with_opening_hook is not None:
            self.with_opening_hook = with_opening_hook

    @property
    def max_duration(self):
        """Gets the max_duration of this OpeningHookForStartExecutionInput.  # noqa: E501


        :return: The max_duration of this OpeningHookForStartExecutionInput.  # noqa: E501
        :rtype: float
        """
        return self._max_duration

    @max_duration.setter
    def max_duration(self, max_duration):
        """Sets the max_duration of this OpeningHookForStartExecutionInput.


        :param max_duration: The max_duration of this OpeningHookForStartExecutionInput.  # noqa: E501
        :type: float
        """

        self._max_duration = max_duration

    @property
    def min_clip_duration(self):
        """Gets the min_clip_duration of this OpeningHookForStartExecutionInput.  # noqa: E501


        :return: The min_clip_duration of this OpeningHookForStartExecutionInput.  # noqa: E501
        :rtype: float
        """
        return self._min_clip_duration

    @min_clip_duration.setter
    def min_clip_duration(self, min_clip_duration):
        """Sets the min_clip_duration of this OpeningHookForStartExecutionInput.


        :param min_clip_duration: The min_clip_duration of this OpeningHookForStartExecutionInput.  # noqa: E501
        :type: float
        """

        self._min_clip_duration = min_clip_duration

    @property
    def min_duration(self):
        """Gets the min_duration of this OpeningHookForStartExecutionInput.  # noqa: E501


        :return: The min_duration of this OpeningHookForStartExecutionInput.  # noqa: E501
        :rtype: float
        """
        return self._min_duration

    @min_duration.setter
    def min_duration(self, min_duration):
        """Sets the min_duration of this OpeningHookForStartExecutionInput.


        :param min_duration: The min_duration of this OpeningHookForStartExecutionInput.  # noqa: E501
        :type: float
        """

        self._min_duration = min_duration

    @property
    def min_score(self):
        """Gets the min_score of this OpeningHookForStartExecutionInput.  # noqa: E501


        :return: The min_score of this OpeningHookForStartExecutionInput.  # noqa: E501
        :rtype: float
        """
        return self._min_score

    @min_score.setter
    def min_score(self, min_score):
        """Sets the min_score of this OpeningHookForStartExecutionInput.


        :param min_score: The min_score of this OpeningHookForStartExecutionInput.  # noqa: E501
        :type: float
        """

        self._min_score = min_score

    @property
    def with_opening_hook(self):
        """Gets the with_opening_hook of this OpeningHookForStartExecutionInput.  # noqa: E501


        :return: The with_opening_hook of this OpeningHookForStartExecutionInput.  # noqa: E501
        :rtype: bool
        """
        return self._with_opening_hook

    @with_opening_hook.setter
    def with_opening_hook(self, with_opening_hook):
        """Sets the with_opening_hook of this OpeningHookForStartExecutionInput.


        :param with_opening_hook: The with_opening_hook of this OpeningHookForStartExecutionInput.  # noqa: E501
        :type: bool
        """

        self._with_opening_hook = with_opening_hook

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpeningHookForStartExecutionInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpeningHookForStartExecutionInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OpeningHookForStartExecutionInput):
            return True

        return self.to_dict() != other.to_dict()
