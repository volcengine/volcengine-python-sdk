# coding: utf-8

"""
    vod20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class TaskForGetExecutionOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ad_audit': 'AdAuditForGetExecutionOutput',
        'asr': 'AsrForGetExecutionOutput',
        'audio_extract': 'AudioExtractForGetExecutionOutput',
        'erase': 'EraseForGetExecutionOutput',
        'file_delete': 'FileDeleteForGetExecutionOutput',
        'highlight': 'HighlightForGetExecutionOutput',
        'ocr': 'OcrForGetExecutionOutput',
        'segment': 'SegmentForGetExecutionOutput',
        'storyline': 'StorylineForGetExecutionOutput',
        'type': 'str',
        'video_generation': 'VideoGenerationForGetExecutionOutput',
        'video_summary': 'VideoSummaryForGetExecutionOutput',
        'vision': 'VisionForGetExecutionOutput'
    }

    attribute_map = {
        'ad_audit': 'AdAudit',
        'asr': 'Asr',
        'audio_extract': 'AudioExtract',
        'erase': 'Erase',
        'file_delete': 'FileDelete',
        'highlight': 'Highlight',
        'ocr': 'Ocr',
        'segment': 'Segment',
        'storyline': 'Storyline',
        'type': 'Type',
        'video_generation': 'VideoGeneration',
        'video_summary': 'VideoSummary',
        'vision': 'Vision'
    }

    def __init__(self, ad_audit=None, asr=None, audio_extract=None, erase=None, file_delete=None, highlight=None, ocr=None, segment=None, storyline=None, type=None, video_generation=None, video_summary=None, vision=None, _configuration=None):  # noqa: E501
        """TaskForGetExecutionOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ad_audit = None
        self._asr = None
        self._audio_extract = None
        self._erase = None
        self._file_delete = None
        self._highlight = None
        self._ocr = None
        self._segment = None
        self._storyline = None
        self._type = None
        self._video_generation = None
        self._video_summary = None
        self._vision = None
        self.discriminator = None

        if ad_audit is not None:
            self.ad_audit = ad_audit
        if asr is not None:
            self.asr = asr
        if audio_extract is not None:
            self.audio_extract = audio_extract
        if erase is not None:
            self.erase = erase
        if file_delete is not None:
            self.file_delete = file_delete
        if highlight is not None:
            self.highlight = highlight
        if ocr is not None:
            self.ocr = ocr
        if segment is not None:
            self.segment = segment
        if storyline is not None:
            self.storyline = storyline
        if type is not None:
            self.type = type
        if video_generation is not None:
            self.video_generation = video_generation
        if video_summary is not None:
            self.video_summary = video_summary
        if vision is not None:
            self.vision = vision

    @property
    def ad_audit(self):
        """Gets the ad_audit of this TaskForGetExecutionOutput.  # noqa: E501


        :return: The ad_audit of this TaskForGetExecutionOutput.  # noqa: E501
        :rtype: AdAuditForGetExecutionOutput
        """
        return self._ad_audit

    @ad_audit.setter
    def ad_audit(self, ad_audit):
        """Sets the ad_audit of this TaskForGetExecutionOutput.


        :param ad_audit: The ad_audit of this TaskForGetExecutionOutput.  # noqa: E501
        :type: AdAuditForGetExecutionOutput
        """

        self._ad_audit = ad_audit

    @property
    def asr(self):
        """Gets the asr of this TaskForGetExecutionOutput.  # noqa: E501


        :return: The asr of this TaskForGetExecutionOutput.  # noqa: E501
        :rtype: AsrForGetExecutionOutput
        """
        return self._asr

    @asr.setter
    def asr(self, asr):
        """Sets the asr of this TaskForGetExecutionOutput.


        :param asr: The asr of this TaskForGetExecutionOutput.  # noqa: E501
        :type: AsrForGetExecutionOutput
        """

        self._asr = asr

    @property
    def audio_extract(self):
        """Gets the audio_extract of this TaskForGetExecutionOutput.  # noqa: E501


        :return: The audio_extract of this TaskForGetExecutionOutput.  # noqa: E501
        :rtype: AudioExtractForGetExecutionOutput
        """
        return self._audio_extract

    @audio_extract.setter
    def audio_extract(self, audio_extract):
        """Sets the audio_extract of this TaskForGetExecutionOutput.


        :param audio_extract: The audio_extract of this TaskForGetExecutionOutput.  # noqa: E501
        :type: AudioExtractForGetExecutionOutput
        """

        self._audio_extract = audio_extract

    @property
    def erase(self):
        """Gets the erase of this TaskForGetExecutionOutput.  # noqa: E501


        :return: The erase of this TaskForGetExecutionOutput.  # noqa: E501
        :rtype: EraseForGetExecutionOutput
        """
        return self._erase

    @erase.setter
    def erase(self, erase):
        """Sets the erase of this TaskForGetExecutionOutput.


        :param erase: The erase of this TaskForGetExecutionOutput.  # noqa: E501
        :type: EraseForGetExecutionOutput
        """

        self._erase = erase

    @property
    def file_delete(self):
        """Gets the file_delete of this TaskForGetExecutionOutput.  # noqa: E501


        :return: The file_delete of this TaskForGetExecutionOutput.  # noqa: E501
        :rtype: FileDeleteForGetExecutionOutput
        """
        return self._file_delete

    @file_delete.setter
    def file_delete(self, file_delete):
        """Sets the file_delete of this TaskForGetExecutionOutput.


        :param file_delete: The file_delete of this TaskForGetExecutionOutput.  # noqa: E501
        :type: FileDeleteForGetExecutionOutput
        """

        self._file_delete = file_delete

    @property
    def highlight(self):
        """Gets the highlight of this TaskForGetExecutionOutput.  # noqa: E501


        :return: The highlight of this TaskForGetExecutionOutput.  # noqa: E501
        :rtype: HighlightForGetExecutionOutput
        """
        return self._highlight

    @highlight.setter
    def highlight(self, highlight):
        """Sets the highlight of this TaskForGetExecutionOutput.


        :param highlight: The highlight of this TaskForGetExecutionOutput.  # noqa: E501
        :type: HighlightForGetExecutionOutput
        """

        self._highlight = highlight

    @property
    def ocr(self):
        """Gets the ocr of this TaskForGetExecutionOutput.  # noqa: E501


        :return: The ocr of this TaskForGetExecutionOutput.  # noqa: E501
        :rtype: OcrForGetExecutionOutput
        """
        return self._ocr

    @ocr.setter
    def ocr(self, ocr):
        """Sets the ocr of this TaskForGetExecutionOutput.


        :param ocr: The ocr of this TaskForGetExecutionOutput.  # noqa: E501
        :type: OcrForGetExecutionOutput
        """

        self._ocr = ocr

    @property
    def segment(self):
        """Gets the segment of this TaskForGetExecutionOutput.  # noqa: E501


        :return: The segment of this TaskForGetExecutionOutput.  # noqa: E501
        :rtype: SegmentForGetExecutionOutput
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this TaskForGetExecutionOutput.


        :param segment: The segment of this TaskForGetExecutionOutput.  # noqa: E501
        :type: SegmentForGetExecutionOutput
        """

        self._segment = segment

    @property
    def storyline(self):
        """Gets the storyline of this TaskForGetExecutionOutput.  # noqa: E501


        :return: The storyline of this TaskForGetExecutionOutput.  # noqa: E501
        :rtype: StorylineForGetExecutionOutput
        """
        return self._storyline

    @storyline.setter
    def storyline(self, storyline):
        """Sets the storyline of this TaskForGetExecutionOutput.


        :param storyline: The storyline of this TaskForGetExecutionOutput.  # noqa: E501
        :type: StorylineForGetExecutionOutput
        """

        self._storyline = storyline

    @property
    def type(self):
        """Gets the type of this TaskForGetExecutionOutput.  # noqa: E501


        :return: The type of this TaskForGetExecutionOutput.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TaskForGetExecutionOutput.


        :param type: The type of this TaskForGetExecutionOutput.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def video_generation(self):
        """Gets the video_generation of this TaskForGetExecutionOutput.  # noqa: E501


        :return: The video_generation of this TaskForGetExecutionOutput.  # noqa: E501
        :rtype: VideoGenerationForGetExecutionOutput
        """
        return self._video_generation

    @video_generation.setter
    def video_generation(self, video_generation):
        """Sets the video_generation of this TaskForGetExecutionOutput.


        :param video_generation: The video_generation of this TaskForGetExecutionOutput.  # noqa: E501
        :type: VideoGenerationForGetExecutionOutput
        """

        self._video_generation = video_generation

    @property
    def video_summary(self):
        """Gets the video_summary of this TaskForGetExecutionOutput.  # noqa: E501


        :return: The video_summary of this TaskForGetExecutionOutput.  # noqa: E501
        :rtype: VideoSummaryForGetExecutionOutput
        """
        return self._video_summary

    @video_summary.setter
    def video_summary(self, video_summary):
        """Sets the video_summary of this TaskForGetExecutionOutput.


        :param video_summary: The video_summary of this TaskForGetExecutionOutput.  # noqa: E501
        :type: VideoSummaryForGetExecutionOutput
        """

        self._video_summary = video_summary

    @property
    def vision(self):
        """Gets the vision of this TaskForGetExecutionOutput.  # noqa: E501


        :return: The vision of this TaskForGetExecutionOutput.  # noqa: E501
        :rtype: VisionForGetExecutionOutput
        """
        return self._vision

    @vision.setter
    def vision(self, vision):
        """Sets the vision of this TaskForGetExecutionOutput.


        :param vision: The vision of this TaskForGetExecutionOutput.  # noqa: E501
        :type: VisionForGetExecutionOutput
        """

        self._vision = vision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskForGetExecutionOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskForGetExecutionOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskForGetExecutionOutput):
            return True

        return self.to_dict() != other.to_dict()
