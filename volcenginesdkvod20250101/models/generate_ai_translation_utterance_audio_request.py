# coding: utf-8

"""
    vod20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class GenerateAITranslationUtteranceAudioRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'str',
        'space_name': 'str',
        'utterance_id': 'str'
    }

    attribute_map = {
        'project_id': 'ProjectId',
        'space_name': 'SpaceName',
        'utterance_id': 'UtteranceId'
    }

    def __init__(self, project_id=None, space_name=None, utterance_id=None, _configuration=None):  # noqa: E501
        """GenerateAITranslationUtteranceAudioRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._project_id = None
        self._space_name = None
        self._utterance_id = None
        self.discriminator = None

        self.project_id = project_id
        self.space_name = space_name
        self.utterance_id = utterance_id

    @property
    def project_id(self):
        """Gets the project_id of this GenerateAITranslationUtteranceAudioRequest.  # noqa: E501


        :return: The project_id of this GenerateAITranslationUtteranceAudioRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GenerateAITranslationUtteranceAudioRequest.


        :param project_id: The project_id of this GenerateAITranslationUtteranceAudioRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def space_name(self):
        """Gets the space_name of this GenerateAITranslationUtteranceAudioRequest.  # noqa: E501


        :return: The space_name of this GenerateAITranslationUtteranceAudioRequest.  # noqa: E501
        :rtype: str
        """
        return self._space_name

    @space_name.setter
    def space_name(self, space_name):
        """Sets the space_name of this GenerateAITranslationUtteranceAudioRequest.


        :param space_name: The space_name of this GenerateAITranslationUtteranceAudioRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and space_name is None:
            raise ValueError("Invalid value for `space_name`, must not be `None`")  # noqa: E501

        self._space_name = space_name

    @property
    def utterance_id(self):
        """Gets the utterance_id of this GenerateAITranslationUtteranceAudioRequest.  # noqa: E501


        :return: The utterance_id of this GenerateAITranslationUtteranceAudioRequest.  # noqa: E501
        :rtype: str
        """
        return self._utterance_id

    @utterance_id.setter
    def utterance_id(self, utterance_id):
        """Sets the utterance_id of this GenerateAITranslationUtteranceAudioRequest.


        :param utterance_id: The utterance_id of this GenerateAITranslationUtteranceAudioRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and utterance_id is None:
            raise ValueError("Invalid value for `utterance_id`, must not be `None`")  # noqa: E501

        self._utterance_id = utterance_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerateAITranslationUtteranceAudioRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerateAITranslationUtteranceAudioRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GenerateAITranslationUtteranceAudioRequest):
            return True

        return self.to_dict() != other.to_dict()
