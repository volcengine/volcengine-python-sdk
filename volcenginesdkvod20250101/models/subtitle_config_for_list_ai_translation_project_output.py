# coding: utf-8

"""
    vod20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class SubtitleConfigForListAITranslationProjectOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'font_size': 'int',
        'is_erase_source': 'bool',
        'is_hard_subtitle': 'bool',
        'margin_l': 'float',
        'margin_r': 'float',
        'margin_v': 'float',
        'show_lines': 'int'
    }

    attribute_map = {
        'font_size': 'FontSize',
        'is_erase_source': 'IsEraseSource',
        'is_hard_subtitle': 'IsHardSubtitle',
        'margin_l': 'MarginL',
        'margin_r': 'MarginR',
        'margin_v': 'MarginV',
        'show_lines': 'ShowLines'
    }

    def __init__(self, font_size=None, is_erase_source=None, is_hard_subtitle=None, margin_l=None, margin_r=None, margin_v=None, show_lines=None, _configuration=None):  # noqa: E501
        """SubtitleConfigForListAITranslationProjectOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._font_size = None
        self._is_erase_source = None
        self._is_hard_subtitle = None
        self._margin_l = None
        self._margin_r = None
        self._margin_v = None
        self._show_lines = None
        self.discriminator = None

        if font_size is not None:
            self.font_size = font_size
        if is_erase_source is not None:
            self.is_erase_source = is_erase_source
        if is_hard_subtitle is not None:
            self.is_hard_subtitle = is_hard_subtitle
        if margin_l is not None:
            self.margin_l = margin_l
        if margin_r is not None:
            self.margin_r = margin_r
        if margin_v is not None:
            self.margin_v = margin_v
        if show_lines is not None:
            self.show_lines = show_lines

    @property
    def font_size(self):
        """Gets the font_size of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501


        :return: The font_size of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501
        :rtype: int
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """Sets the font_size of this SubtitleConfigForListAITranslationProjectOutput.


        :param font_size: The font_size of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501
        :type: int
        """

        self._font_size = font_size

    @property
    def is_erase_source(self):
        """Gets the is_erase_source of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501


        :return: The is_erase_source of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501
        :rtype: bool
        """
        return self._is_erase_source

    @is_erase_source.setter
    def is_erase_source(self, is_erase_source):
        """Sets the is_erase_source of this SubtitleConfigForListAITranslationProjectOutput.


        :param is_erase_source: The is_erase_source of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501
        :type: bool
        """

        self._is_erase_source = is_erase_source

    @property
    def is_hard_subtitle(self):
        """Gets the is_hard_subtitle of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501


        :return: The is_hard_subtitle of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501
        :rtype: bool
        """
        return self._is_hard_subtitle

    @is_hard_subtitle.setter
    def is_hard_subtitle(self, is_hard_subtitle):
        """Sets the is_hard_subtitle of this SubtitleConfigForListAITranslationProjectOutput.


        :param is_hard_subtitle: The is_hard_subtitle of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501
        :type: bool
        """

        self._is_hard_subtitle = is_hard_subtitle

    @property
    def margin_l(self):
        """Gets the margin_l of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501


        :return: The margin_l of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501
        :rtype: float
        """
        return self._margin_l

    @margin_l.setter
    def margin_l(self, margin_l):
        """Sets the margin_l of this SubtitleConfigForListAITranslationProjectOutput.


        :param margin_l: The margin_l of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501
        :type: float
        """

        self._margin_l = margin_l

    @property
    def margin_r(self):
        """Gets the margin_r of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501


        :return: The margin_r of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501
        :rtype: float
        """
        return self._margin_r

    @margin_r.setter
    def margin_r(self, margin_r):
        """Sets the margin_r of this SubtitleConfigForListAITranslationProjectOutput.


        :param margin_r: The margin_r of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501
        :type: float
        """

        self._margin_r = margin_r

    @property
    def margin_v(self):
        """Gets the margin_v of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501


        :return: The margin_v of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501
        :rtype: float
        """
        return self._margin_v

    @margin_v.setter
    def margin_v(self, margin_v):
        """Sets the margin_v of this SubtitleConfigForListAITranslationProjectOutput.


        :param margin_v: The margin_v of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501
        :type: float
        """

        self._margin_v = margin_v

    @property
    def show_lines(self):
        """Gets the show_lines of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501


        :return: The show_lines of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501
        :rtype: int
        """
        return self._show_lines

    @show_lines.setter
    def show_lines(self, show_lines):
        """Sets the show_lines of this SubtitleConfigForListAITranslationProjectOutput.


        :param show_lines: The show_lines of this SubtitleConfigForListAITranslationProjectOutput.  # noqa: E501
        :type: int
        """

        self._show_lines = show_lines

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubtitleConfigForListAITranslationProjectOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubtitleConfigForListAITranslationProjectOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubtitleConfigForListAITranslationProjectOutput):
            return True

        return self.to_dict() != other.to_dict()
