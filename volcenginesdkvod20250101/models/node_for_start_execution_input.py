# coding: utf-8

"""
    vod20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class NodeForStartExecutionInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dependencies': 'list[str]',
        'input': 'MultiInputForStartExecutionInput',
        'multi_inputs': 'list[MultiInputForStartExecutionInput]',
        'name': 'str',
        'operation': 'OperationForStartExecutionInput',
        'policy': 'PolicyForStartExecutionInput'
    }

    attribute_map = {
        'dependencies': 'Dependencies',
        'input': 'Input',
        'multi_inputs': 'MultiInputs',
        'name': 'Name',
        'operation': 'Operation',
        'policy': 'Policy'
    }

    def __init__(self, dependencies=None, input=None, multi_inputs=None, name=None, operation=None, policy=None, _configuration=None):  # noqa: E501
        """NodeForStartExecutionInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dependencies = None
        self._input = None
        self._multi_inputs = None
        self._name = None
        self._operation = None
        self._policy = None
        self.discriminator = None

        if dependencies is not None:
            self.dependencies = dependencies
        if input is not None:
            self.input = input
        if multi_inputs is not None:
            self.multi_inputs = multi_inputs
        if name is not None:
            self.name = name
        if operation is not None:
            self.operation = operation
        if policy is not None:
            self.policy = policy

    @property
    def dependencies(self):
        """Gets the dependencies of this NodeForStartExecutionInput.  # noqa: E501


        :return: The dependencies of this NodeForStartExecutionInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this NodeForStartExecutionInput.


        :param dependencies: The dependencies of this NodeForStartExecutionInput.  # noqa: E501
        :type: list[str]
        """

        self._dependencies = dependencies

    @property
    def input(self):
        """Gets the input of this NodeForStartExecutionInput.  # noqa: E501


        :return: The input of this NodeForStartExecutionInput.  # noqa: E501
        :rtype: MultiInputForStartExecutionInput
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this NodeForStartExecutionInput.


        :param input: The input of this NodeForStartExecutionInput.  # noqa: E501
        :type: MultiInputForStartExecutionInput
        """

        self._input = input

    @property
    def multi_inputs(self):
        """Gets the multi_inputs of this NodeForStartExecutionInput.  # noqa: E501


        :return: The multi_inputs of this NodeForStartExecutionInput.  # noqa: E501
        :rtype: list[MultiInputForStartExecutionInput]
        """
        return self._multi_inputs

    @multi_inputs.setter
    def multi_inputs(self, multi_inputs):
        """Sets the multi_inputs of this NodeForStartExecutionInput.


        :param multi_inputs: The multi_inputs of this NodeForStartExecutionInput.  # noqa: E501
        :type: list[MultiInputForStartExecutionInput]
        """

        self._multi_inputs = multi_inputs

    @property
    def name(self):
        """Gets the name of this NodeForStartExecutionInput.  # noqa: E501


        :return: The name of this NodeForStartExecutionInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeForStartExecutionInput.


        :param name: The name of this NodeForStartExecutionInput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def operation(self):
        """Gets the operation of this NodeForStartExecutionInput.  # noqa: E501


        :return: The operation of this NodeForStartExecutionInput.  # noqa: E501
        :rtype: OperationForStartExecutionInput
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this NodeForStartExecutionInput.


        :param operation: The operation of this NodeForStartExecutionInput.  # noqa: E501
        :type: OperationForStartExecutionInput
        """

        self._operation = operation

    @property
    def policy(self):
        """Gets the policy of this NodeForStartExecutionInput.  # noqa: E501


        :return: The policy of this NodeForStartExecutionInput.  # noqa: E501
        :rtype: PolicyForStartExecutionInput
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this NodeForStartExecutionInput.


        :param policy: The policy of this NodeForStartExecutionInput.  # noqa: E501
        :type: PolicyForStartExecutionInput
        """

        self._policy = policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeForStartExecutionInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeForStartExecutionInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NodeForStartExecutionInput):
            return True

        return self.to_dict() != other.to_dict()
