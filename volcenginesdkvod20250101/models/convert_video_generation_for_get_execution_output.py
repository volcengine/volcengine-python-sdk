# coding: utf-8

"""
    vod20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ConvertVideoGenerationForGetExecutionOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'duration': 'float',
        'model': 'str',
        'resolution': 'str',
        'video': 'VideoForGetExecutionOutput'
    }

    attribute_map = {
        'duration': 'Duration',
        'model': 'Model',
        'resolution': 'Resolution',
        'video': 'Video'
    }

    def __init__(self, duration=None, model=None, resolution=None, video=None, _configuration=None):  # noqa: E501
        """ConvertVideoGenerationForGetExecutionOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._duration = None
        self._model = None
        self._resolution = None
        self._video = None
        self.discriminator = None

        if duration is not None:
            self.duration = duration
        if model is not None:
            self.model = model
        if resolution is not None:
            self.resolution = resolution
        if video is not None:
            self.video = video

    @property
    def duration(self):
        """Gets the duration of this ConvertVideoGenerationForGetExecutionOutput.  # noqa: E501


        :return: The duration of this ConvertVideoGenerationForGetExecutionOutput.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ConvertVideoGenerationForGetExecutionOutput.


        :param duration: The duration of this ConvertVideoGenerationForGetExecutionOutput.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def model(self):
        """Gets the model of this ConvertVideoGenerationForGetExecutionOutput.  # noqa: E501


        :return: The model of this ConvertVideoGenerationForGetExecutionOutput.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ConvertVideoGenerationForGetExecutionOutput.


        :param model: The model of this ConvertVideoGenerationForGetExecutionOutput.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def resolution(self):
        """Gets the resolution of this ConvertVideoGenerationForGetExecutionOutput.  # noqa: E501


        :return: The resolution of this ConvertVideoGenerationForGetExecutionOutput.  # noqa: E501
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this ConvertVideoGenerationForGetExecutionOutput.


        :param resolution: The resolution of this ConvertVideoGenerationForGetExecutionOutput.  # noqa: E501
        :type: str
        """

        self._resolution = resolution

    @property
    def video(self):
        """Gets the video of this ConvertVideoGenerationForGetExecutionOutput.  # noqa: E501


        :return: The video of this ConvertVideoGenerationForGetExecutionOutput.  # noqa: E501
        :rtype: VideoForGetExecutionOutput
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this ConvertVideoGenerationForGetExecutionOutput.


        :param video: The video of this ConvertVideoGenerationForGetExecutionOutput.  # noqa: E501
        :type: VideoForGetExecutionOutput
        """

        self._video = video

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConvertVideoGenerationForGetExecutionOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConvertVideoGenerationForGetExecutionOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConvertVideoGenerationForGetExecutionOutput):
            return True

        return self.to_dict() != other.to_dict()
