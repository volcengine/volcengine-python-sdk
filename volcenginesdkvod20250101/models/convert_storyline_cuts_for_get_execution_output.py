# coding: utf-8

"""
    vod20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ConvertStorylineCutsForGetExecutionOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cut_segments': 'list[CutSegmentForGetExecutionOutput]',
        'segments': 'list[ConvertConvertSegmentForGetExecutionOutput]',
        'storylines': 'list[ConvertStorylineForGetExecutionOutput]'
    }

    attribute_map = {
        'cut_segments': 'CutSegments',
        'segments': 'Segments',
        'storylines': 'Storylines'
    }

    def __init__(self, cut_segments=None, segments=None, storylines=None, _configuration=None):  # noqa: E501
        """ConvertStorylineCutsForGetExecutionOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cut_segments = None
        self._segments = None
        self._storylines = None
        self.discriminator = None

        if cut_segments is not None:
            self.cut_segments = cut_segments
        if segments is not None:
            self.segments = segments
        if storylines is not None:
            self.storylines = storylines

    @property
    def cut_segments(self):
        """Gets the cut_segments of this ConvertStorylineCutsForGetExecutionOutput.  # noqa: E501


        :return: The cut_segments of this ConvertStorylineCutsForGetExecutionOutput.  # noqa: E501
        :rtype: list[CutSegmentForGetExecutionOutput]
        """
        return self._cut_segments

    @cut_segments.setter
    def cut_segments(self, cut_segments):
        """Sets the cut_segments of this ConvertStorylineCutsForGetExecutionOutput.


        :param cut_segments: The cut_segments of this ConvertStorylineCutsForGetExecutionOutput.  # noqa: E501
        :type: list[CutSegmentForGetExecutionOutput]
        """

        self._cut_segments = cut_segments

    @property
    def segments(self):
        """Gets the segments of this ConvertStorylineCutsForGetExecutionOutput.  # noqa: E501


        :return: The segments of this ConvertStorylineCutsForGetExecutionOutput.  # noqa: E501
        :rtype: list[ConvertConvertSegmentForGetExecutionOutput]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this ConvertStorylineCutsForGetExecutionOutput.


        :param segments: The segments of this ConvertStorylineCutsForGetExecutionOutput.  # noqa: E501
        :type: list[ConvertConvertSegmentForGetExecutionOutput]
        """

        self._segments = segments

    @property
    def storylines(self):
        """Gets the storylines of this ConvertStorylineCutsForGetExecutionOutput.  # noqa: E501


        :return: The storylines of this ConvertStorylineCutsForGetExecutionOutput.  # noqa: E501
        :rtype: list[ConvertStorylineForGetExecutionOutput]
        """
        return self._storylines

    @storylines.setter
    def storylines(self, storylines):
        """Sets the storylines of this ConvertStorylineCutsForGetExecutionOutput.


        :param storylines: The storylines of this ConvertStorylineCutsForGetExecutionOutput.  # noqa: E501
        :type: list[ConvertStorylineForGetExecutionOutput]
        """

        self._storylines = storylines

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConvertStorylineCutsForGetExecutionOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConvertStorylineCutsForGetExecutionOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConvertStorylineCutsForGetExecutionOutput):
            return True

        return self.to_dict() != other.to_dict()
