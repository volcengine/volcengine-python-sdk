# coding: utf-8

"""
    vod20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class SubtitleRecognitionConfigForListAITranslationProjectOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bilingual_subtitle_file_name': 'str',
        'recognition_type': 'str',
        'source_subtitle_file_name': 'str',
        'subtitle_file_name': 'str',
        'target_subtitle_file_name': 'str'
    }

    attribute_map = {
        'bilingual_subtitle_file_name': 'BilingualSubtitleFileName',
        'recognition_type': 'RecognitionType',
        'source_subtitle_file_name': 'SourceSubtitleFileName',
        'subtitle_file_name': 'SubtitleFileName',
        'target_subtitle_file_name': 'TargetSubtitleFileName'
    }

    def __init__(self, bilingual_subtitle_file_name=None, recognition_type=None, source_subtitle_file_name=None, subtitle_file_name=None, target_subtitle_file_name=None, _configuration=None):  # noqa: E501
        """SubtitleRecognitionConfigForListAITranslationProjectOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bilingual_subtitle_file_name = None
        self._recognition_type = None
        self._source_subtitle_file_name = None
        self._subtitle_file_name = None
        self._target_subtitle_file_name = None
        self.discriminator = None

        if bilingual_subtitle_file_name is not None:
            self.bilingual_subtitle_file_name = bilingual_subtitle_file_name
        if recognition_type is not None:
            self.recognition_type = recognition_type
        if source_subtitle_file_name is not None:
            self.source_subtitle_file_name = source_subtitle_file_name
        if subtitle_file_name is not None:
            self.subtitle_file_name = subtitle_file_name
        if target_subtitle_file_name is not None:
            self.target_subtitle_file_name = target_subtitle_file_name

    @property
    def bilingual_subtitle_file_name(self):
        """Gets the bilingual_subtitle_file_name of this SubtitleRecognitionConfigForListAITranslationProjectOutput.  # noqa: E501


        :return: The bilingual_subtitle_file_name of this SubtitleRecognitionConfigForListAITranslationProjectOutput.  # noqa: E501
        :rtype: str
        """
        return self._bilingual_subtitle_file_name

    @bilingual_subtitle_file_name.setter
    def bilingual_subtitle_file_name(self, bilingual_subtitle_file_name):
        """Sets the bilingual_subtitle_file_name of this SubtitleRecognitionConfigForListAITranslationProjectOutput.


        :param bilingual_subtitle_file_name: The bilingual_subtitle_file_name of this SubtitleRecognitionConfigForListAITranslationProjectOutput.  # noqa: E501
        :type: str
        """

        self._bilingual_subtitle_file_name = bilingual_subtitle_file_name

    @property
    def recognition_type(self):
        """Gets the recognition_type of this SubtitleRecognitionConfigForListAITranslationProjectOutput.  # noqa: E501


        :return: The recognition_type of this SubtitleRecognitionConfigForListAITranslationProjectOutput.  # noqa: E501
        :rtype: str
        """
        return self._recognition_type

    @recognition_type.setter
    def recognition_type(self, recognition_type):
        """Sets the recognition_type of this SubtitleRecognitionConfigForListAITranslationProjectOutput.


        :param recognition_type: The recognition_type of this SubtitleRecognitionConfigForListAITranslationProjectOutput.  # noqa: E501
        :type: str
        """

        self._recognition_type = recognition_type

    @property
    def source_subtitle_file_name(self):
        """Gets the source_subtitle_file_name of this SubtitleRecognitionConfigForListAITranslationProjectOutput.  # noqa: E501


        :return: The source_subtitle_file_name of this SubtitleRecognitionConfigForListAITranslationProjectOutput.  # noqa: E501
        :rtype: str
        """
        return self._source_subtitle_file_name

    @source_subtitle_file_name.setter
    def source_subtitle_file_name(self, source_subtitle_file_name):
        """Sets the source_subtitle_file_name of this SubtitleRecognitionConfigForListAITranslationProjectOutput.


        :param source_subtitle_file_name: The source_subtitle_file_name of this SubtitleRecognitionConfigForListAITranslationProjectOutput.  # noqa: E501
        :type: str
        """

        self._source_subtitle_file_name = source_subtitle_file_name

    @property
    def subtitle_file_name(self):
        """Gets the subtitle_file_name of this SubtitleRecognitionConfigForListAITranslationProjectOutput.  # noqa: E501


        :return: The subtitle_file_name of this SubtitleRecognitionConfigForListAITranslationProjectOutput.  # noqa: E501
        :rtype: str
        """
        return self._subtitle_file_name

    @subtitle_file_name.setter
    def subtitle_file_name(self, subtitle_file_name):
        """Sets the subtitle_file_name of this SubtitleRecognitionConfigForListAITranslationProjectOutput.


        :param subtitle_file_name: The subtitle_file_name of this SubtitleRecognitionConfigForListAITranslationProjectOutput.  # noqa: E501
        :type: str
        """

        self._subtitle_file_name = subtitle_file_name

    @property
    def target_subtitle_file_name(self):
        """Gets the target_subtitle_file_name of this SubtitleRecognitionConfigForListAITranslationProjectOutput.  # noqa: E501


        :return: The target_subtitle_file_name of this SubtitleRecognitionConfigForListAITranslationProjectOutput.  # noqa: E501
        :rtype: str
        """
        return self._target_subtitle_file_name

    @target_subtitle_file_name.setter
    def target_subtitle_file_name(self, target_subtitle_file_name):
        """Sets the target_subtitle_file_name of this SubtitleRecognitionConfigForListAITranslationProjectOutput.


        :param target_subtitle_file_name: The target_subtitle_file_name of this SubtitleRecognitionConfigForListAITranslationProjectOutput.  # noqa: E501
        :type: str
        """

        self._target_subtitle_file_name = target_subtitle_file_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubtitleRecognitionConfigForListAITranslationProjectOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubtitleRecognitionConfigForListAITranslationProjectOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubtitleRecognitionConfigForListAITranslationProjectOutput):
            return True

        return self.to_dict() != other.to_dict()
