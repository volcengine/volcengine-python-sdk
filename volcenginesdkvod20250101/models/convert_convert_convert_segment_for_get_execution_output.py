# coding: utf-8

"""
    vod20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ConvertConvertConvertSegmentForGetExecutionOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end': 'float',
        'file': 'FileForGetExecutionOutput',
        'frames': 'list[int]',
        'start': 'float'
    }

    attribute_map = {
        'end': 'End',
        'file': 'File',
        'frames': 'Frames',
        'start': 'Start'
    }

    def __init__(self, end=None, file=None, frames=None, start=None, _configuration=None):  # noqa: E501
        """ConvertConvertConvertSegmentForGetExecutionOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._end = None
        self._file = None
        self._frames = None
        self._start = None
        self.discriminator = None

        if end is not None:
            self.end = end
        if file is not None:
            self.file = file
        if frames is not None:
            self.frames = frames
        if start is not None:
            self.start = start

    @property
    def end(self):
        """Gets the end of this ConvertConvertConvertSegmentForGetExecutionOutput.  # noqa: E501


        :return: The end of this ConvertConvertConvertSegmentForGetExecutionOutput.  # noqa: E501
        :rtype: float
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this ConvertConvertConvertSegmentForGetExecutionOutput.


        :param end: The end of this ConvertConvertConvertSegmentForGetExecutionOutput.  # noqa: E501
        :type: float
        """

        self._end = end

    @property
    def file(self):
        """Gets the file of this ConvertConvertConvertSegmentForGetExecutionOutput.  # noqa: E501


        :return: The file of this ConvertConvertConvertSegmentForGetExecutionOutput.  # noqa: E501
        :rtype: FileForGetExecutionOutput
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this ConvertConvertConvertSegmentForGetExecutionOutput.


        :param file: The file of this ConvertConvertConvertSegmentForGetExecutionOutput.  # noqa: E501
        :type: FileForGetExecutionOutput
        """

        self._file = file

    @property
    def frames(self):
        """Gets the frames of this ConvertConvertConvertSegmentForGetExecutionOutput.  # noqa: E501


        :return: The frames of this ConvertConvertConvertSegmentForGetExecutionOutput.  # noqa: E501
        :rtype: list[int]
        """
        return self._frames

    @frames.setter
    def frames(self, frames):
        """Sets the frames of this ConvertConvertConvertSegmentForGetExecutionOutput.


        :param frames: The frames of this ConvertConvertConvertSegmentForGetExecutionOutput.  # noqa: E501
        :type: list[int]
        """

        self._frames = frames

    @property
    def start(self):
        """Gets the start of this ConvertConvertConvertSegmentForGetExecutionOutput.  # noqa: E501


        :return: The start of this ConvertConvertConvertSegmentForGetExecutionOutput.  # noqa: E501
        :rtype: float
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ConvertConvertConvertSegmentForGetExecutionOutput.


        :param start: The start of this ConvertConvertConvertSegmentForGetExecutionOutput.  # noqa: E501
        :type: float
        """

        self._start = start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConvertConvertConvertSegmentForGetExecutionOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConvertConvertConvertSegmentForGetExecutionOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConvertConvertConvertSegmentForGetExecutionOutput):
            return True

        return self.to_dict() != other.to_dict()
