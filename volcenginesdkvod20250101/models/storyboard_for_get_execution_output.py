# coding: utf-8

"""
    vod20250101

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class StoryboardForGetExecutionOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'end': 'float',
        'ocr': 'str',
        'score': 'float',
        'start': 'float',
        'video_index': 'int'
    }

    attribute_map = {
        'description': 'Description',
        'end': 'End',
        'ocr': 'Ocr',
        'score': 'Score',
        'start': 'Start',
        'video_index': 'VideoIndex'
    }

    def __init__(self, description=None, end=None, ocr=None, score=None, start=None, video_index=None, _configuration=None):  # noqa: E501
        """StoryboardForGetExecutionOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._end = None
        self._ocr = None
        self._score = None
        self._start = None
        self._video_index = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if end is not None:
            self.end = end
        if ocr is not None:
            self.ocr = ocr
        if score is not None:
            self.score = score
        if start is not None:
            self.start = start
        if video_index is not None:
            self.video_index = video_index

    @property
    def description(self):
        """Gets the description of this StoryboardForGetExecutionOutput.  # noqa: E501


        :return: The description of this StoryboardForGetExecutionOutput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StoryboardForGetExecutionOutput.


        :param description: The description of this StoryboardForGetExecutionOutput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def end(self):
        """Gets the end of this StoryboardForGetExecutionOutput.  # noqa: E501


        :return: The end of this StoryboardForGetExecutionOutput.  # noqa: E501
        :rtype: float
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this StoryboardForGetExecutionOutput.


        :param end: The end of this StoryboardForGetExecutionOutput.  # noqa: E501
        :type: float
        """

        self._end = end

    @property
    def ocr(self):
        """Gets the ocr of this StoryboardForGetExecutionOutput.  # noqa: E501


        :return: The ocr of this StoryboardForGetExecutionOutput.  # noqa: E501
        :rtype: str
        """
        return self._ocr

    @ocr.setter
    def ocr(self, ocr):
        """Sets the ocr of this StoryboardForGetExecutionOutput.


        :param ocr: The ocr of this StoryboardForGetExecutionOutput.  # noqa: E501
        :type: str
        """

        self._ocr = ocr

    @property
    def score(self):
        """Gets the score of this StoryboardForGetExecutionOutput.  # noqa: E501


        :return: The score of this StoryboardForGetExecutionOutput.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this StoryboardForGetExecutionOutput.


        :param score: The score of this StoryboardForGetExecutionOutput.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def start(self):
        """Gets the start of this StoryboardForGetExecutionOutput.  # noqa: E501


        :return: The start of this StoryboardForGetExecutionOutput.  # noqa: E501
        :rtype: float
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this StoryboardForGetExecutionOutput.


        :param start: The start of this StoryboardForGetExecutionOutput.  # noqa: E501
        :type: float
        """

        self._start = start

    @property
    def video_index(self):
        """Gets the video_index of this StoryboardForGetExecutionOutput.  # noqa: E501


        :return: The video_index of this StoryboardForGetExecutionOutput.  # noqa: E501
        :rtype: int
        """
        return self._video_index

    @video_index.setter
    def video_index(self, video_index):
        """Sets the video_index of this StoryboardForGetExecutionOutput.


        :param video_index: The video_index of this StoryboardForGetExecutionOutput.  # noqa: E501
        :type: int
        """

        self._video_index = video_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoryboardForGetExecutionOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoryboardForGetExecutionOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StoryboardForGetExecutionOutput):
            return True

        return self.to_dict() != other.to_dict()
