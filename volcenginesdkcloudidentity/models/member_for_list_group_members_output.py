# coding: utf-8

"""
    cloudidentity

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class MemberForListGroupMembersOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'display_name': 'str',
        'email': 'str',
        'identity_type': 'str',
        'join_time': 'str',
        'phone': 'str',
        'source': 'str',
        'user_id': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'description': 'Description',
        'display_name': 'DisplayName',
        'email': 'Email',
        'identity_type': 'IdentityType',
        'join_time': 'JoinTime',
        'phone': 'Phone',
        'source': 'Source',
        'user_id': 'UserId',
        'user_name': 'UserName'
    }

    def __init__(self, description=None, display_name=None, email=None, identity_type=None, join_time=None, phone=None, source=None, user_id=None, user_name=None, _configuration=None):  # noqa: E501
        """MemberForListGroupMembersOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._display_name = None
        self._email = None
        self._identity_type = None
        self._join_time = None
        self._phone = None
        self._source = None
        self._user_id = None
        self._user_name = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if email is not None:
            self.email = email
        if identity_type is not None:
            self.identity_type = identity_type
        if join_time is not None:
            self.join_time = join_time
        if phone is not None:
            self.phone = phone
        if source is not None:
            self.source = source
        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name

    @property
    def description(self):
        """Gets the description of this MemberForListGroupMembersOutput.  # noqa: E501


        :return: The description of this MemberForListGroupMembersOutput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MemberForListGroupMembersOutput.


        :param description: The description of this MemberForListGroupMembersOutput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this MemberForListGroupMembersOutput.  # noqa: E501


        :return: The display_name of this MemberForListGroupMembersOutput.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MemberForListGroupMembersOutput.


        :param display_name: The display_name of this MemberForListGroupMembersOutput.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this MemberForListGroupMembersOutput.  # noqa: E501


        :return: The email of this MemberForListGroupMembersOutput.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this MemberForListGroupMembersOutput.


        :param email: The email of this MemberForListGroupMembersOutput.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def identity_type(self):
        """Gets the identity_type of this MemberForListGroupMembersOutput.  # noqa: E501


        :return: The identity_type of this MemberForListGroupMembersOutput.  # noqa: E501
        :rtype: str
        """
        return self._identity_type

    @identity_type.setter
    def identity_type(self, identity_type):
        """Sets the identity_type of this MemberForListGroupMembersOutput.


        :param identity_type: The identity_type of this MemberForListGroupMembersOutput.  # noqa: E501
        :type: str
        """

        self._identity_type = identity_type

    @property
    def join_time(self):
        """Gets the join_time of this MemberForListGroupMembersOutput.  # noqa: E501


        :return: The join_time of this MemberForListGroupMembersOutput.  # noqa: E501
        :rtype: str
        """
        return self._join_time

    @join_time.setter
    def join_time(self, join_time):
        """Sets the join_time of this MemberForListGroupMembersOutput.


        :param join_time: The join_time of this MemberForListGroupMembersOutput.  # noqa: E501
        :type: str
        """

        self._join_time = join_time

    @property
    def phone(self):
        """Gets the phone of this MemberForListGroupMembersOutput.  # noqa: E501


        :return: The phone of this MemberForListGroupMembersOutput.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this MemberForListGroupMembersOutput.


        :param phone: The phone of this MemberForListGroupMembersOutput.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def source(self):
        """Gets the source of this MemberForListGroupMembersOutput.  # noqa: E501


        :return: The source of this MemberForListGroupMembersOutput.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this MemberForListGroupMembersOutput.


        :param source: The source of this MemberForListGroupMembersOutput.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def user_id(self):
        """Gets the user_id of this MemberForListGroupMembersOutput.  # noqa: E501


        :return: The user_id of this MemberForListGroupMembersOutput.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this MemberForListGroupMembersOutput.


        :param user_id: The user_id of this MemberForListGroupMembersOutput.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this MemberForListGroupMembersOutput.  # noqa: E501


        :return: The user_name of this MemberForListGroupMembersOutput.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this MemberForListGroupMembersOutput.


        :param user_name: The user_name of this MemberForListGroupMembersOutput.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MemberForListGroupMembersOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemberForListGroupMembersOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MemberForListGroupMembersOutput):
            return True

        return self.to_dict() != other.to_dict()
