# coding: utf-8

"""
    cloudidentity

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class UpdatePermissionSetRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'permission_set_id': 'str',
        'relay_state': 'str',
        'session_duration': 'int'
    }

    attribute_map = {
        'description': 'Description',
        'permission_set_id': 'PermissionSetId',
        'relay_state': 'RelayState',
        'session_duration': 'SessionDuration'
    }

    def __init__(self, description=None, permission_set_id=None, relay_state=None, session_duration=None, _configuration=None):  # noqa: E501
        """UpdatePermissionSetRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._permission_set_id = None
        self._relay_state = None
        self._session_duration = None
        self.discriminator = None

        if description is not None:
            self.description = description
        self.permission_set_id = permission_set_id
        if relay_state is not None:
            self.relay_state = relay_state
        if session_duration is not None:
            self.session_duration = session_duration

    @property
    def description(self):
        """Gets the description of this UpdatePermissionSetRequest.  # noqa: E501


        :return: The description of this UpdatePermissionSetRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdatePermissionSetRequest.


        :param description: The description of this UpdatePermissionSetRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 255):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501

        self._description = description

    @property
    def permission_set_id(self):
        """Gets the permission_set_id of this UpdatePermissionSetRequest.  # noqa: E501


        :return: The permission_set_id of this UpdatePermissionSetRequest.  # noqa: E501
        :rtype: str
        """
        return self._permission_set_id

    @permission_set_id.setter
    def permission_set_id(self, permission_set_id):
        """Sets the permission_set_id of this UpdatePermissionSetRequest.


        :param permission_set_id: The permission_set_id of this UpdatePermissionSetRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and permission_set_id is None:
            raise ValueError("Invalid value for `permission_set_id`, must not be `None`")  # noqa: E501

        self._permission_set_id = permission_set_id

    @property
    def relay_state(self):
        """Gets the relay_state of this UpdatePermissionSetRequest.  # noqa: E501


        :return: The relay_state of this UpdatePermissionSetRequest.  # noqa: E501
        :rtype: str
        """
        return self._relay_state

    @relay_state.setter
    def relay_state(self, relay_state):
        """Sets the relay_state of this UpdatePermissionSetRequest.


        :param relay_state: The relay_state of this UpdatePermissionSetRequest.  # noqa: E501
        :type: str
        """

        self._relay_state = relay_state

    @property
    def session_duration(self):
        """Gets the session_duration of this UpdatePermissionSetRequest.  # noqa: E501


        :return: The session_duration of this UpdatePermissionSetRequest.  # noqa: E501
        :rtype: int
        """
        return self._session_duration

    @session_duration.setter
    def session_duration(self, session_duration):
        """Sets the session_duration of this UpdatePermissionSetRequest.


        :param session_duration: The session_duration of this UpdatePermissionSetRequest.  # noqa: E501
        :type: int
        """

        self._session_duration = session_duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdatePermissionSetRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdatePermissionSetRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdatePermissionSetRequest):
            return True

        return self.to_dict() != other.to_dict()
