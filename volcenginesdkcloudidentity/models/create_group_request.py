# coding: utf-8

"""
    cloudidentity

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateGroupRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'display_name': 'str',
        'group_name': 'str',
        'join_type': 'str'
    }

    attribute_map = {
        'description': 'Description',
        'display_name': 'DisplayName',
        'group_name': 'GroupName',
        'join_type': 'JoinType'
    }

    def __init__(self, description=None, display_name=None, group_name=None, join_type=None, _configuration=None):  # noqa: E501
        """CreateGroupRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._display_name = None
        self._group_name = None
        self._join_type = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        self.group_name = group_name
        self.join_type = join_type

    @property
    def description(self):
        """Gets the description of this CreateGroupRequest.  # noqa: E501


        :return: The description of this CreateGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateGroupRequest.


        :param description: The description of this CreateGroupRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 128):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `128`")  # noqa: E501

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this CreateGroupRequest.  # noqa: E501


        :return: The display_name of this CreateGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CreateGroupRequest.


        :param display_name: The display_name of this CreateGroupRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                display_name is not None and len(display_name) > 64):
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `64`")  # noqa: E501

        self._display_name = display_name

    @property
    def group_name(self):
        """Gets the group_name of this CreateGroupRequest.  # noqa: E501


        :return: The group_name of this CreateGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this CreateGroupRequest.


        :param group_name: The group_name of this CreateGroupRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and group_name is None:
            raise ValueError("Invalid value for `group_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                group_name is not None and len(group_name) > 63):
            raise ValueError("Invalid value for `group_name`, length must be less than or equal to `63`")  # noqa: E501

        self._group_name = group_name

    @property
    def join_type(self):
        """Gets the join_type of this CreateGroupRequest.  # noqa: E501


        :return: The join_type of this CreateGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._join_type

    @join_type.setter
    def join_type(self, join_type):
        """Sets the join_type of this CreateGroupRequest.


        :param join_type: The join_type of this CreateGroupRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and join_type is None:
            raise ValueError("Invalid value for `join_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Manual", "Auto"]  # noqa: E501
        if (self._configuration.client_side_validation and
                join_type not in allowed_values):
            raise ValueError(
                "Invalid value for `join_type` ({0}), must be one of {1}"  # noqa: E501
                .format(join_type, allowed_values)
            )

        self._join_type = join_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateGroupRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateGroupRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateGroupRequest):
            return True

        return self.to_dict() != other.to_dict()
