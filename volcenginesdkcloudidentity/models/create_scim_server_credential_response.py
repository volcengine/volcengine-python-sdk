# coding: utf-8

"""
    cloudidentity

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateSCIMServerCredentialResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_time': 'str',
        'credential_id': 'str',
        'credential_secret': 'str',
        'credential_type': 'str',
        'expire_time': 'str',
        'status': 'str'
    }

    attribute_map = {
        'created_time': 'CreatedTime',
        'credential_id': 'CredentialId',
        'credential_secret': 'CredentialSecret',
        'credential_type': 'CredentialType',
        'expire_time': 'ExpireTime',
        'status': 'Status'
    }

    def __init__(self, created_time=None, credential_id=None, credential_secret=None, credential_type=None, expire_time=None, status=None, _configuration=None):  # noqa: E501
        """CreateSCIMServerCredentialResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created_time = None
        self._credential_id = None
        self._credential_secret = None
        self._credential_type = None
        self._expire_time = None
        self._status = None
        self.discriminator = None

        if created_time is not None:
            self.created_time = created_time
        if credential_id is not None:
            self.credential_id = credential_id
        if credential_secret is not None:
            self.credential_secret = credential_secret
        if credential_type is not None:
            self.credential_type = credential_type
        if expire_time is not None:
            self.expire_time = expire_time
        if status is not None:
            self.status = status

    @property
    def created_time(self):
        """Gets the created_time of this CreateSCIMServerCredentialResponse.  # noqa: E501


        :return: The created_time of this CreateSCIMServerCredentialResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this CreateSCIMServerCredentialResponse.


        :param created_time: The created_time of this CreateSCIMServerCredentialResponse.  # noqa: E501
        :type: str
        """

        self._created_time = created_time

    @property
    def credential_id(self):
        """Gets the credential_id of this CreateSCIMServerCredentialResponse.  # noqa: E501


        :return: The credential_id of this CreateSCIMServerCredentialResponse.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this CreateSCIMServerCredentialResponse.


        :param credential_id: The credential_id of this CreateSCIMServerCredentialResponse.  # noqa: E501
        :type: str
        """

        self._credential_id = credential_id

    @property
    def credential_secret(self):
        """Gets the credential_secret of this CreateSCIMServerCredentialResponse.  # noqa: E501


        :return: The credential_secret of this CreateSCIMServerCredentialResponse.  # noqa: E501
        :rtype: str
        """
        return self._credential_secret

    @credential_secret.setter
    def credential_secret(self, credential_secret):
        """Sets the credential_secret of this CreateSCIMServerCredentialResponse.


        :param credential_secret: The credential_secret of this CreateSCIMServerCredentialResponse.  # noqa: E501
        :type: str
        """

        self._credential_secret = credential_secret

    @property
    def credential_type(self):
        """Gets the credential_type of this CreateSCIMServerCredentialResponse.  # noqa: E501


        :return: The credential_type of this CreateSCIMServerCredentialResponse.  # noqa: E501
        :rtype: str
        """
        return self._credential_type

    @credential_type.setter
    def credential_type(self, credential_type):
        """Sets the credential_type of this CreateSCIMServerCredentialResponse.


        :param credential_type: The credential_type of this CreateSCIMServerCredentialResponse.  # noqa: E501
        :type: str
        """

        self._credential_type = credential_type

    @property
    def expire_time(self):
        """Gets the expire_time of this CreateSCIMServerCredentialResponse.  # noqa: E501


        :return: The expire_time of this CreateSCIMServerCredentialResponse.  # noqa: E501
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this CreateSCIMServerCredentialResponse.


        :param expire_time: The expire_time of this CreateSCIMServerCredentialResponse.  # noqa: E501
        :type: str
        """

        self._expire_time = expire_time

    @property
    def status(self):
        """Gets the status of this CreateSCIMServerCredentialResponse.  # noqa: E501


        :return: The status of this CreateSCIMServerCredentialResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateSCIMServerCredentialResponse.


        :param status: The status of this CreateSCIMServerCredentialResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateSCIMServerCredentialResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSCIMServerCredentialResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateSCIMServerCredentialResponse):
            return True

        return self.to_dict() != other.to_dict()
