# coding: utf-8

"""
    waf

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ModifyServiceDefenceModeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'defence_mode': 'int',
        'extra_defence_mode_lb_instance': 'list[ExtraDefenceModeLBInstanceForModifyServiceDefenceModeInput]',
        'host': 'str',
        'project_name': 'str'
    }

    attribute_map = {
        'defence_mode': 'DefenceMode',
        'extra_defence_mode_lb_instance': 'ExtraDefenceModeLBInstance',
        'host': 'Host',
        'project_name': 'ProjectName'
    }

    def __init__(self, defence_mode=None, extra_defence_mode_lb_instance=None, host=None, project_name=None, _configuration=None):  # noqa: E501
        """ModifyServiceDefenceModeRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._defence_mode = None
        self._extra_defence_mode_lb_instance = None
        self._host = None
        self._project_name = None
        self.discriminator = None

        self.defence_mode = defence_mode
        if extra_defence_mode_lb_instance is not None:
            self.extra_defence_mode_lb_instance = extra_defence_mode_lb_instance
        self.host = host
        if project_name is not None:
            self.project_name = project_name

    @property
    def defence_mode(self):
        """Gets the defence_mode of this ModifyServiceDefenceModeRequest.  # noqa: E501


        :return: The defence_mode of this ModifyServiceDefenceModeRequest.  # noqa: E501
        :rtype: int
        """
        return self._defence_mode

    @defence_mode.setter
    def defence_mode(self, defence_mode):
        """Sets the defence_mode of this ModifyServiceDefenceModeRequest.


        :param defence_mode: The defence_mode of this ModifyServiceDefenceModeRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and defence_mode is None:
            raise ValueError("Invalid value for `defence_mode`, must not be `None`")  # noqa: E501

        self._defence_mode = defence_mode

    @property
    def extra_defence_mode_lb_instance(self):
        """Gets the extra_defence_mode_lb_instance of this ModifyServiceDefenceModeRequest.  # noqa: E501


        :return: The extra_defence_mode_lb_instance of this ModifyServiceDefenceModeRequest.  # noqa: E501
        :rtype: list[ExtraDefenceModeLBInstanceForModifyServiceDefenceModeInput]
        """
        return self._extra_defence_mode_lb_instance

    @extra_defence_mode_lb_instance.setter
    def extra_defence_mode_lb_instance(self, extra_defence_mode_lb_instance):
        """Sets the extra_defence_mode_lb_instance of this ModifyServiceDefenceModeRequest.


        :param extra_defence_mode_lb_instance: The extra_defence_mode_lb_instance of this ModifyServiceDefenceModeRequest.  # noqa: E501
        :type: list[ExtraDefenceModeLBInstanceForModifyServiceDefenceModeInput]
        """

        self._extra_defence_mode_lb_instance = extra_defence_mode_lb_instance

    @property
    def host(self):
        """Gets the host of this ModifyServiceDefenceModeRequest.  # noqa: E501


        :return: The host of this ModifyServiceDefenceModeRequest.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ModifyServiceDefenceModeRequest.


        :param host: The host of this ModifyServiceDefenceModeRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def project_name(self):
        """Gets the project_name of this ModifyServiceDefenceModeRequest.  # noqa: E501


        :return: The project_name of this ModifyServiceDefenceModeRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this ModifyServiceDefenceModeRequest.


        :param project_name: The project_name of this ModifyServiceDefenceModeRequest.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModifyServiceDefenceModeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModifyServiceDefenceModeRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModifyServiceDefenceModeRequest):
            return True

        return self.to_dict() != other.to_dict()
