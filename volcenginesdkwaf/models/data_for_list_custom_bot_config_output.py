# coding: utf-8

"""
    waf

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DataForListCustomBotConfigOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accurate': 'list[AccurateForListCustomBotConfigOutput]',
        'action': 'str',
        'advanced': 'int',
        'bot_type': 'str',
        'description': 'str',
        'enable': 'int',
        'id': 'int',
        'rule_tag': 'str',
        'update_time': 'str'
    }

    attribute_map = {
        'accurate': 'Accurate',
        'action': 'Action',
        'advanced': 'Advanced',
        'bot_type': 'BotType',
        'description': 'Description',
        'enable': 'Enable',
        'id': 'Id',
        'rule_tag': 'RuleTag',
        'update_time': 'UpdateTime'
    }

    def __init__(self, accurate=None, action=None, advanced=None, bot_type=None, description=None, enable=None, id=None, rule_tag=None, update_time=None, _configuration=None):  # noqa: E501
        """DataForListCustomBotConfigOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._accurate = None
        self._action = None
        self._advanced = None
        self._bot_type = None
        self._description = None
        self._enable = None
        self._id = None
        self._rule_tag = None
        self._update_time = None
        self.discriminator = None

        if accurate is not None:
            self.accurate = accurate
        if action is not None:
            self.action = action
        if advanced is not None:
            self.advanced = advanced
        if bot_type is not None:
            self.bot_type = bot_type
        if description is not None:
            self.description = description
        if enable is not None:
            self.enable = enable
        if id is not None:
            self.id = id
        if rule_tag is not None:
            self.rule_tag = rule_tag
        if update_time is not None:
            self.update_time = update_time

    @property
    def accurate(self):
        """Gets the accurate of this DataForListCustomBotConfigOutput.  # noqa: E501


        :return: The accurate of this DataForListCustomBotConfigOutput.  # noqa: E501
        :rtype: list[AccurateForListCustomBotConfigOutput]
        """
        return self._accurate

    @accurate.setter
    def accurate(self, accurate):
        """Sets the accurate of this DataForListCustomBotConfigOutput.


        :param accurate: The accurate of this DataForListCustomBotConfigOutput.  # noqa: E501
        :type: list[AccurateForListCustomBotConfigOutput]
        """

        self._accurate = accurate

    @property
    def action(self):
        """Gets the action of this DataForListCustomBotConfigOutput.  # noqa: E501


        :return: The action of this DataForListCustomBotConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this DataForListCustomBotConfigOutput.


        :param action: The action of this DataForListCustomBotConfigOutput.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def advanced(self):
        """Gets the advanced of this DataForListCustomBotConfigOutput.  # noqa: E501


        :return: The advanced of this DataForListCustomBotConfigOutput.  # noqa: E501
        :rtype: int
        """
        return self._advanced

    @advanced.setter
    def advanced(self, advanced):
        """Sets the advanced of this DataForListCustomBotConfigOutput.


        :param advanced: The advanced of this DataForListCustomBotConfigOutput.  # noqa: E501
        :type: int
        """

        self._advanced = advanced

    @property
    def bot_type(self):
        """Gets the bot_type of this DataForListCustomBotConfigOutput.  # noqa: E501


        :return: The bot_type of this DataForListCustomBotConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._bot_type

    @bot_type.setter
    def bot_type(self, bot_type):
        """Sets the bot_type of this DataForListCustomBotConfigOutput.


        :param bot_type: The bot_type of this DataForListCustomBotConfigOutput.  # noqa: E501
        :type: str
        """

        self._bot_type = bot_type

    @property
    def description(self):
        """Gets the description of this DataForListCustomBotConfigOutput.  # noqa: E501


        :return: The description of this DataForListCustomBotConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataForListCustomBotConfigOutput.


        :param description: The description of this DataForListCustomBotConfigOutput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enable(self):
        """Gets the enable of this DataForListCustomBotConfigOutput.  # noqa: E501


        :return: The enable of this DataForListCustomBotConfigOutput.  # noqa: E501
        :rtype: int
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this DataForListCustomBotConfigOutput.


        :param enable: The enable of this DataForListCustomBotConfigOutput.  # noqa: E501
        :type: int
        """

        self._enable = enable

    @property
    def id(self):
        """Gets the id of this DataForListCustomBotConfigOutput.  # noqa: E501


        :return: The id of this DataForListCustomBotConfigOutput.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataForListCustomBotConfigOutput.


        :param id: The id of this DataForListCustomBotConfigOutput.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def rule_tag(self):
        """Gets the rule_tag of this DataForListCustomBotConfigOutput.  # noqa: E501


        :return: The rule_tag of this DataForListCustomBotConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._rule_tag

    @rule_tag.setter
    def rule_tag(self, rule_tag):
        """Sets the rule_tag of this DataForListCustomBotConfigOutput.


        :param rule_tag: The rule_tag of this DataForListCustomBotConfigOutput.  # noqa: E501
        :type: str
        """

        self._rule_tag = rule_tag

    @property
    def update_time(self):
        """Gets the update_time of this DataForListCustomBotConfigOutput.  # noqa: E501


        :return: The update_time of this DataForListCustomBotConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this DataForListCustomBotConfigOutput.


        :param update_time: The update_time of this DataForListCustomBotConfigOutput.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataForListCustomBotConfigOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataForListCustomBotConfigOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataForListCustomBotConfigOutput):
            return True

        return self.to_dict() != other.to_dict()
