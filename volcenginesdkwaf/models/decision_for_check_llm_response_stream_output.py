# coding: utf-8

"""
    waf

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DecisionForCheckLLMResponseStreamOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'int',
        'custom_matches': 'list[CustomMatchForCheckLLMResponseStreamOutput]',
        'err_code': 'int',
        'err_msg': 'str',
        'labels': 'list[str]',
        'matches': 'list[MatchForCheckLLMResponseStreamOutput]',
        'replace_detail': 'ReplaceDetailForCheckLLMResponseStreamOutput'
    }

    attribute_map = {
        'action': 'Action',
        'custom_matches': 'CustomMatches',
        'err_code': 'ErrCode',
        'err_msg': 'ErrMsg',
        'labels': 'Labels',
        'matches': 'Matches',
        'replace_detail': 'ReplaceDetail'
    }

    def __init__(self, action=None, custom_matches=None, err_code=None, err_msg=None, labels=None, matches=None, replace_detail=None, _configuration=None):  # noqa: E501
        """DecisionForCheckLLMResponseStreamOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._action = None
        self._custom_matches = None
        self._err_code = None
        self._err_msg = None
        self._labels = None
        self._matches = None
        self._replace_detail = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if custom_matches is not None:
            self.custom_matches = custom_matches
        if err_code is not None:
            self.err_code = err_code
        if err_msg is not None:
            self.err_msg = err_msg
        if labels is not None:
            self.labels = labels
        if matches is not None:
            self.matches = matches
        if replace_detail is not None:
            self.replace_detail = replace_detail

    @property
    def action(self):
        """Gets the action of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501


        :return: The action of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501
        :rtype: int
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this DecisionForCheckLLMResponseStreamOutput.


        :param action: The action of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501
        :type: int
        """

        self._action = action

    @property
    def custom_matches(self):
        """Gets the custom_matches of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501


        :return: The custom_matches of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501
        :rtype: list[CustomMatchForCheckLLMResponseStreamOutput]
        """
        return self._custom_matches

    @custom_matches.setter
    def custom_matches(self, custom_matches):
        """Sets the custom_matches of this DecisionForCheckLLMResponseStreamOutput.


        :param custom_matches: The custom_matches of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501
        :type: list[CustomMatchForCheckLLMResponseStreamOutput]
        """

        self._custom_matches = custom_matches

    @property
    def err_code(self):
        """Gets the err_code of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501


        :return: The err_code of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501
        :rtype: int
        """
        return self._err_code

    @err_code.setter
    def err_code(self, err_code):
        """Sets the err_code of this DecisionForCheckLLMResponseStreamOutput.


        :param err_code: The err_code of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501
        :type: int
        """

        self._err_code = err_code

    @property
    def err_msg(self):
        """Gets the err_msg of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501


        :return: The err_msg of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501
        :rtype: str
        """
        return self._err_msg

    @err_msg.setter
    def err_msg(self, err_msg):
        """Sets the err_msg of this DecisionForCheckLLMResponseStreamOutput.


        :param err_msg: The err_msg of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501
        :type: str
        """

        self._err_msg = err_msg

    @property
    def labels(self):
        """Gets the labels of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501


        :return: The labels of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this DecisionForCheckLLMResponseStreamOutput.


        :param labels: The labels of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501
        :type: list[str]
        """

        self._labels = labels

    @property
    def matches(self):
        """Gets the matches of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501


        :return: The matches of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501
        :rtype: list[MatchForCheckLLMResponseStreamOutput]
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this DecisionForCheckLLMResponseStreamOutput.


        :param matches: The matches of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501
        :type: list[MatchForCheckLLMResponseStreamOutput]
        """

        self._matches = matches

    @property
    def replace_detail(self):
        """Gets the replace_detail of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501


        :return: The replace_detail of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501
        :rtype: ReplaceDetailForCheckLLMResponseStreamOutput
        """
        return self._replace_detail

    @replace_detail.setter
    def replace_detail(self, replace_detail):
        """Sets the replace_detail of this DecisionForCheckLLMResponseStreamOutput.


        :param replace_detail: The replace_detail of this DecisionForCheckLLMResponseStreamOutput.  # noqa: E501
        :type: ReplaceDetailForCheckLLMResponseStreamOutput
        """

        self._replace_detail = replace_detail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DecisionForCheckLLMResponseStreamOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DecisionForCheckLLMResponseStreamOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DecisionForCheckLLMResponseStreamOutput):
            return True

        return self.to_dict() != other.to_dict()
