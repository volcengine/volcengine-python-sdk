# coding: utf-8

"""
    id

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class GetWorkloadIdentityResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_resource_oauth2_return_urls': 'list[str]',
        'category': 'str',
        'created_at': 'str',
        'description': 'str',
        'name': 'str',
        'trn': 'str',
        'updated_at': 'str',
        'workload_pool_name': 'str'
    }

    attribute_map = {
        'allowed_resource_oauth2_return_urls': 'AllowedResourceOauth2ReturnUrls',
        'category': 'Category',
        'created_at': 'CreatedAt',
        'description': 'Description',
        'name': 'Name',
        'trn': 'Trn',
        'updated_at': 'UpdatedAt',
        'workload_pool_name': 'WorkloadPoolName'
    }

    def __init__(self, allowed_resource_oauth2_return_urls=None, category=None, created_at=None, description=None, name=None, trn=None, updated_at=None, workload_pool_name=None, _configuration=None):  # noqa: E501
        """GetWorkloadIdentityResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allowed_resource_oauth2_return_urls = None
        self._category = None
        self._created_at = None
        self._description = None
        self._name = None
        self._trn = None
        self._updated_at = None
        self._workload_pool_name = None
        self.discriminator = None

        if allowed_resource_oauth2_return_urls is not None:
            self.allowed_resource_oauth2_return_urls = allowed_resource_oauth2_return_urls
        if category is not None:
            self.category = category
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if trn is not None:
            self.trn = trn
        if updated_at is not None:
            self.updated_at = updated_at
        if workload_pool_name is not None:
            self.workload_pool_name = workload_pool_name

    @property
    def allowed_resource_oauth2_return_urls(self):
        """Gets the allowed_resource_oauth2_return_urls of this GetWorkloadIdentityResponse.  # noqa: E501


        :return: The allowed_resource_oauth2_return_urls of this GetWorkloadIdentityResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_resource_oauth2_return_urls

    @allowed_resource_oauth2_return_urls.setter
    def allowed_resource_oauth2_return_urls(self, allowed_resource_oauth2_return_urls):
        """Sets the allowed_resource_oauth2_return_urls of this GetWorkloadIdentityResponse.


        :param allowed_resource_oauth2_return_urls: The allowed_resource_oauth2_return_urls of this GetWorkloadIdentityResponse.  # noqa: E501
        :type: list[str]
        """

        self._allowed_resource_oauth2_return_urls = allowed_resource_oauth2_return_urls

    @property
    def category(self):
        """Gets the category of this GetWorkloadIdentityResponse.  # noqa: E501


        :return: The category of this GetWorkloadIdentityResponse.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this GetWorkloadIdentityResponse.


        :param category: The category of this GetWorkloadIdentityResponse.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def created_at(self):
        """Gets the created_at of this GetWorkloadIdentityResponse.  # noqa: E501


        :return: The created_at of this GetWorkloadIdentityResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetWorkloadIdentityResponse.


        :param created_at: The created_at of this GetWorkloadIdentityResponse.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this GetWorkloadIdentityResponse.  # noqa: E501


        :return: The description of this GetWorkloadIdentityResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetWorkloadIdentityResponse.


        :param description: The description of this GetWorkloadIdentityResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this GetWorkloadIdentityResponse.  # noqa: E501


        :return: The name of this GetWorkloadIdentityResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetWorkloadIdentityResponse.


        :param name: The name of this GetWorkloadIdentityResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def trn(self):
        """Gets the trn of this GetWorkloadIdentityResponse.  # noqa: E501


        :return: The trn of this GetWorkloadIdentityResponse.  # noqa: E501
        :rtype: str
        """
        return self._trn

    @trn.setter
    def trn(self, trn):
        """Sets the trn of this GetWorkloadIdentityResponse.


        :param trn: The trn of this GetWorkloadIdentityResponse.  # noqa: E501
        :type: str
        """

        self._trn = trn

    @property
    def updated_at(self):
        """Gets the updated_at of this GetWorkloadIdentityResponse.  # noqa: E501


        :return: The updated_at of this GetWorkloadIdentityResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GetWorkloadIdentityResponse.


        :param updated_at: The updated_at of this GetWorkloadIdentityResponse.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def workload_pool_name(self):
        """Gets the workload_pool_name of this GetWorkloadIdentityResponse.  # noqa: E501


        :return: The workload_pool_name of this GetWorkloadIdentityResponse.  # noqa: E501
        :rtype: str
        """
        return self._workload_pool_name

    @workload_pool_name.setter
    def workload_pool_name(self, workload_pool_name):
        """Sets the workload_pool_name of this GetWorkloadIdentityResponse.


        :param workload_pool_name: The workload_pool_name of this GetWorkloadIdentityResponse.  # noqa: E501
        :type: str
        """

        self._workload_pool_name = workload_pool_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetWorkloadIdentityResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetWorkloadIdentityResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetWorkloadIdentityResponse):
            return True

        return self.to_dict() != other.to_dict()
