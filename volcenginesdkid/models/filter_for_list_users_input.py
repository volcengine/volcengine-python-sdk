# coding: utf-8

"""
    id

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class FilterForListUsersInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection': 'str',
        'email': 'str',
        'family_name': 'str',
        'gender': 'str',
        'given_name': 'str',
        'latest_browser': 'str',
        'locale': 'str',
        'middle_name': 'str',
        'name': 'str',
        'nickname': 'str',
        'phone_number': 'str',
        'preferred_username': 'str',
        'website': 'str'
    }

    attribute_map = {
        'connection': 'Connection',
        'email': 'Email',
        'family_name': 'FamilyName',
        'gender': 'Gender',
        'given_name': 'GivenName',
        'latest_browser': 'LatestBrowser',
        'locale': 'Locale',
        'middle_name': 'MiddleName',
        'name': 'Name',
        'nickname': 'Nickname',
        'phone_number': 'PhoneNumber',
        'preferred_username': 'PreferredUsername',
        'website': 'Website'
    }

    def __init__(self, connection=None, email=None, family_name=None, gender=None, given_name=None, latest_browser=None, locale=None, middle_name=None, name=None, nickname=None, phone_number=None, preferred_username=None, website=None, _configuration=None):  # noqa: E501
        """FilterForListUsersInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._connection = None
        self._email = None
        self._family_name = None
        self._gender = None
        self._given_name = None
        self._latest_browser = None
        self._locale = None
        self._middle_name = None
        self._name = None
        self._nickname = None
        self._phone_number = None
        self._preferred_username = None
        self._website = None
        self.discriminator = None

        if connection is not None:
            self.connection = connection
        if email is not None:
            self.email = email
        if family_name is not None:
            self.family_name = family_name
        if gender is not None:
            self.gender = gender
        if given_name is not None:
            self.given_name = given_name
        if latest_browser is not None:
            self.latest_browser = latest_browser
        if locale is not None:
            self.locale = locale
        if middle_name is not None:
            self.middle_name = middle_name
        if name is not None:
            self.name = name
        if nickname is not None:
            self.nickname = nickname
        if phone_number is not None:
            self.phone_number = phone_number
        if preferred_username is not None:
            self.preferred_username = preferred_username
        if website is not None:
            self.website = website

    @property
    def connection(self):
        """Gets the connection of this FilterForListUsersInput.  # noqa: E501


        :return: The connection of this FilterForListUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this FilterForListUsersInput.


        :param connection: The connection of this FilterForListUsersInput.  # noqa: E501
        :type: str
        """

        self._connection = connection

    @property
    def email(self):
        """Gets the email of this FilterForListUsersInput.  # noqa: E501


        :return: The email of this FilterForListUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this FilterForListUsersInput.


        :param email: The email of this FilterForListUsersInput.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def family_name(self):
        """Gets the family_name of this FilterForListUsersInput.  # noqa: E501


        :return: The family_name of this FilterForListUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this FilterForListUsersInput.


        :param family_name: The family_name of this FilterForListUsersInput.  # noqa: E501
        :type: str
        """

        self._family_name = family_name

    @property
    def gender(self):
        """Gets the gender of this FilterForListUsersInput.  # noqa: E501


        :return: The gender of this FilterForListUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this FilterForListUsersInput.


        :param gender: The gender of this FilterForListUsersInput.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def given_name(self):
        """Gets the given_name of this FilterForListUsersInput.  # noqa: E501


        :return: The given_name of this FilterForListUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this FilterForListUsersInput.


        :param given_name: The given_name of this FilterForListUsersInput.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def latest_browser(self):
        """Gets the latest_browser of this FilterForListUsersInput.  # noqa: E501


        :return: The latest_browser of this FilterForListUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._latest_browser

    @latest_browser.setter
    def latest_browser(self, latest_browser):
        """Sets the latest_browser of this FilterForListUsersInput.


        :param latest_browser: The latest_browser of this FilterForListUsersInput.  # noqa: E501
        :type: str
        """

        self._latest_browser = latest_browser

    @property
    def locale(self):
        """Gets the locale of this FilterForListUsersInput.  # noqa: E501


        :return: The locale of this FilterForListUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this FilterForListUsersInput.


        :param locale: The locale of this FilterForListUsersInput.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def middle_name(self):
        """Gets the middle_name of this FilterForListUsersInput.  # noqa: E501


        :return: The middle_name of this FilterForListUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this FilterForListUsersInput.


        :param middle_name: The middle_name of this FilterForListUsersInput.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def name(self):
        """Gets the name of this FilterForListUsersInput.  # noqa: E501


        :return: The name of this FilterForListUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FilterForListUsersInput.


        :param name: The name of this FilterForListUsersInput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nickname(self):
        """Gets the nickname of this FilterForListUsersInput.  # noqa: E501


        :return: The nickname of this FilterForListUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this FilterForListUsersInput.


        :param nickname: The nickname of this FilterForListUsersInput.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def phone_number(self):
        """Gets the phone_number of this FilterForListUsersInput.  # noqa: E501


        :return: The phone_number of this FilterForListUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this FilterForListUsersInput.


        :param phone_number: The phone_number of this FilterForListUsersInput.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def preferred_username(self):
        """Gets the preferred_username of this FilterForListUsersInput.  # noqa: E501


        :return: The preferred_username of this FilterForListUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._preferred_username

    @preferred_username.setter
    def preferred_username(self, preferred_username):
        """Sets the preferred_username of this FilterForListUsersInput.


        :param preferred_username: The preferred_username of this FilterForListUsersInput.  # noqa: E501
        :type: str
        """

        self._preferred_username = preferred_username

    @property
    def website(self):
        """Gets the website of this FilterForListUsersInput.  # noqa: E501


        :return: The website of this FilterForListUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this FilterForListUsersInput.


        :param website: The website of this FilterForListUsersInput.  # noqa: E501
        :type: str
        """

        self._website = website

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilterForListUsersInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterForListUsersInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FilterForListUsersInput):
            return True

        return self.to_dict() != other.to_dict()
