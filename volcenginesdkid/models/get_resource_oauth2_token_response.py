# coding: utf-8

"""
    id

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class GetResourceOauth2TokenResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'authorization_url': 'str'
    }

    attribute_map = {
        'access_token': 'AccessToken',
        'authorization_url': 'AuthorizationUrl'
    }

    def __init__(self, access_token=None, authorization_url=None, _configuration=None):  # noqa: E501
        """GetResourceOauth2TokenResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_token = None
        self._authorization_url = None
        self.discriminator = None

        if access_token is not None:
            self.access_token = access_token
        if authorization_url is not None:
            self.authorization_url = authorization_url

    @property
    def access_token(self):
        """Gets the access_token of this GetResourceOauth2TokenResponse.  # noqa: E501


        :return: The access_token of this GetResourceOauth2TokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this GetResourceOauth2TokenResponse.


        :param access_token: The access_token of this GetResourceOauth2TokenResponse.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def authorization_url(self):
        """Gets the authorization_url of this GetResourceOauth2TokenResponse.  # noqa: E501


        :return: The authorization_url of this GetResourceOauth2TokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._authorization_url

    @authorization_url.setter
    def authorization_url(self, authorization_url):
        """Sets the authorization_url of this GetResourceOauth2TokenResponse.


        :param authorization_url: The authorization_url of this GetResourceOauth2TokenResponse.  # noqa: E501
        :type: str
        """

        self._authorization_url = authorization_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetResourceOauth2TokenResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetResourceOauth2TokenResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetResourceOauth2TokenResponse):
            return True

        return self.to_dict() != other.to_dict()
