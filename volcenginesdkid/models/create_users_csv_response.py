# coding: utf-8

"""
    id

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateUsersCSVResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'errors': 'list[str]',
        'failure_count': 'int',
        'success_count': 'int',
        'successful_uids': 'list[str]'
    }

    attribute_map = {
        'errors': 'Errors',
        'failure_count': 'FailureCount',
        'success_count': 'SuccessCount',
        'successful_uids': 'SuccessfulUids'
    }

    def __init__(self, errors=None, failure_count=None, success_count=None, successful_uids=None, _configuration=None):  # noqa: E501
        """CreateUsersCSVResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._errors = None
        self._failure_count = None
        self._success_count = None
        self._successful_uids = None
        self.discriminator = None

        if errors is not None:
            self.errors = errors
        if failure_count is not None:
            self.failure_count = failure_count
        if success_count is not None:
            self.success_count = success_count
        if successful_uids is not None:
            self.successful_uids = successful_uids

    @property
    def errors(self):
        """Gets the errors of this CreateUsersCSVResponse.  # noqa: E501


        :return: The errors of this CreateUsersCSVResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this CreateUsersCSVResponse.


        :param errors: The errors of this CreateUsersCSVResponse.  # noqa: E501
        :type: list[str]
        """

        self._errors = errors

    @property
    def failure_count(self):
        """Gets the failure_count of this CreateUsersCSVResponse.  # noqa: E501


        :return: The failure_count of this CreateUsersCSVResponse.  # noqa: E501
        :rtype: int
        """
        return self._failure_count

    @failure_count.setter
    def failure_count(self, failure_count):
        """Sets the failure_count of this CreateUsersCSVResponse.


        :param failure_count: The failure_count of this CreateUsersCSVResponse.  # noqa: E501
        :type: int
        """

        self._failure_count = failure_count

    @property
    def success_count(self):
        """Gets the success_count of this CreateUsersCSVResponse.  # noqa: E501


        :return: The success_count of this CreateUsersCSVResponse.  # noqa: E501
        :rtype: int
        """
        return self._success_count

    @success_count.setter
    def success_count(self, success_count):
        """Sets the success_count of this CreateUsersCSVResponse.


        :param success_count: The success_count of this CreateUsersCSVResponse.  # noqa: E501
        :type: int
        """

        self._success_count = success_count

    @property
    def successful_uids(self):
        """Gets the successful_uids of this CreateUsersCSVResponse.  # noqa: E501


        :return: The successful_uids of this CreateUsersCSVResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._successful_uids

    @successful_uids.setter
    def successful_uids(self, successful_uids):
        """Sets the successful_uids of this CreateUsersCSVResponse.


        :param successful_uids: The successful_uids of this CreateUsersCSVResponse.  # noqa: E501
        :type: list[str]
        """

        self._successful_uids = successful_uids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateUsersCSVResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateUsersCSVResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateUsersCSVResponse):
            return True

        return self.to_dict() != other.to_dict()
