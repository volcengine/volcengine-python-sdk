# coding: utf-8

"""
    id

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ListUsersRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filter': 'FilterForListUsersInput',
        'page_number': 'int',
        'page_size': 'int',
        'sort_direction': 'str',
        'sort_field': 'str',
        'user_pool_uid': 'str'
    }

    attribute_map = {
        'filter': 'Filter',
        'page_number': 'PageNumber',
        'page_size': 'PageSize',
        'sort_direction': 'SortDirection',
        'sort_field': 'SortField',
        'user_pool_uid': 'UserPoolUid'
    }

    def __init__(self, filter=None, page_number=None, page_size=None, sort_direction=None, sort_field=None, user_pool_uid=None, _configuration=None):  # noqa: E501
        """ListUsersRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._filter = None
        self._page_number = None
        self._page_size = None
        self._sort_direction = None
        self._sort_field = None
        self._user_pool_uid = None
        self.discriminator = None

        if filter is not None:
            self.filter = filter
        self.page_number = page_number
        self.page_size = page_size
        if sort_direction is not None:
            self.sort_direction = sort_direction
        if sort_field is not None:
            self.sort_field = sort_field
        self.user_pool_uid = user_pool_uid

    @property
    def filter(self):
        """Gets the filter of this ListUsersRequest.  # noqa: E501


        :return: The filter of this ListUsersRequest.  # noqa: E501
        :rtype: FilterForListUsersInput
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ListUsersRequest.


        :param filter: The filter of this ListUsersRequest.  # noqa: E501
        :type: FilterForListUsersInput
        """

        self._filter = filter

    @property
    def page_number(self):
        """Gets the page_number of this ListUsersRequest.  # noqa: E501


        :return: The page_number of this ListUsersRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this ListUsersRequest.


        :param page_number: The page_number of this ListUsersRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and page_number is None:
            raise ValueError("Invalid value for `page_number`, must not be `None`")  # noqa: E501

        self._page_number = page_number

    @property
    def page_size(self):
        """Gets the page_size of this ListUsersRequest.  # noqa: E501


        :return: The page_size of this ListUsersRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ListUsersRequest.


        :param page_size: The page_size of this ListUsersRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")  # noqa: E501

        self._page_size = page_size

    @property
    def sort_direction(self):
        """Gets the sort_direction of this ListUsersRequest.  # noqa: E501


        :return: The sort_direction of this ListUsersRequest.  # noqa: E501
        :rtype: str
        """
        return self._sort_direction

    @sort_direction.setter
    def sort_direction(self, sort_direction):
        """Sets the sort_direction of this ListUsersRequest.


        :param sort_direction: The sort_direction of this ListUsersRequest.  # noqa: E501
        :type: str
        """

        self._sort_direction = sort_direction

    @property
    def sort_field(self):
        """Gets the sort_field of this ListUsersRequest.  # noqa: E501


        :return: The sort_field of this ListUsersRequest.  # noqa: E501
        :rtype: str
        """
        return self._sort_field

    @sort_field.setter
    def sort_field(self, sort_field):
        """Sets the sort_field of this ListUsersRequest.


        :param sort_field: The sort_field of this ListUsersRequest.  # noqa: E501
        :type: str
        """

        self._sort_field = sort_field

    @property
    def user_pool_uid(self):
        """Gets the user_pool_uid of this ListUsersRequest.  # noqa: E501


        :return: The user_pool_uid of this ListUsersRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_pool_uid

    @user_pool_uid.setter
    def user_pool_uid(self, user_pool_uid):
        """Sets the user_pool_uid of this ListUsersRequest.


        :param user_pool_uid: The user_pool_uid of this ListUsersRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user_pool_uid is None:
            raise ValueError("Invalid value for `user_pool_uid`, must not be `None`")  # noqa: E501

        self._user_pool_uid = user_pool_uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListUsersRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListUsersRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListUsersRequest):
            return True

        return self.to_dict() != other.to_dict()
