# coding: utf-8

"""
    id

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ConfigForGetOauth2CredentialProviderOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'client_secret': 'str',
        'custom_parameters': 'CustomParametersForGetOauth2CredentialProviderOutput',
        'flow': 'str',
        'force_authentication': 'bool',
        'max_expires': 'int',
        'oauth2_discovery': 'Oauth2DiscoveryForGetOauth2CredentialProviderOutput',
        'redirect_url': 'str',
        'scopes': 'list[str]'
    }

    attribute_map = {
        'client_id': 'ClientId',
        'client_secret': 'ClientSecret',
        'custom_parameters': 'CustomParameters',
        'flow': 'Flow',
        'force_authentication': 'ForceAuthentication',
        'max_expires': 'MaxExpires',
        'oauth2_discovery': 'Oauth2Discovery',
        'redirect_url': 'RedirectUrl',
        'scopes': 'Scopes'
    }

    def __init__(self, client_id=None, client_secret=None, custom_parameters=None, flow=None, force_authentication=None, max_expires=None, oauth2_discovery=None, redirect_url=None, scopes=None, _configuration=None):  # noqa: E501
        """ConfigForGetOauth2CredentialProviderOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._client_id = None
        self._client_secret = None
        self._custom_parameters = None
        self._flow = None
        self._force_authentication = None
        self._max_expires = None
        self._oauth2_discovery = None
        self._redirect_url = None
        self._scopes = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        if custom_parameters is not None:
            self.custom_parameters = custom_parameters
        if flow is not None:
            self.flow = flow
        if force_authentication is not None:
            self.force_authentication = force_authentication
        if max_expires is not None:
            self.max_expires = max_expires
        if oauth2_discovery is not None:
            self.oauth2_discovery = oauth2_discovery
        if redirect_url is not None:
            self.redirect_url = redirect_url
        if scopes is not None:
            self.scopes = scopes

    @property
    def client_id(self):
        """Gets the client_id of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501


        :return: The client_id of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ConfigForGetOauth2CredentialProviderOutput.


        :param client_id: The client_id of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501


        :return: The client_secret of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this ConfigForGetOauth2CredentialProviderOutput.


        :param client_secret: The client_secret of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def custom_parameters(self):
        """Gets the custom_parameters of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501


        :return: The custom_parameters of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501
        :rtype: CustomParametersForGetOauth2CredentialProviderOutput
        """
        return self._custom_parameters

    @custom_parameters.setter
    def custom_parameters(self, custom_parameters):
        """Sets the custom_parameters of this ConfigForGetOauth2CredentialProviderOutput.


        :param custom_parameters: The custom_parameters of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501
        :type: CustomParametersForGetOauth2CredentialProviderOutput
        """

        self._custom_parameters = custom_parameters

    @property
    def flow(self):
        """Gets the flow of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501


        :return: The flow of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501
        :rtype: str
        """
        return self._flow

    @flow.setter
    def flow(self, flow):
        """Sets the flow of this ConfigForGetOauth2CredentialProviderOutput.


        :param flow: The flow of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501
        :type: str
        """

        self._flow = flow

    @property
    def force_authentication(self):
        """Gets the force_authentication of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501


        :return: The force_authentication of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501
        :rtype: bool
        """
        return self._force_authentication

    @force_authentication.setter
    def force_authentication(self, force_authentication):
        """Sets the force_authentication of this ConfigForGetOauth2CredentialProviderOutput.


        :param force_authentication: The force_authentication of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501
        :type: bool
        """

        self._force_authentication = force_authentication

    @property
    def max_expires(self):
        """Gets the max_expires of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501


        :return: The max_expires of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501
        :rtype: int
        """
        return self._max_expires

    @max_expires.setter
    def max_expires(self, max_expires):
        """Sets the max_expires of this ConfigForGetOauth2CredentialProviderOutput.


        :param max_expires: The max_expires of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501
        :type: int
        """

        self._max_expires = max_expires

    @property
    def oauth2_discovery(self):
        """Gets the oauth2_discovery of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501


        :return: The oauth2_discovery of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501
        :rtype: Oauth2DiscoveryForGetOauth2CredentialProviderOutput
        """
        return self._oauth2_discovery

    @oauth2_discovery.setter
    def oauth2_discovery(self, oauth2_discovery):
        """Sets the oauth2_discovery of this ConfigForGetOauth2CredentialProviderOutput.


        :param oauth2_discovery: The oauth2_discovery of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501
        :type: Oauth2DiscoveryForGetOauth2CredentialProviderOutput
        """

        self._oauth2_discovery = oauth2_discovery

    @property
    def redirect_url(self):
        """Gets the redirect_url of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501


        :return: The redirect_url of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this ConfigForGetOauth2CredentialProviderOutput.


        :param redirect_url: The redirect_url of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501
        :type: str
        """

        self._redirect_url = redirect_url

    @property
    def scopes(self):
        """Gets the scopes of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501


        :return: The scopes of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this ConfigForGetOauth2CredentialProviderOutput.


        :param scopes: The scopes of this ConfigForGetOauth2CredentialProviderOutput.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigForGetOauth2CredentialProviderOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigForGetOauth2CredentialProviderOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigForGetOauth2CredentialProviderOutput):
            return True

        return self.to_dict() != other.to_dict()
