# coding: utf-8

"""
    id

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DataForListIdentityProvidersOAuthOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorization_endpoint': 'str',
        'client_id': 'str',
        'client_secret': 'str',
        'enabled': 'bool',
        'id_attribute': 'str',
        'name': 'str',
        'provider_options': 'ProviderOptionsForListIdentityProvidersOAuthOutput',
        'scopes_list': 'list[str]',
        'token_endpoint': 'str',
        'uid': 'str',
        'use_pkce': 'bool',
        'user_endpoint': 'str'
    }

    attribute_map = {
        'authorization_endpoint': 'AuthorizationEndpoint',
        'client_id': 'ClientId',
        'client_secret': 'ClientSecret',
        'enabled': 'Enabled',
        'id_attribute': 'IdAttribute',
        'name': 'Name',
        'provider_options': 'ProviderOptions',
        'scopes_list': 'ScopesList',
        'token_endpoint': 'TokenEndpoint',
        'uid': 'Uid',
        'use_pkce': 'UsePkce',
        'user_endpoint': 'UserEndpoint'
    }

    def __init__(self, authorization_endpoint=None, client_id=None, client_secret=None, enabled=None, id_attribute=None, name=None, provider_options=None, scopes_list=None, token_endpoint=None, uid=None, use_pkce=None, user_endpoint=None, _configuration=None):  # noqa: E501
        """DataForListIdentityProvidersOAuthOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._authorization_endpoint = None
        self._client_id = None
        self._client_secret = None
        self._enabled = None
        self._id_attribute = None
        self._name = None
        self._provider_options = None
        self._scopes_list = None
        self._token_endpoint = None
        self._uid = None
        self._use_pkce = None
        self._user_endpoint = None
        self.discriminator = None

        if authorization_endpoint is not None:
            self.authorization_endpoint = authorization_endpoint
        if client_id is not None:
            self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        if enabled is not None:
            self.enabled = enabled
        if id_attribute is not None:
            self.id_attribute = id_attribute
        if name is not None:
            self.name = name
        if provider_options is not None:
            self.provider_options = provider_options
        if scopes_list is not None:
            self.scopes_list = scopes_list
        if token_endpoint is not None:
            self.token_endpoint = token_endpoint
        if uid is not None:
            self.uid = uid
        if use_pkce is not None:
            self.use_pkce = use_pkce
        if user_endpoint is not None:
            self.user_endpoint = user_endpoint

    @property
    def authorization_endpoint(self):
        """Gets the authorization_endpoint of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501


        :return: The authorization_endpoint of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :rtype: str
        """
        return self._authorization_endpoint

    @authorization_endpoint.setter
    def authorization_endpoint(self, authorization_endpoint):
        """Sets the authorization_endpoint of this DataForListIdentityProvidersOAuthOutput.


        :param authorization_endpoint: The authorization_endpoint of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :type: str
        """

        self._authorization_endpoint = authorization_endpoint

    @property
    def client_id(self):
        """Gets the client_id of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501


        :return: The client_id of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this DataForListIdentityProvidersOAuthOutput.


        :param client_id: The client_id of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501


        :return: The client_secret of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this DataForListIdentityProvidersOAuthOutput.


        :param client_secret: The client_secret of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def enabled(self):
        """Gets the enabled of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501


        :return: The enabled of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DataForListIdentityProvidersOAuthOutput.


        :param enabled: The enabled of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def id_attribute(self):
        """Gets the id_attribute of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501


        :return: The id_attribute of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :rtype: str
        """
        return self._id_attribute

    @id_attribute.setter
    def id_attribute(self, id_attribute):
        """Sets the id_attribute of this DataForListIdentityProvidersOAuthOutput.


        :param id_attribute: The id_attribute of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :type: str
        """

        self._id_attribute = id_attribute

    @property
    def name(self):
        """Gets the name of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501


        :return: The name of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataForListIdentityProvidersOAuthOutput.


        :param name: The name of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def provider_options(self):
        """Gets the provider_options of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501


        :return: The provider_options of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :rtype: ProviderOptionsForListIdentityProvidersOAuthOutput
        """
        return self._provider_options

    @provider_options.setter
    def provider_options(self, provider_options):
        """Sets the provider_options of this DataForListIdentityProvidersOAuthOutput.


        :param provider_options: The provider_options of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :type: ProviderOptionsForListIdentityProvidersOAuthOutput
        """

        self._provider_options = provider_options

    @property
    def scopes_list(self):
        """Gets the scopes_list of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501


        :return: The scopes_list of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes_list

    @scopes_list.setter
    def scopes_list(self, scopes_list):
        """Sets the scopes_list of this DataForListIdentityProvidersOAuthOutput.


        :param scopes_list: The scopes_list of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :type: list[str]
        """

        self._scopes_list = scopes_list

    @property
    def token_endpoint(self):
        """Gets the token_endpoint of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501


        :return: The token_endpoint of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :rtype: str
        """
        return self._token_endpoint

    @token_endpoint.setter
    def token_endpoint(self, token_endpoint):
        """Sets the token_endpoint of this DataForListIdentityProvidersOAuthOutput.


        :param token_endpoint: The token_endpoint of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :type: str
        """

        self._token_endpoint = token_endpoint

    @property
    def uid(self):
        """Gets the uid of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501


        :return: The uid of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this DataForListIdentityProvidersOAuthOutput.


        :param uid: The uid of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def use_pkce(self):
        """Gets the use_pkce of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501


        :return: The use_pkce of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :rtype: bool
        """
        return self._use_pkce

    @use_pkce.setter
    def use_pkce(self, use_pkce):
        """Sets the use_pkce of this DataForListIdentityProvidersOAuthOutput.


        :param use_pkce: The use_pkce of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :type: bool
        """

        self._use_pkce = use_pkce

    @property
    def user_endpoint(self):
        """Gets the user_endpoint of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501


        :return: The user_endpoint of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :rtype: str
        """
        return self._user_endpoint

    @user_endpoint.setter
    def user_endpoint(self, user_endpoint):
        """Sets the user_endpoint of this DataForListIdentityProvidersOAuthOutput.


        :param user_endpoint: The user_endpoint of this DataForListIdentityProvidersOAuthOutput.  # noqa: E501
        :type: str
        """

        self._user_endpoint = user_endpoint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataForListIdentityProvidersOAuthOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataForListIdentityProvidersOAuthOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataForListIdentityProvidersOAuthOutput):
            return True

        return self.to_dict() != other.to_dict()
