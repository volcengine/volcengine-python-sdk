# coding: utf-8

"""
    id

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class UserForCreateUsersInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'email_verified': 'bool',
        'family_name': 'str',
        'given_name': 'str',
        'middle_name': 'str',
        'name': 'str',
        'password': 'str',
        'phone_number': 'str',
        'phone_number_verified': 'bool',
        'preferred_username': 'str',
        'user_metadata': 'str'
    }

    attribute_map = {
        'email': 'Email',
        'email_verified': 'EmailVerified',
        'family_name': 'FamilyName',
        'given_name': 'GivenName',
        'middle_name': 'MiddleName',
        'name': 'Name',
        'password': 'Password',
        'phone_number': 'PhoneNumber',
        'phone_number_verified': 'PhoneNumberVerified',
        'preferred_username': 'PreferredUsername',
        'user_metadata': 'UserMetadata'
    }

    def __init__(self, email=None, email_verified=None, family_name=None, given_name=None, middle_name=None, name=None, password=None, phone_number=None, phone_number_verified=None, preferred_username=None, user_metadata=None, _configuration=None):  # noqa: E501
        """UserForCreateUsersInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._email = None
        self._email_verified = None
        self._family_name = None
        self._given_name = None
        self._middle_name = None
        self._name = None
        self._password = None
        self._phone_number = None
        self._phone_number_verified = None
        self._preferred_username = None
        self._user_metadata = None
        self.discriminator = None

        if email is not None:
            self.email = email
        if email_verified is not None:
            self.email_verified = email_verified
        if family_name is not None:
            self.family_name = family_name
        if given_name is not None:
            self.given_name = given_name
        if middle_name is not None:
            self.middle_name = middle_name
        if name is not None:
            self.name = name
        if password is not None:
            self.password = password
        if phone_number is not None:
            self.phone_number = phone_number
        if phone_number_verified is not None:
            self.phone_number_verified = phone_number_verified
        if preferred_username is not None:
            self.preferred_username = preferred_username
        if user_metadata is not None:
            self.user_metadata = user_metadata

    @property
    def email(self):
        """Gets the email of this UserForCreateUsersInput.  # noqa: E501


        :return: The email of this UserForCreateUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserForCreateUsersInput.


        :param email: The email of this UserForCreateUsersInput.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def email_verified(self):
        """Gets the email_verified of this UserForCreateUsersInput.  # noqa: E501


        :return: The email_verified of this UserForCreateUsersInput.  # noqa: E501
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this UserForCreateUsersInput.


        :param email_verified: The email_verified of this UserForCreateUsersInput.  # noqa: E501
        :type: bool
        """

        self._email_verified = email_verified

    @property
    def family_name(self):
        """Gets the family_name of this UserForCreateUsersInput.  # noqa: E501


        :return: The family_name of this UserForCreateUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this UserForCreateUsersInput.


        :param family_name: The family_name of this UserForCreateUsersInput.  # noqa: E501
        :type: str
        """

        self._family_name = family_name

    @property
    def given_name(self):
        """Gets the given_name of this UserForCreateUsersInput.  # noqa: E501


        :return: The given_name of this UserForCreateUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this UserForCreateUsersInput.


        :param given_name: The given_name of this UserForCreateUsersInput.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def middle_name(self):
        """Gets the middle_name of this UserForCreateUsersInput.  # noqa: E501


        :return: The middle_name of this UserForCreateUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this UserForCreateUsersInput.


        :param middle_name: The middle_name of this UserForCreateUsersInput.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def name(self):
        """Gets the name of this UserForCreateUsersInput.  # noqa: E501


        :return: The name of this UserForCreateUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserForCreateUsersInput.


        :param name: The name of this UserForCreateUsersInput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this UserForCreateUsersInput.  # noqa: E501


        :return: The password of this UserForCreateUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserForCreateUsersInput.


        :param password: The password of this UserForCreateUsersInput.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def phone_number(self):
        """Gets the phone_number of this UserForCreateUsersInput.  # noqa: E501


        :return: The phone_number of this UserForCreateUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UserForCreateUsersInput.


        :param phone_number: The phone_number of this UserForCreateUsersInput.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def phone_number_verified(self):
        """Gets the phone_number_verified of this UserForCreateUsersInput.  # noqa: E501


        :return: The phone_number_verified of this UserForCreateUsersInput.  # noqa: E501
        :rtype: bool
        """
        return self._phone_number_verified

    @phone_number_verified.setter
    def phone_number_verified(self, phone_number_verified):
        """Sets the phone_number_verified of this UserForCreateUsersInput.


        :param phone_number_verified: The phone_number_verified of this UserForCreateUsersInput.  # noqa: E501
        :type: bool
        """

        self._phone_number_verified = phone_number_verified

    @property
    def preferred_username(self):
        """Gets the preferred_username of this UserForCreateUsersInput.  # noqa: E501


        :return: The preferred_username of this UserForCreateUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._preferred_username

    @preferred_username.setter
    def preferred_username(self, preferred_username):
        """Sets the preferred_username of this UserForCreateUsersInput.


        :param preferred_username: The preferred_username of this UserForCreateUsersInput.  # noqa: E501
        :type: str
        """

        self._preferred_username = preferred_username

    @property
    def user_metadata(self):
        """Gets the user_metadata of this UserForCreateUsersInput.  # noqa: E501


        :return: The user_metadata of this UserForCreateUsersInput.  # noqa: E501
        :rtype: str
        """
        return self._user_metadata

    @user_metadata.setter
    def user_metadata(self, user_metadata):
        """Sets the user_metadata of this UserForCreateUsersInput.


        :param user_metadata: The user_metadata of this UserForCreateUsersInput.  # noqa: E501
        :type: str
        """

        self._user_metadata = user_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserForCreateUsersInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserForCreateUsersInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserForCreateUsersInput):
            return True

        return self.to_dict() != other.to_dict()
