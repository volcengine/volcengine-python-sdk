# coding: utf-8

"""
    id

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class UpdateUserResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'birthdate': 'str',
        'connection': 'str',
        'create_time': 'str',
        'email': 'str',
        'email_verified': 'bool',
        'family_name': 'str',
        'gender': 'str',
        'given_name': 'str',
        'latest_browser': 'str',
        'latest_login': 'str',
        'locale': 'str',
        'middle_name': 'str',
        'name': 'str',
        'nick_name': 'str',
        'num_logins': 'int',
        'phone_number': 'str',
        'phone_number_verified': 'bool',
        'picture': 'str',
        'preferred_username': 'str',
        'profile': 'str',
        'sub': 'str',
        'uid': 'str',
        'update_time': 'str',
        'user_metadata': 'str',
        'website': 'str',
        'zone_info': 'str'
    }

    attribute_map = {
        'birthdate': 'Birthdate',
        'connection': 'Connection',
        'create_time': 'CreateTime',
        'email': 'Email',
        'email_verified': 'EmailVerified',
        'family_name': 'FamilyName',
        'gender': 'Gender',
        'given_name': 'GivenName',
        'latest_browser': 'LatestBrowser',
        'latest_login': 'LatestLogin',
        'locale': 'Locale',
        'middle_name': 'MiddleName',
        'name': 'Name',
        'nick_name': 'NickName',
        'num_logins': 'NumLogins',
        'phone_number': 'PhoneNumber',
        'phone_number_verified': 'PhoneNumberVerified',
        'picture': 'Picture',
        'preferred_username': 'PreferredUsername',
        'profile': 'Profile',
        'sub': 'Sub',
        'uid': 'Uid',
        'update_time': 'UpdateTime',
        'user_metadata': 'UserMetadata',
        'website': 'Website',
        'zone_info': 'ZoneInfo'
    }

    def __init__(self, birthdate=None, connection=None, create_time=None, email=None, email_verified=None, family_name=None, gender=None, given_name=None, latest_browser=None, latest_login=None, locale=None, middle_name=None, name=None, nick_name=None, num_logins=None, phone_number=None, phone_number_verified=None, picture=None, preferred_username=None, profile=None, sub=None, uid=None, update_time=None, user_metadata=None, website=None, zone_info=None, _configuration=None):  # noqa: E501
        """UpdateUserResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._birthdate = None
        self._connection = None
        self._create_time = None
        self._email = None
        self._email_verified = None
        self._family_name = None
        self._gender = None
        self._given_name = None
        self._latest_browser = None
        self._latest_login = None
        self._locale = None
        self._middle_name = None
        self._name = None
        self._nick_name = None
        self._num_logins = None
        self._phone_number = None
        self._phone_number_verified = None
        self._picture = None
        self._preferred_username = None
        self._profile = None
        self._sub = None
        self._uid = None
        self._update_time = None
        self._user_metadata = None
        self._website = None
        self._zone_info = None
        self.discriminator = None

        if birthdate is not None:
            self.birthdate = birthdate
        if connection is not None:
            self.connection = connection
        if create_time is not None:
            self.create_time = create_time
        if email is not None:
            self.email = email
        if email_verified is not None:
            self.email_verified = email_verified
        if family_name is not None:
            self.family_name = family_name
        if gender is not None:
            self.gender = gender
        if given_name is not None:
            self.given_name = given_name
        if latest_browser is not None:
            self.latest_browser = latest_browser
        if latest_login is not None:
            self.latest_login = latest_login
        if locale is not None:
            self.locale = locale
        if middle_name is not None:
            self.middle_name = middle_name
        if name is not None:
            self.name = name
        if nick_name is not None:
            self.nick_name = nick_name
        if num_logins is not None:
            self.num_logins = num_logins
        if phone_number is not None:
            self.phone_number = phone_number
        if phone_number_verified is not None:
            self.phone_number_verified = phone_number_verified
        if picture is not None:
            self.picture = picture
        if preferred_username is not None:
            self.preferred_username = preferred_username
        if profile is not None:
            self.profile = profile
        if sub is not None:
            self.sub = sub
        if uid is not None:
            self.uid = uid
        if update_time is not None:
            self.update_time = update_time
        if user_metadata is not None:
            self.user_metadata = user_metadata
        if website is not None:
            self.website = website
        if zone_info is not None:
            self.zone_info = zone_info

    @property
    def birthdate(self):
        """Gets the birthdate of this UpdateUserResponse.  # noqa: E501


        :return: The birthdate of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate):
        """Sets the birthdate of this UpdateUserResponse.


        :param birthdate: The birthdate of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._birthdate = birthdate

    @property
    def connection(self):
        """Gets the connection of this UpdateUserResponse.  # noqa: E501


        :return: The connection of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this UpdateUserResponse.


        :param connection: The connection of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._connection = connection

    @property
    def create_time(self):
        """Gets the create_time of this UpdateUserResponse.  # noqa: E501


        :return: The create_time of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this UpdateUserResponse.


        :param create_time: The create_time of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def email(self):
        """Gets the email of this UpdateUserResponse.  # noqa: E501


        :return: The email of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UpdateUserResponse.


        :param email: The email of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def email_verified(self):
        """Gets the email_verified of this UpdateUserResponse.  # noqa: E501


        :return: The email_verified of this UpdateUserResponse.  # noqa: E501
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this UpdateUserResponse.


        :param email_verified: The email_verified of this UpdateUserResponse.  # noqa: E501
        :type: bool
        """

        self._email_verified = email_verified

    @property
    def family_name(self):
        """Gets the family_name of this UpdateUserResponse.  # noqa: E501


        :return: The family_name of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this UpdateUserResponse.


        :param family_name: The family_name of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._family_name = family_name

    @property
    def gender(self):
        """Gets the gender of this UpdateUserResponse.  # noqa: E501


        :return: The gender of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this UpdateUserResponse.


        :param gender: The gender of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def given_name(self):
        """Gets the given_name of this UpdateUserResponse.  # noqa: E501


        :return: The given_name of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this UpdateUserResponse.


        :param given_name: The given_name of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def latest_browser(self):
        """Gets the latest_browser of this UpdateUserResponse.  # noqa: E501


        :return: The latest_browser of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._latest_browser

    @latest_browser.setter
    def latest_browser(self, latest_browser):
        """Sets the latest_browser of this UpdateUserResponse.


        :param latest_browser: The latest_browser of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._latest_browser = latest_browser

    @property
    def latest_login(self):
        """Gets the latest_login of this UpdateUserResponse.  # noqa: E501


        :return: The latest_login of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._latest_login

    @latest_login.setter
    def latest_login(self, latest_login):
        """Sets the latest_login of this UpdateUserResponse.


        :param latest_login: The latest_login of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._latest_login = latest_login

    @property
    def locale(self):
        """Gets the locale of this UpdateUserResponse.  # noqa: E501


        :return: The locale of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this UpdateUserResponse.


        :param locale: The locale of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def middle_name(self):
        """Gets the middle_name of this UpdateUserResponse.  # noqa: E501


        :return: The middle_name of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this UpdateUserResponse.


        :param middle_name: The middle_name of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def name(self):
        """Gets the name of this UpdateUserResponse.  # noqa: E501


        :return: The name of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateUserResponse.


        :param name: The name of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nick_name(self):
        """Gets the nick_name of this UpdateUserResponse.  # noqa: E501


        :return: The nick_name of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """Sets the nick_name of this UpdateUserResponse.


        :param nick_name: The nick_name of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._nick_name = nick_name

    @property
    def num_logins(self):
        """Gets the num_logins of this UpdateUserResponse.  # noqa: E501


        :return: The num_logins of this UpdateUserResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_logins

    @num_logins.setter
    def num_logins(self, num_logins):
        """Sets the num_logins of this UpdateUserResponse.


        :param num_logins: The num_logins of this UpdateUserResponse.  # noqa: E501
        :type: int
        """

        self._num_logins = num_logins

    @property
    def phone_number(self):
        """Gets the phone_number of this UpdateUserResponse.  # noqa: E501


        :return: The phone_number of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UpdateUserResponse.


        :param phone_number: The phone_number of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def phone_number_verified(self):
        """Gets the phone_number_verified of this UpdateUserResponse.  # noqa: E501


        :return: The phone_number_verified of this UpdateUserResponse.  # noqa: E501
        :rtype: bool
        """
        return self._phone_number_verified

    @phone_number_verified.setter
    def phone_number_verified(self, phone_number_verified):
        """Sets the phone_number_verified of this UpdateUserResponse.


        :param phone_number_verified: The phone_number_verified of this UpdateUserResponse.  # noqa: E501
        :type: bool
        """

        self._phone_number_verified = phone_number_verified

    @property
    def picture(self):
        """Gets the picture of this UpdateUserResponse.  # noqa: E501


        :return: The picture of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this UpdateUserResponse.


        :param picture: The picture of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._picture = picture

    @property
    def preferred_username(self):
        """Gets the preferred_username of this UpdateUserResponse.  # noqa: E501


        :return: The preferred_username of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._preferred_username

    @preferred_username.setter
    def preferred_username(self, preferred_username):
        """Sets the preferred_username of this UpdateUserResponse.


        :param preferred_username: The preferred_username of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._preferred_username = preferred_username

    @property
    def profile(self):
        """Gets the profile of this UpdateUserResponse.  # noqa: E501


        :return: The profile of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this UpdateUserResponse.


        :param profile: The profile of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._profile = profile

    @property
    def sub(self):
        """Gets the sub of this UpdateUserResponse.  # noqa: E501


        :return: The sub of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub):
        """Sets the sub of this UpdateUserResponse.


        :param sub: The sub of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._sub = sub

    @property
    def uid(self):
        """Gets the uid of this UpdateUserResponse.  # noqa: E501


        :return: The uid of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this UpdateUserResponse.


        :param uid: The uid of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this UpdateUserResponse.  # noqa: E501


        :return: The update_time of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this UpdateUserResponse.


        :param update_time: The update_time of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    @property
    def user_metadata(self):
        """Gets the user_metadata of this UpdateUserResponse.  # noqa: E501


        :return: The user_metadata of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_metadata

    @user_metadata.setter
    def user_metadata(self, user_metadata):
        """Sets the user_metadata of this UpdateUserResponse.


        :param user_metadata: The user_metadata of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._user_metadata = user_metadata

    @property
    def website(self):
        """Gets the website of this UpdateUserResponse.  # noqa: E501


        :return: The website of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this UpdateUserResponse.


        :param website: The website of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def zone_info(self):
        """Gets the zone_info of this UpdateUserResponse.  # noqa: E501


        :return: The zone_info of this UpdateUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._zone_info

    @zone_info.setter
    def zone_info(self, zone_info):
        """Sets the zone_info of this UpdateUserResponse.


        :param zone_info: The zone_info of this UpdateUserResponse.  # noqa: E501
        :type: str
        """

        self._zone_info = zone_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateUserResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateUserResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateUserResponse):
            return True

        return self.to_dict() != other.to_dict()
