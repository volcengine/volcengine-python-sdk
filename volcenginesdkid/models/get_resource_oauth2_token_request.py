# coding: utf-8

"""
    id

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class GetResourceOauth2TokenRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_parameters': 'CustomParametersForGetResourceOauth2TokenInput',
        'flow': 'str',
        'force_authentication': 'bool',
        'identity_token': 'str',
        'pool_name': 'str',
        'provider_name': 'str',
        'redirect_url': 'str',
        'scopes': 'list[str]'
    }

    attribute_map = {
        'custom_parameters': 'CustomParameters',
        'flow': 'Flow',
        'force_authentication': 'ForceAuthentication',
        'identity_token': 'IdentityToken',
        'pool_name': 'PoolName',
        'provider_name': 'ProviderName',
        'redirect_url': 'RedirectUrl',
        'scopes': 'Scopes'
    }

    def __init__(self, custom_parameters=None, flow=None, force_authentication=None, identity_token=None, pool_name=None, provider_name=None, redirect_url=None, scopes=None, _configuration=None):  # noqa: E501
        """GetResourceOauth2TokenRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._custom_parameters = None
        self._flow = None
        self._force_authentication = None
        self._identity_token = None
        self._pool_name = None
        self._provider_name = None
        self._redirect_url = None
        self._scopes = None
        self.discriminator = None

        if custom_parameters is not None:
            self.custom_parameters = custom_parameters
        if flow is not None:
            self.flow = flow
        if force_authentication is not None:
            self.force_authentication = force_authentication
        self.identity_token = identity_token
        if pool_name is not None:
            self.pool_name = pool_name
        self.provider_name = provider_name
        if redirect_url is not None:
            self.redirect_url = redirect_url
        if scopes is not None:
            self.scopes = scopes

    @property
    def custom_parameters(self):
        """Gets the custom_parameters of this GetResourceOauth2TokenRequest.  # noqa: E501


        :return: The custom_parameters of this GetResourceOauth2TokenRequest.  # noqa: E501
        :rtype: CustomParametersForGetResourceOauth2TokenInput
        """
        return self._custom_parameters

    @custom_parameters.setter
    def custom_parameters(self, custom_parameters):
        """Sets the custom_parameters of this GetResourceOauth2TokenRequest.


        :param custom_parameters: The custom_parameters of this GetResourceOauth2TokenRequest.  # noqa: E501
        :type: CustomParametersForGetResourceOauth2TokenInput
        """

        self._custom_parameters = custom_parameters

    @property
    def flow(self):
        """Gets the flow of this GetResourceOauth2TokenRequest.  # noqa: E501


        :return: The flow of this GetResourceOauth2TokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._flow

    @flow.setter
    def flow(self, flow):
        """Sets the flow of this GetResourceOauth2TokenRequest.


        :param flow: The flow of this GetResourceOauth2TokenRequest.  # noqa: E501
        :type: str
        """

        self._flow = flow

    @property
    def force_authentication(self):
        """Gets the force_authentication of this GetResourceOauth2TokenRequest.  # noqa: E501


        :return: The force_authentication of this GetResourceOauth2TokenRequest.  # noqa: E501
        :rtype: bool
        """
        return self._force_authentication

    @force_authentication.setter
    def force_authentication(self, force_authentication):
        """Sets the force_authentication of this GetResourceOauth2TokenRequest.


        :param force_authentication: The force_authentication of this GetResourceOauth2TokenRequest.  # noqa: E501
        :type: bool
        """

        self._force_authentication = force_authentication

    @property
    def identity_token(self):
        """Gets the identity_token of this GetResourceOauth2TokenRequest.  # noqa: E501


        :return: The identity_token of this GetResourceOauth2TokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._identity_token

    @identity_token.setter
    def identity_token(self, identity_token):
        """Sets the identity_token of this GetResourceOauth2TokenRequest.


        :param identity_token: The identity_token of this GetResourceOauth2TokenRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and identity_token is None:
            raise ValueError("Invalid value for `identity_token`, must not be `None`")  # noqa: E501

        self._identity_token = identity_token

    @property
    def pool_name(self):
        """Gets the pool_name of this GetResourceOauth2TokenRequest.  # noqa: E501


        :return: The pool_name of this GetResourceOauth2TokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._pool_name

    @pool_name.setter
    def pool_name(self, pool_name):
        """Sets the pool_name of this GetResourceOauth2TokenRequest.


        :param pool_name: The pool_name of this GetResourceOauth2TokenRequest.  # noqa: E501
        :type: str
        """

        self._pool_name = pool_name

    @property
    def provider_name(self):
        """Gets the provider_name of this GetResourceOauth2TokenRequest.  # noqa: E501


        :return: The provider_name of this GetResourceOauth2TokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this GetResourceOauth2TokenRequest.


        :param provider_name: The provider_name of this GetResourceOauth2TokenRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and provider_name is None:
            raise ValueError("Invalid value for `provider_name`, must not be `None`")  # noqa: E501

        self._provider_name = provider_name

    @property
    def redirect_url(self):
        """Gets the redirect_url of this GetResourceOauth2TokenRequest.  # noqa: E501


        :return: The redirect_url of this GetResourceOauth2TokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this GetResourceOauth2TokenRequest.


        :param redirect_url: The redirect_url of this GetResourceOauth2TokenRequest.  # noqa: E501
        :type: str
        """

        self._redirect_url = redirect_url

    @property
    def scopes(self):
        """Gets the scopes of this GetResourceOauth2TokenRequest.  # noqa: E501


        :return: The scopes of this GetResourceOauth2TokenRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this GetResourceOauth2TokenRequest.


        :param scopes: The scopes of this GetResourceOauth2TokenRequest.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetResourceOauth2TokenRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetResourceOauth2TokenRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetResourceOauth2TokenRequest):
            return True

        return self.to_dict() != other.to_dict()
