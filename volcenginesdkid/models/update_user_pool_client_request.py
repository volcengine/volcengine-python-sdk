# coding: utf-8

"""
    id

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class UpdateUserPoolClientRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_callback_urls': 'list[str]',
        'allowed_cors': 'list[str]',
        'allowed_logout_urls': 'list[str]',
        'allowed_web_origins': 'list[str]',
        'client_uid': 'str',
        'description': 'str',
        'id_token': 'IdTokenForUpdateUserPoolClientInput',
        'name': 'str',
        'refresh_token': 'RefreshTokenForUpdateUserPoolClientInput',
        'user_pool_uid': 'str'
    }

    attribute_map = {
        'allowed_callback_urls': 'AllowedCallbackUrls',
        'allowed_cors': 'AllowedCors',
        'allowed_logout_urls': 'AllowedLogoutUrls',
        'allowed_web_origins': 'AllowedWebOrigins',
        'client_uid': 'ClientUid',
        'description': 'Description',
        'id_token': 'IdToken',
        'name': 'Name',
        'refresh_token': 'RefreshToken',
        'user_pool_uid': 'UserPoolUid'
    }

    def __init__(self, allowed_callback_urls=None, allowed_cors=None, allowed_logout_urls=None, allowed_web_origins=None, client_uid=None, description=None, id_token=None, name=None, refresh_token=None, user_pool_uid=None, _configuration=None):  # noqa: E501
        """UpdateUserPoolClientRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allowed_callback_urls = None
        self._allowed_cors = None
        self._allowed_logout_urls = None
        self._allowed_web_origins = None
        self._client_uid = None
        self._description = None
        self._id_token = None
        self._name = None
        self._refresh_token = None
        self._user_pool_uid = None
        self.discriminator = None

        if allowed_callback_urls is not None:
            self.allowed_callback_urls = allowed_callback_urls
        if allowed_cors is not None:
            self.allowed_cors = allowed_cors
        if allowed_logout_urls is not None:
            self.allowed_logout_urls = allowed_logout_urls
        if allowed_web_origins is not None:
            self.allowed_web_origins = allowed_web_origins
        self.client_uid = client_uid
        if description is not None:
            self.description = description
        if id_token is not None:
            self.id_token = id_token
        if name is not None:
            self.name = name
        if refresh_token is not None:
            self.refresh_token = refresh_token
        self.user_pool_uid = user_pool_uid

    @property
    def allowed_callback_urls(self):
        """Gets the allowed_callback_urls of this UpdateUserPoolClientRequest.  # noqa: E501


        :return: The allowed_callback_urls of this UpdateUserPoolClientRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_callback_urls

    @allowed_callback_urls.setter
    def allowed_callback_urls(self, allowed_callback_urls):
        """Sets the allowed_callback_urls of this UpdateUserPoolClientRequest.


        :param allowed_callback_urls: The allowed_callback_urls of this UpdateUserPoolClientRequest.  # noqa: E501
        :type: list[str]
        """

        self._allowed_callback_urls = allowed_callback_urls

    @property
    def allowed_cors(self):
        """Gets the allowed_cors of this UpdateUserPoolClientRequest.  # noqa: E501


        :return: The allowed_cors of this UpdateUserPoolClientRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_cors

    @allowed_cors.setter
    def allowed_cors(self, allowed_cors):
        """Sets the allowed_cors of this UpdateUserPoolClientRequest.


        :param allowed_cors: The allowed_cors of this UpdateUserPoolClientRequest.  # noqa: E501
        :type: list[str]
        """

        self._allowed_cors = allowed_cors

    @property
    def allowed_logout_urls(self):
        """Gets the allowed_logout_urls of this UpdateUserPoolClientRequest.  # noqa: E501


        :return: The allowed_logout_urls of this UpdateUserPoolClientRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_logout_urls

    @allowed_logout_urls.setter
    def allowed_logout_urls(self, allowed_logout_urls):
        """Sets the allowed_logout_urls of this UpdateUserPoolClientRequest.


        :param allowed_logout_urls: The allowed_logout_urls of this UpdateUserPoolClientRequest.  # noqa: E501
        :type: list[str]
        """

        self._allowed_logout_urls = allowed_logout_urls

    @property
    def allowed_web_origins(self):
        """Gets the allowed_web_origins of this UpdateUserPoolClientRequest.  # noqa: E501


        :return: The allowed_web_origins of this UpdateUserPoolClientRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_web_origins

    @allowed_web_origins.setter
    def allowed_web_origins(self, allowed_web_origins):
        """Sets the allowed_web_origins of this UpdateUserPoolClientRequest.


        :param allowed_web_origins: The allowed_web_origins of this UpdateUserPoolClientRequest.  # noqa: E501
        :type: list[str]
        """

        self._allowed_web_origins = allowed_web_origins

    @property
    def client_uid(self):
        """Gets the client_uid of this UpdateUserPoolClientRequest.  # noqa: E501


        :return: The client_uid of this UpdateUserPoolClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_uid

    @client_uid.setter
    def client_uid(self, client_uid):
        """Sets the client_uid of this UpdateUserPoolClientRequest.


        :param client_uid: The client_uid of this UpdateUserPoolClientRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and client_uid is None:
            raise ValueError("Invalid value for `client_uid`, must not be `None`")  # noqa: E501

        self._client_uid = client_uid

    @property
    def description(self):
        """Gets the description of this UpdateUserPoolClientRequest.  # noqa: E501


        :return: The description of this UpdateUserPoolClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateUserPoolClientRequest.


        :param description: The description of this UpdateUserPoolClientRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id_token(self):
        """Gets the id_token of this UpdateUserPoolClientRequest.  # noqa: E501


        :return: The id_token of this UpdateUserPoolClientRequest.  # noqa: E501
        :rtype: IdTokenForUpdateUserPoolClientInput
        """
        return self._id_token

    @id_token.setter
    def id_token(self, id_token):
        """Sets the id_token of this UpdateUserPoolClientRequest.


        :param id_token: The id_token of this UpdateUserPoolClientRequest.  # noqa: E501
        :type: IdTokenForUpdateUserPoolClientInput
        """

        self._id_token = id_token

    @property
    def name(self):
        """Gets the name of this UpdateUserPoolClientRequest.  # noqa: E501


        :return: The name of this UpdateUserPoolClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateUserPoolClientRequest.


        :param name: The name of this UpdateUserPoolClientRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def refresh_token(self):
        """Gets the refresh_token of this UpdateUserPoolClientRequest.  # noqa: E501


        :return: The refresh_token of this UpdateUserPoolClientRequest.  # noqa: E501
        :rtype: RefreshTokenForUpdateUserPoolClientInput
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this UpdateUserPoolClientRequest.


        :param refresh_token: The refresh_token of this UpdateUserPoolClientRequest.  # noqa: E501
        :type: RefreshTokenForUpdateUserPoolClientInput
        """

        self._refresh_token = refresh_token

    @property
    def user_pool_uid(self):
        """Gets the user_pool_uid of this UpdateUserPoolClientRequest.  # noqa: E501


        :return: The user_pool_uid of this UpdateUserPoolClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_pool_uid

    @user_pool_uid.setter
    def user_pool_uid(self, user_pool_uid):
        """Sets the user_pool_uid of this UpdateUserPoolClientRequest.


        :param user_pool_uid: The user_pool_uid of this UpdateUserPoolClientRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user_pool_uid is None:
            raise ValueError("Invalid value for `user_pool_uid`, must not be `None`")  # noqa: E501

        self._user_pool_uid = user_pool_uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateUserPoolClientRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateUserPoolClientRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateUserPoolClientRequest):
            return True

        return self.to_dict() != other.to_dict()
