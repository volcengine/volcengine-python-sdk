# coding: utf-8

"""
    id

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorization_endpoint': 'str',
        'issuer': 'str',
        'response_types': 'list[str]',
        'token_endpoint': 'str'
    }

    attribute_map = {
        'authorization_endpoint': 'AuthorizationEndpoint',
        'issuer': 'Issuer',
        'response_types': 'ResponseTypes',
        'token_endpoint': 'TokenEndpoint'
    }

    def __init__(self, authorization_endpoint=None, issuer=None, response_types=None, token_endpoint=None, _configuration=None):  # noqa: E501
        """AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._authorization_endpoint = None
        self._issuer = None
        self._response_types = None
        self._token_endpoint = None
        self.discriminator = None

        if authorization_endpoint is not None:
            self.authorization_endpoint = authorization_endpoint
        if issuer is not None:
            self.issuer = issuer
        if response_types is not None:
            self.response_types = response_types
        if token_endpoint is not None:
            self.token_endpoint = token_endpoint

    @property
    def authorization_endpoint(self):
        """Gets the authorization_endpoint of this AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput.  # noqa: E501


        :return: The authorization_endpoint of this AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput.  # noqa: E501
        :rtype: str
        """
        return self._authorization_endpoint

    @authorization_endpoint.setter
    def authorization_endpoint(self, authorization_endpoint):
        """Sets the authorization_endpoint of this AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput.


        :param authorization_endpoint: The authorization_endpoint of this AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput.  # noqa: E501
        :type: str
        """

        self._authorization_endpoint = authorization_endpoint

    @property
    def issuer(self):
        """Gets the issuer of this AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput.  # noqa: E501


        :return: The issuer of this AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput.


        :param issuer: The issuer of this AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def response_types(self):
        """Gets the response_types of this AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput.  # noqa: E501


        :return: The response_types of this AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._response_types

    @response_types.setter
    def response_types(self, response_types):
        """Sets the response_types of this AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput.


        :param response_types: The response_types of this AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput.  # noqa: E501
        :type: list[str]
        """

        self._response_types = response_types

    @property
    def token_endpoint(self):
        """Gets the token_endpoint of this AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput.  # noqa: E501


        :return: The token_endpoint of this AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput.  # noqa: E501
        :rtype: str
        """
        return self._token_endpoint

    @token_endpoint.setter
    def token_endpoint(self, token_endpoint):
        """Sets the token_endpoint of this AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput.


        :param token_endpoint: The token_endpoint of this AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput.  # noqa: E501
        :type: str
        """

        self._token_endpoint = token_endpoint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthorizationServerMetadataForUpdateOauth2CredentialProviderInput):
            return True

        return self.to_dict() != other.to_dict()
