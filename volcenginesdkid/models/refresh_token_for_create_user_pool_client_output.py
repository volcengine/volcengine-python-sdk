# coding: utf-8

"""
    id

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class RefreshTokenForCreateUserPoolClientOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'combined_lifetime_seconds': 'int',
        'has_combined_lifetime': 'bool',
        'has_idle_lifetime': 'bool',
        'idle_lifetime_seconds': 'int',
        'rotation': 'bool'
    }

    attribute_map = {
        'combined_lifetime_seconds': 'CombinedLifetimeSeconds',
        'has_combined_lifetime': 'HasCombinedLifetime',
        'has_idle_lifetime': 'HasIdleLifetime',
        'idle_lifetime_seconds': 'IdleLifetimeSeconds',
        'rotation': 'Rotation'
    }

    def __init__(self, combined_lifetime_seconds=None, has_combined_lifetime=None, has_idle_lifetime=None, idle_lifetime_seconds=None, rotation=None, _configuration=None):  # noqa: E501
        """RefreshTokenForCreateUserPoolClientOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._combined_lifetime_seconds = None
        self._has_combined_lifetime = None
        self._has_idle_lifetime = None
        self._idle_lifetime_seconds = None
        self._rotation = None
        self.discriminator = None

        if combined_lifetime_seconds is not None:
            self.combined_lifetime_seconds = combined_lifetime_seconds
        if has_combined_lifetime is not None:
            self.has_combined_lifetime = has_combined_lifetime
        if has_idle_lifetime is not None:
            self.has_idle_lifetime = has_idle_lifetime
        if idle_lifetime_seconds is not None:
            self.idle_lifetime_seconds = idle_lifetime_seconds
        if rotation is not None:
            self.rotation = rotation

    @property
    def combined_lifetime_seconds(self):
        """Gets the combined_lifetime_seconds of this RefreshTokenForCreateUserPoolClientOutput.  # noqa: E501


        :return: The combined_lifetime_seconds of this RefreshTokenForCreateUserPoolClientOutput.  # noqa: E501
        :rtype: int
        """
        return self._combined_lifetime_seconds

    @combined_lifetime_seconds.setter
    def combined_lifetime_seconds(self, combined_lifetime_seconds):
        """Sets the combined_lifetime_seconds of this RefreshTokenForCreateUserPoolClientOutput.


        :param combined_lifetime_seconds: The combined_lifetime_seconds of this RefreshTokenForCreateUserPoolClientOutput.  # noqa: E501
        :type: int
        """

        self._combined_lifetime_seconds = combined_lifetime_seconds

    @property
    def has_combined_lifetime(self):
        """Gets the has_combined_lifetime of this RefreshTokenForCreateUserPoolClientOutput.  # noqa: E501


        :return: The has_combined_lifetime of this RefreshTokenForCreateUserPoolClientOutput.  # noqa: E501
        :rtype: bool
        """
        return self._has_combined_lifetime

    @has_combined_lifetime.setter
    def has_combined_lifetime(self, has_combined_lifetime):
        """Sets the has_combined_lifetime of this RefreshTokenForCreateUserPoolClientOutput.


        :param has_combined_lifetime: The has_combined_lifetime of this RefreshTokenForCreateUserPoolClientOutput.  # noqa: E501
        :type: bool
        """

        self._has_combined_lifetime = has_combined_lifetime

    @property
    def has_idle_lifetime(self):
        """Gets the has_idle_lifetime of this RefreshTokenForCreateUserPoolClientOutput.  # noqa: E501


        :return: The has_idle_lifetime of this RefreshTokenForCreateUserPoolClientOutput.  # noqa: E501
        :rtype: bool
        """
        return self._has_idle_lifetime

    @has_idle_lifetime.setter
    def has_idle_lifetime(self, has_idle_lifetime):
        """Sets the has_idle_lifetime of this RefreshTokenForCreateUserPoolClientOutput.


        :param has_idle_lifetime: The has_idle_lifetime of this RefreshTokenForCreateUserPoolClientOutput.  # noqa: E501
        :type: bool
        """

        self._has_idle_lifetime = has_idle_lifetime

    @property
    def idle_lifetime_seconds(self):
        """Gets the idle_lifetime_seconds of this RefreshTokenForCreateUserPoolClientOutput.  # noqa: E501


        :return: The idle_lifetime_seconds of this RefreshTokenForCreateUserPoolClientOutput.  # noqa: E501
        :rtype: int
        """
        return self._idle_lifetime_seconds

    @idle_lifetime_seconds.setter
    def idle_lifetime_seconds(self, idle_lifetime_seconds):
        """Sets the idle_lifetime_seconds of this RefreshTokenForCreateUserPoolClientOutput.


        :param idle_lifetime_seconds: The idle_lifetime_seconds of this RefreshTokenForCreateUserPoolClientOutput.  # noqa: E501
        :type: int
        """

        self._idle_lifetime_seconds = idle_lifetime_seconds

    @property
    def rotation(self):
        """Gets the rotation of this RefreshTokenForCreateUserPoolClientOutput.  # noqa: E501


        :return: The rotation of this RefreshTokenForCreateUserPoolClientOutput.  # noqa: E501
        :rtype: bool
        """
        return self._rotation

    @rotation.setter
    def rotation(self, rotation):
        """Sets the rotation of this RefreshTokenForCreateUserPoolClientOutput.


        :param rotation: The rotation of this RefreshTokenForCreateUserPoolClientOutput.  # noqa: E501
        :type: bool
        """

        self._rotation = rotation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RefreshTokenForCreateUserPoolClientOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RefreshTokenForCreateUserPoolClientOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RefreshTokenForCreateUserPoolClientOutput):
            return True

        return self.to_dict() != other.to_dict()
