# coding: utf-8

"""
    apig20221112

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CorsPolicySettingForUpdateRouteInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_credentials': 'bool',
        'allow_headers': 'list[str]',
        'allow_methods': 'list[str]',
        'allow_origins': 'list[AllowOriginForUpdateRouteInput]',
        'enable': 'bool',
        'expose_headers': 'list[str]',
        'max_age': 'int'
    }

    attribute_map = {
        'allow_credentials': 'AllowCredentials',
        'allow_headers': 'AllowHeaders',
        'allow_methods': 'AllowMethods',
        'allow_origins': 'AllowOrigins',
        'enable': 'Enable',
        'expose_headers': 'ExposeHeaders',
        'max_age': 'MaxAge'
    }

    def __init__(self, allow_credentials=None, allow_headers=None, allow_methods=None, allow_origins=None, enable=None, expose_headers=None, max_age=None, _configuration=None):  # noqa: E501
        """CorsPolicySettingForUpdateRouteInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allow_credentials = None
        self._allow_headers = None
        self._allow_methods = None
        self._allow_origins = None
        self._enable = None
        self._expose_headers = None
        self._max_age = None
        self.discriminator = None

        if allow_credentials is not None:
            self.allow_credentials = allow_credentials
        if allow_headers is not None:
            self.allow_headers = allow_headers
        if allow_methods is not None:
            self.allow_methods = allow_methods
        if allow_origins is not None:
            self.allow_origins = allow_origins
        if enable is not None:
            self.enable = enable
        if expose_headers is not None:
            self.expose_headers = expose_headers
        if max_age is not None:
            self.max_age = max_age

    @property
    def allow_credentials(self):
        """Gets the allow_credentials of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501


        :return: The allow_credentials of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501
        :rtype: bool
        """
        return self._allow_credentials

    @allow_credentials.setter
    def allow_credentials(self, allow_credentials):
        """Sets the allow_credentials of this CorsPolicySettingForUpdateRouteInput.


        :param allow_credentials: The allow_credentials of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501
        :type: bool
        """

        self._allow_credentials = allow_credentials

    @property
    def allow_headers(self):
        """Gets the allow_headers of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501


        :return: The allow_headers of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._allow_headers

    @allow_headers.setter
    def allow_headers(self, allow_headers):
        """Sets the allow_headers of this CorsPolicySettingForUpdateRouteInput.


        :param allow_headers: The allow_headers of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501
        :type: list[str]
        """

        self._allow_headers = allow_headers

    @property
    def allow_methods(self):
        """Gets the allow_methods of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501


        :return: The allow_methods of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._allow_methods

    @allow_methods.setter
    def allow_methods(self, allow_methods):
        """Sets the allow_methods of this CorsPolicySettingForUpdateRouteInput.


        :param allow_methods: The allow_methods of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501
        :type: list[str]
        """

        self._allow_methods = allow_methods

    @property
    def allow_origins(self):
        """Gets the allow_origins of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501


        :return: The allow_origins of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501
        :rtype: list[AllowOriginForUpdateRouteInput]
        """
        return self._allow_origins

    @allow_origins.setter
    def allow_origins(self, allow_origins):
        """Sets the allow_origins of this CorsPolicySettingForUpdateRouteInput.


        :param allow_origins: The allow_origins of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501
        :type: list[AllowOriginForUpdateRouteInput]
        """

        self._allow_origins = allow_origins

    @property
    def enable(self):
        """Gets the enable of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501


        :return: The enable of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this CorsPolicySettingForUpdateRouteInput.


        :param enable: The enable of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def expose_headers(self):
        """Gets the expose_headers of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501


        :return: The expose_headers of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._expose_headers

    @expose_headers.setter
    def expose_headers(self, expose_headers):
        """Sets the expose_headers of this CorsPolicySettingForUpdateRouteInput.


        :param expose_headers: The expose_headers of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501
        :type: list[str]
        """

        self._expose_headers = expose_headers

    @property
    def max_age(self):
        """Gets the max_age of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501


        :return: The max_age of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501
        :rtype: int
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age):
        """Sets the max_age of this CorsPolicySettingForUpdateRouteInput.


        :param max_age: The max_age of this CorsPolicySettingForUpdateRouteInput.  # noqa: E501
        :type: int
        """

        self._max_age = max_age

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CorsPolicySettingForUpdateRouteInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CorsPolicySettingForUpdateRouteInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CorsPolicySettingForUpdateRouteInput):
            return True

        return self.to_dict() != other.to_dict()
