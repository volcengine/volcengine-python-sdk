# coding: utf-8

"""
    ga

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ListPublicBandwidthPackagesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page_num': 'int',
        'page_size': 'int',
        'public_bandwidth_packages': 'list[PublicBandwidthPackageForListPublicBandwidthPackagesOutput]',
        'total_count': 'int'
    }

    attribute_map = {
        'page_num': 'PageNum',
        'page_size': 'PageSize',
        'public_bandwidth_packages': 'PublicBandwidthPackages',
        'total_count': 'TotalCount'
    }

    def __init__(self, page_num=None, page_size=None, public_bandwidth_packages=None, total_count=None, _configuration=None):  # noqa: E501
        """ListPublicBandwidthPackagesResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._page_num = None
        self._page_size = None
        self._public_bandwidth_packages = None
        self._total_count = None
        self.discriminator = None

        if page_num is not None:
            self.page_num = page_num
        if page_size is not None:
            self.page_size = page_size
        if public_bandwidth_packages is not None:
            self.public_bandwidth_packages = public_bandwidth_packages
        if total_count is not None:
            self.total_count = total_count

    @property
    def page_num(self):
        """Gets the page_num of this ListPublicBandwidthPackagesResponse.  # noqa: E501


        :return: The page_num of this ListPublicBandwidthPackagesResponse.  # noqa: E501
        :rtype: int
        """
        return self._page_num

    @page_num.setter
    def page_num(self, page_num):
        """Sets the page_num of this ListPublicBandwidthPackagesResponse.


        :param page_num: The page_num of this ListPublicBandwidthPackagesResponse.  # noqa: E501
        :type: int
        """

        self._page_num = page_num

    @property
    def page_size(self):
        """Gets the page_size of this ListPublicBandwidthPackagesResponse.  # noqa: E501


        :return: The page_size of this ListPublicBandwidthPackagesResponse.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ListPublicBandwidthPackagesResponse.


        :param page_size: The page_size of this ListPublicBandwidthPackagesResponse.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def public_bandwidth_packages(self):
        """Gets the public_bandwidth_packages of this ListPublicBandwidthPackagesResponse.  # noqa: E501


        :return: The public_bandwidth_packages of this ListPublicBandwidthPackagesResponse.  # noqa: E501
        :rtype: list[PublicBandwidthPackageForListPublicBandwidthPackagesOutput]
        """
        return self._public_bandwidth_packages

    @public_bandwidth_packages.setter
    def public_bandwidth_packages(self, public_bandwidth_packages):
        """Sets the public_bandwidth_packages of this ListPublicBandwidthPackagesResponse.


        :param public_bandwidth_packages: The public_bandwidth_packages of this ListPublicBandwidthPackagesResponse.  # noqa: E501
        :type: list[PublicBandwidthPackageForListPublicBandwidthPackagesOutput]
        """

        self._public_bandwidth_packages = public_bandwidth_packages

    @property
    def total_count(self):
        """Gets the total_count of this ListPublicBandwidthPackagesResponse.  # noqa: E501


        :return: The total_count of this ListPublicBandwidthPackagesResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ListPublicBandwidthPackagesResponse.


        :param total_count: The total_count of this ListPublicBandwidthPackagesResponse.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListPublicBandwidthPackagesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListPublicBandwidthPackagesResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListPublicBandwidthPackagesResponse):
            return True

        return self.to_dict() != other.to_dict()
