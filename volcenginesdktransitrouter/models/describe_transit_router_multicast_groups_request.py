# coding: utf-8

"""
    transitrouter

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DescribeTransitRouterMulticastGroupsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_ip_address': 'str',
        'is_group_member': 'bool',
        'is_group_source': 'bool',
        'member_type': 'str',
        'network_interface_ids': 'list[str]',
        'page_number': 'int',
        'page_size': 'int',
        'resource_id': 'str',
        'resource_type': 'str',
        'source_type': 'str',
        'subnet_ids': 'list[str]',
        'transit_router_attachment_id': 'str',
        'transit_router_multicast_domain_id': 'str'
    }

    attribute_map = {
        'group_ip_address': 'GroupIpAddress',
        'is_group_member': 'IsGroupMember',
        'is_group_source': 'IsGroupSource',
        'member_type': 'MemberType',
        'network_interface_ids': 'NetworkInterfaceIds',
        'page_number': 'PageNumber',
        'page_size': 'PageSize',
        'resource_id': 'ResourceId',
        'resource_type': 'ResourceType',
        'source_type': 'SourceType',
        'subnet_ids': 'SubnetIds',
        'transit_router_attachment_id': 'TransitRouterAttachmentId',
        'transit_router_multicast_domain_id': 'TransitRouterMulticastDomainId'
    }

    def __init__(self, group_ip_address=None, is_group_member=None, is_group_source=None, member_type=None, network_interface_ids=None, page_number=None, page_size=None, resource_id=None, resource_type=None, source_type=None, subnet_ids=None, transit_router_attachment_id=None, transit_router_multicast_domain_id=None, _configuration=None):  # noqa: E501
        """DescribeTransitRouterMulticastGroupsRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._group_ip_address = None
        self._is_group_member = None
        self._is_group_source = None
        self._member_type = None
        self._network_interface_ids = None
        self._page_number = None
        self._page_size = None
        self._resource_id = None
        self._resource_type = None
        self._source_type = None
        self._subnet_ids = None
        self._transit_router_attachment_id = None
        self._transit_router_multicast_domain_id = None
        self.discriminator = None

        if group_ip_address is not None:
            self.group_ip_address = group_ip_address
        if is_group_member is not None:
            self.is_group_member = is_group_member
        if is_group_source is not None:
            self.is_group_source = is_group_source
        if member_type is not None:
            self.member_type = member_type
        if network_interface_ids is not None:
            self.network_interface_ids = network_interface_ids
        if page_number is not None:
            self.page_number = page_number
        if page_size is not None:
            self.page_size = page_size
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_type is not None:
            self.resource_type = resource_type
        if source_type is not None:
            self.source_type = source_type
        if subnet_ids is not None:
            self.subnet_ids = subnet_ids
        if transit_router_attachment_id is not None:
            self.transit_router_attachment_id = transit_router_attachment_id
        if transit_router_multicast_domain_id is not None:
            self.transit_router_multicast_domain_id = transit_router_multicast_domain_id

    @property
    def group_ip_address(self):
        """Gets the group_ip_address of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501


        :return: The group_ip_address of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :rtype: str
        """
        return self._group_ip_address

    @group_ip_address.setter
    def group_ip_address(self, group_ip_address):
        """Sets the group_ip_address of this DescribeTransitRouterMulticastGroupsRequest.


        :param group_ip_address: The group_ip_address of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :type: str
        """

        self._group_ip_address = group_ip_address

    @property
    def is_group_member(self):
        """Gets the is_group_member of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501


        :return: The is_group_member of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_group_member

    @is_group_member.setter
    def is_group_member(self, is_group_member):
        """Sets the is_group_member of this DescribeTransitRouterMulticastGroupsRequest.


        :param is_group_member: The is_group_member of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :type: bool
        """

        self._is_group_member = is_group_member

    @property
    def is_group_source(self):
        """Gets the is_group_source of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501


        :return: The is_group_source of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_group_source

    @is_group_source.setter
    def is_group_source(self, is_group_source):
        """Sets the is_group_source of this DescribeTransitRouterMulticastGroupsRequest.


        :param is_group_source: The is_group_source of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :type: bool
        """

        self._is_group_source = is_group_source

    @property
    def member_type(self):
        """Gets the member_type of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501


        :return: The member_type of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :rtype: str
        """
        return self._member_type

    @member_type.setter
    def member_type(self, member_type):
        """Sets the member_type of this DescribeTransitRouterMulticastGroupsRequest.


        :param member_type: The member_type of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :type: str
        """

        self._member_type = member_type

    @property
    def network_interface_ids(self):
        """Gets the network_interface_ids of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501


        :return: The network_interface_ids of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._network_interface_ids

    @network_interface_ids.setter
    def network_interface_ids(self, network_interface_ids):
        """Sets the network_interface_ids of this DescribeTransitRouterMulticastGroupsRequest.


        :param network_interface_ids: The network_interface_ids of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :type: list[str]
        """

        self._network_interface_ids = network_interface_ids

    @property
    def page_number(self):
        """Gets the page_number of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501


        :return: The page_number of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this DescribeTransitRouterMulticastGroupsRequest.


        :param page_number: The page_number of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :type: int
        """

        self._page_number = page_number

    @property
    def page_size(self):
        """Gets the page_size of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501


        :return: The page_size of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this DescribeTransitRouterMulticastGroupsRequest.


        :param page_size: The page_size of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def resource_id(self):
        """Gets the resource_id of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501


        :return: The resource_id of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this DescribeTransitRouterMulticastGroupsRequest.


        :param resource_id: The resource_id of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501


        :return: The resource_type of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this DescribeTransitRouterMulticastGroupsRequest.


        :param resource_type: The resource_type of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def source_type(self):
        """Gets the source_type of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501


        :return: The source_type of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this DescribeTransitRouterMulticastGroupsRequest.


        :param source_type: The source_type of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    @property
    def subnet_ids(self):
        """Gets the subnet_ids of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501


        :return: The subnet_ids of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._subnet_ids

    @subnet_ids.setter
    def subnet_ids(self, subnet_ids):
        """Sets the subnet_ids of this DescribeTransitRouterMulticastGroupsRequest.


        :param subnet_ids: The subnet_ids of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :type: list[str]
        """

        self._subnet_ids = subnet_ids

    @property
    def transit_router_attachment_id(self):
        """Gets the transit_router_attachment_id of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501


        :return: The transit_router_attachment_id of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :rtype: str
        """
        return self._transit_router_attachment_id

    @transit_router_attachment_id.setter
    def transit_router_attachment_id(self, transit_router_attachment_id):
        """Sets the transit_router_attachment_id of this DescribeTransitRouterMulticastGroupsRequest.


        :param transit_router_attachment_id: The transit_router_attachment_id of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :type: str
        """

        self._transit_router_attachment_id = transit_router_attachment_id

    @property
    def transit_router_multicast_domain_id(self):
        """Gets the transit_router_multicast_domain_id of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501


        :return: The transit_router_multicast_domain_id of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :rtype: str
        """
        return self._transit_router_multicast_domain_id

    @transit_router_multicast_domain_id.setter
    def transit_router_multicast_domain_id(self, transit_router_multicast_domain_id):
        """Sets the transit_router_multicast_domain_id of this DescribeTransitRouterMulticastGroupsRequest.


        :param transit_router_multicast_domain_id: The transit_router_multicast_domain_id of this DescribeTransitRouterMulticastGroupsRequest.  # noqa: E501
        :type: str
        """

        self._transit_router_multicast_domain_id = transit_router_multicast_domain_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DescribeTransitRouterMulticastGroupsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DescribeTransitRouterMulticastGroupsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DescribeTransitRouterMulticastGroupsRequest):
            return True

        return self.to_dict() != other.to_dict()
