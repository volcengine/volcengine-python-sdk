# coding: utf-8

"""
    transitrouter

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateTransitRouterFlowLogRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aggregation_interval': 'int',
        'client_token': 'str',
        'description': 'str',
        'log_format_string': 'str',
        'resource_id': 'str',
        'resource_type': 'str',
        'tags': 'list[TagForCreateTransitRouterFlowLogInput]',
        'tls_project_name': 'str',
        'tls_topic_name': 'str',
        'transit_router_flow_log_name': 'str',
        'transit_router_id': 'str'
    }

    attribute_map = {
        'aggregation_interval': 'AggregationInterval',
        'client_token': 'ClientToken',
        'description': 'Description',
        'log_format_string': 'LogFormatString',
        'resource_id': 'ResourceId',
        'resource_type': 'ResourceType',
        'tags': 'Tags',
        'tls_project_name': 'TlsProjectName',
        'tls_topic_name': 'TlsTopicName',
        'transit_router_flow_log_name': 'TransitRouterFlowLogName',
        'transit_router_id': 'TransitRouterId'
    }

    def __init__(self, aggregation_interval=None, client_token=None, description=None, log_format_string=None, resource_id=None, resource_type=None, tags=None, tls_project_name=None, tls_topic_name=None, transit_router_flow_log_name=None, transit_router_id=None, _configuration=None):  # noqa: E501
        """CreateTransitRouterFlowLogRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._aggregation_interval = None
        self._client_token = None
        self._description = None
        self._log_format_string = None
        self._resource_id = None
        self._resource_type = None
        self._tags = None
        self._tls_project_name = None
        self._tls_topic_name = None
        self._transit_router_flow_log_name = None
        self._transit_router_id = None
        self.discriminator = None

        if aggregation_interval is not None:
            self.aggregation_interval = aggregation_interval
        if client_token is not None:
            self.client_token = client_token
        if description is not None:
            self.description = description
        if log_format_string is not None:
            self.log_format_string = log_format_string
        self.resource_id = resource_id
        self.resource_type = resource_type
        if tags is not None:
            self.tags = tags
        self.tls_project_name = tls_project_name
        self.tls_topic_name = tls_topic_name
        if transit_router_flow_log_name is not None:
            self.transit_router_flow_log_name = transit_router_flow_log_name
        self.transit_router_id = transit_router_id

    @property
    def aggregation_interval(self):
        """Gets the aggregation_interval of this CreateTransitRouterFlowLogRequest.  # noqa: E501


        :return: The aggregation_interval of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :rtype: int
        """
        return self._aggregation_interval

    @aggregation_interval.setter
    def aggregation_interval(self, aggregation_interval):
        """Sets the aggregation_interval of this CreateTransitRouterFlowLogRequest.


        :param aggregation_interval: The aggregation_interval of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :type: int
        """

        self._aggregation_interval = aggregation_interval

    @property
    def client_token(self):
        """Gets the client_token of this CreateTransitRouterFlowLogRequest.  # noqa: E501


        :return: The client_token of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateTransitRouterFlowLogRequest.


        :param client_token: The client_token of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :type: str
        """

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this CreateTransitRouterFlowLogRequest.  # noqa: E501


        :return: The description of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateTransitRouterFlowLogRequest.


        :param description: The description of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def log_format_string(self):
        """Gets the log_format_string of this CreateTransitRouterFlowLogRequest.  # noqa: E501


        :return: The log_format_string of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :rtype: str
        """
        return self._log_format_string

    @log_format_string.setter
    def log_format_string(self, log_format_string):
        """Sets the log_format_string of this CreateTransitRouterFlowLogRequest.


        :param log_format_string: The log_format_string of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :type: str
        """

        self._log_format_string = log_format_string

    @property
    def resource_id(self):
        """Gets the resource_id of this CreateTransitRouterFlowLogRequest.  # noqa: E501


        :return: The resource_id of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this CreateTransitRouterFlowLogRequest.


        :param resource_id: The resource_id of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")  # noqa: E501

        self._resource_id = resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this CreateTransitRouterFlowLogRequest.  # noqa: E501


        :return: The resource_type of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this CreateTransitRouterFlowLogRequest.


        :param resource_type: The resource_type of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def tags(self):
        """Gets the tags of this CreateTransitRouterFlowLogRequest.  # noqa: E501


        :return: The tags of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :rtype: list[TagForCreateTransitRouterFlowLogInput]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateTransitRouterFlowLogRequest.


        :param tags: The tags of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :type: list[TagForCreateTransitRouterFlowLogInput]
        """

        self._tags = tags

    @property
    def tls_project_name(self):
        """Gets the tls_project_name of this CreateTransitRouterFlowLogRequest.  # noqa: E501


        :return: The tls_project_name of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :rtype: str
        """
        return self._tls_project_name

    @tls_project_name.setter
    def tls_project_name(self, tls_project_name):
        """Sets the tls_project_name of this CreateTransitRouterFlowLogRequest.


        :param tls_project_name: The tls_project_name of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and tls_project_name is None:
            raise ValueError("Invalid value for `tls_project_name`, must not be `None`")  # noqa: E501

        self._tls_project_name = tls_project_name

    @property
    def tls_topic_name(self):
        """Gets the tls_topic_name of this CreateTransitRouterFlowLogRequest.  # noqa: E501


        :return: The tls_topic_name of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :rtype: str
        """
        return self._tls_topic_name

    @tls_topic_name.setter
    def tls_topic_name(self, tls_topic_name):
        """Sets the tls_topic_name of this CreateTransitRouterFlowLogRequest.


        :param tls_topic_name: The tls_topic_name of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and tls_topic_name is None:
            raise ValueError("Invalid value for `tls_topic_name`, must not be `None`")  # noqa: E501

        self._tls_topic_name = tls_topic_name

    @property
    def transit_router_flow_log_name(self):
        """Gets the transit_router_flow_log_name of this CreateTransitRouterFlowLogRequest.  # noqa: E501


        :return: The transit_router_flow_log_name of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :rtype: str
        """
        return self._transit_router_flow_log_name

    @transit_router_flow_log_name.setter
    def transit_router_flow_log_name(self, transit_router_flow_log_name):
        """Sets the transit_router_flow_log_name of this CreateTransitRouterFlowLogRequest.


        :param transit_router_flow_log_name: The transit_router_flow_log_name of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :type: str
        """

        self._transit_router_flow_log_name = transit_router_flow_log_name

    @property
    def transit_router_id(self):
        """Gets the transit_router_id of this CreateTransitRouterFlowLogRequest.  # noqa: E501


        :return: The transit_router_id of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :rtype: str
        """
        return self._transit_router_id

    @transit_router_id.setter
    def transit_router_id(self, transit_router_id):
        """Sets the transit_router_id of this CreateTransitRouterFlowLogRequest.


        :param transit_router_id: The transit_router_id of this CreateTransitRouterFlowLogRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and transit_router_id is None:
            raise ValueError("Invalid value for `transit_router_id`, must not be `None`")  # noqa: E501

        self._transit_router_id = transit_router_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateTransitRouterFlowLogRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTransitRouterFlowLogRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateTransitRouterFlowLogRequest):
            return True

        return self.to_dict() != other.to_dict()
