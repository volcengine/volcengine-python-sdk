# coding: utf-8

"""
    seccenter20240508

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class GetCustomWeakPasswordsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'update_time': 'int',
        'update_user': 'str',
        'weak_password_list': 'list[str]'
    }

    attribute_map = {
        'account_id': 'AccountID',
        'update_time': 'UpdateTime',
        'update_user': 'UpdateUser',
        'weak_password_list': 'WeakPasswordList'
    }

    def __init__(self, account_id=None, update_time=None, update_user=None, weak_password_list=None, _configuration=None):  # noqa: E501
        """GetCustomWeakPasswordsResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._update_time = None
        self._update_user = None
        self._weak_password_list = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if update_time is not None:
            self.update_time = update_time
        if update_user is not None:
            self.update_user = update_user
        if weak_password_list is not None:
            self.weak_password_list = weak_password_list

    @property
    def account_id(self):
        """Gets the account_id of this GetCustomWeakPasswordsResponse.  # noqa: E501


        :return: The account_id of this GetCustomWeakPasswordsResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetCustomWeakPasswordsResponse.


        :param account_id: The account_id of this GetCustomWeakPasswordsResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def update_time(self):
        """Gets the update_time of this GetCustomWeakPasswordsResponse.  # noqa: E501


        :return: The update_time of this GetCustomWeakPasswordsResponse.  # noqa: E501
        :rtype: int
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GetCustomWeakPasswordsResponse.


        :param update_time: The update_time of this GetCustomWeakPasswordsResponse.  # noqa: E501
        :type: int
        """

        self._update_time = update_time

    @property
    def update_user(self):
        """Gets the update_user of this GetCustomWeakPasswordsResponse.  # noqa: E501


        :return: The update_user of this GetCustomWeakPasswordsResponse.  # noqa: E501
        :rtype: str
        """
        return self._update_user

    @update_user.setter
    def update_user(self, update_user):
        """Sets the update_user of this GetCustomWeakPasswordsResponse.


        :param update_user: The update_user of this GetCustomWeakPasswordsResponse.  # noqa: E501
        :type: str
        """

        self._update_user = update_user

    @property
    def weak_password_list(self):
        """Gets the weak_password_list of this GetCustomWeakPasswordsResponse.  # noqa: E501


        :return: The weak_password_list of this GetCustomWeakPasswordsResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._weak_password_list

    @weak_password_list.setter
    def weak_password_list(self, weak_password_list):
        """Sets the weak_password_list of this GetCustomWeakPasswordsResponse.


        :param weak_password_list: The weak_password_list of this GetCustomWeakPasswordsResponse.  # noqa: E501
        :type: list[str]
        """

        self._weak_password_list = weak_password_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCustomWeakPasswordsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCustomWeakPasswordsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetCustomWeakPasswordsResponse):
            return True

        return self.to_dict() != other.to_dict()
