# coding: utf-8

"""
    seccenter20240508

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ConditionsForListOrderedHostsBasicInfosInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_id_list': 'list[str]',
        'agent_status': 'list[str]',
        'cloud_providers': 'list[str]',
        'hostname': 'str',
        'ip': 'str',
        'leaf_group_ids': 'list[str]',
        'platforms': 'list[str]',
        'regions': 'list[str]',
        'status': 'list[str]',
        'tags': 'list[str]',
        'top_group_id': 'str',
        'visibility': 'list[str]',
        'vpc_ids': 'list[str]'
    }

    attribute_map = {
        'agent_id_list': 'AgentIDList',
        'agent_status': 'AgentStatus',
        'cloud_providers': 'CloudProviders',
        'hostname': 'Hostname',
        'ip': 'Ip',
        'leaf_group_ids': 'LeafGroupIDs',
        'platforms': 'Platforms',
        'regions': 'Regions',
        'status': 'Status',
        'tags': 'Tags',
        'top_group_id': 'TopGroupID',
        'visibility': 'Visibility',
        'vpc_ids': 'VpcIds'
    }

    def __init__(self, agent_id_list=None, agent_status=None, cloud_providers=None, hostname=None, ip=None, leaf_group_ids=None, platforms=None, regions=None, status=None, tags=None, top_group_id=None, visibility=None, vpc_ids=None, _configuration=None):  # noqa: E501
        """ConditionsForListOrderedHostsBasicInfosInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._agent_id_list = None
        self._agent_status = None
        self._cloud_providers = None
        self._hostname = None
        self._ip = None
        self._leaf_group_ids = None
        self._platforms = None
        self._regions = None
        self._status = None
        self._tags = None
        self._top_group_id = None
        self._visibility = None
        self._vpc_ids = None
        self.discriminator = None

        if agent_id_list is not None:
            self.agent_id_list = agent_id_list
        if agent_status is not None:
            self.agent_status = agent_status
        if cloud_providers is not None:
            self.cloud_providers = cloud_providers
        if hostname is not None:
            self.hostname = hostname
        if ip is not None:
            self.ip = ip
        if leaf_group_ids is not None:
            self.leaf_group_ids = leaf_group_ids
        if platforms is not None:
            self.platforms = platforms
        if regions is not None:
            self.regions = regions
        if status is not None:
            self.status = status
        if tags is not None:
            self.tags = tags
        if top_group_id is not None:
            self.top_group_id = top_group_id
        if visibility is not None:
            self.visibility = visibility
        if vpc_ids is not None:
            self.vpc_ids = vpc_ids

    @property
    def agent_id_list(self):
        """Gets the agent_id_list of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501


        :return: The agent_id_list of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._agent_id_list

    @agent_id_list.setter
    def agent_id_list(self, agent_id_list):
        """Sets the agent_id_list of this ConditionsForListOrderedHostsBasicInfosInput.


        :param agent_id_list: The agent_id_list of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :type: list[str]
        """

        self._agent_id_list = agent_id_list

    @property
    def agent_status(self):
        """Gets the agent_status of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501


        :return: The agent_status of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._agent_status

    @agent_status.setter
    def agent_status(self, agent_status):
        """Sets the agent_status of this ConditionsForListOrderedHostsBasicInfosInput.


        :param agent_status: The agent_status of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :type: list[str]
        """

        self._agent_status = agent_status

    @property
    def cloud_providers(self):
        """Gets the cloud_providers of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501


        :return: The cloud_providers of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._cloud_providers

    @cloud_providers.setter
    def cloud_providers(self, cloud_providers):
        """Sets the cloud_providers of this ConditionsForListOrderedHostsBasicInfosInput.


        :param cloud_providers: The cloud_providers of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :type: list[str]
        """

        self._cloud_providers = cloud_providers

    @property
    def hostname(self):
        """Gets the hostname of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501


        :return: The hostname of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ConditionsForListOrderedHostsBasicInfosInput.


        :param hostname: The hostname of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def ip(self):
        """Gets the ip of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501


        :return: The ip of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this ConditionsForListOrderedHostsBasicInfosInput.


        :param ip: The ip of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def leaf_group_ids(self):
        """Gets the leaf_group_ids of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501


        :return: The leaf_group_ids of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._leaf_group_ids

    @leaf_group_ids.setter
    def leaf_group_ids(self, leaf_group_ids):
        """Sets the leaf_group_ids of this ConditionsForListOrderedHostsBasicInfosInput.


        :param leaf_group_ids: The leaf_group_ids of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :type: list[str]
        """

        self._leaf_group_ids = leaf_group_ids

    @property
    def platforms(self):
        """Gets the platforms of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501


        :return: The platforms of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._platforms

    @platforms.setter
    def platforms(self, platforms):
        """Sets the platforms of this ConditionsForListOrderedHostsBasicInfosInput.


        :param platforms: The platforms of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :type: list[str]
        """

        self._platforms = platforms

    @property
    def regions(self):
        """Gets the regions of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501


        :return: The regions of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this ConditionsForListOrderedHostsBasicInfosInput.


        :param regions: The regions of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :type: list[str]
        """

        self._regions = regions

    @property
    def status(self):
        """Gets the status of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501


        :return: The status of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConditionsForListOrderedHostsBasicInfosInput.


        :param status: The status of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :type: list[str]
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501


        :return: The tags of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ConditionsForListOrderedHostsBasicInfosInput.


        :param tags: The tags of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def top_group_id(self):
        """Gets the top_group_id of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501


        :return: The top_group_id of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :rtype: str
        """
        return self._top_group_id

    @top_group_id.setter
    def top_group_id(self, top_group_id):
        """Sets the top_group_id of this ConditionsForListOrderedHostsBasicInfosInput.


        :param top_group_id: The top_group_id of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :type: str
        """

        self._top_group_id = top_group_id

    @property
    def visibility(self):
        """Gets the visibility of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501


        :return: The visibility of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this ConditionsForListOrderedHostsBasicInfosInput.


        :param visibility: The visibility of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :type: list[str]
        """

        self._visibility = visibility

    @property
    def vpc_ids(self):
        """Gets the vpc_ids of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501


        :return: The vpc_ids of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._vpc_ids

    @vpc_ids.setter
    def vpc_ids(self, vpc_ids):
        """Sets the vpc_ids of this ConditionsForListOrderedHostsBasicInfosInput.


        :param vpc_ids: The vpc_ids of this ConditionsForListOrderedHostsBasicInfosInput.  # noqa: E501
        :type: list[str]
        """

        self._vpc_ids = vpc_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConditionsForListOrderedHostsBasicInfosInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConditionsForListOrderedHostsBasicInfosInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConditionsForListOrderedHostsBasicInfosInput):
            return True

        return self.to_dict() != other.to_dict()
