# coding: utf-8

"""
    seccenter20240508

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class SetBruteForceBanConfigRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'agent_id_list': 'list[str]',
        'all_host': 'bool',
        'ban_scenes': 'list[str]',
        'ban_type': 'str',
        'ban_type_list': 'list[str]',
        'cloud_providers': 'list[str]',
        'enable': 'bool',
        'id': 'str',
        'leaf_group_ids': 'list[str]',
        'manager_id': 'str',
        'operator': 'str',
        'rule_list': 'list[RuleListForSetBruteForceBanConfigInput]',
        'top_group_id': 'str'
    }

    attribute_map = {
        'account_id': 'AccountID',
        'agent_id_list': 'AgentIDList',
        'all_host': 'AllHost',
        'ban_scenes': 'BanScenes',
        'ban_type': 'BanType',
        'ban_type_list': 'BanTypeList',
        'cloud_providers': 'CloudProviders',
        'enable': 'Enable',
        'id': 'ID',
        'leaf_group_ids': 'LeafGroupIDs',
        'manager_id': 'ManagerID',
        'operator': 'Operator',
        'rule_list': 'RuleList',
        'top_group_id': 'TopGroupID'
    }

    def __init__(self, account_id=None, agent_id_list=None, all_host=None, ban_scenes=None, ban_type=None, ban_type_list=None, cloud_providers=None, enable=None, id=None, leaf_group_ids=None, manager_id=None, operator=None, rule_list=None, top_group_id=None, _configuration=None):  # noqa: E501
        """SetBruteForceBanConfigRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._agent_id_list = None
        self._all_host = None
        self._ban_scenes = None
        self._ban_type = None
        self._ban_type_list = None
        self._cloud_providers = None
        self._enable = None
        self._id = None
        self._leaf_group_ids = None
        self._manager_id = None
        self._operator = None
        self._rule_list = None
        self._top_group_id = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if agent_id_list is not None:
            self.agent_id_list = agent_id_list
        if all_host is not None:
            self.all_host = all_host
        if ban_scenes is not None:
            self.ban_scenes = ban_scenes
        if ban_type is not None:
            self.ban_type = ban_type
        if ban_type_list is not None:
            self.ban_type_list = ban_type_list
        if cloud_providers is not None:
            self.cloud_providers = cloud_providers
        if enable is not None:
            self.enable = enable
        if id is not None:
            self.id = id
        if leaf_group_ids is not None:
            self.leaf_group_ids = leaf_group_ids
        if manager_id is not None:
            self.manager_id = manager_id
        if operator is not None:
            self.operator = operator
        if rule_list is not None:
            self.rule_list = rule_list
        if top_group_id is not None:
            self.top_group_id = top_group_id

    @property
    def account_id(self):
        """Gets the account_id of this SetBruteForceBanConfigRequest.  # noqa: E501


        :return: The account_id of this SetBruteForceBanConfigRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SetBruteForceBanConfigRequest.


        :param account_id: The account_id of this SetBruteForceBanConfigRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def agent_id_list(self):
        """Gets the agent_id_list of this SetBruteForceBanConfigRequest.  # noqa: E501


        :return: The agent_id_list of this SetBruteForceBanConfigRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._agent_id_list

    @agent_id_list.setter
    def agent_id_list(self, agent_id_list):
        """Sets the agent_id_list of this SetBruteForceBanConfigRequest.


        :param agent_id_list: The agent_id_list of this SetBruteForceBanConfigRequest.  # noqa: E501
        :type: list[str]
        """

        self._agent_id_list = agent_id_list

    @property
    def all_host(self):
        """Gets the all_host of this SetBruteForceBanConfigRequest.  # noqa: E501


        :return: The all_host of this SetBruteForceBanConfigRequest.  # noqa: E501
        :rtype: bool
        """
        return self._all_host

    @all_host.setter
    def all_host(self, all_host):
        """Sets the all_host of this SetBruteForceBanConfigRequest.


        :param all_host: The all_host of this SetBruteForceBanConfigRequest.  # noqa: E501
        :type: bool
        """

        self._all_host = all_host

    @property
    def ban_scenes(self):
        """Gets the ban_scenes of this SetBruteForceBanConfigRequest.  # noqa: E501


        :return: The ban_scenes of this SetBruteForceBanConfigRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._ban_scenes

    @ban_scenes.setter
    def ban_scenes(self, ban_scenes):
        """Sets the ban_scenes of this SetBruteForceBanConfigRequest.


        :param ban_scenes: The ban_scenes of this SetBruteForceBanConfigRequest.  # noqa: E501
        :type: list[str]
        """

        self._ban_scenes = ban_scenes

    @property
    def ban_type(self):
        """Gets the ban_type of this SetBruteForceBanConfigRequest.  # noqa: E501


        :return: The ban_type of this SetBruteForceBanConfigRequest.  # noqa: E501
        :rtype: str
        """
        return self._ban_type

    @ban_type.setter
    def ban_type(self, ban_type):
        """Sets the ban_type of this SetBruteForceBanConfigRequest.


        :param ban_type: The ban_type of this SetBruteForceBanConfigRequest.  # noqa: E501
        :type: str
        """

        self._ban_type = ban_type

    @property
    def ban_type_list(self):
        """Gets the ban_type_list of this SetBruteForceBanConfigRequest.  # noqa: E501


        :return: The ban_type_list of this SetBruteForceBanConfigRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._ban_type_list

    @ban_type_list.setter
    def ban_type_list(self, ban_type_list):
        """Sets the ban_type_list of this SetBruteForceBanConfigRequest.


        :param ban_type_list: The ban_type_list of this SetBruteForceBanConfigRequest.  # noqa: E501
        :type: list[str]
        """

        self._ban_type_list = ban_type_list

    @property
    def cloud_providers(self):
        """Gets the cloud_providers of this SetBruteForceBanConfigRequest.  # noqa: E501


        :return: The cloud_providers of this SetBruteForceBanConfigRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._cloud_providers

    @cloud_providers.setter
    def cloud_providers(self, cloud_providers):
        """Sets the cloud_providers of this SetBruteForceBanConfigRequest.


        :param cloud_providers: The cloud_providers of this SetBruteForceBanConfigRequest.  # noqa: E501
        :type: list[str]
        """

        self._cloud_providers = cloud_providers

    @property
    def enable(self):
        """Gets the enable of this SetBruteForceBanConfigRequest.  # noqa: E501


        :return: The enable of this SetBruteForceBanConfigRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this SetBruteForceBanConfigRequest.


        :param enable: The enable of this SetBruteForceBanConfigRequest.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def id(self):
        """Gets the id of this SetBruteForceBanConfigRequest.  # noqa: E501


        :return: The id of this SetBruteForceBanConfigRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SetBruteForceBanConfigRequest.


        :param id: The id of this SetBruteForceBanConfigRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def leaf_group_ids(self):
        """Gets the leaf_group_ids of this SetBruteForceBanConfigRequest.  # noqa: E501


        :return: The leaf_group_ids of this SetBruteForceBanConfigRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._leaf_group_ids

    @leaf_group_ids.setter
    def leaf_group_ids(self, leaf_group_ids):
        """Sets the leaf_group_ids of this SetBruteForceBanConfigRequest.


        :param leaf_group_ids: The leaf_group_ids of this SetBruteForceBanConfigRequest.  # noqa: E501
        :type: list[str]
        """

        self._leaf_group_ids = leaf_group_ids

    @property
    def manager_id(self):
        """Gets the manager_id of this SetBruteForceBanConfigRequest.  # noqa: E501


        :return: The manager_id of this SetBruteForceBanConfigRequest.  # noqa: E501
        :rtype: str
        """
        return self._manager_id

    @manager_id.setter
    def manager_id(self, manager_id):
        """Sets the manager_id of this SetBruteForceBanConfigRequest.


        :param manager_id: The manager_id of this SetBruteForceBanConfigRequest.  # noqa: E501
        :type: str
        """

        self._manager_id = manager_id

    @property
    def operator(self):
        """Gets the operator of this SetBruteForceBanConfigRequest.  # noqa: E501


        :return: The operator of this SetBruteForceBanConfigRequest.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this SetBruteForceBanConfigRequest.


        :param operator: The operator of this SetBruteForceBanConfigRequest.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def rule_list(self):
        """Gets the rule_list of this SetBruteForceBanConfigRequest.  # noqa: E501


        :return: The rule_list of this SetBruteForceBanConfigRequest.  # noqa: E501
        :rtype: list[RuleListForSetBruteForceBanConfigInput]
        """
        return self._rule_list

    @rule_list.setter
    def rule_list(self, rule_list):
        """Sets the rule_list of this SetBruteForceBanConfigRequest.


        :param rule_list: The rule_list of this SetBruteForceBanConfigRequest.  # noqa: E501
        :type: list[RuleListForSetBruteForceBanConfigInput]
        """

        self._rule_list = rule_list

    @property
    def top_group_id(self):
        """Gets the top_group_id of this SetBruteForceBanConfigRequest.  # noqa: E501


        :return: The top_group_id of this SetBruteForceBanConfigRequest.  # noqa: E501
        :rtype: str
        """
        return self._top_group_id

    @top_group_id.setter
    def top_group_id(self, top_group_id):
        """Sets the top_group_id of this SetBruteForceBanConfigRequest.


        :param top_group_id: The top_group_id of this SetBruteForceBanConfigRequest.  # noqa: E501
        :type: str
        """

        self._top_group_id = top_group_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SetBruteForceBanConfigRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetBruteForceBanConfigRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SetBruteForceBanConfigRequest):
            return True

        return self.to_dict() != other.to_dict()
