# coding: utf-8

"""
    seccenter20240508

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class HostInfoForListBanIPListOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_id': 'str',
        'cloud_provider': 'str',
        'ecs_instance': 'EcsInstanceForListBanIPListOutput',
        'leaf_group_id': 'str',
        'platform': 'str',
        'tags': 'list[str]',
        'top_group_id': 'str'
    }

    attribute_map = {
        'agent_id': 'AgentID',
        'cloud_provider': 'CloudProvider',
        'ecs_instance': 'EcsInstance',
        'leaf_group_id': 'LeafGroupID',
        'platform': 'Platform',
        'tags': 'Tags',
        'top_group_id': 'TopGroupID'
    }

    def __init__(self, agent_id=None, cloud_provider=None, ecs_instance=None, leaf_group_id=None, platform=None, tags=None, top_group_id=None, _configuration=None):  # noqa: E501
        """HostInfoForListBanIPListOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._agent_id = None
        self._cloud_provider = None
        self._ecs_instance = None
        self._leaf_group_id = None
        self._platform = None
        self._tags = None
        self._top_group_id = None
        self.discriminator = None

        if agent_id is not None:
            self.agent_id = agent_id
        if cloud_provider is not None:
            self.cloud_provider = cloud_provider
        if ecs_instance is not None:
            self.ecs_instance = ecs_instance
        if leaf_group_id is not None:
            self.leaf_group_id = leaf_group_id
        if platform is not None:
            self.platform = platform
        if tags is not None:
            self.tags = tags
        if top_group_id is not None:
            self.top_group_id = top_group_id

    @property
    def agent_id(self):
        """Gets the agent_id of this HostInfoForListBanIPListOutput.  # noqa: E501


        :return: The agent_id of this HostInfoForListBanIPListOutput.  # noqa: E501
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this HostInfoForListBanIPListOutput.


        :param agent_id: The agent_id of this HostInfoForListBanIPListOutput.  # noqa: E501
        :type: str
        """

        self._agent_id = agent_id

    @property
    def cloud_provider(self):
        """Gets the cloud_provider of this HostInfoForListBanIPListOutput.  # noqa: E501


        :return: The cloud_provider of this HostInfoForListBanIPListOutput.  # noqa: E501
        :rtype: str
        """
        return self._cloud_provider

    @cloud_provider.setter
    def cloud_provider(self, cloud_provider):
        """Sets the cloud_provider of this HostInfoForListBanIPListOutput.


        :param cloud_provider: The cloud_provider of this HostInfoForListBanIPListOutput.  # noqa: E501
        :type: str
        """

        self._cloud_provider = cloud_provider

    @property
    def ecs_instance(self):
        """Gets the ecs_instance of this HostInfoForListBanIPListOutput.  # noqa: E501


        :return: The ecs_instance of this HostInfoForListBanIPListOutput.  # noqa: E501
        :rtype: EcsInstanceForListBanIPListOutput
        """
        return self._ecs_instance

    @ecs_instance.setter
    def ecs_instance(self, ecs_instance):
        """Sets the ecs_instance of this HostInfoForListBanIPListOutput.


        :param ecs_instance: The ecs_instance of this HostInfoForListBanIPListOutput.  # noqa: E501
        :type: EcsInstanceForListBanIPListOutput
        """

        self._ecs_instance = ecs_instance

    @property
    def leaf_group_id(self):
        """Gets the leaf_group_id of this HostInfoForListBanIPListOutput.  # noqa: E501


        :return: The leaf_group_id of this HostInfoForListBanIPListOutput.  # noqa: E501
        :rtype: str
        """
        return self._leaf_group_id

    @leaf_group_id.setter
    def leaf_group_id(self, leaf_group_id):
        """Sets the leaf_group_id of this HostInfoForListBanIPListOutput.


        :param leaf_group_id: The leaf_group_id of this HostInfoForListBanIPListOutput.  # noqa: E501
        :type: str
        """

        self._leaf_group_id = leaf_group_id

    @property
    def platform(self):
        """Gets the platform of this HostInfoForListBanIPListOutput.  # noqa: E501


        :return: The platform of this HostInfoForListBanIPListOutput.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this HostInfoForListBanIPListOutput.


        :param platform: The platform of this HostInfoForListBanIPListOutput.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def tags(self):
        """Gets the tags of this HostInfoForListBanIPListOutput.  # noqa: E501


        :return: The tags of this HostInfoForListBanIPListOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this HostInfoForListBanIPListOutput.


        :param tags: The tags of this HostInfoForListBanIPListOutput.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def top_group_id(self):
        """Gets the top_group_id of this HostInfoForListBanIPListOutput.  # noqa: E501


        :return: The top_group_id of this HostInfoForListBanIPListOutput.  # noqa: E501
        :rtype: str
        """
        return self._top_group_id

    @top_group_id.setter
    def top_group_id(self, top_group_id):
        """Sets the top_group_id of this HostInfoForListBanIPListOutput.


        :param top_group_id: The top_group_id of this HostInfoForListBanIPListOutput.  # noqa: E501
        :type: str
        """

        self._top_group_id = top_group_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostInfoForListBanIPListOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostInfoForListBanIPListOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HostInfoForListBanIPListOutput):
            return True

        return self.to_dict() != other.to_dict()
