# coding: utf-8

"""
    seccenter20240508

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class RuleListForSetBruteForceBanConfigInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ban_seconds': 'int',
        'enable': 'bool',
        'login_fail_count_threshold': 'int',
        'login_fail_time_threshold': 'int',
        'rule_type': 'str'
    }

    attribute_map = {
        'ban_seconds': 'BanSeconds',
        'enable': 'Enable',
        'login_fail_count_threshold': 'LoginFailCountThreshold',
        'login_fail_time_threshold': 'LoginFailTimeThreshold',
        'rule_type': 'RuleType'
    }

    def __init__(self, ban_seconds=None, enable=None, login_fail_count_threshold=None, login_fail_time_threshold=None, rule_type=None, _configuration=None):  # noqa: E501
        """RuleListForSetBruteForceBanConfigInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ban_seconds = None
        self._enable = None
        self._login_fail_count_threshold = None
        self._login_fail_time_threshold = None
        self._rule_type = None
        self.discriminator = None

        if ban_seconds is not None:
            self.ban_seconds = ban_seconds
        if enable is not None:
            self.enable = enable
        if login_fail_count_threshold is not None:
            self.login_fail_count_threshold = login_fail_count_threshold
        if login_fail_time_threshold is not None:
            self.login_fail_time_threshold = login_fail_time_threshold
        if rule_type is not None:
            self.rule_type = rule_type

    @property
    def ban_seconds(self):
        """Gets the ban_seconds of this RuleListForSetBruteForceBanConfigInput.  # noqa: E501


        :return: The ban_seconds of this RuleListForSetBruteForceBanConfigInput.  # noqa: E501
        :rtype: int
        """
        return self._ban_seconds

    @ban_seconds.setter
    def ban_seconds(self, ban_seconds):
        """Sets the ban_seconds of this RuleListForSetBruteForceBanConfigInput.


        :param ban_seconds: The ban_seconds of this RuleListForSetBruteForceBanConfigInput.  # noqa: E501
        :type: int
        """

        self._ban_seconds = ban_seconds

    @property
    def enable(self):
        """Gets the enable of this RuleListForSetBruteForceBanConfigInput.  # noqa: E501


        :return: The enable of this RuleListForSetBruteForceBanConfigInput.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this RuleListForSetBruteForceBanConfigInput.


        :param enable: The enable of this RuleListForSetBruteForceBanConfigInput.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def login_fail_count_threshold(self):
        """Gets the login_fail_count_threshold of this RuleListForSetBruteForceBanConfigInput.  # noqa: E501


        :return: The login_fail_count_threshold of this RuleListForSetBruteForceBanConfigInput.  # noqa: E501
        :rtype: int
        """
        return self._login_fail_count_threshold

    @login_fail_count_threshold.setter
    def login_fail_count_threshold(self, login_fail_count_threshold):
        """Sets the login_fail_count_threshold of this RuleListForSetBruteForceBanConfigInput.


        :param login_fail_count_threshold: The login_fail_count_threshold of this RuleListForSetBruteForceBanConfigInput.  # noqa: E501
        :type: int
        """

        self._login_fail_count_threshold = login_fail_count_threshold

    @property
    def login_fail_time_threshold(self):
        """Gets the login_fail_time_threshold of this RuleListForSetBruteForceBanConfigInput.  # noqa: E501


        :return: The login_fail_time_threshold of this RuleListForSetBruteForceBanConfigInput.  # noqa: E501
        :rtype: int
        """
        return self._login_fail_time_threshold

    @login_fail_time_threshold.setter
    def login_fail_time_threshold(self, login_fail_time_threshold):
        """Sets the login_fail_time_threshold of this RuleListForSetBruteForceBanConfigInput.


        :param login_fail_time_threshold: The login_fail_time_threshold of this RuleListForSetBruteForceBanConfigInput.  # noqa: E501
        :type: int
        """

        self._login_fail_time_threshold = login_fail_time_threshold

    @property
    def rule_type(self):
        """Gets the rule_type of this RuleListForSetBruteForceBanConfigInput.  # noqa: E501


        :return: The rule_type of this RuleListForSetBruteForceBanConfigInput.  # noqa: E501
        :rtype: str
        """
        return self._rule_type

    @rule_type.setter
    def rule_type(self, rule_type):
        """Sets the rule_type of this RuleListForSetBruteForceBanConfigInput.


        :param rule_type: The rule_type of this RuleListForSetBruteForceBanConfigInput.  # noqa: E501
        :type: str
        """

        self._rule_type = rule_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuleListForSetBruteForceBanConfigInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleListForSetBruteForceBanConfigInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RuleListForSetBruteForceBanConfigInput):
            return True

        return self.to_dict() != other.to_dict()
