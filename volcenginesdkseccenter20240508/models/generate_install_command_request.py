# coding: utf-8

"""
    seccenter20240508

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class GenerateInstallCommandRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_protect': 'bool',
        'cloud_provider': 'str',
        'expire_time': 'int',
        'group_id': 'str',
        'host_engine': 'int',
        'installation_method': 'str',
        'os': 'str',
        'proxy_name': 'str'
    }

    attribute_map = {
        'auto_protect': 'AutoProtect',
        'cloud_provider': 'CloudProvider',
        'expire_time': 'ExpireTime',
        'group_id': 'GroupId',
        'host_engine': 'HostEngine',
        'installation_method': 'InstallationMethod',
        'os': 'OS',
        'proxy_name': 'ProxyName'
    }

    def __init__(self, auto_protect=None, cloud_provider=None, expire_time=None, group_id=None, host_engine=None, installation_method=None, os=None, proxy_name=None, _configuration=None):  # noqa: E501
        """GenerateInstallCommandRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auto_protect = None
        self._cloud_provider = None
        self._expire_time = None
        self._group_id = None
        self._host_engine = None
        self._installation_method = None
        self._os = None
        self._proxy_name = None
        self.discriminator = None

        if auto_protect is not None:
            self.auto_protect = auto_protect
        if cloud_provider is not None:
            self.cloud_provider = cloud_provider
        if expire_time is not None:
            self.expire_time = expire_time
        if group_id is not None:
            self.group_id = group_id
        if host_engine is not None:
            self.host_engine = host_engine
        if installation_method is not None:
            self.installation_method = installation_method
        if os is not None:
            self.os = os
        if proxy_name is not None:
            self.proxy_name = proxy_name

    @property
    def auto_protect(self):
        """Gets the auto_protect of this GenerateInstallCommandRequest.  # noqa: E501


        :return: The auto_protect of this GenerateInstallCommandRequest.  # noqa: E501
        :rtype: bool
        """
        return self._auto_protect

    @auto_protect.setter
    def auto_protect(self, auto_protect):
        """Sets the auto_protect of this GenerateInstallCommandRequest.


        :param auto_protect: The auto_protect of this GenerateInstallCommandRequest.  # noqa: E501
        :type: bool
        """

        self._auto_protect = auto_protect

    @property
    def cloud_provider(self):
        """Gets the cloud_provider of this GenerateInstallCommandRequest.  # noqa: E501


        :return: The cloud_provider of this GenerateInstallCommandRequest.  # noqa: E501
        :rtype: str
        """
        return self._cloud_provider

    @cloud_provider.setter
    def cloud_provider(self, cloud_provider):
        """Sets the cloud_provider of this GenerateInstallCommandRequest.


        :param cloud_provider: The cloud_provider of this GenerateInstallCommandRequest.  # noqa: E501
        :type: str
        """

        self._cloud_provider = cloud_provider

    @property
    def expire_time(self):
        """Gets the expire_time of this GenerateInstallCommandRequest.  # noqa: E501


        :return: The expire_time of this GenerateInstallCommandRequest.  # noqa: E501
        :rtype: int
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this GenerateInstallCommandRequest.


        :param expire_time: The expire_time of this GenerateInstallCommandRequest.  # noqa: E501
        :type: int
        """

        self._expire_time = expire_time

    @property
    def group_id(self):
        """Gets the group_id of this GenerateInstallCommandRequest.  # noqa: E501


        :return: The group_id of this GenerateInstallCommandRequest.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this GenerateInstallCommandRequest.


        :param group_id: The group_id of this GenerateInstallCommandRequest.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def host_engine(self):
        """Gets the host_engine of this GenerateInstallCommandRequest.  # noqa: E501


        :return: The host_engine of this GenerateInstallCommandRequest.  # noqa: E501
        :rtype: int
        """
        return self._host_engine

    @host_engine.setter
    def host_engine(self, host_engine):
        """Sets the host_engine of this GenerateInstallCommandRequest.


        :param host_engine: The host_engine of this GenerateInstallCommandRequest.  # noqa: E501
        :type: int
        """

        self._host_engine = host_engine

    @property
    def installation_method(self):
        """Gets the installation_method of this GenerateInstallCommandRequest.  # noqa: E501


        :return: The installation_method of this GenerateInstallCommandRequest.  # noqa: E501
        :rtype: str
        """
        return self._installation_method

    @installation_method.setter
    def installation_method(self, installation_method):
        """Sets the installation_method of this GenerateInstallCommandRequest.


        :param installation_method: The installation_method of this GenerateInstallCommandRequest.  # noqa: E501
        :type: str
        """

        self._installation_method = installation_method

    @property
    def os(self):
        """Gets the os of this GenerateInstallCommandRequest.  # noqa: E501


        :return: The os of this GenerateInstallCommandRequest.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this GenerateInstallCommandRequest.


        :param os: The os of this GenerateInstallCommandRequest.  # noqa: E501
        :type: str
        """

        self._os = os

    @property
    def proxy_name(self):
        """Gets the proxy_name of this GenerateInstallCommandRequest.  # noqa: E501


        :return: The proxy_name of this GenerateInstallCommandRequest.  # noqa: E501
        :rtype: str
        """
        return self._proxy_name

    @proxy_name.setter
    def proxy_name(self, proxy_name):
        """Sets the proxy_name of this GenerateInstallCommandRequest.


        :param proxy_name: The proxy_name of this GenerateInstallCommandRequest.  # noqa: E501
        :type: str
        """

        self._proxy_name = proxy_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerateInstallCommandRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerateInstallCommandRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GenerateInstallCommandRequest):
            return True

        return self.to_dict() != other.to_dict()
