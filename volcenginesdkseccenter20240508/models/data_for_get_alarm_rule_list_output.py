# coding: utf-8

"""
    seccenter20240508

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DataForGetAlarmRuleListOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alert_desc': 'str',
        'alert_desc_us': 'str',
        'alert_type': 'str',
        'alert_type_us': 'str',
        'harm_level': 'str',
        'rule_category': 'str',
        'rule_id': 'str',
        'rule_name': 'str',
        'rule_name_us': 'str'
    }

    attribute_map = {
        'alert_desc': 'AlertDesc',
        'alert_desc_us': 'AlertDescUs',
        'alert_type': 'AlertType',
        'alert_type_us': 'AlertTypeUs',
        'harm_level': 'HarmLevel',
        'rule_category': 'RuleCategory',
        'rule_id': 'RuleID',
        'rule_name': 'RuleName',
        'rule_name_us': 'RuleNameUs'
    }

    def __init__(self, alert_desc=None, alert_desc_us=None, alert_type=None, alert_type_us=None, harm_level=None, rule_category=None, rule_id=None, rule_name=None, rule_name_us=None, _configuration=None):  # noqa: E501
        """DataForGetAlarmRuleListOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._alert_desc = None
        self._alert_desc_us = None
        self._alert_type = None
        self._alert_type_us = None
        self._harm_level = None
        self._rule_category = None
        self._rule_id = None
        self._rule_name = None
        self._rule_name_us = None
        self.discriminator = None

        if alert_desc is not None:
            self.alert_desc = alert_desc
        if alert_desc_us is not None:
            self.alert_desc_us = alert_desc_us
        if alert_type is not None:
            self.alert_type = alert_type
        if alert_type_us is not None:
            self.alert_type_us = alert_type_us
        if harm_level is not None:
            self.harm_level = harm_level
        if rule_category is not None:
            self.rule_category = rule_category
        if rule_id is not None:
            self.rule_id = rule_id
        if rule_name is not None:
            self.rule_name = rule_name
        if rule_name_us is not None:
            self.rule_name_us = rule_name_us

    @property
    def alert_desc(self):
        """Gets the alert_desc of this DataForGetAlarmRuleListOutput.  # noqa: E501


        :return: The alert_desc of this DataForGetAlarmRuleListOutput.  # noqa: E501
        :rtype: str
        """
        return self._alert_desc

    @alert_desc.setter
    def alert_desc(self, alert_desc):
        """Sets the alert_desc of this DataForGetAlarmRuleListOutput.


        :param alert_desc: The alert_desc of this DataForGetAlarmRuleListOutput.  # noqa: E501
        :type: str
        """

        self._alert_desc = alert_desc

    @property
    def alert_desc_us(self):
        """Gets the alert_desc_us of this DataForGetAlarmRuleListOutput.  # noqa: E501


        :return: The alert_desc_us of this DataForGetAlarmRuleListOutput.  # noqa: E501
        :rtype: str
        """
        return self._alert_desc_us

    @alert_desc_us.setter
    def alert_desc_us(self, alert_desc_us):
        """Sets the alert_desc_us of this DataForGetAlarmRuleListOutput.


        :param alert_desc_us: The alert_desc_us of this DataForGetAlarmRuleListOutput.  # noqa: E501
        :type: str
        """

        self._alert_desc_us = alert_desc_us

    @property
    def alert_type(self):
        """Gets the alert_type of this DataForGetAlarmRuleListOutput.  # noqa: E501


        :return: The alert_type of this DataForGetAlarmRuleListOutput.  # noqa: E501
        :rtype: str
        """
        return self._alert_type

    @alert_type.setter
    def alert_type(self, alert_type):
        """Sets the alert_type of this DataForGetAlarmRuleListOutput.


        :param alert_type: The alert_type of this DataForGetAlarmRuleListOutput.  # noqa: E501
        :type: str
        """

        self._alert_type = alert_type

    @property
    def alert_type_us(self):
        """Gets the alert_type_us of this DataForGetAlarmRuleListOutput.  # noqa: E501


        :return: The alert_type_us of this DataForGetAlarmRuleListOutput.  # noqa: E501
        :rtype: str
        """
        return self._alert_type_us

    @alert_type_us.setter
    def alert_type_us(self, alert_type_us):
        """Sets the alert_type_us of this DataForGetAlarmRuleListOutput.


        :param alert_type_us: The alert_type_us of this DataForGetAlarmRuleListOutput.  # noqa: E501
        :type: str
        """

        self._alert_type_us = alert_type_us

    @property
    def harm_level(self):
        """Gets the harm_level of this DataForGetAlarmRuleListOutput.  # noqa: E501


        :return: The harm_level of this DataForGetAlarmRuleListOutput.  # noqa: E501
        :rtype: str
        """
        return self._harm_level

    @harm_level.setter
    def harm_level(self, harm_level):
        """Sets the harm_level of this DataForGetAlarmRuleListOutput.


        :param harm_level: The harm_level of this DataForGetAlarmRuleListOutput.  # noqa: E501
        :type: str
        """

        self._harm_level = harm_level

    @property
    def rule_category(self):
        """Gets the rule_category of this DataForGetAlarmRuleListOutput.  # noqa: E501


        :return: The rule_category of this DataForGetAlarmRuleListOutput.  # noqa: E501
        :rtype: str
        """
        return self._rule_category

    @rule_category.setter
    def rule_category(self, rule_category):
        """Sets the rule_category of this DataForGetAlarmRuleListOutput.


        :param rule_category: The rule_category of this DataForGetAlarmRuleListOutput.  # noqa: E501
        :type: str
        """

        self._rule_category = rule_category

    @property
    def rule_id(self):
        """Gets the rule_id of this DataForGetAlarmRuleListOutput.  # noqa: E501


        :return: The rule_id of this DataForGetAlarmRuleListOutput.  # noqa: E501
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this DataForGetAlarmRuleListOutput.


        :param rule_id: The rule_id of this DataForGetAlarmRuleListOutput.  # noqa: E501
        :type: str
        """

        self._rule_id = rule_id

    @property
    def rule_name(self):
        """Gets the rule_name of this DataForGetAlarmRuleListOutput.  # noqa: E501


        :return: The rule_name of this DataForGetAlarmRuleListOutput.  # noqa: E501
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this DataForGetAlarmRuleListOutput.


        :param rule_name: The rule_name of this DataForGetAlarmRuleListOutput.  # noqa: E501
        :type: str
        """

        self._rule_name = rule_name

    @property
    def rule_name_us(self):
        """Gets the rule_name_us of this DataForGetAlarmRuleListOutput.  # noqa: E501


        :return: The rule_name_us of this DataForGetAlarmRuleListOutput.  # noqa: E501
        :rtype: str
        """
        return self._rule_name_us

    @rule_name_us.setter
    def rule_name_us(self, rule_name_us):
        """Sets the rule_name_us of this DataForGetAlarmRuleListOutput.


        :param rule_name_us: The rule_name_us of this DataForGetAlarmRuleListOutput.  # noqa: E501
        :type: str
        """

        self._rule_name_us = rule_name_us

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataForGetAlarmRuleListOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataForGetAlarmRuleListOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataForGetAlarmRuleListOutput):
            return True

        return self.to_dict() != other.to_dict()
