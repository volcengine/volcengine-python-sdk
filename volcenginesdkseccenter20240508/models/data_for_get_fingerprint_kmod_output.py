# coding: utf-8

"""
    seccenter20240508

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DataForGetFingerprintKmodOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addr': 'str',
        'agent_id': 'str',
        'agent_tags': 'list[str]',
        'eip_address': 'str',
        'hostname': 'str',
        'id': 'str',
        'name': 'str',
        'primary_ip_address': 'str',
        'refcount': 'str',
        'size': 'str',
        'start_time': 'int',
        'state': 'str',
        'update_time': 'int',
        'used_by': 'str'
    }

    attribute_map = {
        'addr': 'Addr',
        'agent_id': 'AgentID',
        'agent_tags': 'AgentTags',
        'eip_address': 'EipAddress',
        'hostname': 'Hostname',
        'id': 'ID',
        'name': 'Name',
        'primary_ip_address': 'PrimaryIpAddress',
        'refcount': 'Refcount',
        'size': 'Size',
        'start_time': 'StartTime',
        'state': 'State',
        'update_time': 'UpdateTime',
        'used_by': 'UsedBy'
    }

    def __init__(self, addr=None, agent_id=None, agent_tags=None, eip_address=None, hostname=None, id=None, name=None, primary_ip_address=None, refcount=None, size=None, start_time=None, state=None, update_time=None, used_by=None, _configuration=None):  # noqa: E501
        """DataForGetFingerprintKmodOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._addr = None
        self._agent_id = None
        self._agent_tags = None
        self._eip_address = None
        self._hostname = None
        self._id = None
        self._name = None
        self._primary_ip_address = None
        self._refcount = None
        self._size = None
        self._start_time = None
        self._state = None
        self._update_time = None
        self._used_by = None
        self.discriminator = None

        if addr is not None:
            self.addr = addr
        if agent_id is not None:
            self.agent_id = agent_id
        if agent_tags is not None:
            self.agent_tags = agent_tags
        if eip_address is not None:
            self.eip_address = eip_address
        if hostname is not None:
            self.hostname = hostname
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if primary_ip_address is not None:
            self.primary_ip_address = primary_ip_address
        if refcount is not None:
            self.refcount = refcount
        if size is not None:
            self.size = size
        if start_time is not None:
            self.start_time = start_time
        if state is not None:
            self.state = state
        if update_time is not None:
            self.update_time = update_time
        if used_by is not None:
            self.used_by = used_by

    @property
    def addr(self):
        """Gets the addr of this DataForGetFingerprintKmodOutput.  # noqa: E501


        :return: The addr of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :rtype: str
        """
        return self._addr

    @addr.setter
    def addr(self, addr):
        """Sets the addr of this DataForGetFingerprintKmodOutput.


        :param addr: The addr of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :type: str
        """

        self._addr = addr

    @property
    def agent_id(self):
        """Gets the agent_id of this DataForGetFingerprintKmodOutput.  # noqa: E501


        :return: The agent_id of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this DataForGetFingerprintKmodOutput.


        :param agent_id: The agent_id of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :type: str
        """

        self._agent_id = agent_id

    @property
    def agent_tags(self):
        """Gets the agent_tags of this DataForGetFingerprintKmodOutput.  # noqa: E501


        :return: The agent_tags of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._agent_tags

    @agent_tags.setter
    def agent_tags(self, agent_tags):
        """Sets the agent_tags of this DataForGetFingerprintKmodOutput.


        :param agent_tags: The agent_tags of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :type: list[str]
        """

        self._agent_tags = agent_tags

    @property
    def eip_address(self):
        """Gets the eip_address of this DataForGetFingerprintKmodOutput.  # noqa: E501


        :return: The eip_address of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :rtype: str
        """
        return self._eip_address

    @eip_address.setter
    def eip_address(self, eip_address):
        """Sets the eip_address of this DataForGetFingerprintKmodOutput.


        :param eip_address: The eip_address of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :type: str
        """

        self._eip_address = eip_address

    @property
    def hostname(self):
        """Gets the hostname of this DataForGetFingerprintKmodOutput.  # noqa: E501


        :return: The hostname of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this DataForGetFingerprintKmodOutput.


        :param hostname: The hostname of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def id(self):
        """Gets the id of this DataForGetFingerprintKmodOutput.  # noqa: E501


        :return: The id of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataForGetFingerprintKmodOutput.


        :param id: The id of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DataForGetFingerprintKmodOutput.  # noqa: E501


        :return: The name of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataForGetFingerprintKmodOutput.


        :param name: The name of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def primary_ip_address(self):
        """Gets the primary_ip_address of this DataForGetFingerprintKmodOutput.  # noqa: E501


        :return: The primary_ip_address of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :rtype: str
        """
        return self._primary_ip_address

    @primary_ip_address.setter
    def primary_ip_address(self, primary_ip_address):
        """Sets the primary_ip_address of this DataForGetFingerprintKmodOutput.


        :param primary_ip_address: The primary_ip_address of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :type: str
        """

        self._primary_ip_address = primary_ip_address

    @property
    def refcount(self):
        """Gets the refcount of this DataForGetFingerprintKmodOutput.  # noqa: E501


        :return: The refcount of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :rtype: str
        """
        return self._refcount

    @refcount.setter
    def refcount(self, refcount):
        """Sets the refcount of this DataForGetFingerprintKmodOutput.


        :param refcount: The refcount of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :type: str
        """

        self._refcount = refcount

    @property
    def size(self):
        """Gets the size of this DataForGetFingerprintKmodOutput.  # noqa: E501


        :return: The size of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DataForGetFingerprintKmodOutput.


        :param size: The size of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def start_time(self):
        """Gets the start_time of this DataForGetFingerprintKmodOutput.  # noqa: E501


        :return: The start_time of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this DataForGetFingerprintKmodOutput.


        :param start_time: The start_time of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this DataForGetFingerprintKmodOutput.  # noqa: E501


        :return: The state of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DataForGetFingerprintKmodOutput.


        :param state: The state of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this DataForGetFingerprintKmodOutput.  # noqa: E501


        :return: The update_time of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :rtype: int
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this DataForGetFingerprintKmodOutput.


        :param update_time: The update_time of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :type: int
        """

        self._update_time = update_time

    @property
    def used_by(self):
        """Gets the used_by of this DataForGetFingerprintKmodOutput.  # noqa: E501


        :return: The used_by of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :rtype: str
        """
        return self._used_by

    @used_by.setter
    def used_by(self, used_by):
        """Sets the used_by of this DataForGetFingerprintKmodOutput.


        :param used_by: The used_by of this DataForGetFingerprintKmodOutput.  # noqa: E501
        :type: str
        """

        self._used_by = used_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataForGetFingerprintKmodOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataForGetFingerprintKmodOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataForGetFingerprintKmodOutput):
            return True

        return self.to_dict() != other.to_dict()
