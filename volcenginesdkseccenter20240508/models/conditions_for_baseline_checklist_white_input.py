# coding: utf-8

"""
    seccenter20240508

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ConditionsForBaselineChecklistWhiteInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_id': 'str',
        'agent_ip': 'str',
        'agent_tags': 'str',
        'check_name': 'str',
        'cloud_providers': 'list[str]',
        'hostname': 'str',
        'leaf_group_ids': 'list[str]',
        'top_group_id': 'str'
    }

    attribute_map = {
        'agent_id': 'AgentID',
        'agent_ip': 'AgentIP',
        'agent_tags': 'AgentTags',
        'check_name': 'CheckName',
        'cloud_providers': 'CloudProviders',
        'hostname': 'Hostname',
        'leaf_group_ids': 'LeafGroupIDs',
        'top_group_id': 'TopGroupID'
    }

    def __init__(self, agent_id=None, agent_ip=None, agent_tags=None, check_name=None, cloud_providers=None, hostname=None, leaf_group_ids=None, top_group_id=None, _configuration=None):  # noqa: E501
        """ConditionsForBaselineChecklistWhiteInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._agent_id = None
        self._agent_ip = None
        self._agent_tags = None
        self._check_name = None
        self._cloud_providers = None
        self._hostname = None
        self._leaf_group_ids = None
        self._top_group_id = None
        self.discriminator = None

        if agent_id is not None:
            self.agent_id = agent_id
        if agent_ip is not None:
            self.agent_ip = agent_ip
        if agent_tags is not None:
            self.agent_tags = agent_tags
        if check_name is not None:
            self.check_name = check_name
        if cloud_providers is not None:
            self.cloud_providers = cloud_providers
        if hostname is not None:
            self.hostname = hostname
        if leaf_group_ids is not None:
            self.leaf_group_ids = leaf_group_ids
        if top_group_id is not None:
            self.top_group_id = top_group_id

    @property
    def agent_id(self):
        """Gets the agent_id of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501


        :return: The agent_id of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this ConditionsForBaselineChecklistWhiteInput.


        :param agent_id: The agent_id of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501
        :type: str
        """

        self._agent_id = agent_id

    @property
    def agent_ip(self):
        """Gets the agent_ip of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501


        :return: The agent_ip of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501
        :rtype: str
        """
        return self._agent_ip

    @agent_ip.setter
    def agent_ip(self, agent_ip):
        """Sets the agent_ip of this ConditionsForBaselineChecklistWhiteInput.


        :param agent_ip: The agent_ip of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501
        :type: str
        """

        self._agent_ip = agent_ip

    @property
    def agent_tags(self):
        """Gets the agent_tags of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501


        :return: The agent_tags of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501
        :rtype: str
        """
        return self._agent_tags

    @agent_tags.setter
    def agent_tags(self, agent_tags):
        """Sets the agent_tags of this ConditionsForBaselineChecklistWhiteInput.


        :param agent_tags: The agent_tags of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501
        :type: str
        """

        self._agent_tags = agent_tags

    @property
    def check_name(self):
        """Gets the check_name of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501


        :return: The check_name of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501
        :rtype: str
        """
        return self._check_name

    @check_name.setter
    def check_name(self, check_name):
        """Sets the check_name of this ConditionsForBaselineChecklistWhiteInput.


        :param check_name: The check_name of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501
        :type: str
        """

        self._check_name = check_name

    @property
    def cloud_providers(self):
        """Gets the cloud_providers of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501


        :return: The cloud_providers of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._cloud_providers

    @cloud_providers.setter
    def cloud_providers(self, cloud_providers):
        """Sets the cloud_providers of this ConditionsForBaselineChecklistWhiteInput.


        :param cloud_providers: The cloud_providers of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501
        :type: list[str]
        """

        self._cloud_providers = cloud_providers

    @property
    def hostname(self):
        """Gets the hostname of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501


        :return: The hostname of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ConditionsForBaselineChecklistWhiteInput.


        :param hostname: The hostname of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def leaf_group_ids(self):
        """Gets the leaf_group_ids of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501


        :return: The leaf_group_ids of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._leaf_group_ids

    @leaf_group_ids.setter
    def leaf_group_ids(self, leaf_group_ids):
        """Sets the leaf_group_ids of this ConditionsForBaselineChecklistWhiteInput.


        :param leaf_group_ids: The leaf_group_ids of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501
        :type: list[str]
        """

        self._leaf_group_ids = leaf_group_ids

    @property
    def top_group_id(self):
        """Gets the top_group_id of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501


        :return: The top_group_id of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501
        :rtype: str
        """
        return self._top_group_id

    @top_group_id.setter
    def top_group_id(self, top_group_id):
        """Sets the top_group_id of this ConditionsForBaselineChecklistWhiteInput.


        :param top_group_id: The top_group_id of this ConditionsForBaselineChecklistWhiteInput.  # noqa: E501
        :type: str
        """

        self._top_group_id = top_group_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConditionsForBaselineChecklistWhiteInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConditionsForBaselineChecklistWhiteInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConditionsForBaselineChecklistWhiteInput):
            return True

        return self.to_dict() != other.to_dict()
