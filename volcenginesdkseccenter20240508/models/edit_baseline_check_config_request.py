# coding: utf-8

"""
    seccenter20240508

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class EditBaselineCheckConfigRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_id_list': 'list[str]',
        'baseline_list': 'list[BaselineListForEditBaselineCheckConfigInput]',
        'config_id': 'str',
        'config_name': 'str',
        'enable': 'bool',
        'end_time': 'int',
        'if_all_host': 'bool',
        'leaf_group_ids': 'list[str]',
        'model': 'str',
        'period': 'str',
        'remark': 'str',
        'start_time': 'int'
    }

    attribute_map = {
        'agent_id_list': 'AgentIDList',
        'baseline_list': 'BaselineList',
        'config_id': 'ConfigID',
        'config_name': 'ConfigName',
        'enable': 'Enable',
        'end_time': 'EndTime',
        'if_all_host': 'IfAllHost',
        'leaf_group_ids': 'LeafGroupIDs',
        'model': 'Model',
        'period': 'Period',
        'remark': 'Remark',
        'start_time': 'StartTime'
    }

    def __init__(self, agent_id_list=None, baseline_list=None, config_id=None, config_name=None, enable=None, end_time=None, if_all_host=None, leaf_group_ids=None, model=None, period=None, remark=None, start_time=None, _configuration=None):  # noqa: E501
        """EditBaselineCheckConfigRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._agent_id_list = None
        self._baseline_list = None
        self._config_id = None
        self._config_name = None
        self._enable = None
        self._end_time = None
        self._if_all_host = None
        self._leaf_group_ids = None
        self._model = None
        self._period = None
        self._remark = None
        self._start_time = None
        self.discriminator = None

        if agent_id_list is not None:
            self.agent_id_list = agent_id_list
        if baseline_list is not None:
            self.baseline_list = baseline_list
        self.config_id = config_id
        if config_name is not None:
            self.config_name = config_name
        if enable is not None:
            self.enable = enable
        if end_time is not None:
            self.end_time = end_time
        if if_all_host is not None:
            self.if_all_host = if_all_host
        if leaf_group_ids is not None:
            self.leaf_group_ids = leaf_group_ids
        if model is not None:
            self.model = model
        if period is not None:
            self.period = period
        if remark is not None:
            self.remark = remark
        if start_time is not None:
            self.start_time = start_time

    @property
    def agent_id_list(self):
        """Gets the agent_id_list of this EditBaselineCheckConfigRequest.  # noqa: E501


        :return: The agent_id_list of this EditBaselineCheckConfigRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._agent_id_list

    @agent_id_list.setter
    def agent_id_list(self, agent_id_list):
        """Sets the agent_id_list of this EditBaselineCheckConfigRequest.


        :param agent_id_list: The agent_id_list of this EditBaselineCheckConfigRequest.  # noqa: E501
        :type: list[str]
        """

        self._agent_id_list = agent_id_list

    @property
    def baseline_list(self):
        """Gets the baseline_list of this EditBaselineCheckConfigRequest.  # noqa: E501


        :return: The baseline_list of this EditBaselineCheckConfigRequest.  # noqa: E501
        :rtype: list[BaselineListForEditBaselineCheckConfigInput]
        """
        return self._baseline_list

    @baseline_list.setter
    def baseline_list(self, baseline_list):
        """Sets the baseline_list of this EditBaselineCheckConfigRequest.


        :param baseline_list: The baseline_list of this EditBaselineCheckConfigRequest.  # noqa: E501
        :type: list[BaselineListForEditBaselineCheckConfigInput]
        """

        self._baseline_list = baseline_list

    @property
    def config_id(self):
        """Gets the config_id of this EditBaselineCheckConfigRequest.  # noqa: E501


        :return: The config_id of this EditBaselineCheckConfigRequest.  # noqa: E501
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this EditBaselineCheckConfigRequest.


        :param config_id: The config_id of this EditBaselineCheckConfigRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and config_id is None:
            raise ValueError("Invalid value for `config_id`, must not be `None`")  # noqa: E501

        self._config_id = config_id

    @property
    def config_name(self):
        """Gets the config_name of this EditBaselineCheckConfigRequest.  # noqa: E501


        :return: The config_name of this EditBaselineCheckConfigRequest.  # noqa: E501
        :rtype: str
        """
        return self._config_name

    @config_name.setter
    def config_name(self, config_name):
        """Sets the config_name of this EditBaselineCheckConfigRequest.


        :param config_name: The config_name of this EditBaselineCheckConfigRequest.  # noqa: E501
        :type: str
        """

        self._config_name = config_name

    @property
    def enable(self):
        """Gets the enable of this EditBaselineCheckConfigRequest.  # noqa: E501


        :return: The enable of this EditBaselineCheckConfigRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this EditBaselineCheckConfigRequest.


        :param enable: The enable of this EditBaselineCheckConfigRequest.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def end_time(self):
        """Gets the end_time of this EditBaselineCheckConfigRequest.  # noqa: E501


        :return: The end_time of this EditBaselineCheckConfigRequest.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this EditBaselineCheckConfigRequest.


        :param end_time: The end_time of this EditBaselineCheckConfigRequest.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def if_all_host(self):
        """Gets the if_all_host of this EditBaselineCheckConfigRequest.  # noqa: E501


        :return: The if_all_host of this EditBaselineCheckConfigRequest.  # noqa: E501
        :rtype: bool
        """
        return self._if_all_host

    @if_all_host.setter
    def if_all_host(self, if_all_host):
        """Sets the if_all_host of this EditBaselineCheckConfigRequest.


        :param if_all_host: The if_all_host of this EditBaselineCheckConfigRequest.  # noqa: E501
        :type: bool
        """

        self._if_all_host = if_all_host

    @property
    def leaf_group_ids(self):
        """Gets the leaf_group_ids of this EditBaselineCheckConfigRequest.  # noqa: E501


        :return: The leaf_group_ids of this EditBaselineCheckConfigRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._leaf_group_ids

    @leaf_group_ids.setter
    def leaf_group_ids(self, leaf_group_ids):
        """Sets the leaf_group_ids of this EditBaselineCheckConfigRequest.


        :param leaf_group_ids: The leaf_group_ids of this EditBaselineCheckConfigRequest.  # noqa: E501
        :type: list[str]
        """

        self._leaf_group_ids = leaf_group_ids

    @property
    def model(self):
        """Gets the model of this EditBaselineCheckConfigRequest.  # noqa: E501


        :return: The model of this EditBaselineCheckConfigRequest.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this EditBaselineCheckConfigRequest.


        :param model: The model of this EditBaselineCheckConfigRequest.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def period(self):
        """Gets the period of this EditBaselineCheckConfigRequest.  # noqa: E501


        :return: The period of this EditBaselineCheckConfigRequest.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this EditBaselineCheckConfigRequest.


        :param period: The period of this EditBaselineCheckConfigRequest.  # noqa: E501
        :type: str
        """

        self._period = period

    @property
    def remark(self):
        """Gets the remark of this EditBaselineCheckConfigRequest.  # noqa: E501


        :return: The remark of this EditBaselineCheckConfigRequest.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this EditBaselineCheckConfigRequest.


        :param remark: The remark of this EditBaselineCheckConfigRequest.  # noqa: E501
        :type: str
        """

        self._remark = remark

    @property
    def start_time(self):
        """Gets the start_time of this EditBaselineCheckConfigRequest.  # noqa: E501


        :return: The start_time of this EditBaselineCheckConfigRequest.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this EditBaselineCheckConfigRequest.


        :param start_time: The start_time of this EditBaselineCheckConfigRequest.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditBaselineCheckConfigRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditBaselineCheckConfigRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EditBaselineCheckConfigRequest):
            return True

        return self.to_dict() != other.to_dict()
