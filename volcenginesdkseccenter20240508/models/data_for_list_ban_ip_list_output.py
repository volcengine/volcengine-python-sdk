# coding: utf-8

"""
    seccenter20240508

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DataForListBanIPListOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'ban_end_time_unix': 'int',
        'ban_ip': 'str',
        'ban_start_time_unix': 'int',
        'ban_type': 'str',
        'id': 'str',
        'insert_time': 'int',
        'port_end': 'int',
        'port_start': 'int',
        'reason': 'str',
        'region': 'str',
        'relate_alarm_info': 'RelateAlarmInfoForListBanIPListOutput',
        'security_group_id': 'str',
        'status': 'str',
        'host_info': 'HostInfoForListBanIPListOutput'
    }

    attribute_map = {
        'account_id': 'AccountID',
        'ban_end_time_unix': 'BanEndTimeUnix',
        'ban_ip': 'BanIP',
        'ban_start_time_unix': 'BanStartTimeUnix',
        'ban_type': 'BanType',
        'id': 'ID',
        'insert_time': 'InsertTime',
        'port_end': 'PortEnd',
        'port_start': 'PortStart',
        'reason': 'Reason',
        'region': 'Region',
        'relate_alarm_info': 'RelateAlarmInfo',
        'security_group_id': 'SecurityGroupID',
        'status': 'Status',
        'host_info': 'hostInfo'
    }

    def __init__(self, account_id=None, ban_end_time_unix=None, ban_ip=None, ban_start_time_unix=None, ban_type=None, id=None, insert_time=None, port_end=None, port_start=None, reason=None, region=None, relate_alarm_info=None, security_group_id=None, status=None, host_info=None, _configuration=None):  # noqa: E501
        """DataForListBanIPListOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._ban_end_time_unix = None
        self._ban_ip = None
        self._ban_start_time_unix = None
        self._ban_type = None
        self._id = None
        self._insert_time = None
        self._port_end = None
        self._port_start = None
        self._reason = None
        self._region = None
        self._relate_alarm_info = None
        self._security_group_id = None
        self._status = None
        self._host_info = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if ban_end_time_unix is not None:
            self.ban_end_time_unix = ban_end_time_unix
        if ban_ip is not None:
            self.ban_ip = ban_ip
        if ban_start_time_unix is not None:
            self.ban_start_time_unix = ban_start_time_unix
        if ban_type is not None:
            self.ban_type = ban_type
        if id is not None:
            self.id = id
        if insert_time is not None:
            self.insert_time = insert_time
        if port_end is not None:
            self.port_end = port_end
        if port_start is not None:
            self.port_start = port_start
        if reason is not None:
            self.reason = reason
        if region is not None:
            self.region = region
        if relate_alarm_info is not None:
            self.relate_alarm_info = relate_alarm_info
        if security_group_id is not None:
            self.security_group_id = security_group_id
        if status is not None:
            self.status = status
        if host_info is not None:
            self.host_info = host_info

    @property
    def account_id(self):
        """Gets the account_id of this DataForListBanIPListOutput.  # noqa: E501


        :return: The account_id of this DataForListBanIPListOutput.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this DataForListBanIPListOutput.


        :param account_id: The account_id of this DataForListBanIPListOutput.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def ban_end_time_unix(self):
        """Gets the ban_end_time_unix of this DataForListBanIPListOutput.  # noqa: E501


        :return: The ban_end_time_unix of this DataForListBanIPListOutput.  # noqa: E501
        :rtype: int
        """
        return self._ban_end_time_unix

    @ban_end_time_unix.setter
    def ban_end_time_unix(self, ban_end_time_unix):
        """Sets the ban_end_time_unix of this DataForListBanIPListOutput.


        :param ban_end_time_unix: The ban_end_time_unix of this DataForListBanIPListOutput.  # noqa: E501
        :type: int
        """

        self._ban_end_time_unix = ban_end_time_unix

    @property
    def ban_ip(self):
        """Gets the ban_ip of this DataForListBanIPListOutput.  # noqa: E501


        :return: The ban_ip of this DataForListBanIPListOutput.  # noqa: E501
        :rtype: str
        """
        return self._ban_ip

    @ban_ip.setter
    def ban_ip(self, ban_ip):
        """Sets the ban_ip of this DataForListBanIPListOutput.


        :param ban_ip: The ban_ip of this DataForListBanIPListOutput.  # noqa: E501
        :type: str
        """

        self._ban_ip = ban_ip

    @property
    def ban_start_time_unix(self):
        """Gets the ban_start_time_unix of this DataForListBanIPListOutput.  # noqa: E501


        :return: The ban_start_time_unix of this DataForListBanIPListOutput.  # noqa: E501
        :rtype: int
        """
        return self._ban_start_time_unix

    @ban_start_time_unix.setter
    def ban_start_time_unix(self, ban_start_time_unix):
        """Sets the ban_start_time_unix of this DataForListBanIPListOutput.


        :param ban_start_time_unix: The ban_start_time_unix of this DataForListBanIPListOutput.  # noqa: E501
        :type: int
        """

        self._ban_start_time_unix = ban_start_time_unix

    @property
    def ban_type(self):
        """Gets the ban_type of this DataForListBanIPListOutput.  # noqa: E501


        :return: The ban_type of this DataForListBanIPListOutput.  # noqa: E501
        :rtype: str
        """
        return self._ban_type

    @ban_type.setter
    def ban_type(self, ban_type):
        """Sets the ban_type of this DataForListBanIPListOutput.


        :param ban_type: The ban_type of this DataForListBanIPListOutput.  # noqa: E501
        :type: str
        """

        self._ban_type = ban_type

    @property
    def id(self):
        """Gets the id of this DataForListBanIPListOutput.  # noqa: E501


        :return: The id of this DataForListBanIPListOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataForListBanIPListOutput.


        :param id: The id of this DataForListBanIPListOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def insert_time(self):
        """Gets the insert_time of this DataForListBanIPListOutput.  # noqa: E501


        :return: The insert_time of this DataForListBanIPListOutput.  # noqa: E501
        :rtype: int
        """
        return self._insert_time

    @insert_time.setter
    def insert_time(self, insert_time):
        """Sets the insert_time of this DataForListBanIPListOutput.


        :param insert_time: The insert_time of this DataForListBanIPListOutput.  # noqa: E501
        :type: int
        """

        self._insert_time = insert_time

    @property
    def port_end(self):
        """Gets the port_end of this DataForListBanIPListOutput.  # noqa: E501


        :return: The port_end of this DataForListBanIPListOutput.  # noqa: E501
        :rtype: int
        """
        return self._port_end

    @port_end.setter
    def port_end(self, port_end):
        """Sets the port_end of this DataForListBanIPListOutput.


        :param port_end: The port_end of this DataForListBanIPListOutput.  # noqa: E501
        :type: int
        """

        self._port_end = port_end

    @property
    def port_start(self):
        """Gets the port_start of this DataForListBanIPListOutput.  # noqa: E501


        :return: The port_start of this DataForListBanIPListOutput.  # noqa: E501
        :rtype: int
        """
        return self._port_start

    @port_start.setter
    def port_start(self, port_start):
        """Sets the port_start of this DataForListBanIPListOutput.


        :param port_start: The port_start of this DataForListBanIPListOutput.  # noqa: E501
        :type: int
        """

        self._port_start = port_start

    @property
    def reason(self):
        """Gets the reason of this DataForListBanIPListOutput.  # noqa: E501


        :return: The reason of this DataForListBanIPListOutput.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this DataForListBanIPListOutput.


        :param reason: The reason of this DataForListBanIPListOutput.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def region(self):
        """Gets the region of this DataForListBanIPListOutput.  # noqa: E501


        :return: The region of this DataForListBanIPListOutput.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this DataForListBanIPListOutput.


        :param region: The region of this DataForListBanIPListOutput.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def relate_alarm_info(self):
        """Gets the relate_alarm_info of this DataForListBanIPListOutput.  # noqa: E501


        :return: The relate_alarm_info of this DataForListBanIPListOutput.  # noqa: E501
        :rtype: RelateAlarmInfoForListBanIPListOutput
        """
        return self._relate_alarm_info

    @relate_alarm_info.setter
    def relate_alarm_info(self, relate_alarm_info):
        """Sets the relate_alarm_info of this DataForListBanIPListOutput.


        :param relate_alarm_info: The relate_alarm_info of this DataForListBanIPListOutput.  # noqa: E501
        :type: RelateAlarmInfoForListBanIPListOutput
        """

        self._relate_alarm_info = relate_alarm_info

    @property
    def security_group_id(self):
        """Gets the security_group_id of this DataForListBanIPListOutput.  # noqa: E501


        :return: The security_group_id of this DataForListBanIPListOutput.  # noqa: E501
        :rtype: str
        """
        return self._security_group_id

    @security_group_id.setter
    def security_group_id(self, security_group_id):
        """Sets the security_group_id of this DataForListBanIPListOutput.


        :param security_group_id: The security_group_id of this DataForListBanIPListOutput.  # noqa: E501
        :type: str
        """

        self._security_group_id = security_group_id

    @property
    def status(self):
        """Gets the status of this DataForListBanIPListOutput.  # noqa: E501


        :return: The status of this DataForListBanIPListOutput.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataForListBanIPListOutput.


        :param status: The status of this DataForListBanIPListOutput.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def host_info(self):
        """Gets the host_info of this DataForListBanIPListOutput.  # noqa: E501


        :return: The host_info of this DataForListBanIPListOutput.  # noqa: E501
        :rtype: HostInfoForListBanIPListOutput
        """
        return self._host_info

    @host_info.setter
    def host_info(self, host_info):
        """Sets the host_info of this DataForListBanIPListOutput.


        :param host_info: The host_info of this DataForListBanIPListOutput.  # noqa: E501
        :type: HostInfoForListBanIPListOutput
        """

        self._host_info = host_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataForListBanIPListOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataForListBanIPListOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataForListBanIPListOutput):
            return True

        return self.to_dict() != other.to_dict()
