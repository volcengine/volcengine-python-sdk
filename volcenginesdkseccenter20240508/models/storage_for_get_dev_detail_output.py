# coding: utf-8

"""
    seccenter20240508

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class StorageForGetDevDetailOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addr': 'str',
        'id': 'str',
        'mount_path': 'str',
        'name': 'str',
        'read_only': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'addr': 'Addr',
        'id': 'Id',
        'mount_path': 'MountPath',
        'name': 'Name',
        'read_only': 'ReadOnly',
        'type': 'Type'
    }

    def __init__(self, addr=None, id=None, mount_path=None, name=None, read_only=None, type=None, _configuration=None):  # noqa: E501
        """StorageForGetDevDetailOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._addr = None
        self._id = None
        self._mount_path = None
        self._name = None
        self._read_only = None
        self._type = None
        self.discriminator = None

        if addr is not None:
            self.addr = addr
        if id is not None:
            self.id = id
        if mount_path is not None:
            self.mount_path = mount_path
        if name is not None:
            self.name = name
        if read_only is not None:
            self.read_only = read_only
        if type is not None:
            self.type = type

    @property
    def addr(self):
        """Gets the addr of this StorageForGetDevDetailOutput.  # noqa: E501


        :return: The addr of this StorageForGetDevDetailOutput.  # noqa: E501
        :rtype: str
        """
        return self._addr

    @addr.setter
    def addr(self, addr):
        """Sets the addr of this StorageForGetDevDetailOutput.


        :param addr: The addr of this StorageForGetDevDetailOutput.  # noqa: E501
        :type: str
        """

        self._addr = addr

    @property
    def id(self):
        """Gets the id of this StorageForGetDevDetailOutput.  # noqa: E501


        :return: The id of this StorageForGetDevDetailOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StorageForGetDevDetailOutput.


        :param id: The id of this StorageForGetDevDetailOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def mount_path(self):
        """Gets the mount_path of this StorageForGetDevDetailOutput.  # noqa: E501


        :return: The mount_path of this StorageForGetDevDetailOutput.  # noqa: E501
        :rtype: str
        """
        return self._mount_path

    @mount_path.setter
    def mount_path(self, mount_path):
        """Sets the mount_path of this StorageForGetDevDetailOutput.


        :param mount_path: The mount_path of this StorageForGetDevDetailOutput.  # noqa: E501
        :type: str
        """

        self._mount_path = mount_path

    @property
    def name(self):
        """Gets the name of this StorageForGetDevDetailOutput.  # noqa: E501


        :return: The name of this StorageForGetDevDetailOutput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageForGetDevDetailOutput.


        :param name: The name of this StorageForGetDevDetailOutput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def read_only(self):
        """Gets the read_only of this StorageForGetDevDetailOutput.  # noqa: E501


        :return: The read_only of this StorageForGetDevDetailOutput.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this StorageForGetDevDetailOutput.


        :param read_only: The read_only of this StorageForGetDevDetailOutput.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def type(self):
        """Gets the type of this StorageForGetDevDetailOutput.  # noqa: E501


        :return: The type of this StorageForGetDevDetailOutput.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StorageForGetDevDetailOutput.


        :param type: The type of this StorageForGetDevDetailOutput.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageForGetDevDetailOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageForGetDevDetailOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageForGetDevDetailOutput):
            return True

        return self.to_dict() != other.to_dict()
