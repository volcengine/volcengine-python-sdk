# coding: utf-8

"""
    seccenter20240508

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CheckAlarmSupportBanIPResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ban_ip': 'str',
        'ban_port_range': 'str',
        'direction': 'str',
        'security_group_name': 'str',
        'support': 'bool'
    }

    attribute_map = {
        'ban_ip': 'BanIP',
        'ban_port_range': 'BanPortRange',
        'direction': 'Direction',
        'security_group_name': 'SecurityGroupName',
        'support': 'Support'
    }

    def __init__(self, ban_ip=None, ban_port_range=None, direction=None, security_group_name=None, support=None, _configuration=None):  # noqa: E501
        """CheckAlarmSupportBanIPResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ban_ip = None
        self._ban_port_range = None
        self._direction = None
        self._security_group_name = None
        self._support = None
        self.discriminator = None

        if ban_ip is not None:
            self.ban_ip = ban_ip
        if ban_port_range is not None:
            self.ban_port_range = ban_port_range
        if direction is not None:
            self.direction = direction
        if security_group_name is not None:
            self.security_group_name = security_group_name
        if support is not None:
            self.support = support

    @property
    def ban_ip(self):
        """Gets the ban_ip of this CheckAlarmSupportBanIPResponse.  # noqa: E501


        :return: The ban_ip of this CheckAlarmSupportBanIPResponse.  # noqa: E501
        :rtype: str
        """
        return self._ban_ip

    @ban_ip.setter
    def ban_ip(self, ban_ip):
        """Sets the ban_ip of this CheckAlarmSupportBanIPResponse.


        :param ban_ip: The ban_ip of this CheckAlarmSupportBanIPResponse.  # noqa: E501
        :type: str
        """

        self._ban_ip = ban_ip

    @property
    def ban_port_range(self):
        """Gets the ban_port_range of this CheckAlarmSupportBanIPResponse.  # noqa: E501


        :return: The ban_port_range of this CheckAlarmSupportBanIPResponse.  # noqa: E501
        :rtype: str
        """
        return self._ban_port_range

    @ban_port_range.setter
    def ban_port_range(self, ban_port_range):
        """Sets the ban_port_range of this CheckAlarmSupportBanIPResponse.


        :param ban_port_range: The ban_port_range of this CheckAlarmSupportBanIPResponse.  # noqa: E501
        :type: str
        """

        self._ban_port_range = ban_port_range

    @property
    def direction(self):
        """Gets the direction of this CheckAlarmSupportBanIPResponse.  # noqa: E501


        :return: The direction of this CheckAlarmSupportBanIPResponse.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this CheckAlarmSupportBanIPResponse.


        :param direction: The direction of this CheckAlarmSupportBanIPResponse.  # noqa: E501
        :type: str
        """

        self._direction = direction

    @property
    def security_group_name(self):
        """Gets the security_group_name of this CheckAlarmSupportBanIPResponse.  # noqa: E501


        :return: The security_group_name of this CheckAlarmSupportBanIPResponse.  # noqa: E501
        :rtype: str
        """
        return self._security_group_name

    @security_group_name.setter
    def security_group_name(self, security_group_name):
        """Sets the security_group_name of this CheckAlarmSupportBanIPResponse.


        :param security_group_name: The security_group_name of this CheckAlarmSupportBanIPResponse.  # noqa: E501
        :type: str
        """

        self._security_group_name = security_group_name

    @property
    def support(self):
        """Gets the support of this CheckAlarmSupportBanIPResponse.  # noqa: E501


        :return: The support of this CheckAlarmSupportBanIPResponse.  # noqa: E501
        :rtype: bool
        """
        return self._support

    @support.setter
    def support(self, support):
        """Sets the support of this CheckAlarmSupportBanIPResponse.


        :param support: The support of this CheckAlarmSupportBanIPResponse.  # noqa: E501
        :type: bool
        """

        self._support = support

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CheckAlarmSupportBanIPResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckAlarmSupportBanIPResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CheckAlarmSupportBanIPResponse):
            return True

        return self.to_dict() != other.to_dict()
