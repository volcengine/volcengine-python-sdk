# coding: utf-8

"""
    seccenter20240508

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class RangeForAddWhiteListInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_id_list': 'list[str]',
        'cloud_providers': 'list[str]',
        'cluster_id_list': 'list[str]',
        'leaf_group_ids': 'list[str]',
        'top_group_id': 'str'
    }

    attribute_map = {
        'agent_id_list': 'AgentIDList',
        'cloud_providers': 'CloudProviders',
        'cluster_id_list': 'ClusterIDList',
        'leaf_group_ids': 'LeafGroupIDs',
        'top_group_id': 'TopGroupID'
    }

    def __init__(self, agent_id_list=None, cloud_providers=None, cluster_id_list=None, leaf_group_ids=None, top_group_id=None, _configuration=None):  # noqa: E501
        """RangeForAddWhiteListInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._agent_id_list = None
        self._cloud_providers = None
        self._cluster_id_list = None
        self._leaf_group_ids = None
        self._top_group_id = None
        self.discriminator = None

        if agent_id_list is not None:
            self.agent_id_list = agent_id_list
        if cloud_providers is not None:
            self.cloud_providers = cloud_providers
        if cluster_id_list is not None:
            self.cluster_id_list = cluster_id_list
        if leaf_group_ids is not None:
            self.leaf_group_ids = leaf_group_ids
        if top_group_id is not None:
            self.top_group_id = top_group_id

    @property
    def agent_id_list(self):
        """Gets the agent_id_list of this RangeForAddWhiteListInput.  # noqa: E501


        :return: The agent_id_list of this RangeForAddWhiteListInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._agent_id_list

    @agent_id_list.setter
    def agent_id_list(self, agent_id_list):
        """Sets the agent_id_list of this RangeForAddWhiteListInput.


        :param agent_id_list: The agent_id_list of this RangeForAddWhiteListInput.  # noqa: E501
        :type: list[str]
        """

        self._agent_id_list = agent_id_list

    @property
    def cloud_providers(self):
        """Gets the cloud_providers of this RangeForAddWhiteListInput.  # noqa: E501


        :return: The cloud_providers of this RangeForAddWhiteListInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._cloud_providers

    @cloud_providers.setter
    def cloud_providers(self, cloud_providers):
        """Sets the cloud_providers of this RangeForAddWhiteListInput.


        :param cloud_providers: The cloud_providers of this RangeForAddWhiteListInput.  # noqa: E501
        :type: list[str]
        """

        self._cloud_providers = cloud_providers

    @property
    def cluster_id_list(self):
        """Gets the cluster_id_list of this RangeForAddWhiteListInput.  # noqa: E501


        :return: The cluster_id_list of this RangeForAddWhiteListInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._cluster_id_list

    @cluster_id_list.setter
    def cluster_id_list(self, cluster_id_list):
        """Sets the cluster_id_list of this RangeForAddWhiteListInput.


        :param cluster_id_list: The cluster_id_list of this RangeForAddWhiteListInput.  # noqa: E501
        :type: list[str]
        """

        self._cluster_id_list = cluster_id_list

    @property
    def leaf_group_ids(self):
        """Gets the leaf_group_ids of this RangeForAddWhiteListInput.  # noqa: E501


        :return: The leaf_group_ids of this RangeForAddWhiteListInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._leaf_group_ids

    @leaf_group_ids.setter
    def leaf_group_ids(self, leaf_group_ids):
        """Sets the leaf_group_ids of this RangeForAddWhiteListInput.


        :param leaf_group_ids: The leaf_group_ids of this RangeForAddWhiteListInput.  # noqa: E501
        :type: list[str]
        """

        self._leaf_group_ids = leaf_group_ids

    @property
    def top_group_id(self):
        """Gets the top_group_id of this RangeForAddWhiteListInput.  # noqa: E501


        :return: The top_group_id of this RangeForAddWhiteListInput.  # noqa: E501
        :rtype: str
        """
        return self._top_group_id

    @top_group_id.setter
    def top_group_id(self, top_group_id):
        """Sets the top_group_id of this RangeForAddWhiteListInput.


        :param top_group_id: The top_group_id of this RangeForAddWhiteListInput.  # noqa: E501
        :type: str
        """

        self._top_group_id = top_group_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RangeForAddWhiteListInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RangeForAddWhiteListInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RangeForAddWhiteListInput):
            return True

        return self.to_dict() != other.to_dict()
